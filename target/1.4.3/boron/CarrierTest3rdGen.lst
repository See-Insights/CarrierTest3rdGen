
/Users/chipmc/Documents/Maker/Particle/Projects/CarrierTest3rdGen/target/1.4.3/boron/CarrierTest3rdGen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007300  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  0001b40c  2**0
                  CONTENTS
  4 .data         000000c0  2003e098  000db320  0000e098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000698  2003e158  2003e158  0001e158  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000db3e0  000db3e0  0001b3e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000db408  000db408  0001b408  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010348a  00000000  00000000  0001b40c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001454e  00000000  00000000  0011e896  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000255ba  00000000  00000000  00132de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002d00  00000000  00000000  0015839e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000051b8  00000000  00000000  0015b09e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000388bb  00000000  00000000  00160256  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003061f  00000000  00000000  00198b11  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010716f  00000000  00000000  001c9130  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000eb70  00000000  00000000  002d02a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 ff71 	bl	d8f18 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 ff91 	bl	d8f64 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e098 	.word	0x2003e098
   d404c:	000db320 	.word	0x000db320
   d4050:	2003e158 	.word	0x2003e158
   d4054:	2003e158 	.word	0x2003e158
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 ff09 	bl	d7e74 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000db314 	.word	0x000db314
   d4084:	000db2d0 	.word	0x000db2d0

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 ba44 	b.w	d4514 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fac1 	bl	d4614 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 bebb 	b.w	d7e10 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bae9 	b.w	d5670 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 baef 	b.w	d5680 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 baed 	b.w	d5680 <free>
	...

000d40a8 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f001 f9e2 	bl	d5478 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d5159 	.word	0x000d5159

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	b2c9      	uxtb	r1, r1
   d40d0:	689b      	ldr	r3, [r3, #8]
   d40d2:	4718      	bx	r3

000d40d4 <_ZN17Adafruit_FRAM_I2CC1Ev>:
    Constructor
*/
/**************************************************************************/
Adafruit_FRAM_I2C::Adafruit_FRAM_I2C(void)
{
  _framInitialised = false;
   d40d4:	2200      	movs	r2, #0
   d40d6:	7042      	strb	r2, [r0, #1]
}
   d40d8:	4770      	bx	lr

000d40da <_ZN17Adafruit_FRAM_I2C5beginEh>:
    Initializes I2C and configures the chip (call this function before
    doing anything else)
*/
/**************************************************************************/
boolean Adafruit_FRAM_I2C::begin(uint8_t addr)
{
   d40da:	b510      	push	{r4, lr}
  i2c_addr = addr;
   d40dc:	7001      	strb	r1, [r0, #0]
    Initializes I2C and configures the chip (call this function before
    doing anything else)
*/
/**************************************************************************/
boolean Adafruit_FRAM_I2C::begin(uint8_t addr)
{
   d40de:	4604      	mov	r4, r0
  i2c_addr = addr;
  Wire.begin();
   d40e0:	f003 ff48 	bl	d7f74 <_Z19__fetch_global_Wirev>
   d40e4:	f001 ff24 	bl	d5f30 <_ZN7TwoWire5beginEv>
    //Serial.println(prodID, HEX);
    return false;
  }
  */
  /* Everything seems to be properly initialised and connected */
  _framInitialised = true;
   d40e8:	2001      	movs	r0, #1
   d40ea:	7060      	strb	r0, [r4, #1]

  return true;
}
   d40ec:	bd10      	pop	{r4, pc}

000d40ee <_ZN17Adafruit_FRAM_I2C6write8Eth>:
    @params[in] i2cAddr
                The 8-bit value to write at framAddr
*/
/**************************************************************************/
void Adafruit_FRAM_I2C::write8 (uint16_t framAddr, uint8_t value)
{
   d40ee:	b570      	push	{r4, r5, r6, lr}
   d40f0:	4606      	mov	r6, r0
   d40f2:	4615      	mov	r5, r2
   d40f4:	460c      	mov	r4, r1
  Wire.beginTransmission(i2c_addr);
   d40f6:	f003 ff3d 	bl	d7f74 <_Z19__fetch_global_Wirev>
   d40fa:	7831      	ldrb	r1, [r6, #0]
   d40fc:	f001 ff2a 	bl	d5f54 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
   d4100:	f003 ff38 	bl	d7f74 <_Z19__fetch_global_Wirev>
   d4104:	0a21      	lsrs	r1, r4, #8
   d4106:	f7ff ffe1 	bl	d40cc <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
   d410a:	f003 ff33 	bl	d7f74 <_Z19__fetch_global_Wirev>
   d410e:	b2e1      	uxtb	r1, r4
   d4110:	f7ff ffdc 	bl	d40cc <_ZN7TwoWire5writeEi>
  Wire.write(value);
   d4114:	f003 ff2e 	bl	d7f74 <_Z19__fetch_global_Wirev>
   d4118:	6803      	ldr	r3, [r0, #0]
   d411a:	4629      	mov	r1, r5
   d411c:	689b      	ldr	r3, [r3, #8]
   d411e:	4798      	blx	r3
  Wire.endTransmission();
   d4120:	f003 ff28 	bl	d7f74 <_Z19__fetch_global_Wirev>
}
   d4124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
  Wire.beginTransmission(i2c_addr);
  Wire.write(framAddr >> 8);
  Wire.write(framAddr & 0xFF);
  Wire.write(value);
  Wire.endTransmission();
   d4128:	f001 bf1c 	b.w	d5f64 <_ZN7TwoWire15endTransmissionEv>

000d412c <_ZN17Adafruit_FRAM_I2C5read8Et>:

    @returns    The 8-bit value retrieved at framAddr
*/
/**************************************************************************/
uint8_t Adafruit_FRAM_I2C::read8 (uint16_t framAddr)
{
   d412c:	b538      	push	{r3, r4, r5, lr}
   d412e:	4604      	mov	r4, r0
   d4130:	460d      	mov	r5, r1
  Wire.beginTransmission(i2c_addr);
   d4132:	f003 ff1f 	bl	d7f74 <_Z19__fetch_global_Wirev>
   d4136:	7821      	ldrb	r1, [r4, #0]
   d4138:	f001 ff0c 	bl	d5f54 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
   d413c:	f003 ff1a 	bl	d7f74 <_Z19__fetch_global_Wirev>
   d4140:	0a29      	lsrs	r1, r5, #8
   d4142:	f7ff ffc3 	bl	d40cc <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
   d4146:	f003 ff15 	bl	d7f74 <_Z19__fetch_global_Wirev>
   d414a:	b2e9      	uxtb	r1, r5
   d414c:	f7ff ffbe 	bl	d40cc <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d4150:	f003 ff10 	bl	d7f74 <_Z19__fetch_global_Wirev>
   d4154:	f001 ff06 	bl	d5f64 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(i2c_addr, (uint8_t)1);
   d4158:	f003 ff0c 	bl	d7f74 <_Z19__fetch_global_Wirev>
   d415c:	2201      	movs	r2, #1
   d415e:	7821      	ldrb	r1, [r4, #0]
   d4160:	f001 fef5 	bl	d5f4e <_ZN7TwoWire11requestFromEhh>

  return Wire.read();
   d4164:	f003 ff06 	bl	d7f74 <_Z19__fetch_global_Wirev>
   d4168:	6803      	ldr	r3, [r0, #0]
   d416a:	695b      	ldr	r3, [r3, #20]
   d416c:	4798      	blx	r3
}
   d416e:	b2c0      	uxtb	r0, r0
   d4170:	bd38      	pop	{r3, r4, r5, pc}

000d4172 <_GLOBAL__sub_I__ZN17Adafruit_FRAM_I2CC2Ev>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4172:	f001 b821 	b.w	d51b8 <HAL_Pin_Map>

000d4176 <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d4176:	4770      	bx	lr

000d4178 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d4178:	6a00      	ldr	r0, [r0, #32]
   d417a:	6803      	ldr	r3, [r0, #0]
   d417c:	68db      	ldr	r3, [r3, #12]
   d417e:	4718      	bx	r3

000d4180 <_Z11watchdogISRv>:
  }
}


void watchdogISR()
{
   d4180:	b508      	push	{r3, lr}
  watchdogInterrupt = true;
   d4182:	4b06      	ldr	r3, [pc, #24]	; (d419c <_Z11watchdogISRv+0x1c>)
   d4184:	2101      	movs	r1, #1
  digitalWrite(donePin, HIGH);                              // Pet the watchdog
   d4186:	2010      	movs	r0, #16
}


void watchdogISR()
{
  watchdogInterrupt = true;
   d4188:	7019      	strb	r1, [r3, #0]
  digitalWrite(donePin, HIGH);                              // Pet the watchdog
   d418a:	f003 fec2 	bl	d7f12 <digitalWrite>
  digitalWrite(donePin, LOW);
   d418e:	2100      	movs	r1, #0
   d4190:	2010      	movs	r0, #16
}
   d4192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void watchdogISR()
{
  watchdogInterrupt = true;
  digitalWrite(donePin, HIGH);                              // Pet the watchdog
  digitalWrite(donePin, LOW);
   d4196:	f003 bebc 	b.w	d7f12 <digitalWrite>
   d419a:	bf00      	nop
   d419c:	2003e160 	.word	0x2003e160

000d41a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.41>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d41a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d41a2:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d41a6:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41a8:	f88d 3000 	strb.w	r3, [sp]
   d41ac:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d41ae:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41b0:	f001 fc9c 	bl	d5aec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d41b4:	4628      	mov	r0, r5
   d41b6:	b003      	add	sp, #12
   d41b8:	bd30      	pop	{r4, r5, pc}
	...

000d41bc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d41bc:	4b0a      	ldr	r3, [pc, #40]	; (d41e8 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d41be:	b510      	push	{r4, lr}
   d41c0:	4604      	mov	r4, r0
   d41c2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d41c4:	f002 fa82 	bl	d66cc <_ZN5spark10LogManager8instanceEv>
   d41c8:	4621      	mov	r1, r4
   d41ca:	f002 fc6f 	bl	d6aac <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d41ce:	f003 fddb 	bl	d7d88 <_Z16_fetch_usbserialv>
   d41d2:	f003 fdcd 	bl	d7d70 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d41d6:	4620      	mov	r0, r4
   d41d8:	4b04      	ldr	r3, [pc, #16]	; (d41ec <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d41da:	f840 3b04 	str.w	r3, [r0], #4
   d41de:	f002 fb6b 	bl	d68b8 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d41e2:	4620      	mov	r0, r4
   d41e4:	bd10      	pop	{r4, pc}
   d41e6:	bf00      	nop
   d41e8:	000da724 	.word	0x000da724
   d41ec:	000da70c 	.word	0x000da70c

000d41f0 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d41f0:	b510      	push	{r4, lr}
   d41f2:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d41f4:	f7ff ffe2 	bl	d41bc <_ZN5spark16SerialLogHandlerD1Ev>
   d41f8:	4620      	mov	r0, r4
   d41fa:	2124      	movs	r1, #36	; 0x24
   d41fc:	f003 ff21 	bl	d8042 <_ZdlPvj>
   d4200:	4620      	mov	r0, r4
   d4202:	bd10      	pop	{r4, pc}

000d4204 <_Z9FRAMread8j>:

// Begin section
uint8_t FRAMread8(unsigned int address)  // Read 8 bits from FRAM
{
    uint8_t result;
    result = fram.read8(address);
   d4204:	b281      	uxth	r1, r0
   d4206:	4801      	ldr	r0, [pc, #4]	; (d420c <_Z9FRAMread8j+0x8>)
   d4208:	f7ff bf90 	b.w	d412c <_ZN17Adafruit_FRAM_I2C5read8Et>
   d420c:	2003e162 	.word	0x2003e162

000d4210 <_Z10FRAMwrite8jh>:
    return result;
}

void FRAMwrite8(unsigned int address, uint8_t value)    // Write 8 bits to FRAM
{
    fram.write8(address,value);
   d4210:	460a      	mov	r2, r1
   d4212:	b281      	uxth	r1, r0
   d4214:	4801      	ldr	r0, [pc, #4]	; (d421c <_Z10FRAMwrite8jh+0xc>)
   d4216:	f7ff bf6a 	b.w	d40ee <_ZN17Adafruit_FRAM_I2C6write8Eth>
   d421a:	bf00      	nop
   d421c:	2003e162 	.word	0x2003e162

000d4220 <_Z14getTemperaturev>:
    snprintf(resultStr, sizeof(resultStr),"FRAM Test Passed");
    return 1;
  }
}

bool getTemperature() {
   d4220:	b507      	push	{r0, r1, r2, lr}
  int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
   d4222:	200f      	movs	r0, #15
   d4224:	f003 fe8e 	bl	d7f44 <analogRead>
  float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
   d4228:	f004 f9c2 	bl	d85b0 <__aeabi_i2d>
   d422c:	a335      	add	r3, pc, #212	; (adr r3, d4304 <_Z14getTemperaturev+0xe4>)
   d422e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4232:	f004 fa23 	bl	d867c <__aeabi_dmul>
   d4236:	f004 fc33 	bl	d8aa0 <__aeabi_d2f>
  voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
  float temperatureC = (voltage - 0.5) * 100.0;  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  float temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;  // now convert to Fahrenheit
   d423a:	eddf 7a27 	vldr	s15, [pc, #156]	; d42d8 <_Z14getTemperaturev+0xb8>
   d423e:	ee07 0a10 	vmov	s14, r0
   d4242:	ee67 7a27 	vmul.f32	s15, s14, s15
   d4246:	ee17 0a90 	vmov	r0, s15
   d424a:	f004 f9c3 	bl	d85d4 <__aeabi_f2d>
   d424e:	2200      	movs	r2, #0
   d4250:	4b22      	ldr	r3, [pc, #136]	; (d42dc <_Z14getTemperaturev+0xbc>)
   d4252:	f004 f85f 	bl	d8314 <__aeabi_dsub>
   d4256:	2200      	movs	r2, #0
   d4258:	4b21      	ldr	r3, [pc, #132]	; (d42e0 <_Z14getTemperaturev+0xc0>)
   d425a:	f004 fa0f 	bl	d867c <__aeabi_dmul>
   d425e:	f004 fc1f 	bl	d8aa0 <__aeabi_d2f>
   d4262:	f004 f9b7 	bl	d85d4 <__aeabi_f2d>
   d4266:	2200      	movs	r2, #0
   d4268:	4b1e      	ldr	r3, [pc, #120]	; (d42e4 <_Z14getTemperaturev+0xc4>)
   d426a:	f004 fa07 	bl	d867c <__aeabi_dmul>
   d426e:	2200      	movs	r2, #0
   d4270:	4b1d      	ldr	r3, [pc, #116]	; (d42e8 <_Z14getTemperaturev+0xc8>)
   d4272:	f004 fb2d 	bl	d88d0 <__aeabi_ddiv>
   d4276:	2200      	movs	r2, #0
   d4278:	4b1c      	ldr	r3, [pc, #112]	; (d42ec <_Z14getTemperaturev+0xcc>)
   d427a:	f004 f84d 	bl	d8318 <__adddf3>
   d427e:	f004 fc0f 	bl	d8aa0 <__aeabi_d2f>
  if (temperatureF < 60.0 || temperatureF > 75.0) {             // Reasonable range for room temperature
   d4282:	ed9f 7a1b 	vldr	s14, [pc, #108]	; d42f0 <_Z14getTemperaturev+0xd0>
bool getTemperature() {
  int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
  float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
  voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
  float temperatureC = (voltage - 0.5) * 100.0;  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  float temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;  // now convert to Fahrenheit
   d4286:	ee07 0a90 	vmov	s15, r0
  if (temperatureF < 60.0 || temperatureF > 75.0) {             // Reasonable range for room temperature
   d428a:	eef4 7ac7 	vcmpe.f32	s15, s14
   d428e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4292:	d406      	bmi.n	d42a2 <_Z14getTemperaturev+0x82>
   d4294:	ed9f 7a17 	vldr	s14, [pc, #92]	; d42f4 <_Z14getTemperaturev+0xd4>
   d4298:	eef4 7ac7 	vcmpe.f32	s15, s14
   d429c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d42a0:	dd0c      	ble.n	d42bc <_Z14getTemperaturev+0x9c>
    snprintf(resultStr, sizeof(resultStr),"Temp seems whack: %3.1f", temperatureF);
   d42a2:	ee17 0a90 	vmov	r0, s15
   d42a6:	f004 f995 	bl	d85d4 <__aeabi_f2d>
   d42aa:	4a13      	ldr	r2, [pc, #76]	; (d42f8 <_Z14getTemperaturev+0xd8>)
   d42ac:	e9cd 0100 	strd	r0, r1, [sp]
   d42b0:	2140      	movs	r1, #64	; 0x40
   d42b2:	4812      	ldr	r0, [pc, #72]	; (d42fc <_Z14getTemperaturev+0xdc>)
   d42b4:	f001 fa04 	bl	d56c0 <snprintf>
    return 0;
   d42b8:	2000      	movs	r0, #0
   d42ba:	e009      	b.n	d42d0 <_Z14getTemperaturev+0xb0>
  }
  else {
    snprintf(resultStr, sizeof(resultStr),"Temperature is: %3.1f", temperatureF);
   d42bc:	f004 f98a 	bl	d85d4 <__aeabi_f2d>
   d42c0:	4a0f      	ldr	r2, [pc, #60]	; (d4300 <_Z14getTemperaturev+0xe0>)
   d42c2:	e9cd 0100 	strd	r0, r1, [sp]
   d42c6:	2140      	movs	r1, #64	; 0x40
   d42c8:	480c      	ldr	r0, [pc, #48]	; (d42fc <_Z14getTemperaturev+0xdc>)
   d42ca:	f001 f9f9 	bl	d56c0 <snprintf>
    return 1;
   d42ce:	2001      	movs	r0, #1
  }
}
   d42d0:	b003      	add	sp, #12
   d42d2:	f85d fb04 	ldr.w	pc, [sp], #4
   d42d6:	bf00      	nop
   d42d8:	39800000 	.word	0x39800000
   d42dc:	3fe00000 	.word	0x3fe00000
   d42e0:	40590000 	.word	0x40590000
   d42e4:	40220000 	.word	0x40220000
   d42e8:	40140000 	.word	0x40140000
   d42ec:	40400000 	.word	0x40400000
   d42f0:	42700000 	.word	0x42700000
   d42f4:	42960000 	.word	0x42960000
   d42f8:	000da73a 	.word	0x000da73a
   d42fc:	2003e194 	.word	0x2003e194
   d4300:	000da752 	.word	0x000da752
   d4304:	66666666 	.word	0x66666666
   d4308:	400a6666 	.word	0x400a6666

000d430c <_Z12rtcClockTestv>:

bool rtcClockTest() {
   d430c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  rtc.setRTCFromCloud();                                            // Set the clock
   d430e:	4810      	ldr	r0, [pc, #64]	; (d4350 <_Z12rtcClockTestv+0x44>)
   d4310:	f000 fe14 	bl	d4f3c <_ZN8MCP7941015setRTCFromCloudEv>
  if (rtc.isRTCValid()) {
   d4314:	480e      	ldr	r0, [pc, #56]	; (d4350 <_Z12rtcClockTestv+0x44>)
   d4316:	f000 fd4f 	bl	d4db8 <_ZNK8MCP7941010isRTCValidEv>
   d431a:	b128      	cbz	r0, d4328 <_Z12rtcClockTestv+0x1c>
    snprintf(resultStr, sizeof(resultStr),"RTC Clock Test Failed");
   d431c:	490d      	ldr	r1, [pc, #52]	; (d4354 <_Z12rtcClockTestv+0x48>)
   d431e:	480e      	ldr	r0, [pc, #56]	; (d4358 <_Z12rtcClockTestv+0x4c>)
   d4320:	f005 f8c0 	bl	d94a4 <strcpy>
   d4324:	2000      	movs	r0, #0
   d4326:	e010      	b.n	d434a <_Z12rtcClockTestv+0x3e>
    return 0;
  }
  else {
    snprintf(resultStr, sizeof(resultStr),"RTC Clock Passes - Time is %s",(const char*)Time.timeStr(rtc.getRTCTime()));
   d4328:	4809      	ldr	r0, [pc, #36]	; (d4350 <_Z12rtcClockTestv+0x44>)
   d432a:	f000 fd07 	bl	d4d3c <_ZNK8MCP7941010getRTCTimeEv>
   d432e:	4601      	mov	r1, r0
   d4330:	4668      	mov	r0, sp
   d4332:	f003 fb49 	bl	d79c8 <_ZN9TimeClass7timeStrEl>
   d4336:	9b00      	ldr	r3, [sp, #0]
   d4338:	4a08      	ldr	r2, [pc, #32]	; (d435c <_Z12rtcClockTestv+0x50>)
   d433a:	4807      	ldr	r0, [pc, #28]	; (d4358 <_Z12rtcClockTestv+0x4c>)
   d433c:	2140      	movs	r1, #64	; 0x40
   d433e:	f001 f9bf 	bl	d56c0 <snprintf>
   d4342:	4668      	mov	r0, sp
   d4344:	f003 fa75 	bl	d7832 <_ZN6StringD1Ev>
    return 1;
   d4348:	2001      	movs	r0, #1
  }
}
   d434a:	b005      	add	sp, #20
   d434c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4350:	2003e1d4 	.word	0x2003e1d4
   d4354:	000da768 	.word	0x000da768
   d4358:	2003e194 	.word	0x2003e194
   d435c:	000da77e 	.word	0x000da77e

000d4360 <_Z20meterParticlePublishv>:
    return !dayStartedAs;
  }
  return dayStartedAs;
}

bool meterParticlePublish(void) {                                       // Enforces Particle's limit on 1 publish a second
   d4360:	b510      	push	{r4, lr}
  static unsigned long lastPublish=0;                                   // Initialize and store value here
  if(millis() - lastPublish >= 1000) {                                  // Particle rate limits at 1 publish per second
   d4362:	4c07      	ldr	r4, [pc, #28]	; (d4380 <_Z20meterParticlePublishv+0x20>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4364:	f000 ff00 	bl	d5168 <HAL_Timer_Get_Milli_Seconds>
   d4368:	6823      	ldr	r3, [r4, #0]
   d436a:	1ac0      	subs	r0, r0, r3
   d436c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4370:	d304      	bcc.n	d437c <_Z20meterParticlePublishv+0x1c>
   d4372:	f000 fef9 	bl	d5168 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d4376:	6020      	str	r0, [r4, #0]
   d4378:	2001      	movs	r0, #1
   d437a:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
   d437c:	2000      	movs	r0, #0
}
   d437e:	bd10      	pop	{r4, pc}
   d4380:	2003e15c 	.word	0x2003e15c

000d4384 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.19>:
            spark_process();
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d4384:	b508      	push	{r3, lr}
      rtcClockTest() ? state = RTCALARM_TEST : state = ERROR_STATE;
      waitUntil(meterParticlePublish);
      Particle.publish("Result",resultStr, PRIVATE);
    break;
    case ERROR_STATE: 
      waitUntil(meterParticlePublish);
   d4386:	f7ff ffeb 	bl	d4360 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d438a:	b118      	cbz	r0, d4394 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.19+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d438c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4390:	f7ff bfe6 	b.w	d4360 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d4394:	f001 f8e4 	bl	d5560 <spark_process>
   d4398:	e7f5      	b.n	d4386 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.19+0x2>

000d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d439a:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d439c:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d439e:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d43a0:	b17c      	cbz	r4, d43c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d43a2:	6863      	ldr	r3, [r4, #4]
   d43a4:	3b01      	subs	r3, #1
   d43a6:	6063      	str	r3, [r4, #4]
   d43a8:	b95b      	cbnz	r3, d43c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d43aa:	6823      	ldr	r3, [r4, #0]
   d43ac:	4620      	mov	r0, r4
   d43ae:	689b      	ldr	r3, [r3, #8]
   d43b0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d43b2:	68a3      	ldr	r3, [r4, #8]
   d43b4:	3b01      	subs	r3, #1
   d43b6:	60a3      	str	r3, [r4, #8]
   d43b8:	b91b      	cbnz	r3, d43c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d43ba:	6823      	ldr	r3, [r4, #0]
   d43bc:	4620      	mov	r0, r4
   d43be:	68db      	ldr	r3, [r3, #12]
   d43c0:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d43c2:	4628      	mov	r0, r5
   d43c4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d43c8 <_Z9ResetFRAMv>:
    fram.write8(address + 3, one);
}


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
   d43c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(FRAM::controlRegisterAddr);
   d43ca:	2001      	movs	r0, #1
   d43cc:	f7ff ff1a 	bl	d4204 <_Z9FRAMread8j>
   d43d0:	4606      	mov	r6, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d43d2:	f001 f8d5 	bl	d5580 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("FRAM","Resetting in progress", PRIVATE);
   d43d6:	b160      	cbz	r0, d43f2 <_Z9ResetFRAMv+0x2a>
   d43d8:	4b30      	ldr	r3, [pc, #192]	; (d449c <_Z9ResetFRAMv+0xd4>)
   d43da:	4931      	ldr	r1, [pc, #196]	; (d44a0 <_Z9ResetFRAMv+0xd8>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d43dc:	781b      	ldrb	r3, [r3, #0]
   d43de:	2200      	movs	r2, #0
   d43e0:	f88d 2000 	strb.w	r2, [sp]
   d43e4:	a802      	add	r0, sp, #8
   d43e6:	4a2f      	ldr	r2, [pc, #188]	; (d44a4 <_Z9ResetFRAMv+0xdc>)
   d43e8:	f7ff feda 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.41>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d43ec:	a803      	add	r0, sp, #12
   d43ee:	f7ff ffd4 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43f2:	4d2a      	ldr	r5, [pc, #168]	; (d449c <_Z9ResetFRAMv+0xd4>)
    fram.write8(address + 3, one);
}


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
   d43f4:	2408      	movs	r4, #8
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(FRAM::controlRegisterAddr);
    if (Particle.connected()) Particle.publish("FRAM","Resetting in progress", PRIVATE);
    for (unsigned long i=8; i < 32768; i++) {  // Start at 4 to not overwrite debounce and sensitivity
        FRAMwrite8(i,0x0);
   d43f6:	2100      	movs	r1, #0
   d43f8:	4620      	mov	r0, r4
   d43fa:	f7ff ff09 	bl	d4210 <_Z10FRAMwrite8jh>
        if (i==8192) if (Particle.connected()) Particle.publish("Event", "Fram Reset 1/4 done", PRIVATE);
   d43fe:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
   d4402:	d109      	bne.n	d4418 <_Z9ResetFRAMv+0x50>
   d4404:	f001 f8bc 	bl	d5580 <spark_cloud_flag_connected>
   d4408:	2800      	cmp	r0, #0
   d440a:	d038      	beq.n	d447e <_Z9ResetFRAMv+0xb6>
   d440c:	2200      	movs	r2, #0
   d440e:	f88d 2000 	strb.w	r2, [sp]
   d4412:	782b      	ldrb	r3, [r5, #0]
   d4414:	4a24      	ldr	r2, [pc, #144]	; (d44a8 <_Z9ResetFRAMv+0xe0>)
   d4416:	e02b      	b.n	d4470 <_Z9ResetFRAMv+0xa8>
        if (i==16384) if (Particle.connected()) Particle.publish("Event", "Fram Reset 1/2 done", PRIVATE);
   d4418:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
   d441c:	d108      	bne.n	d4430 <_Z9ResetFRAMv+0x68>
   d441e:	f001 f8af 	bl	d5580 <spark_cloud_flag_connected>
   d4422:	b360      	cbz	r0, d447e <_Z9ResetFRAMv+0xb6>
   d4424:	2200      	movs	r2, #0
   d4426:	f88d 2000 	strb.w	r2, [sp]
   d442a:	782b      	ldrb	r3, [r5, #0]
   d442c:	4a1f      	ldr	r2, [pc, #124]	; (d44ac <_Z9ResetFRAMv+0xe4>)
   d442e:	e00a      	b.n	d4446 <_Z9ResetFRAMv+0x7e>
        if (i==(24576)) if (Particle.connected()) Particle.publish("Event", "Fram Reset 3/4 done", PRIVATE);
   d4430:	f5b4 4fc0 	cmp.w	r4, #24576	; 0x6000
   d4434:	d110      	bne.n	d4458 <_Z9ResetFRAMv+0x90>
   d4436:	f001 f8a3 	bl	d5580 <spark_cloud_flag_connected>
   d443a:	b300      	cbz	r0, d447e <_Z9ResetFRAMv+0xb6>
   d443c:	2200      	movs	r2, #0
   d443e:	f88d 2000 	strb.w	r2, [sp]
   d4442:	782b      	ldrb	r3, [r5, #0]
   d4444:	4a1a      	ldr	r2, [pc, #104]	; (d44b0 <_Z9ResetFRAMv+0xe8>)
   d4446:	491b      	ldr	r1, [pc, #108]	; (d44b4 <_Z9ResetFRAMv+0xec>)
   d4448:	a802      	add	r0, sp, #8
   d444a:	f7ff fea9 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.41>
   d444e:	a803      	add	r0, sp, #12
   d4450:	f7ff ffa3 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(FRAM::controlRegisterAddr);
    if (Particle.connected()) Particle.publish("FRAM","Resetting in progress", PRIVATE);
    for (unsigned long i=8; i < 32768; i++) {  // Start at 4 to not overwrite debounce and sensitivity
   d4454:	3401      	adds	r4, #1
   d4456:	e7ce      	b.n	d43f6 <_Z9ResetFRAMv+0x2e>
        FRAMwrite8(i,0x0);
        if (i==8192) if (Particle.connected()) Particle.publish("Event", "Fram Reset 1/4 done", PRIVATE);
        if (i==16384) if (Particle.connected()) Particle.publish("Event", "Fram Reset 1/2 done", PRIVATE);
        if (i==(24576)) if (Particle.connected()) Particle.publish("Event", "Fram Reset 3/4 done", PRIVATE);
        if (i==32767) if (Particle.connected()) Particle.publish("Event", "Fram Reset done", PRIVATE);
   d4458:	f647 73ff 	movw	r3, #32767	; 0x7fff
   d445c:	429c      	cmp	r4, r3
   d445e:	d10e      	bne.n	d447e <_Z9ResetFRAMv+0xb6>
   d4460:	f001 f88e 	bl	d5580 <spark_cloud_flag_connected>
   d4464:	b178      	cbz	r0, d4486 <_Z9ResetFRAMv+0xbe>
   d4466:	2200      	movs	r2, #0
   d4468:	f88d 2000 	strb.w	r2, [sp]
   d446c:	782b      	ldrb	r3, [r5, #0]
   d446e:	4a12      	ldr	r2, [pc, #72]	; (d44b8 <_Z9ResetFRAMv+0xf0>)
   d4470:	4910      	ldr	r1, [pc, #64]	; (d44b4 <_Z9ResetFRAMv+0xec>)
   d4472:	a802      	add	r0, sp, #8
   d4474:	f7ff fe94 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.41>
   d4478:	a803      	add	r0, sp, #12
   d447a:	f7ff ff8e 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(FRAM::controlRegisterAddr);
    if (Particle.connected()) Particle.publish("FRAM","Resetting in progress", PRIVATE);
    for (unsigned long i=8; i < 32768; i++) {  // Start at 4 to not overwrite debounce and sensitivity
   d447e:	3401      	adds	r4, #1
   d4480:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   d4484:	d1b7      	bne.n	d43f6 <_Z9ResetFRAMv+0x2e>
        if (i==8192) if (Particle.connected()) Particle.publish("Event", "Fram Reset 1/4 done", PRIVATE);
        if (i==16384) if (Particle.connected()) Particle.publish("Event", "Fram Reset 1/2 done", PRIVATE);
        if (i==(24576)) if (Particle.connected()) Particle.publish("Event", "Fram Reset 3/4 done", PRIVATE);
        if (i==32767) if (Particle.connected()) Particle.publish("Event", "Fram Reset done", PRIVATE);
    }
    FRAMwrite8(FRAM::controlRegisterAddr,tempControlReg);                   // Preserce the control register values
   d4486:	4631      	mov	r1, r6
   d4488:	2001      	movs	r0, #1
   d448a:	f7ff fec1 	bl	d4210 <_Z10FRAMwrite8jh>
    FRAMwrite8(FRAM::versionAddr,FRAMversionNumber);                        // Reset version to match #define value for sketch
   d448e:	2101      	movs	r1, #1
   d4490:	2000      	movs	r0, #0
   d4492:	f7ff febd 	bl	d4210 <_Z10FRAMwrite8jh>
}
   d4496:	b004      	add	sp, #16
   d4498:	bd70      	pop	{r4, r5, r6, pc}
   d449a:	bf00      	nop
   d449c:	2003e164 	.word	0x2003e164
   d44a0:	000da81f 	.word	0x000da81f
   d44a4:	000da79c 	.word	0x000da79c
   d44a8:	000da7b2 	.word	0x000da7b2
   d44ac:	000da7cc 	.word	0x000da7cc
   d44b0:	000da7e0 	.word	0x000da7e0
   d44b4:	000da7c6 	.word	0x000da7c6
   d44b8:	000da7f4 	.word	0x000da7f4

000d44bc <_Z8framTestv>:
  Particle.publish("Test #8", "If you see this message - hard reset test failed", PRIVATE);
  BlinkForever();
}
*/

bool framTest() {
   d44bc:	b510      	push	{r4, lr}
  if (!fram.begin()) {                                                // You can stick the new i2c addr in here, e.g. begin(0x51);
   d44be:	2150      	movs	r1, #80	; 0x50
   d44c0:	480f      	ldr	r0, [pc, #60]	; (d4500 <_Z8framTestv+0x44>)
   d44c2:	f7ff fe0a 	bl	d40da <_ZN17Adafruit_FRAM_I2C5beginEh>
   d44c6:	4604      	mov	r4, r0
   d44c8:	b908      	cbnz	r0, d44ce <_Z8framTestv+0x12>
    snprintf(resultStr, sizeof(resultStr),"FRAM Test Failed - Missing FRAM");
   d44ca:	490e      	ldr	r1, [pc, #56]	; (d4504 <_Z8framTestv+0x48>)
   d44cc:	e012      	b.n	d44f4 <_Z8framTestv+0x38>
    return 0;
  }
  else if (FRAMread8(FRAM::versionAddr) != FRAMversionNumber) {                 // Check to see if the memory map in the sketch matches the data on the chip
   d44ce:	2000      	movs	r0, #0
   d44d0:	f7ff fe98 	bl	d4204 <_Z9FRAMread8j>
   d44d4:	2801      	cmp	r0, #1
   d44d6:	d001      	beq.n	d44dc <_Z8framTestv+0x20>
    ResetFRAM();                                                      // Reset the FRAM to correct the issue
   d44d8:	f7ff ff76 	bl	d43c8 <_Z9ResetFRAMv>
  }

  if (FRAMread8(FRAM::versionAddr) != FRAMversionNumber) {
   d44dc:	2000      	movs	r0, #0
   d44de:	f7ff fe91 	bl	d4204 <_Z9FRAMread8j>
   d44e2:	2801      	cmp	r0, #1
   d44e4:	d005      	beq.n	d44f2 <_Z8framTestv+0x36>
    snprintf(resultStr, sizeof(resultStr),"FRAM Test Failed - FRAM Read Error");
   d44e6:	4908      	ldr	r1, [pc, #32]	; (d4508 <_Z8framTestv+0x4c>)
   d44e8:	4808      	ldr	r0, [pc, #32]	; (d450c <_Z8framTestv+0x50>)
   d44ea:	f004 ffdb 	bl	d94a4 <strcpy>
    return 0;
   d44ee:	2400      	movs	r4, #0
   d44f0:	e003      	b.n	d44fa <_Z8framTestv+0x3e>
  } 
  else  {
    snprintf(resultStr, sizeof(resultStr),"FRAM Test Passed");
   d44f2:	4907      	ldr	r1, [pc, #28]	; (d4510 <_Z8framTestv+0x54>)
   d44f4:	4805      	ldr	r0, [pc, #20]	; (d450c <_Z8framTestv+0x50>)
   d44f6:	f004 ffd5 	bl	d94a4 <strcpy>
    return 1;
  }
}
   d44fa:	4620      	mov	r0, r4
   d44fc:	bd10      	pop	{r4, pc}
   d44fe:	bf00      	nop
   d4500:	2003e162 	.word	0x2003e162
   d4504:	000da804 	.word	0x000da804
   d4508:	000da824 	.word	0x000da824
   d450c:	2003e194 	.word	0x2003e194
   d4510:	000da847 	.word	0x000da847

000d4514 <setup>:
 volatile bool watchdogInterrupt = false;               // variable used to see if the watchdogInterrupt had fired
 char resultStr[64];


// setup() runs once, when the device is first turned on.
void setup() {
   d4514:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinMode(userSwitch,INPUT);                                      // Button for user input
   d4516:	2100      	movs	r1, #0
 volatile bool watchdogInterrupt = false;               // variable used to see if the watchdogInterrupt had fired
 char resultStr[64];


// setup() runs once, when the device is first turned on.
void setup() {
   d4518:	b085      	sub	sp, #20
  pinMode(userSwitch,INPUT);                                      // Button for user input
   d451a:	2004      	movs	r0, #4
   d451c:	f003 fce8 	bl	d7ef0 <pinMode>
  pinMode(wakeUpPin,INPUT);                                       // This pin is active HIGH
   d4520:	2100      	movs	r1, #0
   d4522:	2008      	movs	r0, #8
   d4524:	f003 fce4 	bl	d7ef0 <pinMode>
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
   d4528:	2101      	movs	r1, #1
   d452a:	2007      	movs	r0, #7
   d452c:	f003 fce0 	bl	d7ef0 <pinMode>
  pinMode(donePin,OUTPUT);                                        // Allows us to pet the watchdog
   d4530:	2101      	movs	r1, #1
   d4532:	2010      	movs	r0, #16
   d4534:	f003 fcdc 	bl	d7ef0 <pinMode>
  digitalWrite(donePin,HIGH);
   d4538:	2101      	movs	r1, #1
   d453a:	2010      	movs	r0, #16
   d453c:	f003 fce9 	bl	d7f12 <digitalWrite>
  digitalWrite(donePin,LOW);                                      // Pet the watchdog
   d4540:	2100      	movs	r1, #0
   d4542:	2010      	movs	r0, #16
   d4544:	f003 fce5 	bl	d7f12 <digitalWrite>
  pinMode(DeepSleepPin ,OUTPUT);                                   // For a hard reset active HIGH
   d4548:	2101      	movs	r1, #1
   d454a:	2006      	movs	r0, #6
   d454c:	f003 fcd0 	bl	d7ef0 <pinMode>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4550:	2300      	movs	r3, #0
   d4552:	2204      	movs	r2, #4
   d4554:	4925      	ldr	r1, [pc, #148]	; (d45ec <setup+0xd8>)
   d4556:	4826      	ldr	r0, [pc, #152]	; (d45f0 <setup+0xdc>)
   d4558:	f000 fffa 	bl	d5550 <spark_variable>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d455c:	f001 f810 	bl	d5580 <spark_cloud_flag_connected>
  //Particle.variable("stateOfChg", stateOfCharge);
  //Particle.function("HardReset",hardResetNow);
  //Particle.function("Set-Timezone",setTimeZone);
  //Particle.function("Set-DSTOffset",setDSTOffset);

  if (!Particle.connected()) {                                     // Only going to connect if we are in connectionMode
   d4560:	4604      	mov	r4, r0
   d4562:	bb00      	cbnz	r0, d45a6 <setup+0x92>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4564:	f001 f804 	bl	d5570 <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4568:	4620      	mov	r0, r4
   d456a:	f000 fe1d 	bl	d51a8 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d456e:	4e21      	ldr	r6, [pc, #132]	; (d45f4 <setup+0xe0>)
   d4570:	4604      	mov	r4, r0
   d4572:	2500      	movs	r5, #0
   d4574:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4576:	2000      	movs	r0, #0
   d4578:	f000 fe16 	bl	d51a8 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d457c:	1b00      	subs	r0, r0, r4
   d457e:	eb61 0105 	sbc.w	r1, r1, r5
   d4582:	428f      	cmp	r7, r1
   d4584:	bf08      	it	eq
   d4586:	4286      	cmpeq	r6, r0
   d4588:	d305      	bcc.n	d4596 <setup+0x82>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d458a:	f000 fff9 	bl	d5580 <spark_cloud_flag_connected>
   d458e:	b910      	cbnz	r0, d4596 <setup+0x82>
            spark_process();
   d4590:	f000 ffe6 	bl	d5560 <spark_process>
   d4594:	e7ef      	b.n	d4576 <setup+0x62>
   d4596:	f000 fff3 	bl	d5580 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d459a:	f000 fde5 	bl	d5168 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d459e:	4b16      	ldr	r3, [pc, #88]	; (d45f8 <setup+0xe4>)
   d45a0:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d45a2:	f000 ffdd 	bl	d5560 <spark_process>
    Particle.connect();
    waitFor(Particle.connected,90000);                             // 60 seconds then we timeout  -- *** need to add disconnected option and test
    Particle.process();
  }

  rtc.setup();                                                     // Start the RTC code
   d45a6:	4815      	ldr	r0, [pc, #84]	; (d45fc <setup+0xe8>)
   d45a8:	f000 fbd8 	bl	d4d5c <_ZN8MCP794105setupEv>
  rtc.setRTCTime(Time.now());
   d45ac:	f003 fadf 	bl	d7b6e <_ZN9TimeClass3nowEv>

  attachInterrupt(wakeUpPin, watchdogISR, RISING);                 // Need to pet the watchdog when needed
   d45b0:	2400      	movs	r4, #0
    waitFor(Particle.connected,90000);                             // 60 seconds then we timeout  -- *** need to add disconnected option and test
    Particle.process();
  }

  rtc.setup();                                                     // Start the RTC code
  rtc.setRTCTime(Time.now());
   d45b2:	4601      	mov	r1, r0
   d45b4:	4811      	ldr	r0, [pc, #68]	; (d45fc <setup+0xe8>)
   d45b6:	f000 fc9d 	bl	d4ef4 <_ZN8MCP7941010setRTCTimeEl>

  attachInterrupt(wakeUpPin, watchdogISR, RISING);                 // Need to pet the watchdog when needed
   d45ba:	9400      	str	r4, [sp, #0]
   d45bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d45c0:	2201      	movs	r2, #1
   d45c2:	490f      	ldr	r1, [pc, #60]	; (d4600 <setup+0xec>)
   d45c4:	2008      	movs	r0, #8
   d45c6:	f001 fce7 	bl	d5f98 <_Z15attachInterrupttPFvvE13InterruptModeah>

  state = FRAM_TEST;                                               // Start the tests
   d45ca:	4b0e      	ldr	r3, [pc, #56]	; (d4604 <setup+0xf0>)
  Particle.publish("Test Start", "Beginning Test Run",PRIVATE);
   d45cc:	490e      	ldr	r1, [pc, #56]	; (d4608 <setup+0xf4>)
  rtc.setup();                                                     // Start the RTC code
  rtc.setRTCTime(Time.now());

  attachInterrupt(wakeUpPin, watchdogISR, RISING);                 // Need to pet the watchdog when needed

  state = FRAM_TEST;                                               // Start the tests
   d45ce:	2201      	movs	r2, #1
   d45d0:	701a      	strb	r2, [r3, #0]
   d45d2:	4b0e      	ldr	r3, [pc, #56]	; (d460c <setup+0xf8>)
  Particle.publish("Test Start", "Beginning Test Run",PRIVATE);
   d45d4:	4a0e      	ldr	r2, [pc, #56]	; (d4610 <setup+0xfc>)
   d45d6:	781b      	ldrb	r3, [r3, #0]
   d45d8:	f88d 4000 	strb.w	r4, [sp]
   d45dc:	a802      	add	r0, sp, #8
   d45de:	f7ff fddf 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.41>
   d45e2:	a803      	add	r0, sp, #12
   d45e4:	f7ff fed9 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d45e8:	b005      	add	sp, #20
   d45ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d45ec:	000da734 	.word	0x000da734
   d45f0:	000da858 	.word	0x000da858
   d45f4:	00015f8f 	.word	0x00015f8f
   d45f8:	2003e5d0 	.word	0x2003e5d0
   d45fc:	2003e1d4 	.word	0x2003e1d4
   d4600:	000d4181 	.word	0x000d4181
   d4604:	2003e161 	.word	0x2003e161
   d4608:	000da873 	.word	0x000da873
   d460c:	2003e164 	.word	0x2003e164
   d4610:	000da860 	.word	0x000da860

000d4614 <loop>:


void loop() {
   d4614:	b5f0      	push	{r4, r5, r6, r7, lr}
  rtc.loop();                                                           // Need to run this in the main loop
  switch (state) {
   d4616:	4c38      	ldr	r4, [pc, #224]	; (d46f8 <loop+0xe4>)
  Particle.publish("Test Start", "Beginning Test Run",PRIVATE);
}


void loop() {
  rtc.loop();                                                           // Need to run this in the main loop
   d4618:	4838      	ldr	r0, [pc, #224]	; (d46fc <loop+0xe8>)
  state = FRAM_TEST;                                               // Start the tests
  Particle.publish("Test Start", "Beginning Test Run",PRIVATE);
}


void loop() {
   d461a:	b085      	sub	sp, #20
  rtc.loop();                                                           // Need to run this in the main loop
   d461c:	f000 fcbe 	bl	d4f9c <_ZN8MCP794104loopEv>
  switch (state) {
   d4620:	7823      	ldrb	r3, [r4, #0]
   d4622:	3b01      	subs	r3, #1
   d4624:	2b09      	cmp	r3, #9
   d4626:	d863      	bhi.n	d46f0 <loop+0xdc>
   d4628:	e8df f003 	tbb	[pc, r3]
   d462c:	3c190f05 	.word	0x3c190f05
   d4630:	62626262 	.word	0x62626262
   d4634:	6453      	.short	0x6453
    case IDLE_STATE:
    break;
    case FRAM_TEST:
      framTest() ? state = TMP36_TEST : state=ERROR_STATE;
   d4636:	f7ff ff41 	bl	d44bc <_Z8framTestv>
   d463a:	b108      	cbz	r0, d4640 <loop+0x2c>
   d463c:	2302      	movs	r3, #2
   d463e:	e000      	b.n	d4642 <loop+0x2e>
   d4640:	2309      	movs	r3, #9
   d4642:	7023      	strb	r3, [r4, #0]
      waitUntil(meterParticlePublish);
   d4644:	f7ff fe9e 	bl	d4384 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.19>
   d4648:	e035      	b.n	d46b6 <loop+0xa2>
      Particle.publish("Result",resultStr,PRIVATE);
    break;
    case TMP36_TEST:
      getTemperature() ? state = USERSW_TEST : state = ERROR_STATE;
   d464a:	f7ff fde9 	bl	d4220 <_Z14getTemperaturev>
   d464e:	b108      	cbz	r0, d4654 <loop+0x40>
   d4650:	2303      	movs	r3, #3
   d4652:	e000      	b.n	d4656 <loop+0x42>
   d4654:	2309      	movs	r3, #9
   d4656:	7023      	strb	r3, [r4, #0]
      waitUntil(meterParticlePublish);
   d4658:	f7ff fe94 	bl	d4384 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.19>
   d465c:	e02b      	b.n	d46b6 <loop+0xa2>
      Particle.publish("Result",resultStr,PRIVATE);
    break;
    case USERSW_TEST: {                                                             // Test the user switch
      static bool firstPublish = false;
      if (!firstPublish) {
   d465e:	4e28      	ldr	r6, [pc, #160]	; (d4700 <loop+0xec>)
   d4660:	4d28      	ldr	r5, [pc, #160]	; (d4704 <loop+0xf0>)
   d4662:	7837      	ldrb	r7, [r6, #0]
   d4664:	b977      	cbnz	r7, d4684 <loop+0x70>
        waitUntil(meterParticlePublish);
   d4666:	f7ff fe8d 	bl	d4384 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.19>
   d466a:	782b      	ldrb	r3, [r5, #0]
        Particle.publish("Switch Test","Please press user switch", PRIVATE);
   d466c:	4a26      	ldr	r2, [pc, #152]	; (d4708 <loop+0xf4>)
   d466e:	4927      	ldr	r1, [pc, #156]	; (d470c <loop+0xf8>)
   d4670:	f88d 7000 	strb.w	r7, [sp]
   d4674:	a802      	add	r0, sp, #8
   d4676:	f7ff fd93 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.41>
   d467a:	a803      	add	r0, sp, #12
   d467c:	f7ff fe8d 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        firstPublish = true;
   d4680:	2301      	movs	r3, #1
   d4682:	7033      	strb	r3, [r6, #0]
      }
      //if (digitalRead(userSwitch)) {
        waitUntil(meterParticlePublish);
   d4684:	f7ff fe7e 	bl	d4384 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.19>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4688:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d468a:	782b      	ldrb	r3, [r5, #0]
        Particle.publish("Switch Test","Passed - Press detected", PRIVATE);
   d468c:	f88d 2000 	strb.w	r2, [sp]
   d4690:	491e      	ldr	r1, [pc, #120]	; (d470c <loop+0xf8>)
   d4692:	4a1f      	ldr	r2, [pc, #124]	; (d4710 <loop+0xfc>)
   d4694:	a802      	add	r0, sp, #8
   d4696:	f7ff fd83 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.41>
   d469a:	a803      	add	r0, sp, #12
   d469c:	f7ff fe7d 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        state = RTCTIME_TEST;
   d46a0:	2304      	movs	r3, #4
   d46a2:	e026      	b.n	d46f2 <loop+0xde>
      //}
    } break;
    case RTCTIME_TEST:
      rtcClockTest() ? state = RTCALARM_TEST : state = ERROR_STATE;
   d46a4:	f7ff fe32 	bl	d430c <_Z12rtcClockTestv>
   d46a8:	b108      	cbz	r0, d46ae <loop+0x9a>
   d46aa:	2305      	movs	r3, #5
   d46ac:	e000      	b.n	d46b0 <loop+0x9c>
   d46ae:	2309      	movs	r3, #9
   d46b0:	7023      	strb	r3, [r4, #0]
      waitUntil(meterParticlePublish);
   d46b2:	f7ff fe67 	bl	d4384 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.19>
   d46b6:	4b13      	ldr	r3, [pc, #76]	; (d4704 <loop+0xf0>)
      Particle.publish("Result",resultStr, PRIVATE);
   d46b8:	4916      	ldr	r1, [pc, #88]	; (d4714 <loop+0x100>)
   d46ba:	781b      	ldrb	r3, [r3, #0]
   d46bc:	2200      	movs	r2, #0
   d46be:	f88d 2000 	strb.w	r2, [sp]
   d46c2:	a802      	add	r0, sp, #8
   d46c4:	4a14      	ldr	r2, [pc, #80]	; (d4718 <loop+0x104>)
   d46c6:	f7ff fd6b 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.41>
   d46ca:	a803      	add	r0, sp, #12
   d46cc:	f7ff fe65 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    break;
   d46d0:	e010      	b.n	d46f4 <loop+0xe0>
    case ERROR_STATE: 
      waitUntil(meterParticlePublish);
   d46d2:	f7ff fe57 	bl	d4384 <_ZN11SystemClass13waitConditionIZ4loopEUlvE0_EEbT_.isra.19>
   d46d6:	4b0b      	ldr	r3, [pc, #44]	; (d4704 <loop+0xf0>)
      Particle.publish("Error","Testing halted",PRIVATE);
   d46d8:	4910      	ldr	r1, [pc, #64]	; (d471c <loop+0x108>)
   d46da:	781b      	ldrb	r3, [r3, #0]
   d46dc:	2200      	movs	r2, #0
   d46de:	f88d 2000 	strb.w	r2, [sp]
   d46e2:	a802      	add	r0, sp, #8
   d46e4:	4a0e      	ldr	r2, [pc, #56]	; (d4720 <loop+0x10c>)
   d46e6:	f7ff fd5b 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.34.constprop.41>
   d46ea:	a803      	add	r0, sp, #12
   d46ec:	f7ff fe55 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = IDLE_STATE;
    break;
    default:
      state = IDLE_STATE;
   d46f0:	230a      	movs	r3, #10
   d46f2:	7023      	strb	r3, [r4, #0]
    break;
  }
}
   d46f4:	b005      	add	sp, #20
   d46f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d46f8:	2003e161 	.word	0x2003e161
   d46fc:	2003e1d4 	.word	0x2003e1d4
   d4700:	2003e165 	.word	0x2003e165
   d4704:	2003e164 	.word	0x2003e164
   d4708:	000da885 	.word	0x000da885
   d470c:	000da89e 	.word	0x000da89e
   d4710:	000da8aa 	.word	0x000da8aa
   d4714:	000da87e 	.word	0x000da87e
   d4718:	2003e194 	.word	0x2003e194
   d471c:	000da841 	.word	0x000da841
   d4720:	000da8c2 	.word	0x000da8c2

000d4724 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4724:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4726:	6804      	ldr	r4, [r0, #0]
   d4728:	6843      	ldr	r3, [r0, #4]
   d472a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d472c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d472e:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4732:	42a6      	cmp	r6, r4
   d4734:	d004      	beq.n	d4740 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d4736:	4620      	mov	r0, r4
   d4738:	f003 f87b 	bl	d7832 <_ZN6StringD1Ev>
   d473c:	3414      	adds	r4, #20
   d473e:	e7f8      	b.n	d4732 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4740:	6828      	ldr	r0, [r5, #0]
   d4742:	f000 ff9d 	bl	d5680 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4746:	4628      	mov	r0, r5
   d4748:	bd70      	pop	{r4, r5, r6, pc}

000d474a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d474a:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d474e:	4606      	mov	r6, r0
   d4750:	460c      	mov	r4, r1
   d4752:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d4754:	d916      	bls.n	d4784 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4756:	4290      	cmp	r0, r2
   d4758:	d215      	bcs.n	d4786 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d475a:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d475e:	1a6c      	subs	r4, r5, r1
   d4760:	f1a1 0714 	sub.w	r7, r1, #20
   d4764:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4766:	42af      	cmp	r7, r5
   d4768:	d01c      	beq.n	d47a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d476a:	b12c      	cbz	r4, d4778 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d476c:	4629      	mov	r1, r5
   d476e:	4620      	mov	r0, r4
   d4770:	f003 f84f 	bl	d7812 <_ZN6StringC1EOS_>
   d4774:	7c2b      	ldrb	r3, [r5, #16]
   d4776:	7423      	strb	r3, [r4, #16]
   d4778:	4628      	mov	r0, r5
   d477a:	f003 f85a 	bl	d7832 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d477e:	3d14      	subs	r5, #20
   d4780:	3c14      	subs	r4, #20
   d4782:	e7f0      	b.n	d4766 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4784:	d00e      	beq.n	d47a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4786:	42ac      	cmp	r4, r5
   d4788:	d00c      	beq.n	d47a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d478a:	b12e      	cbz	r6, d4798 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d478c:	4621      	mov	r1, r4
   d478e:	4630      	mov	r0, r6
   d4790:	f003 f83f 	bl	d7812 <_ZN6StringC1EOS_>
   d4794:	7c23      	ldrb	r3, [r4, #16]
   d4796:	7433      	strb	r3, [r6, #16]
   d4798:	4620      	mov	r0, r4
   d479a:	f003 f84a 	bl	d7832 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d479e:	3414      	adds	r4, #20
   d47a0:	3614      	adds	r6, #20
   d47a2:	e7f0      	b.n	d4786 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d47a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d47a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d47a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d47aa:	2300      	movs	r3, #0
   d47ac:	6003      	str	r3, [r0, #0]
   d47ae:	6043      	str	r3, [r0, #4]
   d47b0:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d47b2:	684e      	ldr	r6, [r1, #4]
   d47b4:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d47b6:	4604      	mov	r4, r0
   d47b8:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d47ba:	dd24      	ble.n	d4806 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d47bc:	f04f 0814 	mov.w	r8, #20
   d47c0:	fb08 f006 	mul.w	r0, r8, r6
   d47c4:	f000 ff54 	bl	d5670 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d47c8:	4605      	mov	r5, r0
   d47ca:	b1e0      	cbz	r0, d4806 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d47cc:	e894 0006 	ldmia.w	r4, {r1, r2}
   d47d0:	fb08 1202 	mla	r2, r8, r2, r1
   d47d4:	f7ff ffb9 	bl	d474a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d47d8:	6820      	ldr	r0, [r4, #0]
   d47da:	f000 ff51 	bl	d5680 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d47de:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d47e0:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d47e2:	683e      	ldr	r6, [r7, #0]
   d47e4:	687b      	ldr	r3, [r7, #4]
   d47e6:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d47ea:	4546      	cmp	r6, r8
   d47ec:	d009      	beq.n	d4802 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d47ee:	b12d      	cbz	r5, d47fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d47f0:	4631      	mov	r1, r6
   d47f2:	4628      	mov	r0, r5
   d47f4:	f003 f886 	bl	d7904 <_ZN6StringC1ERKS_>
   d47f8:	7c33      	ldrb	r3, [r6, #16]
   d47fa:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d47fc:	3614      	adds	r6, #20
   d47fe:	3514      	adds	r5, #20
   d4800:	e7f3      	b.n	d47ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d4802:	687b      	ldr	r3, [r7, #4]
   d4804:	6063      	str	r3, [r4, #4]
    }
}
   d4806:	4620      	mov	r0, r4
   d4808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d480c <_GLOBAL__sub_I_fram>:
  if(millis() - lastPublish >= 1000) {                                  // Particle rate limits at 1 publish per second
    lastPublish = millis();
    return 1;
  }
  else return 0;
}
   d480c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4810:	4b32      	ldr	r3, [pc, #200]	; (d48dc <_GLOBAL__sub_I_fram+0xd0>)
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4812:	4c33      	ldr	r4, [pc, #204]	; (d48e0 <_GLOBAL__sub_I_fram+0xd4>)
   d4814:	b08c      	sub	sp, #48	; 0x30
   d4816:	2701      	movs	r7, #1
   d4818:	701f      	strb	r7, [r3, #0]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d481a:	2500      	movs	r5, #0
   d481c:	f000 fccc 	bl	d51b8 <HAL_Pin_Map>
// FRAM Library Extensions Header File

Adafruit_FRAM_I2C fram = Adafruit_FRAM_I2C(); // Init the FRAM
   d4820:	4830      	ldr	r0, [pc, #192]	; (d48e4 <_GLOBAL__sub_I_fram+0xd8>)
   d4822:	f7ff fc57 	bl	d40d4 <_ZN17Adafruit_FRAM_I2CC1Ev>
   d4826:	9500      	str	r5, [sp, #0]
   d4828:	9501      	str	r5, [sp, #4]
   d482a:	9502      	str	r5, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d482c:	f003 faac 	bl	d7d88 <_Z16_fetch_usbserialv>
   d4830:	4669      	mov	r1, sp
   d4832:	4680      	mov	r8, r0
   d4834:	a803      	add	r0, sp, #12
   d4836:	f7ff ffb6 	bl	d47a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d483a:	4626      	mov	r6, r4
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d483c:	a903      	add	r1, sp, #12
   d483e:	a806      	add	r0, sp, #24
   d4840:	f7ff ffb1 	bl	d47a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4844:	4b28      	ldr	r3, [pc, #160]	; (d48e8 <_GLOBAL__sub_I_fram+0xdc>)
   d4846:	f846 3b04 	str.w	r3, [r6], #4
   d484a:	a906      	add	r1, sp, #24
   d484c:	a809      	add	r0, sp, #36	; 0x24
   d484e:	f7ff ffaa 	bl	d47a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4852:	aa09      	add	r2, sp, #36	; 0x24
   d4854:	211e      	movs	r1, #30
   d4856:	4630      	mov	r0, r6
   d4858:	f002 fa8b 	bl	d6d72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d485c:	a809      	add	r0, sp, #36	; 0x24
   d485e:	f7ff ff61 	bl	d4724 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4862:	a806      	add	r0, sp, #24
   d4864:	f7ff ff5e 	bl	d4724 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4868:	4b20      	ldr	r3, [pc, #128]	; (d48ec <_GLOBAL__sub_I_fram+0xe0>)
   d486a:	6023      	str	r3, [r4, #0]
   d486c:	f8c4 8020 	str.w	r8, [r4, #32]
   d4870:	a803      	add	r0, sp, #12
   d4872:	f7ff ff57 	bl	d4724 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4876:	4b1e      	ldr	r3, [pc, #120]	; (d48f0 <_GLOBAL__sub_I_fram+0xe4>)
   d4878:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d487a:	f003 fa85 	bl	d7d88 <_Z16_fetch_usbserialv>
   d487e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4882:	f003 fa71 	bl	d7d68 <_ZN9USBSerial5beginEl>
 #include "Adafruit_FRAM_I2C.h"                     // Library for FRAM functions
 #include "FRAM-Library-Extensions.h"               // Extends the FRAM Library
 #include "3rdGenDevicePinoutdoc.h"                 // Documents pinout
 #include "MCP79410RK.h"

SerialLogHandler logHandler;                        // For RTC alerts and events
   d4886:	4e1b      	ldr	r6, [pc, #108]	; (d48f4 <_GLOBAL__sub_I_fram+0xe8>)
        LogManager::instance()->addHandler(this);
   d4888:	f001 ff20 	bl	d66cc <_ZN5spark10LogManager8instanceEv>
   d488c:	4621      	mov	r1, r4
   d488e:	f002 fa03 	bl	d6c98 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
   d4892:	4668      	mov	r0, sp
   d4894:	f7ff ff46 	bl	d4724 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4898:	4632      	mov	r2, r6
   d489a:	4917      	ldr	r1, [pc, #92]	; (d48f8 <_GLOBAL__sub_I_fram+0xec>)
   d489c:	4620      	mov	r0, r4

 // Prototypes and System Mode calls
 SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
   d489e:	4c17      	ldr	r4, [pc, #92]	; (d48fc <_GLOBAL__sub_I_fram+0xf0>)
 #include "Adafruit_FRAM_I2C.h"                     // Library for FRAM functions
 #include "FRAM-Library-Extensions.h"               // Extends the FRAM Library
 #include "3rdGenDevicePinoutdoc.h"                 // Documents pinout
 #include "MCP79410RK.h"

SerialLogHandler logHandler;                        // For RTC alerts and events
   d48a0:	f003 fbca 	bl	d8038 <__aeabi_atexit>

 // Prototypes and System Mode calls
 SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
   d48a4:	4629      	mov	r1, r5
   d48a6:	4638      	mov	r0, r7
   d48a8:	f000 fe16 	bl	d54d8 <system_thread_set_state>
 FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
   d48ac:	4629      	mov	r1, r5
   d48ae:	4620      	mov	r0, r4
   d48b0:	f001 fae8 	bl	d5e84 <_ZN9FuelGaugeC1Eb>
   d48b4:	4632      	mov	r2, r6
   d48b6:	4912      	ldr	r1, [pc, #72]	; (d4900 <_GLOBAL__sub_I_fram+0xf4>)
   d48b8:	4620      	mov	r0, r4
   d48ba:	f003 fbbd 	bl	d8038 <__aeabi_atexit>
	/**
	 * @brief Constructor for MCP79410 objects.
	 *
	 * @param wire The I2C interface to use. Optional, default is Wire. On some devices you can use Wire1.
	 */
	MCP79410(TwoWire &wire = Wire);
   d48be:	f003 fb59 	bl	d7f74 <_Z19__fetch_global_Wirev>
 MCP79410 rtc;                   // Rickkas MCP79410 libarary
   d48c2:	4c10      	ldr	r4, [pc, #64]	; (d4904 <_GLOBAL__sub_I_fram+0xf8>)
   d48c4:	4601      	mov	r1, r0
   d48c6:	4620      	mov	r0, r4
   d48c8:	f000 f986 	bl	d4bd8 <_ZN8MCP79410C1ER7TwoWire>
   d48cc:	4632      	mov	r2, r6
   d48ce:	490e      	ldr	r1, [pc, #56]	; (d4908 <_GLOBAL__sub_I_fram+0xfc>)
   d48d0:	4620      	mov	r0, r4
   d48d2:	f003 fbb1 	bl	d8038 <__aeabi_atexit>
  if(millis() - lastPublish >= 1000) {                                  // Particle rate limits at 1 publish per second
    lastPublish = millis();
    return 1;
  }
  else return 0;
}
   d48d6:	b00c      	add	sp, #48	; 0x30
   d48d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d48dc:	2003e164 	.word	0x2003e164
   d48e0:	2003e170 	.word	0x2003e170
   d48e4:	2003e162 	.word	0x2003e162
   d48e8:	000da70c 	.word	0x000da70c
   d48ec:	000dac68 	.word	0x000dac68
   d48f0:	000da724 	.word	0x000da724
   d48f4:	2003e158 	.word	0x2003e158
   d48f8:	000d41bd 	.word	0x000d41bd
   d48fc:	2003e168 	.word	0x2003e168
   d4900:	000d5ea3 	.word	0x000d5ea3
   d4904:	2003e1d4 	.word	0x2003e1d4
   d4908:	000d4923 	.word	0x000d4923

000d490c <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d490c:	2040      	movs	r0, #64	; 0x40
   d490e:	4770      	bx	lr

000d4910 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d4910:	2000      	movs	r0, #0
   d4912:	4770      	bx	lr

000d4914 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d4914:	2080      	movs	r0, #128	; 0x80
   d4916:	4770      	bx	lr

000d4918 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d4918:	20ff      	movs	r0, #255	; 0xff
   d491a:	4770      	bx	lr

000d491c <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d491c:	4770      	bx	lr

000d491e <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d491e:	4770      	bx	lr

000d4920 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d4920:	4770      	bx	lr

000d4922 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d4922:	4770      	bx	lr

000d4924 <_ZN12MCP79410TimeD0Ev>:

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d4924:	b510      	push	{r4, lr}

}
   d4926:	2114      	movs	r1, #20

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d4928:	4604      	mov	r4, r0

}
   d492a:	f003 fb8a 	bl	d8042 <_ZdlPvj>
   d492e:	4620      	mov	r0, r4
   d4930:	bd10      	pop	{r4, pc}

000d4932 <_ZN12MCP79410SRAMD0Ev>:

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d4932:	b510      	push	{r4, lr}

}
   d4934:	2108      	movs	r1, #8

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d4936:	4604      	mov	r4, r0

}
   d4938:	f003 fb83 	bl	d8042 <_ZdlPvj>
   d493c:	4620      	mov	r0, r4
   d493e:	bd10      	pop	{r4, pc}

000d4940 <_ZN14MCP79410EEPROMD0Ev>:
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d4940:	b510      	push	{r4, lr}

}
   d4942:	2108      	movs	r1, #8
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d4944:	4604      	mov	r4, r0

}
   d4946:	f003 fb7c 	bl	d8042 <_ZdlPvj>
   d494a:	4620      	mov	r0, r4
   d494c:	bd10      	pop	{r4, pc}

000d494e <_ZN8MCP79410D0Ev>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d494e:	b510      	push	{r4, lr}

}
   d4950:	211c      	movs	r1, #28
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d4952:	4604      	mov	r4, r0

}
   d4954:	f003 fb75 	bl	d8042 <_ZdlPvj>
   d4958:	4620      	mov	r0, r4
   d495a:	bd10      	pop	{r4, pc}

000d495c <_ZN18MCP79410MemoryBase5eraseEv>:

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d495c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d4960:	6803      	ldr	r3, [r0, #0]
   d4962:	68db      	ldr	r3, [r3, #12]

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d4964:	4605      	mov	r5, r0
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d4966:	4798      	blx	r3
   d4968:	2210      	movs	r2, #16
   d496a:	4601      	mov	r1, r0
   d496c:	4668      	mov	r0, sp
   d496e:	f004 faf9 	bl	d8f64 <memset>

	size_t len = length();
   d4972:	682b      	ldr	r3, [r5, #0]
   d4974:	4628      	mov	r0, r5
   d4976:	689b      	ldr	r3, [r3, #8]
   d4978:	4798      	blx	r3
	size_t offset = 0;
   d497a:	2400      	movs	r4, #0
bool MCP79410MemoryBase::erase() {
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
   d497c:	4607      	mov	r7, r0
MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
	bool bResult = false;
   d497e:	4620      	mov	r0, r4
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d4980:	42bc      	cmp	r4, r7
   d4982:	d20e      	bcs.n	d49a2 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		size_t count = sizeof(buf);
		if (count > (len - offset)) {
   d4984:	1b3e      	subs	r6, r7, r4

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d4986:	2e10      	cmp	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d4988:	682b      	ldr	r3, [r5, #0]

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d498a:	bf28      	it	cs
   d498c:	2610      	movcs	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d498e:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d4992:	466a      	mov	r2, sp
   d4994:	4633      	mov	r3, r6
   d4996:	4621      	mov	r1, r4
   d4998:	4628      	mov	r0, r5
   d499a:	47c0      	blx	r8
		if (!bResult) {
   d499c:	b108      	cbz	r0, d49a2 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
			break;
		}

		offset += count;
   d499e:	4434      	add	r4, r6
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d49a0:	e7ee      	b.n	d4980 <_ZN18MCP79410MemoryBase5eraseEv+0x24>

		offset += count;
	}

	return bResult;
}
   d49a2:	b004      	add	sp, #16
   d49a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d49a8 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d49a8:	6803      	ldr	r3, [r0, #0]
   d49aa:	b2c9      	uxtb	r1, r1
   d49ac:	689b      	ldr	r3, [r3, #8]
   d49ae:	4718      	bx	r3

000d49b0 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d49b0:	b40e      	push	{r1, r2, r3}
   d49b2:	b500      	push	{lr}
   d49b4:	b08c      	sub	sp, #48	; 0x30
   d49b6:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d49b8:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d49ba:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d49be:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d49c0:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d49c4:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d49c6:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d49c8:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d49ca:	aa04      	add	r2, sp, #16
   d49cc:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d49ce:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d49d0:	f000 fd5a 	bl	d5488 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d49d4:	b00c      	add	sp, #48	; 0x30
   d49d6:	f85d eb04 	ldr.w	lr, [sp], #4
   d49da:	b003      	add	sp, #12
   d49dc:	4770      	bx	lr

000d49de <_ZN12MCP79410Time5clearEv>:

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d49de:	2300      	movs	r3, #0
	rawMonth = 1;
   d49e0:	2201      	movs	r2, #1

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d49e2:	7283      	strb	r3, [r0, #10]
	rawMonth = 1;
   d49e4:	72c2      	strb	r2, [r0, #11]
	rawDayOfMonth = 1;
   d49e6:	7302      	strb	r2, [r0, #12]
	rawDayOfWeek = 1;
   d49e8:	7342      	strb	r2, [r0, #13]
	rawHour = 0;
   d49ea:	7383      	strb	r3, [r0, #14]
	rawMinute = 0;
   d49ec:	73c3      	strb	r3, [r0, #15]
	rawSecond = 0;
   d49ee:	7403      	strb	r3, [r0, #16]
	alarmMode = 0;
   d49f0:	7443      	strb	r3, [r0, #17]
   d49f2:	4770      	bx	lr

000d49f4 <_ZN12MCP79410TimeC1Ev>:
	return (stat == 0);
}



MCP79410Time::MCP79410Time() {
   d49f4:	2201      	movs	r2, #1
   d49f6:	b508      	push	{r3, lr}
   d49f8:	7142      	strb	r2, [r0, #5]
   d49fa:	2202      	movs	r2, #2
   d49fc:	7182      	strb	r2, [r0, #6]
   d49fe:	2203      	movs	r2, #3
   d4a00:	4b06      	ldr	r3, [pc, #24]	; (d4a1c <_ZN12MCP79410TimeC1Ev+0x28>)
   d4a02:	71c2      	strb	r2, [r0, #7]
   d4a04:	2204      	movs	r2, #4
   d4a06:	6003      	str	r3, [r0, #0]
   d4a08:	7202      	strb	r2, [r0, #8]
   d4a0a:	2300      	movs	r3, #0
   d4a0c:	2207      	movs	r2, #7
   d4a0e:	7103      	strb	r3, [r0, #4]
   d4a10:	7242      	strb	r2, [r0, #9]
   d4a12:	7443      	strb	r3, [r0, #17]
	clear();
   d4a14:	f7ff ffe3 	bl	d49de <_ZN12MCP79410Time5clearEv>
}
   d4a18:	bd08      	pop	{r3, pc}
   d4a1a:	bf00      	nop
   d4a1c:	000daa44 	.word	0x000daa44

000d4a20 <_ZN12MCP79410Time8bcdToIntEh>:
	return String(buf);
}

// [static]
int MCP79410Time::bcdToInt(uint8_t value) {
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d4a20:	0903      	lsrs	r3, r0, #4
}
   d4a22:	220a      	movs	r2, #10
   d4a24:	f000 000f 	and.w	r0, r0, #15
   d4a28:	fb02 0003 	mla	r0, r2, r3, r0
   d4a2c:	4770      	bx	lr

000d4a2e <_ZNK12MCP79410Time7getYearEv>:
	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
}

int MCP79410Time::getYear() const {
   d4a2e:	b508      	push	{r3, lr}
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
   d4a30:	7a80      	ldrb	r0, [r0, #10]
   d4a32:	f7ff fff5 	bl	d4a20 <_ZN12MCP79410Time8bcdToIntEh>
}
   d4a36:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d4a3a:	bd08      	pop	{r3, pc}

000d4a3c <_ZNK12MCP79410Time8getMonthEv>:
void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
}

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
   d4a3c:	7ac0      	ldrb	r0, [r0, #11]
   d4a3e:	f000 001f 	and.w	r0, r0, #31
   d4a42:	f7ff bfed 	b.w	d4a20 <_ZN12MCP79410Time8bcdToIntEh>

000d4a46 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	rawMonth = intToBcd(value);
}


int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
   d4a46:	7b00      	ldrb	r0, [r0, #12]
   d4a48:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d4a4c:	f7ff bfe8 	b.w	d4a20 <_ZN12MCP79410Time8bcdToIntEh>

000d4a50 <_ZNK12MCP79410Time7getHourEv>:
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
}


int MCP79410Time::getHour() const {
   d4a50:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d4a52:	7b81      	ldrb	r1, [r0, #14]
   d4a54:	064a      	lsls	r2, r1, #25
   d4a56:	d50d      	bpl.n	d4a74 <_ZNK12MCP79410Time7getHourEv+0x24>
		// Bit 6 = 1 (12 hour format)
		int hour12 = bcdToInt(rawHour & 0x1f);
   d4a58:	f001 001f 	and.w	r0, r1, #31
   d4a5c:	f7ff ffe0 	bl	d4a20 <_ZN12MCP79410Time8bcdToIntEh>

		if (rawHour & 0x20) {
   d4a60:	068b      	lsls	r3, r1, #26
   d4a62:	d503      	bpl.n	d4a6c <_ZNK12MCP79410Time7getHourEv+0x1c>
			// Bit 5 = 1 (PM)
			if (hour12 == 12) {
   d4a64:	280c      	cmp	r0, #12
   d4a66:	d00b      	beq.n	d4a80 <_ZNK12MCP79410Time7getHourEv+0x30>
				// 12 PM = 12
				return 12;
			}
			else {
				return hour12 + 12;
   d4a68:	300c      	adds	r0, #12
   d4a6a:	bd08      	pop	{r3, pc}
			}
		}
		else {
			// Bit 5 = 0 (AM)
			if (hour12 == 12) {
   d4a6c:	280c      	cmp	r0, #12
   d4a6e:	bf08      	it	eq
   d4a70:	2000      	moveq	r0, #0
   d4a72:	bd08      	pop	{r3, pc}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d4a74:	f001 003f 	and.w	r0, r1, #63	; 0x3f
	}
}
   d4a78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d4a7c:	f7ff bfd0 	b.w	d4a20 <_ZN12MCP79410Time8bcdToIntEh>
	}
}
   d4a80:	bd08      	pop	{r3, pc}

000d4a82 <_ZNK12MCP79410Time9getMinuteEv>:
}



int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
   d4a82:	7bc0      	ldrb	r0, [r0, #15]
   d4a84:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d4a88:	f7ff bfca 	b.w	d4a20 <_ZN12MCP79410Time8bcdToIntEh>

000d4a8c <_ZNK12MCP79410Time9getSecondEv>:
}


int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
   d4a8c:	7c00      	ldrb	r0, [r0, #16]
   d4a8e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d4a92:	f7ff bfc5 	b.w	d4a20 <_ZN12MCP79410Time8bcdToIntEh>

000d4a96 <_ZNK12MCP79410Time10toUnixTimeEv>:
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d4a96:	b510      	push	{r4, lr}
   d4a98:	b08a      	sub	sp, #40	; 0x28
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d4a9a:	2224      	movs	r2, #36	; 0x24
   d4a9c:	2100      	movs	r1, #0
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d4a9e:	4604      	mov	r4, r0
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d4aa0:	a801      	add	r0, sp, #4
   d4aa2:	f004 fa5f 	bl	d8f64 <memset>

	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d4aa6:	4620      	mov	r0, r4
   d4aa8:	f7ff ffc1 	bl	d4a2e <_ZNK12MCP79410Time7getYearEv>
   d4aac:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d4ab0:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d4ab2:	4620      	mov	r0, r4
   d4ab4:	f7ff ffc2 	bl	d4a3c <_ZNK12MCP79410Time8getMonthEv>
   d4ab8:	3801      	subs	r0, #1
   d4aba:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d4abc:	4620      	mov	r0, r4
   d4abe:	f7ff ffc2 	bl	d4a46 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d4ac2:	9004      	str	r0, [sp, #16]

	tm.tm_hour = getHour();
   d4ac4:	4620      	mov	r0, r4
   d4ac6:	f7ff ffc3 	bl	d4a50 <_ZNK12MCP79410Time7getHourEv>
   d4aca:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d4acc:	4620      	mov	r0, r4
   d4ace:	f7ff ffd8 	bl	d4a82 <_ZNK12MCP79410Time9getMinuteEv>
   d4ad2:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d4ad4:	4620      	mov	r0, r4
   d4ad6:	f7ff ffd9 	bl	d4a8c <_ZNK12MCP79410Time9getSecondEv>
   d4ada:	9001      	str	r0, [sp, #4]

	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
   d4adc:	a801      	add	r0, sp, #4
   d4ade:	f004 fb25 	bl	d912c <mktime>
}
   d4ae2:	b00a      	add	sp, #40	; 0x28
   d4ae4:	bd10      	pop	{r4, pc}

000d4ae6 <_ZN12MCP79410Time8intToBcdEi>:
uint8_t MCP79410Time::intToBcd(int value) {
	uint8_t result;

	result = (uint8_t) (((value / 10) % 10) << 4);

	result |= (uint8_t) (value % 10);
   d4ae6:	220a      	movs	r2, #10
   d4ae8:	fb90 f3f2 	sdiv	r3, r0, r2
   d4aec:	fb93 f1f2 	sdiv	r1, r3, r2
   d4af0:	fb02 3111 	mls	r1, r2, r1, r3
   d4af4:	fb02 0313 	mls	r3, r2, r3, r0
   d4af8:	ea43 1001 	orr.w	r0, r3, r1, lsl #4

	return result;
}
   d4afc:	b2c0      	uxtb	r0, r0
   d4afe:	4770      	bx	lr

000d4b00 <_ZN12MCP79410Time7setYearEi>:
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
   d4b00:	2364      	movs	r3, #100	; 0x64
int MCP79410Time::getYear() const {
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
   d4b02:	b510      	push	{r4, lr}
   d4b04:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d4b06:	fb91 f0f3 	sdiv	r0, r1, r3
   d4b0a:	fb00 1013 	mls	r0, r0, r3, r1
   d4b0e:	f7ff ffea 	bl	d4ae6 <_ZN12MCP79410Time8intToBcdEi>
   d4b12:	72a0      	strb	r0, [r4, #10]
   d4b14:	bd10      	pop	{r4, pc}

000d4b16 <_ZN12MCP79410Time8setMonthEi>:

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
}

void MCP79410Time::setMonth(int value) {
   d4b16:	b510      	push	{r4, lr}
   d4b18:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d4b1a:	4608      	mov	r0, r1
   d4b1c:	f7ff ffe3 	bl	d4ae6 <_ZN12MCP79410Time8intToBcdEi>
   d4b20:	72e0      	strb	r0, [r4, #11]
   d4b22:	bd10      	pop	{r4, pc}

000d4b24 <_ZN12MCP79410Time13setDayOfMonthEi>:

int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
}

void MCP79410Time::setDayOfMonth(int value) {
   d4b24:	b510      	push	{r4, lr}
   d4b26:	4604      	mov	r4, r0
	rawDayOfMonth &= ~0x3f;
	rawDayOfMonth |= intToBcd(value);
   d4b28:	4608      	mov	r0, r1
   d4b2a:	f7ff ffdc 	bl	d4ae6 <_ZN12MCP79410Time8intToBcdEi>
   d4b2e:	7b23      	ldrb	r3, [r4, #12]
   d4b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d4b34:	4318      	orrs	r0, r3
   d4b36:	7320      	strb	r0, [r4, #12]
   d4b38:	bd10      	pop	{r4, pc}

000d4b3a <_ZN12MCP79410Time12setDayOfWeekEi>:
	// rawDayOfWeek has the day of week 1 - 7 in the low bits. However, it does not enforce a particular day of week scheme;
	// it just keeps rolling it as time increments.
	return bcdToInt(rawDayOfWeek & 0x7) - 1;
}

void MCP79410Time::setDayOfWeek(int value) {
   d4b3a:	b510      	push	{r4, lr}
   d4b3c:	4604      	mov	r4, r0
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
   d4b3e:	1c48      	adds	r0, r1, #1
   d4b40:	f7ff ffd1 	bl	d4ae6 <_ZN12MCP79410Time8intToBcdEi>
   d4b44:	7b63      	ldrb	r3, [r4, #13]
   d4b46:	f023 0307 	bic.w	r3, r3, #7
   d4b4a:	4318      	orrs	r0, r3
   d4b4c:	7360      	strb	r0, [r4, #13]
   d4b4e:	bd10      	pop	{r4, pc}

000d4b50 <_ZN12MCP79410Time7setHourEi>:
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
	}
}

void MCP79410Time::setHour(int value) {
   d4b50:	b510      	push	{r4, lr}
   d4b52:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d4b54:	4608      	mov	r0, r1
   d4b56:	f7ff ffc6 	bl	d4ae6 <_ZN12MCP79410Time8intToBcdEi>
   d4b5a:	73a0      	strb	r0, [r4, #14]
   d4b5c:	bd10      	pop	{r4, pc}

000d4b5e <_ZN12MCP79410Time9setMinuteEi>:

int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
}

void MCP79410Time::setMinute(int value) {
   d4b5e:	b510      	push	{r4, lr}
   d4b60:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d4b62:	4608      	mov	r0, r1
   d4b64:	f7ff ffbf 	bl	d4ae6 <_ZN12MCP79410Time8intToBcdEi>
   d4b68:	73e0      	strb	r0, [r4, #15]
   d4b6a:	bd10      	pop	{r4, pc}

000d4b6c <_ZN12MCP79410Time9setSecondEi>:
int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
}

void MCP79410Time::setSecond(int value) {
   d4b6c:	b510      	push	{r4, lr}
   d4b6e:	4604      	mov	r4, r0
	rawSecond &= ~0x7f;
	rawSecond |= intToBcd(value);
   d4b70:	4608      	mov	r0, r1
   d4b72:	f7ff ffb8 	bl	d4ae6 <_ZN12MCP79410Time8intToBcdEi>
   d4b76:	7c23      	ldrb	r3, [r4, #16]
   d4b78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d4b7c:	4318      	orrs	r0, r3
   d4b7e:	7420      	strb	r0, [r4, #16]
   d4b80:	bd10      	pop	{r4, pc}

000d4b82 <_ZN12MCP79410Time12fromUnixTimeEl>:
	rawSecond = 0;
	alarmMode = 0;
}


void MCP79410Time::fromUnixTime(time_t time) {
   d4b82:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4b84:	4604      	mov	r4, r0
   d4b86:	a802      	add	r0, sp, #8
   d4b88:	f840 1d04 	str.w	r1, [r0, #-4]!
	struct tm *tm = gmtime(&time);
   d4b8c:	f004 f822 	bl	d8bd4 <gmtime>
   d4b90:	4605      	mov	r5, r0

	// Technically tm_year is years since 1900 but we can't represent dates not in 2000 - 2099
	setYear(tm->tm_year);
   d4b92:	6941      	ldr	r1, [r0, #20]
   d4b94:	4620      	mov	r0, r4
   d4b96:	f7ff ffb3 	bl	d4b00 <_ZN12MCP79410Time7setYearEi>

	// 0 <= tm_mon <= 11! We use the more conventional 1-12 for getMonth/setMonth
	setMonth(tm->tm_mon + 1);
   d4b9a:	6929      	ldr	r1, [r5, #16]
   d4b9c:	4620      	mov	r0, r4
   d4b9e:	3101      	adds	r1, #1
   d4ba0:	f7ff ffb9 	bl	d4b16 <_ZN12MCP79410Time8setMonthEi>

	setDayOfMonth(tm->tm_mday);
   d4ba4:	68e9      	ldr	r1, [r5, #12]
   d4ba6:	4620      	mov	r0, r4
   d4ba8:	f7ff ffbc 	bl	d4b24 <_ZN12MCP79410Time13setDayOfMonthEi>

	setDayOfWeek(tm->tm_wday);
   d4bac:	69a9      	ldr	r1, [r5, #24]
   d4bae:	4620      	mov	r0, r4
   d4bb0:	f7ff ffc3 	bl	d4b3a <_ZN12MCP79410Time12setDayOfWeekEi>


	// days since Sunday – [0, 6]

	setHour(tm->tm_hour); // tm_hour is 0-23
   d4bb4:	68a9      	ldr	r1, [r5, #8]
   d4bb6:	4620      	mov	r0, r4
   d4bb8:	f7ff ffca 	bl	d4b50 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d4bbc:	6869      	ldr	r1, [r5, #4]
   d4bbe:	4620      	mov	r0, r4
   d4bc0:	f7ff ffcd 	bl	d4b5e <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d4bc4:	6829      	ldr	r1, [r5, #0]
   d4bc6:	293b      	cmp	r1, #59	; 0x3b
   d4bc8:	bfa8      	it	ge
   d4bca:	213b      	movge	r1, #59	; 0x3b
   d4bcc:	4620      	mov	r0, r4
   d4bce:	f7ff ffcd 	bl	d4b6c <_ZN12MCP79410Time9setSecondEi>
}
   d4bd2:	b003      	add	sp, #12
   d4bd4:	bd30      	pop	{r4, r5, pc}
	...

000d4bd8 <_ZN8MCP79410C1ER7TwoWire>:

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d4bd8:	4a08      	ldr	r2, [pc, #32]	; (d4bfc <_ZN8MCP79410C1ER7TwoWire+0x24>)
   d4bda:	6002      	str	r2, [r0, #0]
   d4bdc:	2200      	movs	r2, #0
   d4bde:	7202      	strb	r2, [r0, #8]
   d4be0:	7242      	strb	r2, [r0, #9]
   d4be2:	2201      	movs	r2, #1
   d4be4:	7282      	strb	r2, [r0, #10]
   d4be6:	4603      	mov	r3, r0
   d4be8:	2203      	movs	r2, #3
   d4bea:	72c2      	strb	r2, [r0, #11]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d4bec:	4a04      	ldr	r2, [pc, #16]	; (d4c00 <_ZN8MCP79410C1ER7TwoWire+0x28>)

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d4bee:	6041      	str	r1, [r0, #4]
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d4bf0:	6118      	str	r0, [r3, #16]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d4bf2:	60c2      	str	r2, [r0, #12]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d4bf4:	4a03      	ldr	r2, [pc, #12]	; (d4c04 <_ZN8MCP79410C1ER7TwoWire+0x2c>)
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d4bf6:	6198      	str	r0, [r3, #24]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d4bf8:	6142      	str	r2, [r0, #20]
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}
   d4bfa:	4770      	bx	lr
   d4bfc:	000daa54 	.word	0x000daa54
   d4c00:	000da924 	.word	0x000da924
   d4c04:	000da900 	.word	0x000da900

000d4c08 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d4c08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c0c:	4605      	mov	r5, r0
   d4c0e:	460f      	mov	r7, r1
   d4c10:	4691      	mov	r9, r2
   d4c12:	469a      	mov	sl, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d4c14:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d4c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4c18:	429c      	cmp	r4, r3
   d4c1a:	d230      	bcs.n	d4c7e <_ZNK8MCP7941010deviceReadEhhPhj+0x76>
		wire.beginTransmission(i2cAddr);
   d4c1c:	4639      	mov	r1, r7
   d4c1e:	6868      	ldr	r0, [r5, #4]
   d4c20:	f001 f998 	bl	d5f54 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d4c24:	eb09 0104 	add.w	r1, r9, r4
   d4c28:	6868      	ldr	r0, [r5, #4]
   d4c2a:	f7ff febd 	bl	d49a8 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d4c2e:	2100      	movs	r1, #0
   d4c30:	6868      	ldr	r0, [r5, #4]
   d4c32:	f001 f993 	bl	d5f5c <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d4c36:	4606      	mov	r6, r0
   d4c38:	b9d8      	cbnz	r0, d4c72 <_ZNK8MCP7941010deviceReadEhhPhj+0x6a>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d4c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d4c3c:	6868      	ldr	r0, [r5, #4]
		wire.beginTransmission(i2cAddr);
		wire.write(addr + offset);
		stat = wire.endTransmission(false);
		if (stat == 0) {
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d4c3e:	1b1a      	subs	r2, r3, r4
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d4c40:	2a20      	cmp	r2, #32
   d4c42:	bf28      	it	cs
   d4c44:	2220      	movcs	r2, #32
   d4c46:	2301      	movs	r3, #1
   d4c48:	b2d2      	uxtb	r2, r2
   d4c4a:	4639      	mov	r1, r7
   d4c4c:	f001 f976 	bl	d5f3c <_ZN7TwoWire11requestFromEhhh>
   d4c50:	eb0a 0804 	add.w	r8, sl, r4
   d4c54:	4683      	mov	fp, r0
   d4c56:	4646      	mov	r6, r8
			for(size_t ii = 0; ii < count; ii++) {
   d4c58:	ebc8 0306 	rsb	r3, r8, r6
   d4c5c:	459b      	cmp	fp, r3
   d4c5e:	d906      	bls.n	d4c6e <_ZNK8MCP7941010deviceReadEhhPhj+0x66>
				buf[ii + offset] = wire.read();
   d4c60:	6868      	ldr	r0, [r5, #4]
   d4c62:	6803      	ldr	r3, [r0, #0]
   d4c64:	695b      	ldr	r3, [r3, #20]
   d4c66:	4798      	blx	r3
   d4c68:	f806 0b01 	strb.w	r0, [r6], #1
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
			for(size_t ii = 0; ii < count; ii++) {
   d4c6c:	e7f4      	b.n	d4c58 <_ZNK8MCP7941010deviceReadEhhPhj+0x50>
				buf[ii + offset] = wire.read();
			}
			offset += count;
   d4c6e:	445c      	add	r4, fp
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d4c70:	e7d1      	b.n	d4c16 <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
				buf[ii + offset] = wire.read();
			}
			offset += count;
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d4c72:	4602      	mov	r2, r0
   d4c74:	4904      	ldr	r1, [pc, #16]	; (d4c88 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d4c76:	4805      	ldr	r0, [pc, #20]	; (d4c8c <_ZNK8MCP7941010deviceReadEhhPhj+0x84>)
   d4c78:	f7ff fe9a 	bl	d49b0 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d4c7c:	e000      	b.n	d4c80 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
   d4c7e:	2600      	movs	r6, #0
		}
	}
	return stat;
}
   d4c80:	4630      	mov	r0, r6
   d4c82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4c86:	bf00      	nop
   d4c88:	000da99e 	.word	0x000da99e
   d4c8c:	2003e1f0 	.word	0x2003e1f0

000d4c90 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
	buf[6] = time.rawYear;

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
}

uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d4c90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d4c92:	2301      	movs	r3, #1
   d4c94:	9300      	str	r3, [sp, #0]
   d4c96:	460a      	mov	r2, r1
   d4c98:	ab03      	add	r3, sp, #12
   d4c9a:	216f      	movs	r1, #111	; 0x6f
   d4c9c:	f7ff ffb4 	bl	d4c08 <_ZNK8MCP7941010deviceReadEhhPhj>
   d4ca0:	b910      	cbnz	r0, d4ca8 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x18>
		// log.trace("deviceReadRegisterByte addr=%02x value=%02x", addr, buf[0]);
		return buf[0];
   d4ca2:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d4ca6:	e000      	b.n	d4caa <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1a>
	}
	else {
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
   d4ca8:	2000      	movs	r0, #0
	}
}
   d4caa:	b005      	add	sp, #20
   d4cac:	f85d fb04 	ldr.w	pc, [sp], #4

000d4cb0 <_ZNK8MCP7941020getOscillatorRunningEv>:

bool MCP79410::getPowerFail() const {
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_PWRFAIL) != 0;
}

bool MCP79410::getOscillatorRunning() const {
   d4cb0:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d4cb2:	2103      	movs	r1, #3
   d4cb4:	f7ff ffec 	bl	d4c90 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d4cb8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d4cbc:	bd08      	pop	{r3, pc}

000d4cbe <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>:
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d4cbe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d4cc0:	461e      	mov	r6, r3
   d4cc2:	2b00      	cmp	r3, #0
   d4cc4:	bf0c      	ite	eq
   d4cc6:	2307      	moveq	r3, #7
   d4cc8:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d4cca:	9300      	str	r3, [sp, #0]
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d4ccc:	4614      	mov	r4, r2
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d4cce:	ab02      	add	r3, sp, #8
   d4cd0:	460a      	mov	r2, r1
   d4cd2:	216f      	movs	r1, #111	; 0x6f
   d4cd4:	f7ff ff98 	bl	d4c08 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d4cd8:	4605      	mov	r5, r0
   d4cda:	b9d8      	cbnz	r0, d4d14 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			time.rawSecond = buf[0];
   d4cdc:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d4ce0:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d4ce2:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d4ce6:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d4ce8:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d4cec:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d4cee:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d4cf2:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d4cf4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d4cf8:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d4cfa:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d4cfe:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d4d00:	b91e      	cbnz	r6, d4d0a <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x4c>
				time.rawYear = buf[6];
   d4d02:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d4d06:	72a3      	strb	r3, [r4, #10]
   d4d08:	e004      	b.n	d4d14 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			}
			else {
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d4d0a:	f002 ff37 	bl	d7b7c <_ZN9TimeClass4yearEv>
   d4d0e:	f7ff feea 	bl	d4ae6 <_ZN12MCP79410Time8intToBcdEi>
   d4d12:	72a0      	strb	r0, [r4, #10]
			time.rawYear = MCP79410Time::intToBcd(Time.year());
		}
	}

	return stat;
}
   d4d14:	4628      	mov	r0, r5
   d4d16:	b004      	add	sp, #16
   d4d18:	bd70      	pop	{r4, r5, r6, pc}

000d4d1a <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
	else {
		return 0;
	}
}

bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d4d1a:	b538      	push	{r3, r4, r5, lr}
   d4d1c:	2300      	movs	r3, #0
   d4d1e:	460c      	mov	r4, r1
   d4d20:	460a      	mov	r2, r1
   d4d22:	4619      	mov	r1, r3
   d4d24:	4605      	mov	r5, r0
   d4d26:	f7ff ffca 	bl	d4cbe <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
	if (stat == 0) {
   d4d2a:	b928      	cbnz	r0, d4d38 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d4d2c:	7aa3      	ldrb	r3, [r4, #10]
   d4d2e:	b11b      	cbz	r3, d4d38 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
   d4d30:	4628      	mov	r0, r5
   d4d32:	f7ff ffbd 	bl	d4cb0 <_ZNK8MCP7941020getOscillatorRunningEv>
   d4d36:	b900      	cbnz	r0, d4d3a <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
			return true;
		}
		else {
			return false;
   d4d38:	2000      	movs	r0, #0
		}
	}
	else {
		return false;
	}
}
   d4d3a:	bd38      	pop	{r3, r4, r5, pc}

000d4d3c <_ZNK8MCP7941010getRTCTimeEv>:

bool MCP79410::isRTCValid() const {
	return getRTCTime() != 0;
}

time_t MCP79410::getRTCTime() const {
   d4d3c:	b510      	push	{r4, lr}
   d4d3e:	b086      	sub	sp, #24
   d4d40:	4604      	mov	r4, r0
	MCP79410Time time;
   d4d42:	a801      	add	r0, sp, #4
   d4d44:	f7ff fe56 	bl	d49f4 <_ZN12MCP79410TimeC1Ev>

	bool bResult = getRTCTime(time);
   d4d48:	a901      	add	r1, sp, #4
   d4d4a:	4620      	mov	r0, r4
   d4d4c:	f7ff ffe5 	bl	d4d1a <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d4d50:	b110      	cbz	r0, d4d58 <_ZNK8MCP7941010getRTCTimeEv+0x1c>
		return time.toUnixTime();
   d4d52:	a801      	add	r0, sp, #4
   d4d54:	f7ff fe9f 	bl	d4a96 <_ZNK12MCP79410Time10toUnixTimeEv>
	}
	else {
		return 0;
	}
}
   d4d58:	b006      	add	sp, #24
   d4d5a:	bd10      	pop	{r4, pc}

000d4d5c <_ZN8MCP794105setupEv>:

MCP79410::~MCP79410() {

}

void MCP79410::setup() {
   d4d5c:	b530      	push	{r4, r5, lr}
   d4d5e:	4604      	mov	r4, r0
   d4d60:	b085      	sub	sp, #20
	wire.begin();
   d4d62:	6840      	ldr	r0, [r0, #4]
   d4d64:	f001 f8e4 	bl	d5f30 <_ZN7TwoWire5beginEv>

	if (!Time.isValid()) {
   d4d68:	f002 fee0 	bl	d7b2c <_ZN9TimeClass7isValidEv>
   d4d6c:	b9c0      	cbnz	r0, d4da0 <_ZN8MCP794105setupEv+0x44>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d4d6e:	7ae3      	ldrb	r3, [r4, #11]
   d4d70:	079b      	lsls	r3, r3, #30
   d4d72:	d515      	bpl.n	d4da0 <_ZN8MCP794105setupEv+0x44>
			time_t rtcTime = getRTCTime();
   d4d74:	4620      	mov	r0, r4
   d4d76:	f7ff ffe1 	bl	d4d3c <_ZNK8MCP7941010getRTCTimeEv>
			if (rtcTime != 0) {
   d4d7a:	4605      	mov	r5, r0
   d4d7c:	b180      	cbz	r0, d4da0 <_ZN8MCP794105setupEv+0x44>
				Time.setTime(rtcTime);
   d4d7e:	f002 fe18 	bl	d79b2 <_ZN9TimeClass7setTimeEl>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d4d82:	4b09      	ldr	r3, [pc, #36]	; (d4da8 <_ZN8MCP794105setupEv+0x4c>)
   d4d84:	4909      	ldr	r1, [pc, #36]	; (d4dac <_ZN8MCP794105setupEv+0x50>)
   d4d86:	681b      	ldr	r3, [r3, #0]
   d4d88:	462a      	mov	r2, r5
   d4d8a:	4668      	mov	r0, sp
   d4d8c:	f002 fe9c 	bl	d7ac8 <_ZN9TimeClass6formatElPKc>
   d4d90:	4807      	ldr	r0, [pc, #28]	; (d4db0 <_ZN8MCP794105setupEv+0x54>)
   d4d92:	9a00      	ldr	r2, [sp, #0]
   d4d94:	4907      	ldr	r1, [pc, #28]	; (d4db4 <_ZN8MCP794105setupEv+0x58>)
   d4d96:	f7ff fe0b 	bl	d49b0 <_ZNK5spark6Logger4infoEPKcz>
   d4d9a:	4668      	mov	r0, sp
   d4d9c:	f002 fd49 	bl	d7832 <_ZN6StringD1Ev>
			}
		}
	}

	setupDone = true;
   d4da0:	2301      	movs	r3, #1
   d4da2:	7223      	strb	r3, [r4, #8]
}
   d4da4:	b005      	add	sp, #20
   d4da6:	bd30      	pop	{r4, r5, pc}
   d4da8:	2003e0a0 	.word	0x2003e0a0
   d4dac:	2003e480 	.word	0x2003e480
   d4db0:	2003e1f0 	.word	0x2003e1f0
   d4db4:	000da9b8 	.word	0x000da9b8

000d4db8 <_ZNK8MCP7941010isRTCValidEv>:
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
}

bool MCP79410::isRTCValid() const {
   d4db8:	b508      	push	{r3, lr}
	return getRTCTime() != 0;
   d4dba:	f7ff ffbf 	bl	d4d3c <_ZNK8MCP7941010getRTCTimeEv>
}
   d4dbe:	3000      	adds	r0, #0
   d4dc0:	bf18      	it	ne
   d4dc2:	2001      	movne	r0, #1
   d4dc4:	bd08      	pop	{r3, pc}

000d4dc6 <_ZN14MCP79410EEPROM8readDataEjPhj>:

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d4dc6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d4dca:	eb01 0803 	add.w	r8, r1, r3

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d4dce:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d4dd0:	6803      	ldr	r3, [r0, #0]
   d4dd2:	689b      	ldr	r3, [r3, #8]

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d4dd4:	4604      	mov	r4, r0
   d4dd6:	460d      	mov	r5, r1
   d4dd8:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d4dda:	4798      	blx	r3
   d4ddc:	4580      	cmp	r8, r0
   d4dde:	d80a      	bhi.n	d4df6 <_ZN14MCP79410EEPROM8readDataEjPhj+0x30>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d4de0:	9600      	str	r6, [sp, #0]
   d4de2:	463b      	mov	r3, r7
   d4de4:	b2ea      	uxtb	r2, r5
   d4de6:	2157      	movs	r1, #87	; 0x57
   d4de8:	6860      	ldr	r0, [r4, #4]
   d4dea:	f7ff ff0d 	bl	d4c08 <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d4dee:	fab0 f080 	clz	r0, r0
   d4df2:	0940      	lsrs	r0, r0, #5
   d4df4:	e000      	b.n	d4df8 <_ZN14MCP79410EEPROM8readDataEjPhj+0x32>

bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d4df6:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}
   d4df8:	b002      	add	sp, #8
   d4dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4dfe <_ZN12MCP79410SRAM8readDataEjPhj>:

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d4dfe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d4e02:	eb01 0803 	add.w	r8, r1, r3

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d4e06:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d4e08:	6803      	ldr	r3, [r0, #0]
   d4e0a:	689b      	ldr	r3, [r3, #8]

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d4e0c:	4605      	mov	r5, r0
   d4e0e:	460c      	mov	r4, r1
   d4e10:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d4e12:	4798      	blx	r3
   d4e14:	4580      	cmp	r8, r0
   d4e16:	d80c      	bhi.n	d4e32 <_ZN12MCP79410SRAM8readDataEjPhj+0x34>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d4e18:	f104 0220 	add.w	r2, r4, #32
   d4e1c:	9600      	str	r6, [sp, #0]
   d4e1e:	463b      	mov	r3, r7
   d4e20:	b2d2      	uxtb	r2, r2
   d4e22:	216f      	movs	r1, #111	; 0x6f
   d4e24:	6868      	ldr	r0, [r5, #4]
   d4e26:	f7ff feef 	bl	d4c08 <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d4e2a:	fab0 f080 	clz	r0, r0
   d4e2e:	0940      	lsrs	r0, r0, #5
   d4e30:	e000      	b.n	d4e34 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d4e32:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d4e34:	b002      	add	sp, #8
   d4e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4e3c <_ZN8MCP7941011deviceWriteEhhPKhj>:
		}
	}
	return stat;
}

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d4e3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4e40:	4607      	mov	r7, r0
   d4e42:	4689      	mov	r9, r1
   d4e44:	4692      	mov	sl, r2
   d4e46:	469b      	mov	fp, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d4e48:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d4e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4e4c:	429c      	cmp	r4, r3
   d4e4e:	d228      	bcs.n	d4ea2 <_ZN8MCP7941011deviceWriteEhhPKhj+0x66>
		wire.beginTransmission(i2cAddr);
   d4e50:	4649      	mov	r1, r9
   d4e52:	6878      	ldr	r0, [r7, #4]
   d4e54:	f001 f87e 	bl	d5f54 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d4e58:	eb0a 0104 	add.w	r1, sl, r4
   d4e5c:	6878      	ldr	r0, [r7, #4]
   d4e5e:	f7ff fda3 	bl	d49a8 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d4e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4e64:	1b1e      	subs	r6, r3, r4
   d4e66:	2e1f      	cmp	r6, #31
   d4e68:	eb0b 0804 	add.w	r8, fp, r4
   d4e6c:	bf28      	it	cs
   d4e6e:	261f      	movcs	r6, #31
   d4e70:	4645      	mov	r5, r8
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d4e72:	6878      	ldr	r0, [r7, #4]
   d4e74:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4e78:	6802      	ldr	r2, [r0, #0]
   d4e7a:	6892      	ldr	r2, [r2, #8]
   d4e7c:	4790      	blx	r2
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d4e7e:	ebc8 0205 	rsb	r2, r8, r5
   d4e82:	42b2      	cmp	r2, r6
   d4e84:	d3f5      	bcc.n	d4e72 <_ZN8MCP7941011deviceWriteEhhPKhj+0x36>
			wire.write(buf[ii + offset]);
		}

		stat = wire.endTransmission(true);
   d4e86:	2101      	movs	r1, #1
   d4e88:	6878      	ldr	r0, [r7, #4]
   d4e8a:	f001 f867 	bl	d5f5c <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d4e8e:	4605      	mov	r5, r0
   d4e90:	b128      	cbz	r0, d4e9e <_ZN8MCP7941011deviceWriteEhhPKhj+0x62>
			log.info("deviceWrite failed stat=%d", stat);
   d4e92:	4602      	mov	r2, r0
   d4e94:	4905      	ldr	r1, [pc, #20]	; (d4eac <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d4e96:	4806      	ldr	r0, [pc, #24]	; (d4eb0 <_ZN8MCP7941011deviceWriteEhhPKhj+0x74>)
   d4e98:	f7ff fd8a 	bl	d49b0 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d4e9c:	e002      	b.n	d4ea4 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		}

		offset += count;
   d4e9e:	4434      	add	r4, r6
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d4ea0:	e7d3      	b.n	d4e4a <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d4ea2:	2500      	movs	r5, #0

		offset += count;
	}

	return stat;
}
   d4ea4:	4628      	mov	r0, r5
   d4ea6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4eaa:	bf00      	nop
   d4eac:	000da9cd 	.word	0x000da9cd
   d4eb0:	2003e1f0 	.word	0x2003e1f0

000d4eb4 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
	}

	return stat;
}

int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d4eb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[7];

	buf[0] = time.rawSecond;
   d4eb6:	7c13      	ldrb	r3, [r2, #16]
   d4eb8:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d4ebc:	7bd3      	ldrb	r3, [r2, #15]
   d4ebe:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d4ec2:	7b93      	ldrb	r3, [r2, #14]
   d4ec4:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d4ec8:	7b53      	ldrb	r3, [r2, #13]
   d4eca:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d4ece:	7b13      	ldrb	r3, [r2, #12]
   d4ed0:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d4ed4:	7ad3      	ldrb	r3, [r2, #11]
   d4ed6:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d4eda:	7a93      	ldrb	r3, [r2, #10]
   d4edc:	f88d 300e 	strb.w	r3, [sp, #14]

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d4ee0:	2307      	movs	r3, #7
   d4ee2:	9300      	str	r3, [sp, #0]
   d4ee4:	460a      	mov	r2, r1
   d4ee6:	ab02      	add	r3, sp, #8
   d4ee8:	216f      	movs	r1, #111	; 0x6f
   d4eea:	f7ff ffa7 	bl	d4e3c <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d4eee:	b005      	add	sp, #20
   d4ef0:	f85d fb04 	ldr.w	pc, [sp], #4

000d4ef4 <_ZN8MCP7941010setRTCTimeEl>:
		log.info("cloud time not valid");
	}
	return bResult;
}

bool MCP79410::setRTCTime(time_t unixTime) {
   d4ef4:	b510      	push	{r4, lr}
   d4ef6:	b086      	sub	sp, #24
   d4ef8:	4604      	mov	r4, r0
	MCP79410Time time;
   d4efa:	a801      	add	r0, sp, #4
   d4efc:	f7ff fd7a 	bl	d49f4 <_ZN12MCP79410TimeC1Ev>

	time.fromUnixTime(unixTime);
   d4f00:	a801      	add	r0, sp, #4
   d4f02:	f7ff fe3e 	bl	d4b82 <_ZN12MCP79410Time12fromUnixTimeEl>

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d4f06:	f89d 3014 	ldrb.w	r3, [sp, #20]

	// Default is to enable the battery
	if (batteryEnable) {
   d4f0a:	7aa2      	ldrb	r2, [r4, #10]
	MCP79410Time time;

	time.fromUnixTime(unixTime);

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d4f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d4f10:	f88d 3014 	strb.w	r3, [sp, #20]
   d4f14:	f89d 3011 	ldrb.w	r3, [sp, #17]

	// Default is to enable the battery
	if (batteryEnable) {
   d4f18:	b112      	cbz	r2, d4f20 <_ZN8MCP7941010setRTCTimeEl+0x2c>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d4f1a:	f043 0308 	orr.w	r3, r3, #8
   d4f1e:	e001      	b.n	d4f24 <_ZN8MCP7941010setRTCTimeEl+0x30>
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d4f20:	f023 0308 	bic.w	r3, r3, #8
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d4f24:	aa01      	add	r2, sp, #4
   d4f26:	2100      	movs	r1, #0
   d4f28:	4620      	mov	r0, r4
	// Default is to enable the battery
	if (batteryEnable) {
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d4f2a:	f88d 3011 	strb.w	r3, [sp, #17]
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d4f2e:	f7ff ffc1 	bl	d4eb4 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d4f32:	fab0 f080 	clz	r0, r0
   d4f36:	0940      	lsrs	r0, r0, #5
   d4f38:	b006      	add	sp, #24
   d4f3a:	bd10      	pop	{r4, pc}

000d4f3c <_ZN8MCP7941015setRTCFromCloudEv>:
			}
		}
	}
}

bool MCP79410::setRTCFromCloud() {
   d4f3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4f3e:	4606      	mov	r6, r0
	bool bResult = false;

	if (Time.isValid()) {
   d4f40:	f002 fdf4 	bl	d7b2c <_ZN9TimeClass7isValidEv>
   d4f44:	4604      	mov	r4, r0
   d4f46:	b1b8      	cbz	r0, d4f78 <_ZN8MCP7941015setRTCFromCloudEv+0x3c>
		time_t now = Time.now();
   d4f48:	f002 fe11 	bl	d7b6e <_ZN9TimeClass3nowEv>
   d4f4c:	4605      	mov	r5, r0
		bResult = setRTCTime(now);
   d4f4e:	4601      	mov	r1, r0
   d4f50:	4630      	mov	r0, r6
   d4f52:	f7ff ffcf 	bl	d4ef4 <_ZN8MCP7941010setRTCTimeEl>

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d4f56:	4b0c      	ldr	r3, [pc, #48]	; (d4f88 <_ZN8MCP7941015setRTCFromCloudEv+0x4c>)
   d4f58:	490c      	ldr	r1, [pc, #48]	; (d4f8c <_ZN8MCP7941015setRTCFromCloudEv+0x50>)
   d4f5a:	681b      	ldr	r3, [r3, #0]
   d4f5c:	462a      	mov	r2, r5
bool MCP79410::setRTCFromCloud() {
	bool bResult = false;

	if (Time.isValid()) {
		time_t now = Time.now();
		bResult = setRTCTime(now);
   d4f5e:	4604      	mov	r4, r0

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d4f60:	4668      	mov	r0, sp
   d4f62:	f002 fdb1 	bl	d7ac8 <_ZN9TimeClass6formatElPKc>
   d4f66:	9a00      	ldr	r2, [sp, #0]
   d4f68:	4909      	ldr	r1, [pc, #36]	; (d4f90 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d4f6a:	480a      	ldr	r0, [pc, #40]	; (d4f94 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d4f6c:	f7ff fd20 	bl	d49b0 <_ZNK5spark6Logger4infoEPKcz>
   d4f70:	4668      	mov	r0, sp
   d4f72:	f002 fc5e 	bl	d7832 <_ZN6StringD1Ev>
   d4f76:	e003      	b.n	d4f80 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
	}
	else {
		log.info("cloud time not valid");
   d4f78:	4907      	ldr	r1, [pc, #28]	; (d4f98 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d4f7a:	4806      	ldr	r0, [pc, #24]	; (d4f94 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d4f7c:	f7ff fd18 	bl	d49b0 <_ZNK5spark6Logger4infoEPKcz>
	}
	return bResult;
}
   d4f80:	4620      	mov	r0, r4
   d4f82:	b004      	add	sp, #16
   d4f84:	bd70      	pop	{r4, r5, r6, pc}
   d4f86:	bf00      	nop
   d4f88:	2003e0a0 	.word	0x2003e0a0
   d4f8c:	2003e480 	.word	0x2003e480
   d4f90:	000da9e8 	.word	0x000da9e8
   d4f94:	2003e1f0 	.word	0x2003e1f0
   d4f98:	000da9fe 	.word	0x000da9fe

000d4f9c <_ZN8MCP794104loopEv>:
	}

	setupDone = true;
}

void MCP79410::loop() {
   d4f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d4f9e:	7a45      	ldrb	r5, [r0, #9]
	}

	setupDone = true;
}

void MCP79410::loop() {
   d4fa0:	4604      	mov	r4, r0
	if (!timeSet) {
   d4fa2:	b98d      	cbnz	r5, d4fc8 <_ZN8MCP794104loopEv+0x2c>
		// Time has not been synchronized from the cloud
		if (Time.isValid()) {
   d4fa4:	f002 fdc2 	bl	d7b2c <_ZN9TimeClass7isValidEv>
   d4fa8:	b170      	cbz	r0, d4fc8 <_ZN8MCP794104loopEv+0x2c>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d4faa:	a802      	add	r0, sp, #8
        return CLOUD_FN(spark_sync_time_last(&tm, nullptr), 0);
   d4fac:	4629      	mov	r1, r5
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d4fae:	f840 5d04 	str.w	r5, [r0, #-4]!
        return CLOUD_FN(spark_sync_time_last(&tm, nullptr), 0);
   d4fb2:	f000 fafd 	bl	d55b0 <spark_sync_time_last>
			// Also check timeSyncedLast, because if we set Time from RTC, then Time will
			// be valid, but not synchronized yet
			unsigned long lastSync = Particle.timeSyncedLast();
			if (lastSync != 0) {
   d4fb6:	b138      	cbz	r0, d4fc8 <_ZN8MCP794104loopEv+0x2c>
				// Time is valid and synchronized
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d4fb8:	7ae3      	ldrb	r3, [r4, #11]
   d4fba:	07db      	lsls	r3, r3, #31
   d4fbc:	d502      	bpl.n	d4fc4 <_ZN8MCP794104loopEv+0x28>
					setRTCFromCloud();
   d4fbe:	4620      	mov	r0, r4
   d4fc0:	f7ff ffbc 	bl	d4f3c <_ZN8MCP7941015setRTCFromCloudEv>
				}
				timeSet = true;
   d4fc4:	2301      	movs	r3, #1
   d4fc6:	7263      	strb	r3, [r4, #9]
			}
		}
	}
}
   d4fc8:	b003      	add	sp, #12
   d4fca:	bd30      	pop	{r4, r5, pc}

000d4fcc <_ZN12MCP79410SRAM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d4fcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d4fd0:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d4fd4:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d4fd6:	6803      	ldr	r3, [r0, #0]
   d4fd8:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d4fda:	4605      	mov	r5, r0
   d4fdc:	460c      	mov	r4, r1
   d4fde:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d4fe0:	4798      	blx	r3
   d4fe2:	4580      	cmp	r8, r0
   d4fe4:	d80c      	bhi.n	d5000 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x34>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d4fe6:	f104 0220 	add.w	r2, r4, #32
   d4fea:	9600      	str	r6, [sp, #0]
   d4fec:	463b      	mov	r3, r7
   d4fee:	b2d2      	uxtb	r2, r2
   d4ff0:	216f      	movs	r1, #111	; 0x6f
   d4ff2:	6868      	ldr	r0, [r5, #4]
   d4ff4:	f7ff ff22 	bl	d4e3c <_ZN8MCP7941011deviceWriteEhhPKhj>

	return (stat == 0);
   d4ff8:	fab0 f080 	clz	r0, r0
   d4ffc:	0940      	lsrs	r0, r0, #5
   d4ffe:	e000      	b.n	d5002 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d5000:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d5002:	b002      	add	sp, #8
   d5004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5008 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d5008:	b538      	push	{r3, r4, r5, lr}
   d500a:	4605      	mov	r5, r0
   d500c:	2432      	movs	r4, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d500e:	2157      	movs	r1, #87	; 0x57
   d5010:	6868      	ldr	r0, [r5, #4]
   d5012:	f000 ff9f 	bl	d5f54 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d5016:	2101      	movs	r1, #1
   d5018:	6868      	ldr	r0, [r5, #4]
   d501a:	f000 ff9f 	bl	d5f5c <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d501e:	b108      	cbz	r0, d5024 <_ZN8MCP7941013waitForEEPROMEv+0x1c>

	return stat;
}

void MCP79410::waitForEEPROM() {
	for(size_t tries = 0; tries < 50; tries++) {
   d5020:	3c01      	subs	r4, #1
   d5022:	d1f4      	bne.n	d500e <_ZN8MCP7941013waitForEEPROMEv+0x6>
   d5024:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5028 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
	}

	return stat;
}

int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d5028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d502c:	4605      	mov	r5, r0
   d502e:	18d7      	adds	r7, r2, r3
   d5030:	4614      	mov	r4, r2
	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
		wire.write(addr + offset);
   d5032:	ebc2 0801 	rsb	r8, r2, r1
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d5036:	42bc      	cmp	r4, r7
   d5038:	d01e      	beq.n	d5078 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x50>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d503a:	2157      	movs	r1, #87	; 0x57
   d503c:	6868      	ldr	r0, [r5, #4]
   d503e:	f000 ff89 	bl	d5f54 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d5042:	eb08 0104 	add.w	r1, r8, r4
   d5046:	6868      	ldr	r0, [r5, #4]
   d5048:	f7ff fcae 	bl	d49a8 <_ZN7TwoWire5writeEj>
		// if (bufLen != 1) {
		//	log.trace("deviceWriteEEPROM addr=%02x count=%u", addr + offset, count);
		// }

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d504c:	6868      	ldr	r0, [r5, #4]
   d504e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5052:	6803      	ldr	r3, [r0, #0]
   d5054:	689b      	ldr	r3, [r3, #8]
   d5056:	4798      	blx	r3
		}

		stat = wire.endTransmission(true);
   d5058:	2101      	movs	r1, #1
   d505a:	6868      	ldr	r0, [r5, #4]
   d505c:	f000 ff7e 	bl	d5f5c <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d5060:	4606      	mov	r6, r0
   d5062:	b128      	cbz	r0, d5070 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x48>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d5064:	4602      	mov	r2, r0
   d5066:	4906      	ldr	r1, [pc, #24]	; (d5080 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d5068:	4806      	ldr	r0, [pc, #24]	; (d5084 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d506a:	f7ff fca1 	bl	d49b0 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d506e:	e004      	b.n	d507a <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x52>
		}

		waitForEEPROM();
   d5070:	4628      	mov	r0, r5
   d5072:	f7ff ffc9 	bl	d5008 <_ZN8MCP7941013waitForEEPROMEv>
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d5076:	e7de      	b.n	d5036 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d5078:	2600      	movs	r6, #0

		offset += count;
	}

	return stat;
}
   d507a:	4630      	mov	r0, r6
   d507c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5080:	000daa13 	.word	0x000daa13
   d5084:	2003e1f0 	.word	0x2003e1f0

000d5088 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d508c:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5090:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d5092:	6803      	ldr	r3, [r0, #0]
   d5094:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5096:	4604      	mov	r4, r0
   d5098:	460d      	mov	r5, r1
   d509a:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d509c:	4798      	blx	r3
   d509e:	4580      	cmp	r8, r0
   d50a0:	d80a      	bhi.n	d50b8 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x30>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d50a2:	4633      	mov	r3, r6
   d50a4:	463a      	mov	r2, r7
   d50a6:	b2e9      	uxtb	r1, r5
   d50a8:	6860      	ldr	r0, [r4, #4]
   d50aa:	f7ff ffbd 	bl	d5028 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>

	return (stat == 0);
   d50ae:	fab0 f080 	clz	r0, r0
   d50b2:	0940      	lsrs	r0, r0, #5
   d50b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d50b8:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);

	return (stat == 0);
}
   d50ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d50c0 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
		if (stat == 0) {
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d50c0:	b508      	push	{r3, lr}
   d50c2:	f000 f879 	bl	d51b8 <HAL_Pin_Map>
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x10>)
   d50c8:	4a02      	ldr	r2, [pc, #8]	; (d50d4 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x14>)
   d50ca:	601a      	str	r2, [r3, #0]
   d50cc:	bd08      	pop	{r3, pc}
   d50ce:	bf00      	nop
   d50d0:	2003e1f0 	.word	0x2003e1f0
   d50d4:	000daa34 	.word	0x000daa34

000d50d8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d50d8:	b508      	push	{r3, lr}
   d50da:	4b02      	ldr	r3, [pc, #8]	; (d50e4 <os_thread_is_current+0xc>)
   d50dc:	681b      	ldr	r3, [r3, #0]
   d50de:	689b      	ldr	r3, [r3, #8]
   d50e0:	9301      	str	r3, [sp, #4]
   d50e2:	bd08      	pop	{r3, pc}
   d50e4:	00030248 	.word	0x00030248

000d50e8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d50e8:	b508      	push	{r3, lr}
   d50ea:	4b02      	ldr	r3, [pc, #8]	; (d50f4 <os_thread_join+0xc>)
   d50ec:	681b      	ldr	r3, [r3, #0]
   d50ee:	691b      	ldr	r3, [r3, #16]
   d50f0:	9301      	str	r3, [sp, #4]
   d50f2:	bd08      	pop	{r3, pc}
   d50f4:	00030248 	.word	0x00030248

000d50f8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d50f8:	b508      	push	{r3, lr}
   d50fa:	4b02      	ldr	r3, [pc, #8]	; (d5104 <os_thread_cleanup+0xc>)
   d50fc:	681b      	ldr	r3, [r3, #0]
   d50fe:	695b      	ldr	r3, [r3, #20]
   d5100:	9301      	str	r3, [sp, #4]
   d5102:	bd08      	pop	{r3, pc}
   d5104:	00030248 	.word	0x00030248

000d5108 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5108:	b508      	push	{r3, lr}
   d510a:	4b02      	ldr	r3, [pc, #8]	; (d5114 <os_mutex_create+0xc>)
   d510c:	681b      	ldr	r3, [r3, #0]
   d510e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5110:	9301      	str	r3, [sp, #4]
   d5112:	bd08      	pop	{r3, pc}
   d5114:	00030248 	.word	0x00030248

000d5118 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5118:	b508      	push	{r3, lr}
   d511a:	4b02      	ldr	r3, [pc, #8]	; (d5124 <os_mutex_recursive_create+0xc>)
   d511c:	681b      	ldr	r3, [r3, #0]
   d511e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5120:	9301      	str	r3, [sp, #4]
   d5122:	bd08      	pop	{r3, pc}
   d5124:	00030248 	.word	0x00030248

000d5128 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5128:	b508      	push	{r3, lr}
   d512a:	4b02      	ldr	r3, [pc, #8]	; (d5134 <os_mutex_recursive_lock+0xc>)
   d512c:	681b      	ldr	r3, [r3, #0]
   d512e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5130:	9301      	str	r3, [sp, #4]
   d5132:	bd08      	pop	{r3, pc}
   d5134:	00030248 	.word	0x00030248

000d5138 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5138:	b508      	push	{r3, lr}
   d513a:	4b02      	ldr	r3, [pc, #8]	; (d5144 <os_mutex_recursive_unlock+0xc>)
   d513c:	681b      	ldr	r3, [r3, #0]
   d513e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5140:	9301      	str	r3, [sp, #4]
   d5142:	bd08      	pop	{r3, pc}
   d5144:	00030248 	.word	0x00030248

000d5148 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5148:	b508      	push	{r3, lr}
   d514a:	4b02      	ldr	r3, [pc, #8]	; (d5154 <HAL_RNG_GetRandomNumber+0xc>)
   d514c:	681b      	ldr	r3, [r3, #0]
   d514e:	685b      	ldr	r3, [r3, #4]
   d5150:	9301      	str	r3, [sp, #4]
   d5152:	bd08      	pop	{r3, pc}
   d5154:	00030218 	.word	0x00030218

000d5158 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5158:	b508      	push	{r3, lr}
   d515a:	4b02      	ldr	r3, [pc, #8]	; (d5164 <HAL_Delay_Microseconds+0xc>)
   d515c:	681b      	ldr	r3, [r3, #0]
   d515e:	68db      	ldr	r3, [r3, #12]
   d5160:	9301      	str	r3, [sp, #4]
   d5162:	bd08      	pop	{r3, pc}
   d5164:	00030218 	.word	0x00030218

000d5168 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5168:	b508      	push	{r3, lr}
   d516a:	4b02      	ldr	r3, [pc, #8]	; (d5174 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d516c:	681b      	ldr	r3, [r3, #0]
   d516e:	695b      	ldr	r3, [r3, #20]
   d5170:	9301      	str	r3, [sp, #4]
   d5172:	bd08      	pop	{r3, pc}
   d5174:	00030218 	.word	0x00030218

000d5178 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5178:	b508      	push	{r3, lr}
   d517a:	4b02      	ldr	r3, [pc, #8]	; (d5184 <HAL_RTC_Get_UnixTime+0xc>)
   d517c:	681b      	ldr	r3, [r3, #0]
   d517e:	69db      	ldr	r3, [r3, #28]
   d5180:	9301      	str	r3, [sp, #4]
   d5182:	bd08      	pop	{r3, pc}
   d5184:	00030218 	.word	0x00030218

000d5188 <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
   d5188:	b508      	push	{r3, lr}
   d518a:	4b02      	ldr	r3, [pc, #8]	; (d5194 <HAL_RTC_Set_UnixTime+0xc>)
   d518c:	681b      	ldr	r3, [r3, #0]
   d518e:	6a1b      	ldr	r3, [r3, #32]
   d5190:	9301      	str	r3, [sp, #4]
   d5192:	bd08      	pop	{r3, pc}
   d5194:	00030218 	.word	0x00030218

000d5198 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5198:	b508      	push	{r3, lr}
   d519a:	4b02      	ldr	r3, [pc, #8]	; (d51a4 <HAL_RTC_Time_Is_Valid+0xc>)
   d519c:	681b      	ldr	r3, [r3, #0]
   d519e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d51a0:	9301      	str	r3, [sp, #4]
   d51a2:	bd08      	pop	{r3, pc}
   d51a4:	00030218 	.word	0x00030218

000d51a8 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d51a8:	b508      	push	{r3, lr}
   d51aa:	4b02      	ldr	r3, [pc, #8]	; (d51b4 <hal_timer_millis+0xc>)
   d51ac:	681b      	ldr	r3, [r3, #0]
   d51ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d51b0:	9301      	str	r3, [sp, #4]
   d51b2:	bd08      	pop	{r3, pc}
   d51b4:	00030218 	.word	0x00030218

000d51b8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d51b8:	b508      	push	{r3, lr}
   d51ba:	4b02      	ldr	r3, [pc, #8]	; (d51c4 <HAL_Pin_Map+0xc>)
   d51bc:	681b      	ldr	r3, [r3, #0]
   d51be:	681b      	ldr	r3, [r3, #0]
   d51c0:	9301      	str	r3, [sp, #4]
   d51c2:	bd08      	pop	{r3, pc}
   d51c4:	0003022c 	.word	0x0003022c

000d51c8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d51c8:	b508      	push	{r3, lr}
   d51ca:	4b02      	ldr	r3, [pc, #8]	; (d51d4 <HAL_Validate_Pin_Function+0xc>)
   d51cc:	681b      	ldr	r3, [r3, #0]
   d51ce:	685b      	ldr	r3, [r3, #4]
   d51d0:	9301      	str	r3, [sp, #4]
   d51d2:	bd08      	pop	{r3, pc}
   d51d4:	0003022c 	.word	0x0003022c

000d51d8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d51d8:	b508      	push	{r3, lr}
   d51da:	4b02      	ldr	r3, [pc, #8]	; (d51e4 <HAL_Pin_Mode+0xc>)
   d51dc:	681b      	ldr	r3, [r3, #0]
   d51de:	689b      	ldr	r3, [r3, #8]
   d51e0:	9301      	str	r3, [sp, #4]
   d51e2:	bd08      	pop	{r3, pc}
   d51e4:	0003022c 	.word	0x0003022c

000d51e8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d51e8:	b508      	push	{r3, lr}
   d51ea:	4b02      	ldr	r3, [pc, #8]	; (d51f4 <HAL_Get_Pin_Mode+0xc>)
   d51ec:	681b      	ldr	r3, [r3, #0]
   d51ee:	68db      	ldr	r3, [r3, #12]
   d51f0:	9301      	str	r3, [sp, #4]
   d51f2:	bd08      	pop	{r3, pc}
   d51f4:	0003022c 	.word	0x0003022c

000d51f8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d51f8:	b508      	push	{r3, lr}
   d51fa:	4b02      	ldr	r3, [pc, #8]	; (d5204 <HAL_GPIO_Write+0xc>)
   d51fc:	681b      	ldr	r3, [r3, #0]
   d51fe:	691b      	ldr	r3, [r3, #16]
   d5200:	9301      	str	r3, [sp, #4]
   d5202:	bd08      	pop	{r3, pc}
   d5204:	0003022c 	.word	0x0003022c

000d5208 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d5208:	b508      	push	{r3, lr}
   d520a:	4b02      	ldr	r3, [pc, #8]	; (d5214 <HAL_Interrupts_Attach+0xc>)
   d520c:	681b      	ldr	r3, [r3, #0]
   d520e:	699b      	ldr	r3, [r3, #24]
   d5210:	9301      	str	r3, [sp, #4]
   d5212:	bd08      	pop	{r3, pc}
   d5214:	0003022c 	.word	0x0003022c

000d5218 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d5218:	b508      	push	{r3, lr}
   d521a:	4b02      	ldr	r3, [pc, #8]	; (d5224 <HAL_Interrupts_Detach+0xc>)
   d521c:	681b      	ldr	r3, [r3, #0]
   d521e:	69db      	ldr	r3, [r3, #28]
   d5220:	9301      	str	r3, [sp, #4]
   d5222:	bd08      	pop	{r3, pc}
   d5224:	0003022c 	.word	0x0003022c

000d5228 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5228:	b508      	push	{r3, lr}
   d522a:	4b02      	ldr	r3, [pc, #8]	; (d5234 <HAL_ADC_Read+0xc>)
   d522c:	681b      	ldr	r3, [r3, #0]
   d522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5230:	9301      	str	r3, [sp, #4]
   d5232:	bd08      	pop	{r3, pc}
   d5234:	0003022c 	.word	0x0003022c

000d5238 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5238:	b508      	push	{r3, lr}
   d523a:	4b02      	ldr	r3, [pc, #8]	; (d5244 <HAL_I2C_Begin+0xc>)
   d523c:	681b      	ldr	r3, [r3, #0]
   d523e:	68db      	ldr	r3, [r3, #12]
   d5240:	9301      	str	r3, [sp, #4]
   d5242:	bd08      	pop	{r3, pc}
   d5244:	00030228 	.word	0x00030228

000d5248 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d5248:	b508      	push	{r3, lr}
   d524a:	4b02      	ldr	r3, [pc, #8]	; (d5254 <HAL_I2C_Request_Data+0xc>)
   d524c:	681b      	ldr	r3, [r3, #0]
   d524e:	695b      	ldr	r3, [r3, #20]
   d5250:	9301      	str	r3, [sp, #4]
   d5252:	bd08      	pop	{r3, pc}
   d5254:	00030228 	.word	0x00030228

000d5258 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d5258:	b508      	push	{r3, lr}
   d525a:	4b02      	ldr	r3, [pc, #8]	; (d5264 <HAL_I2C_Begin_Transmission+0xc>)
   d525c:	681b      	ldr	r3, [r3, #0]
   d525e:	699b      	ldr	r3, [r3, #24]
   d5260:	9301      	str	r3, [sp, #4]
   d5262:	bd08      	pop	{r3, pc}
   d5264:	00030228 	.word	0x00030228

000d5268 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5268:	b508      	push	{r3, lr}
   d526a:	4b02      	ldr	r3, [pc, #8]	; (d5274 <HAL_I2C_End_Transmission+0xc>)
   d526c:	681b      	ldr	r3, [r3, #0]
   d526e:	69db      	ldr	r3, [r3, #28]
   d5270:	9301      	str	r3, [sp, #4]
   d5272:	bd08      	pop	{r3, pc}
   d5274:	00030228 	.word	0x00030228

000d5278 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5278:	b508      	push	{r3, lr}
   d527a:	4b02      	ldr	r3, [pc, #8]	; (d5284 <HAL_I2C_Write_Data+0xc>)
   d527c:	681b      	ldr	r3, [r3, #0]
   d527e:	6a1b      	ldr	r3, [r3, #32]
   d5280:	9301      	str	r3, [sp, #4]
   d5282:	bd08      	pop	{r3, pc}
   d5284:	00030228 	.word	0x00030228

000d5288 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5288:	b508      	push	{r3, lr}
   d528a:	4b02      	ldr	r3, [pc, #8]	; (d5294 <HAL_I2C_Available_Data+0xc>)
   d528c:	681b      	ldr	r3, [r3, #0]
   d528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5290:	9301      	str	r3, [sp, #4]
   d5292:	bd08      	pop	{r3, pc}
   d5294:	00030228 	.word	0x00030228

000d5298 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5298:	b508      	push	{r3, lr}
   d529a:	4b02      	ldr	r3, [pc, #8]	; (d52a4 <HAL_I2C_Read_Data+0xc>)
   d529c:	681b      	ldr	r3, [r3, #0]
   d529e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d52a0:	9301      	str	r3, [sp, #4]
   d52a2:	bd08      	pop	{r3, pc}
   d52a4:	00030228 	.word	0x00030228

000d52a8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d52a8:	b508      	push	{r3, lr}
   d52aa:	4b02      	ldr	r3, [pc, #8]	; (d52b4 <HAL_I2C_Peek_Data+0xc>)
   d52ac:	681b      	ldr	r3, [r3, #0]
   d52ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d52b0:	9301      	str	r3, [sp, #4]
   d52b2:	bd08      	pop	{r3, pc}
   d52b4:	00030228 	.word	0x00030228

000d52b8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d52b8:	b508      	push	{r3, lr}
   d52ba:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <HAL_I2C_Flush_Data+0xc>)
   d52bc:	681b      	ldr	r3, [r3, #0]
   d52be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52c0:	9301      	str	r3, [sp, #4]
   d52c2:	bd08      	pop	{r3, pc}
   d52c4:	00030228 	.word	0x00030228

000d52c8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d52c8:	b508      	push	{r3, lr}
   d52ca:	4b02      	ldr	r3, [pc, #8]	; (d52d4 <HAL_I2C_Is_Enabled+0xc>)
   d52cc:	681b      	ldr	r3, [r3, #0]
   d52ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d52d0:	9301      	str	r3, [sp, #4]
   d52d2:	bd08      	pop	{r3, pc}
   d52d4:	00030228 	.word	0x00030228

000d52d8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d52d8:	b508      	push	{r3, lr}
   d52da:	4b02      	ldr	r3, [pc, #8]	; (d52e4 <HAL_I2C_Init+0xc>)
   d52dc:	681b      	ldr	r3, [r3, #0]
   d52de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d52e0:	9301      	str	r3, [sp, #4]
   d52e2:	bd08      	pop	{r3, pc}
   d52e4:	00030228 	.word	0x00030228

000d52e8 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d52e8:	b508      	push	{r3, lr}
   d52ea:	4b02      	ldr	r3, [pc, #8]	; (d52f4 <HAL_I2C_Acquire+0xc>)
   d52ec:	681b      	ldr	r3, [r3, #0]
   d52ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d52f0:	9301      	str	r3, [sp, #4]
   d52f2:	bd08      	pop	{r3, pc}
   d52f4:	00030228 	.word	0x00030228

000d52f8 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d52f8:	b508      	push	{r3, lr}
   d52fa:	4b02      	ldr	r3, [pc, #8]	; (d5304 <HAL_I2C_Release+0xc>)
   d52fc:	681b      	ldr	r3, [r3, #0]
   d52fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5300:	9301      	str	r3, [sp, #4]
   d5302:	bd08      	pop	{r3, pc}
   d5304:	00030228 	.word	0x00030228

000d5308 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5308:	b508      	push	{r3, lr}
   d530a:	4b02      	ldr	r3, [pc, #8]	; (d5314 <inet_inet_ntop+0xc>)
   d530c:	681b      	ldr	r3, [r3, #0]
   d530e:	695b      	ldr	r3, [r3, #20]
   d5310:	9301      	str	r3, [sp, #4]
   d5312:	bd08      	pop	{r3, pc}
   d5314:	00030264 	.word	0x00030264

000d5318 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5318:	b508      	push	{r3, lr}
   d531a:	4b02      	ldr	r3, [pc, #8]	; (d5324 <netdb_freeaddrinfo+0xc>)
   d531c:	681b      	ldr	r3, [r3, #0]
   d531e:	689b      	ldr	r3, [r3, #8]
   d5320:	9301      	str	r3, [sp, #4]
   d5322:	bd08      	pop	{r3, pc}
   d5324:	00030268 	.word	0x00030268

000d5328 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5328:	b508      	push	{r3, lr}
   d532a:	4b02      	ldr	r3, [pc, #8]	; (d5334 <netdb_getaddrinfo+0xc>)
   d532c:	681b      	ldr	r3, [r3, #0]
   d532e:	68db      	ldr	r3, [r3, #12]
   d5330:	9301      	str	r3, [sp, #4]
   d5332:	bd08      	pop	{r3, pc}
   d5334:	00030268 	.word	0x00030268

000d5338 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5338:	b508      	push	{r3, lr}
   d533a:	4b02      	ldr	r3, [pc, #8]	; (d5344 <HAL_SPI_Init+0xc>)
   d533c:	681b      	ldr	r3, [r3, #0]
   d533e:	69db      	ldr	r3, [r3, #28]
   d5340:	9301      	str	r3, [sp, #4]
   d5342:	bd08      	pop	{r3, pc}
   d5344:	00030230 	.word	0x00030230

000d5348 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5348:	b508      	push	{r3, lr}
   d534a:	4b02      	ldr	r3, [pc, #8]	; (d5354 <HAL_SPI_Is_Enabled+0xc>)
   d534c:	681b      	ldr	r3, [r3, #0]
   d534e:	6a1b      	ldr	r3, [r3, #32]
   d5350:	9301      	str	r3, [sp, #4]
   d5352:	bd08      	pop	{r3, pc}
   d5354:	00030230 	.word	0x00030230

000d5358 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5358:	b508      	push	{r3, lr}
   d535a:	4b02      	ldr	r3, [pc, #8]	; (d5364 <HAL_USART_Init+0xc>)
   d535c:	681b      	ldr	r3, [r3, #0]
   d535e:	681b      	ldr	r3, [r3, #0]
   d5360:	9301      	str	r3, [sp, #4]
   d5362:	bd08      	pop	{r3, pc}
   d5364:	0003023c 	.word	0x0003023c

000d5368 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d5368:	b508      	push	{r3, lr}
   d536a:	4b02      	ldr	r3, [pc, #8]	; (d5374 <HAL_USART_End+0xc>)
   d536c:	681b      	ldr	r3, [r3, #0]
   d536e:	689b      	ldr	r3, [r3, #8]
   d5370:	9301      	str	r3, [sp, #4]
   d5372:	bd08      	pop	{r3, pc}
   d5374:	0003023c 	.word	0x0003023c

000d5378 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5378:	b508      	push	{r3, lr}
   d537a:	4b02      	ldr	r3, [pc, #8]	; (d5384 <HAL_USART_Write_Data+0xc>)
   d537c:	681b      	ldr	r3, [r3, #0]
   d537e:	68db      	ldr	r3, [r3, #12]
   d5380:	9301      	str	r3, [sp, #4]
   d5382:	bd08      	pop	{r3, pc}
   d5384:	0003023c 	.word	0x0003023c

000d5388 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5388:	b508      	push	{r3, lr}
   d538a:	4b02      	ldr	r3, [pc, #8]	; (d5394 <HAL_USART_Available_Data+0xc>)
   d538c:	681b      	ldr	r3, [r3, #0]
   d538e:	691b      	ldr	r3, [r3, #16]
   d5390:	9301      	str	r3, [sp, #4]
   d5392:	bd08      	pop	{r3, pc}
   d5394:	0003023c 	.word	0x0003023c

000d5398 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5398:	b508      	push	{r3, lr}
   d539a:	4b02      	ldr	r3, [pc, #8]	; (d53a4 <HAL_USART_Read_Data+0xc>)
   d539c:	681b      	ldr	r3, [r3, #0]
   d539e:	695b      	ldr	r3, [r3, #20]
   d53a0:	9301      	str	r3, [sp, #4]
   d53a2:	bd08      	pop	{r3, pc}
   d53a4:	0003023c 	.word	0x0003023c

000d53a8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d53a8:	b508      	push	{r3, lr}
   d53aa:	4b02      	ldr	r3, [pc, #8]	; (d53b4 <HAL_USART_Peek_Data+0xc>)
   d53ac:	681b      	ldr	r3, [r3, #0]
   d53ae:	699b      	ldr	r3, [r3, #24]
   d53b0:	9301      	str	r3, [sp, #4]
   d53b2:	bd08      	pop	{r3, pc}
   d53b4:	0003023c 	.word	0x0003023c

000d53b8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d53b8:	b508      	push	{r3, lr}
   d53ba:	4b02      	ldr	r3, [pc, #8]	; (d53c4 <HAL_USART_Flush_Data+0xc>)
   d53bc:	681b      	ldr	r3, [r3, #0]
   d53be:	69db      	ldr	r3, [r3, #28]
   d53c0:	9301      	str	r3, [sp, #4]
   d53c2:	bd08      	pop	{r3, pc}
   d53c4:	0003023c 	.word	0x0003023c

000d53c8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d53c8:	b508      	push	{r3, lr}
   d53ca:	4b02      	ldr	r3, [pc, #8]	; (d53d4 <HAL_USART_Is_Enabled+0xc>)
   d53cc:	681b      	ldr	r3, [r3, #0]
   d53ce:	6a1b      	ldr	r3, [r3, #32]
   d53d0:	9301      	str	r3, [sp, #4]
   d53d2:	bd08      	pop	{r3, pc}
   d53d4:	0003023c 	.word	0x0003023c

000d53d8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d53d8:	b508      	push	{r3, lr}
   d53da:	4b02      	ldr	r3, [pc, #8]	; (d53e4 <HAL_USART_Available_Data_For_Write+0xc>)
   d53dc:	681b      	ldr	r3, [r3, #0]
   d53de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d53e0:	9301      	str	r3, [sp, #4]
   d53e2:	bd08      	pop	{r3, pc}
   d53e4:	0003023c 	.word	0x0003023c

000d53e8 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d53e8:	b508      	push	{r3, lr}
   d53ea:	4b02      	ldr	r3, [pc, #8]	; (d53f4 <HAL_USART_BeginConfig+0xc>)
   d53ec:	681b      	ldr	r3, [r3, #0]
   d53ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d53f0:	9301      	str	r3, [sp, #4]
   d53f2:	bd08      	pop	{r3, pc}
   d53f4:	0003023c 	.word	0x0003023c

000d53f8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d53f8:	b508      	push	{r3, lr}
   d53fa:	4b02      	ldr	r3, [pc, #8]	; (d5404 <HAL_USB_USART_Init+0xc>)
   d53fc:	681b      	ldr	r3, [r3, #0]
   d53fe:	681b      	ldr	r3, [r3, #0]
   d5400:	9301      	str	r3, [sp, #4]
   d5402:	bd08      	pop	{r3, pc}
   d5404:	0003024c 	.word	0x0003024c

000d5408 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5408:	b508      	push	{r3, lr}
   d540a:	4b02      	ldr	r3, [pc, #8]	; (d5414 <HAL_USB_USART_Begin+0xc>)
   d540c:	681b      	ldr	r3, [r3, #0]
   d540e:	685b      	ldr	r3, [r3, #4]
   d5410:	9301      	str	r3, [sp, #4]
   d5412:	bd08      	pop	{r3, pc}
   d5414:	0003024c 	.word	0x0003024c

000d5418 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d5418:	b508      	push	{r3, lr}
   d541a:	4b02      	ldr	r3, [pc, #8]	; (d5424 <HAL_USB_USART_End+0xc>)
   d541c:	681b      	ldr	r3, [r3, #0]
   d541e:	689b      	ldr	r3, [r3, #8]
   d5420:	9301      	str	r3, [sp, #4]
   d5422:	bd08      	pop	{r3, pc}
   d5424:	0003024c 	.word	0x0003024c

000d5428 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5428:	b508      	push	{r3, lr}
   d542a:	4b02      	ldr	r3, [pc, #8]	; (d5434 <HAL_USB_USART_Available_Data+0xc>)
   d542c:	681b      	ldr	r3, [r3, #0]
   d542e:	691b      	ldr	r3, [r3, #16]
   d5430:	9301      	str	r3, [sp, #4]
   d5432:	bd08      	pop	{r3, pc}
   d5434:	0003024c 	.word	0x0003024c

000d5438 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5438:	b508      	push	{r3, lr}
   d543a:	4b02      	ldr	r3, [pc, #8]	; (d5444 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d543c:	681b      	ldr	r3, [r3, #0]
   d543e:	695b      	ldr	r3, [r3, #20]
   d5440:	9301      	str	r3, [sp, #4]
   d5442:	bd08      	pop	{r3, pc}
   d5444:	0003024c 	.word	0x0003024c

000d5448 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5448:	b508      	push	{r3, lr}
   d544a:	4b02      	ldr	r3, [pc, #8]	; (d5454 <HAL_USB_USART_Receive_Data+0xc>)
   d544c:	681b      	ldr	r3, [r3, #0]
   d544e:	699b      	ldr	r3, [r3, #24]
   d5450:	9301      	str	r3, [sp, #4]
   d5452:	bd08      	pop	{r3, pc}
   d5454:	0003024c 	.word	0x0003024c

000d5458 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5458:	b508      	push	{r3, lr}
   d545a:	4b02      	ldr	r3, [pc, #8]	; (d5464 <HAL_USB_USART_Send_Data+0xc>)
   d545c:	681b      	ldr	r3, [r3, #0]
   d545e:	69db      	ldr	r3, [r3, #28]
   d5460:	9301      	str	r3, [sp, #4]
   d5462:	bd08      	pop	{r3, pc}
   d5464:	0003024c 	.word	0x0003024c

000d5468 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5468:	b508      	push	{r3, lr}
   d546a:	4b02      	ldr	r3, [pc, #8]	; (d5474 <HAL_USB_USART_Flush_Data+0xc>)
   d546c:	681b      	ldr	r3, [r3, #0]
   d546e:	6a1b      	ldr	r3, [r3, #32]
   d5470:	9301      	str	r3, [sp, #4]
   d5472:	bd08      	pop	{r3, pc}
   d5474:	0003024c 	.word	0x0003024c

000d5478 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5478:	b508      	push	{r3, lr}
   d547a:	4b02      	ldr	r3, [pc, #8]	; (d5484 <panic_+0xc>)
   d547c:	681b      	ldr	r3, [r3, #0]
   d547e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5480:	9301      	str	r3, [sp, #4]
   d5482:	bd08      	pop	{r3, pc}
   d5484:	00030260 	.word	0x00030260

000d5488 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d5488:	b508      	push	{r3, lr}
   d548a:	4b02      	ldr	r3, [pc, #8]	; (d5494 <log_message_v+0xc>)
   d548c:	681b      	ldr	r3, [r3, #0]
   d548e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5490:	9301      	str	r3, [sp, #4]
   d5492:	bd08      	pop	{r3, pc}
   d5494:	00030260 	.word	0x00030260

000d5498 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d5498:	b508      	push	{r3, lr}
   d549a:	4b02      	ldr	r3, [pc, #8]	; (d54a4 <log_level_name+0xc>)
   d549c:	681b      	ldr	r3, [r3, #0]
   d549e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d54a0:	9301      	str	r3, [sp, #4]
   d54a2:	bd08      	pop	{r3, pc}
   d54a4:	00030260 	.word	0x00030260

000d54a8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d54a8:	b508      	push	{r3, lr}
   d54aa:	4b02      	ldr	r3, [pc, #8]	; (d54b4 <log_set_callbacks+0xc>)
   d54ac:	681b      	ldr	r3, [r3, #0]
   d54ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d54b0:	9301      	str	r3, [sp, #4]
   d54b2:	bd08      	pop	{r3, pc}
   d54b4:	00030260 	.word	0x00030260

000d54b8 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d54b8:	b508      	push	{r3, lr}
   d54ba:	4b02      	ldr	r3, [pc, #8]	; (d54c4 <system_mode+0xc>)
   d54bc:	681b      	ldr	r3, [r3, #0]
   d54be:	681b      	ldr	r3, [r3, #0]
   d54c0:	9301      	str	r3, [sp, #4]
   d54c2:	bd08      	pop	{r3, pc}
   d54c4:	00030220 	.word	0x00030220

000d54c8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d54c8:	b508      	push	{r3, lr}
   d54ca:	4b02      	ldr	r3, [pc, #8]	; (d54d4 <set_system_mode+0xc>)
   d54cc:	681b      	ldr	r3, [r3, #0]
   d54ce:	685b      	ldr	r3, [r3, #4]
   d54d0:	9301      	str	r3, [sp, #4]
   d54d2:	bd08      	pop	{r3, pc}
   d54d4:	00030220 	.word	0x00030220

000d54d8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d54d8:	b508      	push	{r3, lr}
   d54da:	4b02      	ldr	r3, [pc, #8]	; (d54e4 <system_thread_set_state+0xc>)
   d54dc:	681b      	ldr	r3, [r3, #0]
   d54de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d54e0:	9301      	str	r3, [sp, #4]
   d54e2:	bd08      	pop	{r3, pc}
   d54e4:	00030220 	.word	0x00030220

000d54e8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d54e8:	b508      	push	{r3, lr}
   d54ea:	4b02      	ldr	r3, [pc, #8]	; (d54f4 <application_thread_current+0xc>)
   d54ec:	681b      	ldr	r3, [r3, #0]
   d54ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d54f0:	9301      	str	r3, [sp, #4]
   d54f2:	bd08      	pop	{r3, pc}
   d54f4:	00030220 	.word	0x00030220

000d54f8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d54f8:	b508      	push	{r3, lr}
   d54fa:	4b02      	ldr	r3, [pc, #8]	; (d5504 <application_thread_invoke+0xc>)
   d54fc:	681b      	ldr	r3, [r3, #0]
   d54fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5500:	9301      	str	r3, [sp, #4]
   d5502:	bd08      	pop	{r3, pc}
   d5504:	00030220 	.word	0x00030220

000d5508 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5508:	b508      	push	{r3, lr}
   d550a:	4b02      	ldr	r3, [pc, #8]	; (d5514 <system_thread_get_state+0xc>)
   d550c:	681b      	ldr	r3, [r3, #0]
   d550e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5510:	9301      	str	r3, [sp, #4]
   d5512:	bd08      	pop	{r3, pc}
   d5514:	00030220 	.word	0x00030220

000d5518 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d5518:	b508      	push	{r3, lr}
   d551a:	4b02      	ldr	r3, [pc, #8]	; (d5524 <system_notify_time_changed+0xc>)
   d551c:	681b      	ldr	r3, [r3, #0]
   d551e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5520:	9301      	str	r3, [sp, #4]
   d5522:	bd08      	pop	{r3, pc}
   d5524:	00030220 	.word	0x00030220

000d5528 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5528:	b508      	push	{r3, lr}
   d552a:	4b03      	ldr	r3, [pc, #12]	; (d5538 <system_ctrl_set_app_request_handler+0x10>)
   d552c:	681b      	ldr	r3, [r3, #0]
   d552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5532:	9301      	str	r3, [sp, #4]
   d5534:	bd08      	pop	{r3, pc}
   d5536:	0000      	.short	0x0000
   d5538:	00030220 	.word	0x00030220

000d553c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d553c:	b508      	push	{r3, lr}
   d553e:	4b03      	ldr	r3, [pc, #12]	; (d554c <system_ctrl_set_result+0x10>)
   d5540:	681b      	ldr	r3, [r3, #0]
   d5542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5546:	9301      	str	r3, [sp, #4]
   d5548:	bd08      	pop	{r3, pc}
   d554a:	0000      	.short	0x0000
   d554c:	00030220 	.word	0x00030220

000d5550 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5550:	b508      	push	{r3, lr}
   d5552:	4b02      	ldr	r3, [pc, #8]	; (d555c <spark_variable+0xc>)
   d5554:	681b      	ldr	r3, [r3, #0]
   d5556:	681b      	ldr	r3, [r3, #0]
   d5558:	9301      	str	r3, [sp, #4]
   d555a:	bd08      	pop	{r3, pc}
   d555c:	00030244 	.word	0x00030244

000d5560 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5560:	b508      	push	{r3, lr}
   d5562:	4b02      	ldr	r3, [pc, #8]	; (d556c <spark_process+0xc>)
   d5564:	681b      	ldr	r3, [r3, #0]
   d5566:	689b      	ldr	r3, [r3, #8]
   d5568:	9301      	str	r3, [sp, #4]
   d556a:	bd08      	pop	{r3, pc}
   d556c:	00030244 	.word	0x00030244

000d5570 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d5570:	b508      	push	{r3, lr}
   d5572:	4b02      	ldr	r3, [pc, #8]	; (d557c <spark_cloud_flag_connect+0xc>)
   d5574:	681b      	ldr	r3, [r3, #0]
   d5576:	68db      	ldr	r3, [r3, #12]
   d5578:	9301      	str	r3, [sp, #4]
   d557a:	bd08      	pop	{r3, pc}
   d557c:	00030244 	.word	0x00030244

000d5580 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5580:	b508      	push	{r3, lr}
   d5582:	4b02      	ldr	r3, [pc, #8]	; (d558c <spark_cloud_flag_connected+0xc>)
   d5584:	681b      	ldr	r3, [r3, #0]
   d5586:	695b      	ldr	r3, [r3, #20]
   d5588:	9301      	str	r3, [sp, #4]
   d558a:	bd08      	pop	{r3, pc}
   d558c:	00030244 	.word	0x00030244

000d5590 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5590:	b508      	push	{r3, lr}
   d5592:	4b02      	ldr	r3, [pc, #8]	; (d559c <spark_send_event+0xc>)
   d5594:	681b      	ldr	r3, [r3, #0]
   d5596:	6a1b      	ldr	r3, [r3, #32]
   d5598:	9301      	str	r3, [sp, #4]
   d559a:	bd08      	pop	{r3, pc}
   d559c:	00030244 	.word	0x00030244

000d55a0 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d55a0:	b508      	push	{r3, lr}
   d55a2:	4b02      	ldr	r3, [pc, #8]	; (d55ac <spark_sync_time_pending+0xc>)
   d55a4:	681b      	ldr	r3, [r3, #0]
   d55a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55a8:	9301      	str	r3, [sp, #4]
   d55aa:	bd08      	pop	{r3, pc}
   d55ac:	00030244 	.word	0x00030244

000d55b0 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
   d55b0:	b508      	push	{r3, lr}
   d55b2:	4b02      	ldr	r3, [pc, #8]	; (d55bc <spark_sync_time_last+0xc>)
   d55b4:	681b      	ldr	r3, [r3, #0]
   d55b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d55b8:	9301      	str	r3, [sp, #4]
   d55ba:	bd08      	pop	{r3, pc}
   d55bc:	00030244 	.word	0x00030244

000d55c0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d55c0:	b508      	push	{r3, lr}
   d55c2:	4b02      	ldr	r3, [pc, #8]	; (d55cc <spark_set_random_seed_from_cloud_handler+0xc>)
   d55c4:	681b      	ldr	r3, [r3, #0]
   d55c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d55c8:	9301      	str	r3, [sp, #4]
   d55ca:	bd08      	pop	{r3, pc}
   d55cc:	00030244 	.word	0x00030244

000d55d0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d55d0:	b508      	push	{r3, lr}
   d55d2:	4b02      	ldr	r3, [pc, #8]	; (d55dc <network_connect+0xc>)
   d55d4:	681b      	ldr	r3, [r3, #0]
   d55d6:	685b      	ldr	r3, [r3, #4]
   d55d8:	9301      	str	r3, [sp, #4]
   d55da:	bd08      	pop	{r3, pc}
   d55dc:	00030240 	.word	0x00030240

000d55e0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d55e0:	b508      	push	{r3, lr}
   d55e2:	4b02      	ldr	r3, [pc, #8]	; (d55ec <network_connecting+0xc>)
   d55e4:	681b      	ldr	r3, [r3, #0]
   d55e6:	689b      	ldr	r3, [r3, #8]
   d55e8:	9301      	str	r3, [sp, #4]
   d55ea:	bd08      	pop	{r3, pc}
   d55ec:	00030240 	.word	0x00030240

000d55f0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d55f0:	b508      	push	{r3, lr}
   d55f2:	4b02      	ldr	r3, [pc, #8]	; (d55fc <network_disconnect+0xc>)
   d55f4:	681b      	ldr	r3, [r3, #0]
   d55f6:	68db      	ldr	r3, [r3, #12]
   d55f8:	9301      	str	r3, [sp, #4]
   d55fa:	bd08      	pop	{r3, pc}
   d55fc:	00030240 	.word	0x00030240

000d5600 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5600:	b508      	push	{r3, lr}
   d5602:	4b02      	ldr	r3, [pc, #8]	; (d560c <network_ready+0xc>)
   d5604:	681b      	ldr	r3, [r3, #0]
   d5606:	691b      	ldr	r3, [r3, #16]
   d5608:	9301      	str	r3, [sp, #4]
   d560a:	bd08      	pop	{r3, pc}
   d560c:	00030240 	.word	0x00030240

000d5610 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5610:	b508      	push	{r3, lr}
   d5612:	4b02      	ldr	r3, [pc, #8]	; (d561c <network_on+0xc>)
   d5614:	681b      	ldr	r3, [r3, #0]
   d5616:	695b      	ldr	r3, [r3, #20]
   d5618:	9301      	str	r3, [sp, #4]
   d561a:	bd08      	pop	{r3, pc}
   d561c:	00030240 	.word	0x00030240

000d5620 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5620:	b508      	push	{r3, lr}
   d5622:	4b02      	ldr	r3, [pc, #8]	; (d562c <network_off+0xc>)
   d5624:	681b      	ldr	r3, [r3, #0]
   d5626:	699b      	ldr	r3, [r3, #24]
   d5628:	9301      	str	r3, [sp, #4]
   d562a:	bd08      	pop	{r3, pc}
   d562c:	00030240 	.word	0x00030240

000d5630 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5630:	b508      	push	{r3, lr}
   d5632:	4b02      	ldr	r3, [pc, #8]	; (d563c <network_listen+0xc>)
   d5634:	681b      	ldr	r3, [r3, #0]
   d5636:	69db      	ldr	r3, [r3, #28]
   d5638:	9301      	str	r3, [sp, #4]
   d563a:	bd08      	pop	{r3, pc}
   d563c:	00030240 	.word	0x00030240

000d5640 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5640:	b508      	push	{r3, lr}
   d5642:	4b02      	ldr	r3, [pc, #8]	; (d564c <network_listening+0xc>)
   d5644:	681b      	ldr	r3, [r3, #0]
   d5646:	6a1b      	ldr	r3, [r3, #32]
   d5648:	9301      	str	r3, [sp, #4]
   d564a:	bd08      	pop	{r3, pc}
   d564c:	00030240 	.word	0x00030240

000d5650 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5650:	b508      	push	{r3, lr}
   d5652:	4b02      	ldr	r3, [pc, #8]	; (d565c <network_set_listen_timeout+0xc>)
   d5654:	681b      	ldr	r3, [r3, #0]
   d5656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5658:	9301      	str	r3, [sp, #4]
   d565a:	bd08      	pop	{r3, pc}
   d565c:	00030240 	.word	0x00030240

000d5660 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5660:	b508      	push	{r3, lr}
   d5662:	4b02      	ldr	r3, [pc, #8]	; (d566c <network_get_listen_timeout+0xc>)
   d5664:	681b      	ldr	r3, [r3, #0]
   d5666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5668:	9301      	str	r3, [sp, #4]
   d566a:	bd08      	pop	{r3, pc}
   d566c:	00030240 	.word	0x00030240

000d5670 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5670:	b508      	push	{r3, lr}
   d5672:	4b02      	ldr	r3, [pc, #8]	; (d567c <malloc+0xc>)
   d5674:	681b      	ldr	r3, [r3, #0]
   d5676:	681b      	ldr	r3, [r3, #0]
   d5678:	9301      	str	r3, [sp, #4]
   d567a:	bd08      	pop	{r3, pc}
   d567c:	0003021c 	.word	0x0003021c

000d5680 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5680:	b508      	push	{r3, lr}
   d5682:	4b02      	ldr	r3, [pc, #8]	; (d568c <free+0xc>)
   d5684:	681b      	ldr	r3, [r3, #0]
   d5686:	685b      	ldr	r3, [r3, #4]
   d5688:	9301      	str	r3, [sp, #4]
   d568a:	bd08      	pop	{r3, pc}
   d568c:	0003021c 	.word	0x0003021c

000d5690 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5690:	b508      	push	{r3, lr}
   d5692:	4b02      	ldr	r3, [pc, #8]	; (d569c <realloc+0xc>)
   d5694:	681b      	ldr	r3, [r3, #0]
   d5696:	689b      	ldr	r3, [r3, #8]
   d5698:	9301      	str	r3, [sp, #4]
   d569a:	bd08      	pop	{r3, pc}
   d569c:	0003021c 	.word	0x0003021c

000d56a0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d56a0:	b508      	push	{r3, lr}
   d56a2:	4b02      	ldr	r3, [pc, #8]	; (d56ac <siprintf+0xc>)
   d56a4:	681b      	ldr	r3, [r3, #0]
   d56a6:	691b      	ldr	r3, [r3, #16]
   d56a8:	9301      	str	r3, [sp, #4]
   d56aa:	bd08      	pop	{r3, pc}
   d56ac:	0003021c 	.word	0x0003021c

000d56b0 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d56b0:	b508      	push	{r3, lr}
   d56b2:	4b02      	ldr	r3, [pc, #8]	; (d56bc <siscanf+0xc>)
   d56b4:	681b      	ldr	r3, [r3, #0]
   d56b6:	699b      	ldr	r3, [r3, #24]
   d56b8:	9301      	str	r3, [sp, #4]
   d56ba:	bd08      	pop	{r3, pc}
   d56bc:	0003021c 	.word	0x0003021c

000d56c0 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d56c0:	b508      	push	{r3, lr}
   d56c2:	4b02      	ldr	r3, [pc, #8]	; (d56cc <snprintf+0xc>)
   d56c4:	681b      	ldr	r3, [r3, #0]
   d56c6:	69db      	ldr	r3, [r3, #28]
   d56c8:	9301      	str	r3, [sp, #4]
   d56ca:	bd08      	pop	{r3, pc}
   d56cc:	0003021c 	.word	0x0003021c

000d56d0 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d56d0:	b508      	push	{r3, lr}
   d56d2:	4b02      	ldr	r3, [pc, #8]	; (d56dc <sniprintf+0xc>)
   d56d4:	681b      	ldr	r3, [r3, #0]
   d56d6:	6a1b      	ldr	r3, [r3, #32]
   d56d8:	9301      	str	r3, [sp, #4]
   d56da:	bd08      	pop	{r3, pc}
   d56dc:	0003021c 	.word	0x0003021c

000d56e0 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d56e0:	b508      	push	{r3, lr}
   d56e2:	4b02      	ldr	r3, [pc, #8]	; (d56ec <vsnprintf+0xc>)
   d56e4:	681b      	ldr	r3, [r3, #0]
   d56e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d56e8:	9301      	str	r3, [sp, #4]
   d56ea:	bd08      	pop	{r3, pc}
   d56ec:	0003021c 	.word	0x0003021c

000d56f0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d56f0:	b508      	push	{r3, lr}
   d56f2:	4b02      	ldr	r3, [pc, #8]	; (d56fc <abort+0xc>)
   d56f4:	681b      	ldr	r3, [r3, #0]
   d56f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d56f8:	9301      	str	r3, [sp, #4]
   d56fa:	bd08      	pop	{r3, pc}
   d56fc:	0003021c 	.word	0x0003021c

000d5700 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5700:	b508      	push	{r3, lr}
   d5702:	4b02      	ldr	r3, [pc, #8]	; (d570c <_malloc_r+0xc>)
   d5704:	681b      	ldr	r3, [r3, #0]
   d5706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5708:	9301      	str	r3, [sp, #4]
   d570a:	bd08      	pop	{r3, pc}
   d570c:	0003021c 	.word	0x0003021c

000d5710 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5710:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5712:	6883      	ldr	r3, [r0, #8]
   d5714:	4604      	mov	r4, r0
   d5716:	b90b      	cbnz	r3, d571c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5718:	f002 fcad 	bl	d8076 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d571c:	68c3      	ldr	r3, [r0, #12]
   d571e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5720:	68a3      	ldr	r3, [r4, #8]
   d5722:	b11b      	cbz	r3, d572c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5724:	2203      	movs	r2, #3
   d5726:	4621      	mov	r1, r4
   d5728:	4620      	mov	r0, r4
   d572a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d572c:	4620      	mov	r0, r4
   d572e:	2110      	movs	r1, #16
}
   d5730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5734:	f002 bc85 	b.w	d8042 <_ZdlPvj>

000d5738 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5738:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d573a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d573c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d573e:	689b      	ldr	r3, [r3, #8]
   d5740:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5742:	68a3      	ldr	r3, [r4, #8]
   d5744:	3b01      	subs	r3, #1
   d5746:	60a3      	str	r3, [r4, #8]
   d5748:	b92b      	cbnz	r3, d5756 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d574a:	6823      	ldr	r3, [r4, #0]
   d574c:	4620      	mov	r0, r4
   d574e:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5754:	4718      	bx	r3
   d5756:	bd10      	pop	{r4, pc}

000d5758 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5758:	680b      	ldr	r3, [r1, #0]
   d575a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d575c:	b113      	cbz	r3, d5764 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d575e:	685a      	ldr	r2, [r3, #4]
   d5760:	3201      	adds	r2, #1
   d5762:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5764:	4770      	bx	lr

000d5766 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5766:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5768:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d576a:	6803      	ldr	r3, [r0, #0]
   d576c:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d576e:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d5770:	d00c      	beq.n	d578c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d5772:	b114      	cbz	r4, d577a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5774:	6863      	ldr	r3, [r4, #4]
   d5776:	3301      	adds	r3, #1
   d5778:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d577a:	6828      	ldr	r0, [r5, #0]
   d577c:	b128      	cbz	r0, d578a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d577e:	6843      	ldr	r3, [r0, #4]
   d5780:	3b01      	subs	r3, #1
   d5782:	6043      	str	r3, [r0, #4]
   d5784:	b90b      	cbnz	r3, d578a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d5786:	f7ff ffd7 	bl	d5738 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d578a:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d578c:	4628      	mov	r0, r5
   d578e:	bd38      	pop	{r3, r4, r5, pc}

000d5790 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5790:	4802      	ldr	r0, [pc, #8]	; (d579c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5792:	2300      	movs	r3, #0
   d5794:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5796:	f7ff bcbf 	b.w	d5118 <os_mutex_recursive_create>
   d579a:	bf00      	nop
   d579c:	2003e1f4 	.word	0x2003e1f4

000d57a0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d57a0:	2200      	movs	r2, #0
   d57a2:	4611      	mov	r1, r2
   d57a4:	6840      	ldr	r0, [r0, #4]
   d57a6:	f7ff bf2b 	b.w	d5600 <network_ready>

000d57aa <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d57aa:	2200      	movs	r2, #0
   d57ac:	4611      	mov	r1, r2
   d57ae:	6840      	ldr	r0, [r0, #4]
   d57b0:	f7ff bf46 	b.w	d5640 <network_listening>

000d57b4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d57b4:	2200      	movs	r2, #0
   d57b6:	4611      	mov	r1, r2
   d57b8:	6840      	ldr	r0, [r0, #4]
   d57ba:	f7ff bf51 	b.w	d5660 <network_get_listen_timeout>

000d57be <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d57be:	2200      	movs	r2, #0
   d57c0:	6840      	ldr	r0, [r0, #4]
   d57c2:	f7ff bf45 	b.w	d5650 <network_set_listen_timeout>

000d57c6 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d57c6:	2200      	movs	r2, #0
   d57c8:	f081 0101 	eor.w	r1, r1, #1
   d57cc:	6840      	ldr	r0, [r0, #4]
   d57ce:	f7ff bf2f 	b.w	d5630 <network_listen>

000d57d2 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d57d2:	2300      	movs	r3, #0
   d57d4:	461a      	mov	r2, r3
   d57d6:	4619      	mov	r1, r3
   d57d8:	6840      	ldr	r0, [r0, #4]
   d57da:	f7ff bf21 	b.w	d5620 <network_off>

000d57de <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d57de:	2300      	movs	r3, #0
   d57e0:	461a      	mov	r2, r3
   d57e2:	4619      	mov	r1, r3
   d57e4:	6840      	ldr	r0, [r0, #4]
   d57e6:	f7ff bf13 	b.w	d5610 <network_on>

000d57ea <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d57ea:	2200      	movs	r2, #0
   d57ec:	4611      	mov	r1, r2
   d57ee:	6840      	ldr	r0, [r0, #4]
   d57f0:	f7ff bef6 	b.w	d55e0 <network_connecting>

000d57f4 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d57f4:	2200      	movs	r2, #0
   d57f6:	2102      	movs	r1, #2
   d57f8:	6840      	ldr	r0, [r0, #4]
   d57fa:	f7ff bef9 	b.w	d55f0 <network_disconnect>

000d57fe <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d57fe:	2300      	movs	r3, #0
   d5800:	461a      	mov	r2, r3
   d5802:	6840      	ldr	r0, [r0, #4]
   d5804:	f7ff bee4 	b.w	d55d0 <network_connect>

000d5808 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5808:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d580a:	4c08      	ldr	r4, [pc, #32]	; (d582c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d580c:	2528      	movs	r5, #40	; 0x28
   d580e:	462a      	mov	r2, r5
   d5810:	2100      	movs	r1, #0
   d5812:	4620      	mov	r0, r4
   d5814:	f003 fba6 	bl	d8f64 <memset>
        cid = -1;
   d5818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d581c:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d581e:	4b04      	ldr	r3, [pc, #16]	; (d5830 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5820:	8025      	strh	r5, [r4, #0]
   d5822:	2204      	movs	r2, #4
   d5824:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5826:	4a03      	ldr	r2, [pc, #12]	; (d5834 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5828:	601a      	str	r2, [r3, #0]
   d582a:	bd38      	pop	{r3, r4, r5, pc}
   d582c:	2003e200 	.word	0x2003e200
   d5830:	2003e1f8 	.word	0x2003e1f8
   d5834:	000daa64 	.word	0x000daa64

000d5838 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5838:	4770      	bx	lr

000d583a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d583a:	2000      	movs	r0, #0
   d583c:	4770      	bx	lr

000d583e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d583e:	b510      	push	{r4, lr}
   d5840:	2110      	movs	r1, #16
   d5842:	4604      	mov	r4, r0
   d5844:	f002 fbfd 	bl	d8042 <_ZdlPvj>
   d5848:	4620      	mov	r0, r4
   d584a:	bd10      	pop	{r4, pc}

000d584c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d584c:	b508      	push	{r3, lr}
      { delete this; }
   d584e:	b108      	cbz	r0, d5854 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5850:	f7ff fff5 	bl	d583e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5854:	bd08      	pop	{r3, pc}

000d5856 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5856:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5858:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d585a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d585c:	b113      	cbz	r3, d5864 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d585e:	2203      	movs	r2, #3
   d5860:	4601      	mov	r1, r0
   d5862:	4798      	blx	r3
    }
   d5864:	4620      	mov	r0, r4
   d5866:	bd10      	pop	{r4, pc}

000d5868 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5868:	2200      	movs	r2, #0
   d586a:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d586c:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d586e:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5872:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5874:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5878:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d587a:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d587c:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d587e:	680c      	ldr	r4, [r1, #0]
   d5880:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5882:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5884:	bd10      	pop	{r4, pc}

000d5886 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5886:	b510      	push	{r4, lr}
   d5888:	4604      	mov	r4, r0
    free((void*)msg_);
   d588a:	6800      	ldr	r0, [r0, #0]
   d588c:	f7ff fef8 	bl	d5680 <free>
}
   d5890:	4620      	mov	r0, r4
   d5892:	bd10      	pop	{r4, pc}

000d5894 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5894:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5896:	68c4      	ldr	r4, [r0, #12]
   d5898:	b1f4      	cbz	r4, d58d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d589a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d589c:	2b02      	cmp	r3, #2
   d589e:	d103      	bne.n	d58a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d58a0:	f104 000c 	add.w	r0, r4, #12
   d58a4:	f7ff ffef 	bl	d5886 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d58a8:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d58aa:	b135      	cbz	r5, d58ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d58ac:	4628      	mov	r0, r5
   d58ae:	f7ff ffd2 	bl	d5856 <_ZNSt14_Function_baseD1Ev>
   d58b2:	2110      	movs	r1, #16
   d58b4:	4628      	mov	r0, r5
   d58b6:	f002 fbc4 	bl	d8042 <_ZdlPvj>
   d58ba:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d58bc:	b135      	cbz	r5, d58cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d58be:	4628      	mov	r0, r5
   d58c0:	f7ff ffc9 	bl	d5856 <_ZNSt14_Function_baseD1Ev>
   d58c4:	2110      	movs	r1, #16
   d58c6:	4628      	mov	r0, r5
   d58c8:	f002 fbbb 	bl	d8042 <_ZdlPvj>
   d58cc:	4620      	mov	r0, r4
   d58ce:	2114      	movs	r1, #20
   d58d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d58d4:	f002 bbb5 	b.w	d8042 <_ZdlPvj>
   d58d8:	bd38      	pop	{r3, r4, r5, pc}

000d58da <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d58da:	b513      	push	{r0, r1, r4, lr}
   d58dc:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d58de:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d58e2:	2300      	movs	r3, #0
   d58e4:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d58e6:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d58e8:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d58ea:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d58ec:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d58ee:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d58f0:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d58f2:	f7fe fd52 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58f6:	4620      	mov	r0, r4
   d58f8:	b002      	add	sp, #8
   d58fa:	bd10      	pop	{r4, pc}

000d58fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d58fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d58fe:	460c      	mov	r4, r1
   d5900:	ad02      	add	r5, sp, #8
   d5902:	f854 3b04 	ldr.w	r3, [r4], #4
   d5906:	f845 3d08 	str.w	r3, [r5, #-8]!
   d590a:	4606      	mov	r6, r0
   d590c:	460f      	mov	r7, r1
   d590e:	a801      	add	r0, sp, #4
   d5910:	4621      	mov	r1, r4
   d5912:	f7ff ff21 	bl	d5758 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5916:	4629      	mov	r1, r5
   d5918:	4630      	mov	r0, r6
   d591a:	f7ff ffde 	bl	d58da <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d591e:	a801      	add	r0, sp, #4
   d5920:	f7fe fd3b 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5924:	4620      	mov	r0, r4
   d5926:	f7fe fd38 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d592a:	4638      	mov	r0, r7
   d592c:	2108      	movs	r1, #8
   d592e:	f002 fb88 	bl	d8042 <_ZdlPvj>
        return p;
    }
   d5932:	4630      	mov	r0, r6
   d5934:	b003      	add	sp, #12
   d5936:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5938 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5938:	b513      	push	{r0, r1, r4, lr}
   d593a:	460b      	mov	r3, r1
   d593c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d593e:	c803      	ldmia	r0, {r0, r1}
   d5940:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5944:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5948:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d594c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5950:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5954:	b002      	add	sp, #8
   d5956:	bd10      	pop	{r4, pc}

000d5958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5958:	b538      	push	{r3, r4, r5, lr}
   d595a:	2300      	movs	r3, #0
   d595c:	4604      	mov	r4, r0
   d595e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5960:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5962:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5964:	f7fe fb99 	bl	d409a <_Znwj>
   d5968:	b128      	cbz	r0, d5976 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d596a:	2301      	movs	r3, #1
   d596c:	6043      	str	r3, [r0, #4]
   d596e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5970:	4b02      	ldr	r3, [pc, #8]	; (d597c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5972:	6003      	str	r3, [r0, #0]
   d5974:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5976:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5978:	4620      	mov	r0, r4
   d597a:	bd38      	pop	{r3, r4, r5, pc}
   d597c:	000daa98 	.word	0x000daa98

000d5980 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5980:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5982:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5984:	b90a      	cbnz	r2, d598a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5986:	f002 fb76 	bl	d8076 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d598a:	68c3      	ldr	r3, [r0, #12]
    }
   d598c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5990:	4718      	bx	r3

000d5992 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5992:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5994:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5996:	f100 0110 	add.w	r1, r0, #16
   d599a:	f7ff fff1 	bl	d5980 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d599e:	bd08      	pop	{r3, pc}

000d59a0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d59a0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d59a2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d59a4:	b90a      	cbnz	r2, d59aa <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d59a6:	f002 fb66 	bl	d8076 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d59aa:	68c3      	ldr	r3, [r0, #12]
    }
   d59ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d59b0:	4718      	bx	r3

000d59b2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d59b2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d59b4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d59b6:	f100 0110 	add.w	r1, r0, #16
   d59ba:	f7ff fff1 	bl	d59a0 <_ZNKSt8functionIFvRKbEEclES1_>
   d59be:	bd08      	pop	{r3, pc}

000d59c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d59c0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d59c2:	2300      	movs	r3, #0
   d59c4:	6083      	str	r3, [r0, #8]
   d59c6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d59c8:	4604      	mov	r4, r0
   d59ca:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d59cc:	b12b      	cbz	r3, d59da <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d59ce:	2202      	movs	r2, #2
   d59d0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d59d2:	68eb      	ldr	r3, [r5, #12]
   d59d4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d59d6:	68ab      	ldr	r3, [r5, #8]
   d59d8:	60a3      	str	r3, [r4, #8]
	}
    }
   d59da:	4620      	mov	r0, r4
   d59dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d59e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d59e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d59e2:	b089      	sub	sp, #36	; 0x24
   d59e4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d59e6:	4668      	mov	r0, sp
   d59e8:	f7ff ff3e 	bl	d5868 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d59ec:	2300      	movs	r3, #0
   d59ee:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d59f2:	f04f 0202 	mov.w	r2, #2
   d59f6:	e8d4 3f4f 	ldrexb	r3, [r4]
   d59fa:	2b00      	cmp	r3, #0
   d59fc:	d103      	bne.n	d5a06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d59fe:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5a02:	2900      	cmp	r1, #0
   d5a04:	d1f7      	bne.n	d59f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d5a06:	d002      	beq.n	d5a0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5a08:	f88d 3008 	strb.w	r3, [sp, #8]
   d5a0c:	e063      	b.n	d5ad6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5a0e:	f114 050c 	adds.w	r5, r4, #12
   d5a12:	d003      	beq.n	d5a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5a14:	4669      	mov	r1, sp
   d5a16:	4628      	mov	r0, r5
   d5a18:	f7ff ff26 	bl	d5868 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5a1c:	f3bf 8f5f 	dmb	sy
   d5a20:	2301      	movs	r3, #1
   d5a22:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5a24:	2000      	movs	r0, #0
   d5a26:	f104 0308 	add.w	r3, r4, #8
   d5a2a:	f3bf 8f5f 	dmb	sy
   d5a2e:	e853 6f00 	ldrex	r6, [r3]
   d5a32:	e843 0200 	strex	r2, r0, [r3]
   d5a36:	2a00      	cmp	r2, #0
   d5a38:	d1f9      	bne.n	d5a2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5a3a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5a3e:	2e00      	cmp	r6, #0
   d5a40:	d049      	beq.n	d5ad6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5a42:	f7ff fd51 	bl	d54e8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5a46:	b120      	cbz	r0, d5a52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5a48:	4629      	mov	r1, r5
   d5a4a:	4630      	mov	r0, r6
   d5a4c:	f7ff ff98 	bl	d5980 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5a50:	e03a      	b.n	d5ac8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5a52:	4631      	mov	r1, r6
   d5a54:	a802      	add	r0, sp, #8
   d5a56:	f7ff ffb3 	bl	d59c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5a5a:	68e0      	ldr	r0, [r4, #12]
   d5a5c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5a60:	b108      	cbz	r0, d5a66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5a62:	f003 fd27 	bl	d94b4 <strdup>
   d5a66:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5a68:	2010      	movs	r0, #16
   d5a6a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5a6e:	f7fe fb14 	bl	d409a <_Znwj>
   d5a72:	4605      	mov	r5, r0
   d5a74:	b1e8      	cbz	r0, d5ab2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a76:	2700      	movs	r7, #0
   d5a78:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a7a:	2018      	movs	r0, #24
   d5a7c:	f7fe fb0d 	bl	d409a <_Znwj>
   d5a80:	4604      	mov	r4, r0
   d5a82:	b188      	cbz	r0, d5aa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5a84:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a86:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5a88:	a802      	add	r0, sp, #8
   d5a8a:	f7ff ff55 	bl	d5938 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a8e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5a90:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a92:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a94:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5a96:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5a98:	a906      	add	r1, sp, #24
   d5a9a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a9c:	60e3      	str	r3, [r4, #12]
   d5a9e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5aa2:	9205      	str	r2, [sp, #20]
   d5aa4:	f7ff fee0 	bl	d5868 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5aa8:	4b0d      	ldr	r3, [pc, #52]	; (d5ae0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5aaa:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5aac:	4b0d      	ldr	r3, [pc, #52]	; (d5ae4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5aae:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5ab0:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5ab2:	a806      	add	r0, sp, #24
   d5ab4:	f7ff fee7 	bl	d5886 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5ab8:	a802      	add	r0, sp, #8
   d5aba:	f7ff fecc 	bl	d5856 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5abe:	2200      	movs	r2, #0
   d5ac0:	4629      	mov	r1, r5
   d5ac2:	4809      	ldr	r0, [pc, #36]	; (d5ae8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5ac4:	f7ff fd18 	bl	d54f8 <application_thread_invoke>
   d5ac8:	4630      	mov	r0, r6
   d5aca:	f7ff fec4 	bl	d5856 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5ace:	2110      	movs	r1, #16
   d5ad0:	4630      	mov	r0, r6
   d5ad2:	f002 fab6 	bl	d8042 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d5ad6:	4668      	mov	r0, sp
   d5ad8:	f7ff fed5 	bl	d5886 <_ZN8particle5ErrorD1Ev>
    }
   d5adc:	b009      	add	sp, #36	; 0x24
   d5ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5ae0:	000d5993 	.word	0x000d5993
   d5ae4:	000d5c09 	.word	0x000d5c09
   d5ae8:	000d5711 	.word	0x000d5711

000d5aec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5af0:	b08b      	sub	sp, #44	; 0x2c
   d5af2:	4606      	mov	r6, r0
   d5af4:	460f      	mov	r7, r1
   d5af6:	4690      	mov	r8, r2
   d5af8:	4699      	mov	r9, r3
   d5afa:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5afe:	f7ff fd3f 	bl	d5580 <spark_cloud_flag_connected>
   d5b02:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d5b04:	4683      	mov	fp, r0
   d5b06:	bb30      	cbnz	r0, d5b56 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5b08:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5b0c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5b0e:	a905      	add	r1, sp, #20
   d5b10:	4628      	mov	r0, r5
   d5b12:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5b16:	f7ff fea7 	bl	d5868 <_ZN8particle5ErrorC1EOS0_>
   d5b1a:	2014      	movs	r0, #20
   d5b1c:	f7fe fabd 	bl	d409a <_Znwj>
   d5b20:	4604      	mov	r4, r0
   d5b22:	b158      	cbz	r0, d5b3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5b24:	2302      	movs	r3, #2
   d5b26:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5b28:	2301      	movs	r3, #1
   d5b2a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5b2c:	f8c0 b004 	str.w	fp, [r0, #4]
   d5b30:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5b34:	4629      	mov	r1, r5
   d5b36:	300c      	adds	r0, #12
   d5b38:	f7ff fe96 	bl	d5868 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5b3c:	4630      	mov	r0, r6
   d5b3e:	4621      	mov	r1, r4
   d5b40:	f840 4b04 	str.w	r4, [r0], #4
   d5b44:	f7ff ff08 	bl	d5958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5b48:	4628      	mov	r0, r5
   d5b4a:	f7ff fe9c 	bl	d5886 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5b4e:	a805      	add	r0, sp, #20
   d5b50:	f7ff fe99 	bl	d5886 <_ZN8particle5ErrorD1Ev>
   d5b54:	e052      	b.n	d5bfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5b56:	2400      	movs	r4, #0
   d5b58:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5b5a:	2014      	movs	r0, #20
   d5b5c:	606c      	str	r4, [r5, #4]
   d5b5e:	60ac      	str	r4, [r5, #8]
   d5b60:	9307      	str	r3, [sp, #28]
   d5b62:	f7fe fa9a 	bl	d409a <_Znwj>
   d5b66:	4601      	mov	r1, r0
   d5b68:	b118      	cbz	r0, d5b72 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5b6a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5b6c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5b6e:	6044      	str	r4, [r0, #4]
   d5b70:	6084      	str	r4, [r0, #8]
   d5b72:	a804      	add	r0, sp, #16
   d5b74:	9103      	str	r1, [sp, #12]
   d5b76:	f7ff feef 	bl	d5958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5b7a:	4b22      	ldr	r3, [pc, #136]	; (d5c04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5b7c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5b7e:	2008      	movs	r0, #8
   d5b80:	f7fe fa8b 	bl	d409a <_Znwj>
   d5b84:	4604      	mov	r4, r0
   d5b86:	b128      	cbz	r0, d5b94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b88:	9b03      	ldr	r3, [sp, #12]
   d5b8a:	f840 3b04 	str.w	r3, [r0], #4
   d5b8e:	a904      	add	r1, sp, #16
   d5b90:	f7ff fde2 	bl	d5758 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5b94:	9500      	str	r5, [sp, #0]
   d5b96:	fa5f f38a 	uxtb.w	r3, sl
   d5b9a:	464a      	mov	r2, r9
   d5b9c:	4641      	mov	r1, r8
   d5b9e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5ba0:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5ba2:	f7ff fcf5 	bl	d5590 <spark_send_event>
   d5ba6:	b920      	cbnz	r0, d5bb2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5ba8:	9b03      	ldr	r3, [sp, #12]
   d5baa:	785b      	ldrb	r3, [r3, #1]
   d5bac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5bb0:	b183      	cbz	r3, d5bd4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5bb2:	9b03      	ldr	r3, [sp, #12]
   d5bb4:	9305      	str	r3, [sp, #20]
   d5bb6:	a904      	add	r1, sp, #16
   d5bb8:	a806      	add	r0, sp, #24
   d5bba:	f7ff fdcd 	bl	d5758 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5bbe:	a905      	add	r1, sp, #20
   d5bc0:	4630      	mov	r0, r6
   d5bc2:	f7ff fe8a 	bl	d58da <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5bc6:	a806      	add	r0, sp, #24
   d5bc8:	f7fe fbe7 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5bcc:	a804      	add	r0, sp, #16
   d5bce:	f7fe fbe4 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5bd2:	e013      	b.n	d5bfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5bd4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5bd8:	a905      	add	r1, sp, #20
   d5bda:	a803      	add	r0, sp, #12
   d5bdc:	9205      	str	r2, [sp, #20]
   d5bde:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5be2:	f7ff fefd 	bl	d59e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5be6:	a805      	add	r0, sp, #20
   d5be8:	f7ff fe4d 	bl	d5886 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5bec:	a805      	add	r0, sp, #20
   d5bee:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5bf0:	f7ff fe84 	bl	d58fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5bf4:	a806      	add	r0, sp, #24
   d5bf6:	f7fe fbd0 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5bfa:	e7da      	b.n	d5bb2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5bfc:	4630      	mov	r0, r6
   d5bfe:	b00b      	add	sp, #44	; 0x2c
   d5c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5c04:	000d5d79 	.word	0x000d5d79

000d5c08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5c08:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c0c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5c0e:	d006      	beq.n	d5c1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5c10:	2a03      	cmp	r2, #3
   d5c12:	d017      	beq.n	d5c44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5c14:	2a01      	cmp	r2, #1
   d5c16:	d122      	bne.n	d5c5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5c18:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5c1a:	6003      	str	r3, [r0, #0]
	      break;
   d5c1c:	e01f      	b.n	d5c5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5c1e:	2018      	movs	r0, #24
   d5c20:	680e      	ldr	r6, [r1, #0]
   d5c22:	f7fe fa3a 	bl	d409a <_Znwj>
   d5c26:	4605      	mov	r5, r0
   d5c28:	b150      	cbz	r0, d5c40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5c2a:	4631      	mov	r1, r6
   d5c2c:	f7ff fec8 	bl	d59c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5c30:	6930      	ldr	r0, [r6, #16]
   d5c32:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5c36:	b108      	cbz	r0, d5c3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5c38:	f003 fc3c 	bl	d94b4 <strdup>
   d5c3c:	6128      	str	r0, [r5, #16]
   d5c3e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5c40:	6025      	str	r5, [r4, #0]
   d5c42:	e00c      	b.n	d5c5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5c44:	6804      	ldr	r4, [r0, #0]
   d5c46:	b154      	cbz	r4, d5c5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5c48:	f104 0010 	add.w	r0, r4, #16
   d5c4c:	f7ff fe1b 	bl	d5886 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5c50:	4620      	mov	r0, r4
   d5c52:	f7ff fe00 	bl	d5856 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5c56:	2118      	movs	r1, #24
   d5c58:	4620      	mov	r0, r4
   d5c5a:	f002 f9f2 	bl	d8042 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5c5e:	2000      	movs	r0, #0
   d5c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c62 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5c62:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c64:	2300      	movs	r3, #0
   d5c66:	6083      	str	r3, [r0, #8]
   d5c68:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5c6a:	4604      	mov	r4, r0
   d5c6c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5c6e:	b12b      	cbz	r3, d5c7c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5c70:	2202      	movs	r2, #2
   d5c72:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5c74:	68eb      	ldr	r3, [r5, #12]
   d5c76:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5c78:	68ab      	ldr	r3, [r5, #8]
   d5c7a:	60a3      	str	r3, [r4, #8]
	}
    }
   d5c7c:	4620      	mov	r0, r4
   d5c7e:	bd38      	pop	{r3, r4, r5, pc}

000d5c80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5c80:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5c82:	b570      	push	{r4, r5, r6, lr}
   d5c84:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5c86:	d006      	beq.n	d5c96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5c88:	2a03      	cmp	r2, #3
   d5c8a:	d011      	beq.n	d5cb0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5c8c:	2a01      	cmp	r2, #1
   d5c8e:	d118      	bne.n	d5cc2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5c90:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5c92:	6003      	str	r3, [r0, #0]
	      break;
   d5c94:	e015      	b.n	d5cc2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5c96:	2014      	movs	r0, #20
   d5c98:	680e      	ldr	r6, [r1, #0]
   d5c9a:	f7fe f9fe 	bl	d409a <_Znwj>
   d5c9e:	4605      	mov	r5, r0
   d5ca0:	b120      	cbz	r0, d5cac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5ca2:	4631      	mov	r1, r6
   d5ca4:	f7ff ffdd 	bl	d5c62 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5ca8:	7c33      	ldrb	r3, [r6, #16]
   d5caa:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5cac:	6025      	str	r5, [r4, #0]
   d5cae:	e008      	b.n	d5cc2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5cb0:	6804      	ldr	r4, [r0, #0]
   d5cb2:	b134      	cbz	r4, d5cc2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5cb4:	4620      	mov	r0, r4
   d5cb6:	f7ff fdce 	bl	d5856 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5cba:	2114      	movs	r1, #20
   d5cbc:	4620      	mov	r0, r4
   d5cbe:	f002 f9c0 	bl	d8042 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5cc2:	2000      	movs	r0, #0
   d5cc4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5cc8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5cc8:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5cca:	2300      	movs	r3, #0
   d5ccc:	b087      	sub	sp, #28
   d5cce:	460c      	mov	r4, r1
   d5cd0:	f3bf 8f5f 	dmb	sy
   d5cd4:	e850 6f00 	ldrex	r6, [r0]
   d5cd8:	e840 3200 	strex	r2, r3, [r0]
   d5cdc:	2a00      	cmp	r2, #0
   d5cde:	d1f9      	bne.n	d5cd4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5ce0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5ce4:	2e00      	cmp	r6, #0
   d5ce6:	d03f      	beq.n	d5d68 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5ce8:	4618      	mov	r0, r3
   d5cea:	f7ff fbfd 	bl	d54e8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5cee:	4607      	mov	r7, r0
   d5cf0:	b120      	cbz	r0, d5cfc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5cf2:	4621      	mov	r1, r4
   d5cf4:	4630      	mov	r0, r6
   d5cf6:	f7ff fe53 	bl	d59a0 <_ZNKSt8functionIFvRKbEEclES1_>
   d5cfa:	e02e      	b.n	d5d5a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5cfc:	4631      	mov	r1, r6
   d5cfe:	a801      	add	r0, sp, #4
   d5d00:	f7ff ffaf 	bl	d5c62 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5d04:	7823      	ldrb	r3, [r4, #0]
   d5d06:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5d0a:	2010      	movs	r0, #16
   d5d0c:	f7fe f9c5 	bl	d409a <_Znwj>
   d5d10:	4605      	mov	r5, r0
   d5d12:	b1d0      	cbz	r0, d5d4a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5d14:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5d16:	2014      	movs	r0, #20
   d5d18:	f7fe f9bf 	bl	d409a <_Znwj>
   d5d1c:	4604      	mov	r4, r0
   d5d1e:	b178      	cbz	r0, d5d40 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5d20:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5d22:	4601      	mov	r1, r0
   d5d24:	a801      	add	r0, sp, #4
   d5d26:	f7ff fe07 	bl	d5938 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d2a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5d2c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d2e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d30:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5d32:	9203      	str	r2, [sp, #12]
   d5d34:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d36:	60e3      	str	r3, [r4, #12]
   d5d38:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5d3c:	9204      	str	r2, [sp, #16]
   d5d3e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5d40:	4b0a      	ldr	r3, [pc, #40]	; (d5d6c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5d42:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5d44:	4b0a      	ldr	r3, [pc, #40]	; (d5d70 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5d46:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5d48:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5d4a:	a801      	add	r0, sp, #4
   d5d4c:	f7ff fd83 	bl	d5856 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5d50:	2200      	movs	r2, #0
   d5d52:	4629      	mov	r1, r5
   d5d54:	4807      	ldr	r0, [pc, #28]	; (d5d74 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5d56:	f7ff fbcf 	bl	d54f8 <application_thread_invoke>
   d5d5a:	4630      	mov	r0, r6
   d5d5c:	f7ff fd7b 	bl	d5856 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5d60:	2110      	movs	r1, #16
   d5d62:	4630      	mov	r0, r6
   d5d64:	f002 f96d 	bl	d8042 <_ZdlPvj>
        }
    }
   d5d68:	b007      	add	sp, #28
   d5d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5d6c:	000d59b3 	.word	0x000d59b3
   d5d70:	000d5c81 	.word	0x000d5c81
   d5d74:	000d5711 	.word	0x000d5711

000d5d78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5d78:	b530      	push	{r4, r5, lr}
   d5d7a:	b085      	sub	sp, #20
   d5d7c:	4604      	mov	r4, r0
   d5d7e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5d80:	4668      	mov	r0, sp
   d5d82:	4611      	mov	r1, r2
   d5d84:	f7ff fdba 	bl	d58fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5d88:	b17c      	cbz	r4, d5daa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5d8a:	b224      	sxth	r4, r4
   d5d8c:	4628      	mov	r0, r5
   d5d8e:	b10d      	cbz	r5, d5d94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5d90:	f003 fb90 	bl	d94b4 <strdup>
   d5d94:	9002      	str	r0, [sp, #8]
   d5d96:	a902      	add	r1, sp, #8
   d5d98:	4668      	mov	r0, sp
   d5d9a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5d9e:	f7ff fe1f 	bl	d59e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5da2:	a802      	add	r0, sp, #8
   d5da4:	f7ff fd6f 	bl	d5886 <_ZN8particle5ErrorD1Ev>
   d5da8:	e01d      	b.n	d5de6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5daa:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5dac:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5db0:	f04f 0201 	mov.w	r2, #1
   d5db4:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5db8:	42a3      	cmp	r3, r4
   d5dba:	d103      	bne.n	d5dc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5dbc:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5dc0:	2900      	cmp	r1, #0
   d5dc2:	d1f7      	bne.n	d5db4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5dc4:	d002      	beq.n	d5dcc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5dc6:	f88d 3008 	strb.w	r3, [sp, #8]
   d5dca:	e00c      	b.n	d5de6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5dcc:	f110 010c 	adds.w	r1, r0, #12
   d5dd0:	f04f 0301 	mov.w	r3, #1
   d5dd4:	bf18      	it	ne
   d5dd6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5dd8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5ddc:	3004      	adds	r0, #4
   d5dde:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5de2:	f7ff ff71 	bl	d5cc8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5de6:	a801      	add	r0, sp, #4
   d5de8:	f7fe fad7 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5dec:	b005      	add	sp, #20
   d5dee:	bd30      	pop	{r4, r5, pc}

000d5df0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5df0:	2200      	movs	r2, #0
   d5df2:	4611      	mov	r1, r2
   d5df4:	6840      	ldr	r0, [r0, #4]
   d5df6:	f7ff bc23 	b.w	d5640 <network_listening>

000d5dfa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5dfa:	2200      	movs	r2, #0
   d5dfc:	4611      	mov	r1, r2
   d5dfe:	6840      	ldr	r0, [r0, #4]
   d5e00:	f7ff bc2e 	b.w	d5660 <network_get_listen_timeout>

000d5e04 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5e04:	2200      	movs	r2, #0
   d5e06:	6840      	ldr	r0, [r0, #4]
   d5e08:	f7ff bc22 	b.w	d5650 <network_set_listen_timeout>

000d5e0c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5e0c:	2200      	movs	r2, #0
   d5e0e:	f081 0101 	eor.w	r1, r1, #1
   d5e12:	6840      	ldr	r0, [r0, #4]
   d5e14:	f7ff bc0c 	b.w	d5630 <network_listen>

000d5e18 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5e18:	2300      	movs	r3, #0
   d5e1a:	461a      	mov	r2, r3
   d5e1c:	4619      	mov	r1, r3
   d5e1e:	6840      	ldr	r0, [r0, #4]
   d5e20:	f7ff bbfe 	b.w	d5620 <network_off>

000d5e24 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5e24:	2300      	movs	r3, #0
   d5e26:	461a      	mov	r2, r3
   d5e28:	4619      	mov	r1, r3
   d5e2a:	6840      	ldr	r0, [r0, #4]
   d5e2c:	f7ff bbf0 	b.w	d5610 <network_on>

000d5e30 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5e30:	2200      	movs	r2, #0
   d5e32:	4611      	mov	r1, r2
   d5e34:	6840      	ldr	r0, [r0, #4]
   d5e36:	f7ff bbe3 	b.w	d5600 <network_ready>

000d5e3a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5e3a:	2200      	movs	r2, #0
   d5e3c:	4611      	mov	r1, r2
   d5e3e:	6840      	ldr	r0, [r0, #4]
   d5e40:	f7ff bbce 	b.w	d55e0 <network_connecting>

000d5e44 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5e44:	2200      	movs	r2, #0
   d5e46:	2102      	movs	r1, #2
   d5e48:	6840      	ldr	r0, [r0, #4]
   d5e4a:	f7ff bbd1 	b.w	d55f0 <network_disconnect>

000d5e4e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5e4e:	2300      	movs	r3, #0
   d5e50:	461a      	mov	r2, r3
   d5e52:	6840      	ldr	r0, [r0, #4]
   d5e54:	f7ff bbbc 	b.w	d55d0 <network_connect>

000d5e58 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5e58:	4b02      	ldr	r3, [pc, #8]	; (d5e64 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5e5a:	2203      	movs	r2, #3
   d5e5c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5e5e:	4a02      	ldr	r2, [pc, #8]	; (d5e68 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5e60:	601a      	str	r2, [r3, #0]
   d5e62:	4770      	bx	lr
   d5e64:	2003e228 	.word	0x2003e228
   d5e68:	000daab4 	.word	0x000daab4

000d5e6c <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d5e6c:	6800      	ldr	r0, [r0, #0]
   d5e6e:	f000 b880 	b.w	d5f72 <_ZN7TwoWire4lockEv>

000d5e72 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d5e72:	b510      	push	{r4, lr}
   d5e74:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d5e76:	6001      	str	r1, [r0, #0]
   d5e78:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d5e7a:	b10a      	cbz	r2, d5e80 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d5e7c:	f7ff fff6 	bl	d5e6c <_ZN9FuelGauge4lockEv>
    }
}
   d5e80:	4620      	mov	r0, r4
   d5e82:	bd10      	pop	{r4, pc}

000d5e84 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d5e84:	b538      	push	{r3, r4, r5, lr}
   d5e86:	4604      	mov	r4, r0
   d5e88:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d5e8a:	f002 f893 	bl	d7fb4 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d5e8e:	462a      	mov	r2, r5
   d5e90:	4601      	mov	r1, r0
   d5e92:	4620      	mov	r0, r4
   d5e94:	f7ff ffed 	bl	d5e72 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d5e98:	4620      	mov	r0, r4
   d5e9a:	bd38      	pop	{r3, r4, r5, pc}

000d5e9c <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d5e9c:	6800      	ldr	r0, [r0, #0]
   d5e9e:	f000 b871 	b.w	d5f84 <_ZN7TwoWire6unlockEv>

000d5ea2 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d5ea2:	b510      	push	{r4, lr}
{
    if (lock_) {
   d5ea4:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d5ea6:	4604      	mov	r4, r0
{
    if (lock_) {
   d5ea8:	b10b      	cbz	r3, d5eae <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d5eaa:	f7ff fff7 	bl	d5e9c <_ZN9FuelGauge6unlockEv>
    }
}
   d5eae:	4620      	mov	r0, r4
   d5eb0:	bd10      	pop	{r4, pc}

000d5eb2 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5eb2:	4770      	bx	lr

000d5eb4 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5eb6:	4606      	mov	r6, r0
   d5eb8:	4615      	mov	r5, r2
   d5eba:	460c      	mov	r4, r1
   d5ebc:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5ebe:	42bc      	cmp	r4, r7
   d5ec0:	d006      	beq.n	d5ed0 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5ec2:	6833      	ldr	r3, [r6, #0]
   d5ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5ec8:	689b      	ldr	r3, [r3, #8]
   d5eca:	4630      	mov	r0, r6
   d5ecc:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5ece:	e7f6      	b.n	d5ebe <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5ed0:	4628      	mov	r0, r5
   d5ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ed4 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5ed4:	2200      	movs	r2, #0
   d5ed6:	7c00      	ldrb	r0, [r0, #16]
   d5ed8:	f7ff b9ce 	b.w	d5278 <HAL_I2C_Write_Data>

000d5edc <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5edc:	2100      	movs	r1, #0
   d5ede:	7c00      	ldrb	r0, [r0, #16]
   d5ee0:	f7ff b9d2 	b.w	d5288 <HAL_I2C_Available_Data>

000d5ee4 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5ee4:	2100      	movs	r1, #0
   d5ee6:	7c00      	ldrb	r0, [r0, #16]
   d5ee8:	f7ff b9d6 	b.w	d5298 <HAL_I2C_Read_Data>

000d5eec <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5eec:	2100      	movs	r1, #0
   d5eee:	7c00      	ldrb	r0, [r0, #16]
   d5ef0:	f7ff b9da 	b.w	d52a8 <HAL_I2C_Peek_Data>

000d5ef4 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5ef4:	2100      	movs	r1, #0
   d5ef6:	7c00      	ldrb	r0, [r0, #16]
   d5ef8:	f7ff b9de 	b.w	d52b8 <HAL_I2C_Flush_Data>

000d5efc <_ZN7TwoWireD0Ev>:
   d5efc:	b510      	push	{r4, lr}
   d5efe:	2114      	movs	r1, #20
   d5f00:	4604      	mov	r4, r0
   d5f02:	f002 f89e 	bl	d8042 <_ZdlPvj>
   d5f06:	4620      	mov	r0, r4
   d5f08:	bd10      	pop	{r4, pc}
	...

000d5f0c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5f0c:	b510      	push	{r4, lr}
   d5f0e:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5f10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5f14:	4608      	mov	r0, r1
   d5f16:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5f18:	2100      	movs	r1, #0
   d5f1a:	4b04      	ldr	r3, [pc, #16]	; (d5f2c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5f1c:	7420      	strb	r0, [r4, #16]
   d5f1e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5f20:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5f22:	f7ff f9d9 	bl	d52d8 <HAL_I2C_Init>

}
   d5f26:	4620      	mov	r0, r4
   d5f28:	bd10      	pop	{r4, pc}
   d5f2a:	bf00      	nop
   d5f2c:	000daae8 	.word	0x000daae8

000d5f30 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5f30:	2300      	movs	r3, #0
   d5f32:	461a      	mov	r2, r3
   d5f34:	4619      	mov	r1, r3
   d5f36:	7c00      	ldrb	r0, [r0, #16]
   d5f38:	f7ff b97e 	b.w	d5238 <HAL_I2C_Begin>

000d5f3c <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d5f3c:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d5f3e:	2400      	movs	r4, #0
   d5f40:	7c00      	ldrb	r0, [r0, #16]
   d5f42:	9400      	str	r4, [sp, #0]
   d5f44:	f7ff f980 	bl	d5248 <HAL_I2C_Request_Data>
  return result;
}
   d5f48:	b2c0      	uxtb	r0, r0
   d5f4a:	b002      	add	sp, #8
   d5f4c:	bd10      	pop	{r4, pc}

000d5f4e <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d5f4e:	2301      	movs	r3, #1
   d5f50:	f7ff bff4 	b.w	d5f3c <_ZN7TwoWire11requestFromEhhh>

000d5f54 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5f54:	2200      	movs	r2, #0
   d5f56:	7c00      	ldrb	r0, [r0, #16]
   d5f58:	f7ff b97e 	b.w	d5258 <HAL_I2C_Begin_Transmission>

000d5f5c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5f5c:	2200      	movs	r2, #0
   d5f5e:	7c00      	ldrb	r0, [r0, #16]
   d5f60:	f7ff b982 	b.w	d5268 <HAL_I2C_End_Transmission>

000d5f64 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5f64:	2101      	movs	r1, #1
   d5f66:	f7ff bff9 	b.w	d5f5c <_ZN7TwoWire15endTransmissionEh>

000d5f6a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5f6a:	2100      	movs	r1, #0
   d5f6c:	7c00      	ldrb	r0, [r0, #16]
   d5f6e:	f7ff b9ab 	b.w	d52c8 <HAL_I2C_Is_Enabled>

000d5f72 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d5f72:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d5f74:	2100      	movs	r1, #0
   d5f76:	7c00      	ldrb	r0, [r0, #16]
   d5f78:	f7ff f9b6 	bl	d52e8 <HAL_I2C_Acquire>
}
   d5f7c:	fab0 f080 	clz	r0, r0
   d5f80:	0940      	lsrs	r0, r0, #5
   d5f82:	bd08      	pop	{r3, pc}

000d5f84 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d5f84:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d5f86:	2100      	movs	r1, #0
   d5f88:	7c00      	ldrb	r0, [r0, #16]
   d5f8a:	f7ff f9b5 	bl	d52f8 <HAL_I2C_Release>
}
   d5f8e:	fab0 f080 	clz	r0, r0
   d5f92:	0940      	lsrs	r0, r0, #5
   d5f94:	bd08      	pop	{r3, pc}

000d5f96 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d5f96:	4700      	bx	r0

000d5f98 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d5f98:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5f9a:	b085      	sub	sp, #20
   d5f9c:	461c      	mov	r4, r3
   d5f9e:	460e      	mov	r6, r1
   d5fa0:	4617      	mov	r7, r2
   d5fa2:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d5fa4:	f7ff f938 	bl	d5218 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d5fa8:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d5faa:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d5fac:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d5fb0:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d5fb2:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d5fb6:	bfa5      	ittet	ge
   d5fb8:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d5fbc:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d5fc0:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d5fc2:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d5fc4:	9300      	str	r3, [sp, #0]
   d5fc6:	4632      	mov	r2, r6
   d5fc8:	463b      	mov	r3, r7
   d5fca:	4906      	ldr	r1, [pc, #24]	; (d5fe4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d5fcc:	bfa8      	it	ge
   d5fce:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d5fd2:	4628      	mov	r0, r5
   d5fd4:	f7ff f918 	bl	d5208 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d5fd8:	fab0 f080 	clz	r0, r0
   d5fdc:	0940      	lsrs	r0, r0, #5
   d5fde:	b005      	add	sp, #20
   d5fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5fe2:	bf00      	nop
   d5fe4:	000d5f97 	.word	0x000d5f97

000d5fe8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5fe8:	4770      	bx	lr

000d5fea <_ZN9IPAddressD0Ev>:
   d5fea:	b510      	push	{r4, lr}
   d5fec:	2118      	movs	r1, #24
   d5fee:	4604      	mov	r4, r0
   d5ff0:	f002 f827 	bl	d8042 <_ZdlPvj>
   d5ff4:	4620      	mov	r0, r4
   d5ff6:	bd10      	pop	{r4, pc}

000d5ff8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5ffa:	7d03      	ldrb	r3, [r0, #20]
   d5ffc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5ffe:	b08d      	sub	sp, #52	; 0x34
   d6000:	460e      	mov	r6, r1
   d6002:	f100 0704 	add.w	r7, r0, #4
   d6006:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d600a:	d002      	beq.n	d6012 <_ZNK9IPAddress7printToER5Print+0x1a>
   d600c:	f100 0508 	add.w	r5, r0, #8
   d6010:	e018      	b.n	d6044 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6012:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6014:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6016:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d601a:	232f      	movs	r3, #47	; 0x2f
   d601c:	462a      	mov	r2, r5
   d601e:	200a      	movs	r0, #10
   d6020:	f7ff f972 	bl	d5308 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6024:	4628      	mov	r0, r5
   d6026:	f003 ff75 	bl	d9f14 <strlen>
   d602a:	6833      	ldr	r3, [r6, #0]
   d602c:	4602      	mov	r2, r0
   d602e:	68db      	ldr	r3, [r3, #12]
   d6030:	4629      	mov	r1, r5
   d6032:	4630      	mov	r0, r6
   d6034:	4798      	blx	r3
   d6036:	e00f      	b.n	d6058 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6038:	b124      	cbz	r4, d6044 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d603a:	212e      	movs	r1, #46	; 0x2e
   d603c:	4630      	mov	r0, r6
   d603e:	f001 fb3d 	bl	d76bc <_ZN5Print5printEc>
   d6042:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6044:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6048:	220a      	movs	r2, #10
   d604a:	4630      	mov	r0, r6
   d604c:	f001 fb72 	bl	d7734 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6050:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6052:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6054:	d1f0      	bne.n	d6038 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6056:	4620      	mov	r0, r4
    }
    return n;
}
   d6058:	b00d      	add	sp, #52	; 0x34
   d605a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d605c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d605c:	b510      	push	{r4, lr}
   d605e:	4b05      	ldr	r3, [pc, #20]	; (d6074 <_ZN9IPAddressC1Ev+0x18>)
   d6060:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6062:	2211      	movs	r2, #17
   d6064:	f840 3b04 	str.w	r3, [r0], #4
   d6068:	2100      	movs	r1, #0
   d606a:	f002 ff7b 	bl	d8f64 <memset>
{
    clear();
}
   d606e:	4620      	mov	r0, r4
   d6070:	bd10      	pop	{r4, pc}
   d6072:	bf00      	nop
   d6074:	000dab10 	.word	0x000dab10

000d6078 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6078:	4603      	mov	r3, r0
   d607a:	4a07      	ldr	r2, [pc, #28]	; (d6098 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d607c:	b510      	push	{r4, lr}
   d607e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6082:	f101 0210 	add.w	r2, r1, #16
   d6086:	f851 4b04 	ldr.w	r4, [r1], #4
   d608a:	f843 4b04 	str.w	r4, [r3], #4
   d608e:	4291      	cmp	r1, r2
   d6090:	d1f9      	bne.n	d6086 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6092:	780a      	ldrb	r2, [r1, #0]
   d6094:	701a      	strb	r2, [r3, #0]
}
   d6096:	bd10      	pop	{r4, pc}
   d6098:	000dab10 	.word	0x000dab10

000d609c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d609c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d609e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d60a2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d60a6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d60aa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d60ae:	2304      	movs	r3, #4
   d60b0:	6041      	str	r1, [r0, #4]
   d60b2:	7503      	strb	r3, [r0, #20]
   d60b4:	bd10      	pop	{r4, pc}

000d60b6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d60b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d60b8:	780d      	ldrb	r5, [r1, #0]
   d60ba:	788b      	ldrb	r3, [r1, #2]
   d60bc:	784a      	ldrb	r2, [r1, #1]
   d60be:	78c9      	ldrb	r1, [r1, #3]
   d60c0:	9100      	str	r1, [sp, #0]
   d60c2:	4629      	mov	r1, r5
   d60c4:	f7ff ffea 	bl	d609c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d60c8:	b003      	add	sp, #12
   d60ca:	bd30      	pop	{r4, r5, pc}

000d60cc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d60cc:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d60d0:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d60d2:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d60d6:	2901      	cmp	r1, #1
   d60d8:	4610      	mov	r0, r2
   d60da:	d104      	bne.n	d60e6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d60dc:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d60e0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d60e4:	e004      	b.n	d60f0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d60e6:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d60e8:	bf04      	itt	eq
   d60ea:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d60ee:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d60f0:	3b01      	subs	r3, #1
   d60f2:	f102 0210 	add.w	r2, r2, #16
   d60f6:	d1ec      	bne.n	d60d2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d60f8:	4770      	bx	lr

000d60fa <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d60fa:	b40e      	push	{r1, r2, r3}
   d60fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6100:	b087      	sub	sp, #28
   d6102:	af00      	add	r7, sp, #0
   d6104:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d6108:	4605      	mov	r5, r0
   d610a:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d610e:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6110:	4623      	mov	r3, r4
   d6112:	4632      	mov	r2, r6
   d6114:	2110      	movs	r1, #16
   d6116:	f107 0008 	add.w	r0, r7, #8
   d611a:	f7ff fae1 	bl	d56e0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d611e:	280f      	cmp	r0, #15
   d6120:	d916      	bls.n	d6150 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d6122:	f100 0308 	add.w	r3, r0, #8
   d6126:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d612a:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d612c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6130:	4632      	mov	r2, r6
   d6132:	1c41      	adds	r1, r0, #1
   d6134:	4623      	mov	r3, r4
   d6136:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d6138:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d613a:	f7ff fad1 	bl	d56e0 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d613e:	1e02      	subs	r2, r0, #0
   d6140:	dd04      	ble.n	d614c <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d6142:	682b      	ldr	r3, [r5, #0]
   d6144:	4669      	mov	r1, sp
   d6146:	689b      	ldr	r3, [r3, #8]
   d6148:	4628      	mov	r0, r5
   d614a:	4798      	blx	r3
   d614c:	46c5      	mov	sp, r8
   d614e:	e007      	b.n	d6160 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d6150:	b130      	cbz	r0, d6160 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d6152:	682b      	ldr	r3, [r5, #0]
   d6154:	4602      	mov	r2, r0
   d6156:	689b      	ldr	r3, [r3, #8]
   d6158:	f107 0108 	add.w	r1, r7, #8
   d615c:	4628      	mov	r0, r5
   d615e:	4798      	blx	r3
    }
}
   d6160:	371c      	adds	r7, #28
   d6162:	46bd      	mov	sp, r7
   d6164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d6168:	b003      	add	sp, #12
   d616a:	4770      	bx	lr

000d616c <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d616c:	b513      	push	{r0, r1, r4, lr}
   d616e:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d6170:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d6172:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d6176:	6894      	ldr	r4, [r2, #8]
   d6178:	4619      	mov	r1, r3
   d617a:	2201      	movs	r2, #1
   d617c:	47a0      	blx	r4
}
   d617e:	b002      	add	sp, #8
   d6180:	bd10      	pop	{r4, pc}

000d6182 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d6182:	6883      	ldr	r3, [r0, #8]
   d6184:	b1fb      	cbz	r3, d61c6 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d6186:	781a      	ldrb	r2, [r3, #0]
   d6188:	2a03      	cmp	r2, #3
   d618a:	d81a      	bhi.n	d61c2 <_ZNK5spark9JSONValue4typeEv+0x40>
   d618c:	e8df f002 	tbb	[pc, r2]
   d6190:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d6194:	2005      	movs	r0, #5
   d6196:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d6198:	6802      	ldr	r2, [r0, #0]
   d619a:	685b      	ldr	r3, [r3, #4]
   d619c:	6852      	ldr	r2, [r2, #4]
   d619e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d61a0:	282d      	cmp	r0, #45	; 0x2d
   d61a2:	d014      	beq.n	d61ce <_ZNK5spark9JSONValue4typeEv+0x4c>
   d61a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d61a8:	2b09      	cmp	r3, #9
   d61aa:	d910      	bls.n	d61ce <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d61ac:	2874      	cmp	r0, #116	; 0x74
   d61ae:	d010      	beq.n	d61d2 <_ZNK5spark9JSONValue4typeEv+0x50>
   d61b0:	2866      	cmp	r0, #102	; 0x66
   d61b2:	d00e      	beq.n	d61d2 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d61b4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d61b8:	4258      	negs	r0, r3
   d61ba:	4158      	adcs	r0, r3
   d61bc:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d61be:	2006      	movs	r0, #6
   d61c0:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d61c2:	2000      	movs	r0, #0
   d61c4:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d61c6:	4618      	mov	r0, r3
   d61c8:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d61ca:	2004      	movs	r0, #4
   d61cc:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d61ce:	2003      	movs	r0, #3
   d61d0:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d61d2:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d61d4:	4770      	bx	lr

000d61d6 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d61d6:	b510      	push	{r4, lr}
   d61d8:	4604      	mov	r4, r0
    switch (type()) {
   d61da:	f7ff ffd2 	bl	d6182 <_ZNK5spark9JSONValue4typeEv>
   d61de:	2802      	cmp	r0, #2
   d61e0:	d00d      	beq.n	d61fe <_ZNK5spark9JSONValue5toIntEv+0x28>
   d61e2:	d316      	bcc.n	d6212 <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d61e4:	2804      	cmp	r0, #4
   d61e6:	d814      	bhi.n	d6212 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d61e8:	6822      	ldr	r2, [r4, #0]
   d61ea:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d61ec:	6850      	ldr	r0, [r2, #4]
   d61ee:	685b      	ldr	r3, [r3, #4]
   d61f0:	220a      	movs	r2, #10
   d61f2:	2100      	movs	r1, #0
   d61f4:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d61f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d61fa:	f003 bf41 	b.w	da080 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d61fe:	6822      	ldr	r2, [r4, #0]
   d6200:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d6202:	6852      	ldr	r2, [r2, #4]
   d6204:	685b      	ldr	r3, [r3, #4]
   d6206:	5cd0      	ldrb	r0, [r2, r3]
   d6208:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d620c:	4258      	negs	r0, r3
   d620e:	4158      	adcs	r0, r3
   d6210:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d6212:	2000      	movs	r0, #0
    }
}
   d6214:	bd10      	pop	{r4, pc}

000d6216 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d6216:	b510      	push	{r4, lr}
    if (!n_) {
   d6218:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d621a:	4604      	mov	r4, r0
    if (!n_) {
   d621c:	b15b      	cbz	r3, d6236 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d621e:	6880      	ldr	r0, [r0, #8]
   d6220:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d6222:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d6224:	3010      	adds	r0, #16
   d6226:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6228:	6120      	str	r0, [r4, #16]
    --n_;
   d622a:	6163      	str	r3, [r4, #20]
    if (n_) {
   d622c:	b12b      	cbz	r3, d623a <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d622e:	f7ff ff4d 	bl	d60cc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6232:	60a0      	str	r0, [r4, #8]
   d6234:	e001      	b.n	d623a <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d6236:	4618      	mov	r0, r3
   d6238:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d623a:	2001      	movs	r0, #1
}
   d623c:	bd10      	pop	{r4, pc}

000d623e <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d623e:	b510      	push	{r4, lr}
    write('}');
   d6240:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d6242:	4604      	mov	r4, r0
    write('}');
   d6244:	f7ff ff92 	bl	d616c <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6248:	2301      	movs	r3, #1
   d624a:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d624c:	4620      	mov	r0, r4
   d624e:	bd10      	pop	{r4, pc}

000d6250 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d6250:	b508      	push	{r3, lr}
    switch (state_) {
   d6252:	7903      	ldrb	r3, [r0, #4]
   d6254:	2b01      	cmp	r3, #1
   d6256:	d002      	beq.n	d625e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d6258:	2b02      	cmp	r3, #2
   d625a:	d002      	beq.n	d6262 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d625c:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d625e:	212c      	movs	r1, #44	; 0x2c
   d6260:	e000      	b.n	d6264 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d6262:	213a      	movs	r1, #58	; 0x3a
   d6264:	f7ff ff82 	bl	d616c <_ZN5spark10JSONWriter5writeEc>
   d6268:	bd08      	pop	{r3, pc}

000d626a <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d626a:	b510      	push	{r4, lr}
   d626c:	4604      	mov	r4, r0
    writeSeparator();
   d626e:	f7ff ffef 	bl	d6250 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d6272:	4620      	mov	r0, r4
   d6274:	217b      	movs	r1, #123	; 0x7b
   d6276:	f7ff ff79 	bl	d616c <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d627a:	2300      	movs	r3, #0
   d627c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d627e:	4620      	mov	r0, r4
   d6280:	bd10      	pop	{r4, pc}
	...

000d6284 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d6284:	b538      	push	{r3, r4, r5, lr}
   d6286:	4604      	mov	r4, r0
   d6288:	460d      	mov	r5, r1
    writeSeparator();
   d628a:	f7ff ffe1 	bl	d6250 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d628e:	6823      	ldr	r3, [r4, #0]
   d6290:	4904      	ldr	r1, [pc, #16]	; (d62a4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d6292:	68db      	ldr	r3, [r3, #12]
   d6294:	4620      	mov	r0, r4
   d6296:	462a      	mov	r2, r5
   d6298:	4798      	blx	r3
    state_ = NEXT;
   d629a:	2301      	movs	r3, #1
   d629c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d629e:	4620      	mov	r0, r4
   d62a0:	bd38      	pop	{r3, r4, r5, pc}
   d62a2:	bf00      	nop
   d62a4:	000db03f 	.word	0x000db03f

000d62a8 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d62a8:	b538      	push	{r3, r4, r5, lr}
   d62aa:	4604      	mov	r4, r0
   d62ac:	460d      	mov	r5, r1
    writeSeparator();
   d62ae:	f7ff ffcf 	bl	d6250 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d62b2:	6823      	ldr	r3, [r4, #0]
   d62b4:	4904      	ldr	r1, [pc, #16]	; (d62c8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d62b6:	68db      	ldr	r3, [r3, #12]
   d62b8:	4620      	mov	r0, r4
   d62ba:	462a      	mov	r2, r5
   d62bc:	4798      	blx	r3
    state_ = NEXT;
   d62be:	2301      	movs	r3, #1
   d62c0:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d62c2:	4620      	mov	r0, r4
   d62c4:	bd38      	pop	{r3, r4, r5, pc}
   d62c6:	bf00      	nop
   d62c8:	000dab2b 	.word	0x000dab2b

000d62cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d62cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d62ce:	460d      	mov	r5, r1
   d62d0:	4617      	mov	r7, r2
    write('"');
   d62d2:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d62d4:	4604      	mov	r4, r0
   d62d6:	442f      	add	r7, r5
    write('"');
   d62d8:	f7ff ff48 	bl	d616c <_ZN5spark10JSONWriter5writeEc>
   d62dc:	462a      	mov	r2, r5
    const char* const end = str + size;
   d62de:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d62e0:	42ba      	cmp	r2, r7
   d62e2:	d038      	beq.n	d6356 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d62e4:	4616      	mov	r6, r2
   d62e6:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d62ea:	2d22      	cmp	r5, #34	; 0x22
   d62ec:	d003      	beq.n	d62f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d62ee:	2d5c      	cmp	r5, #92	; 0x5c
   d62f0:	d001      	beq.n	d62f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d62f2:	2d1f      	cmp	r5, #31
   d62f4:	d82d      	bhi.n	d6352 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d62f6:	6823      	ldr	r3, [r4, #0]
   d62f8:	1a52      	subs	r2, r2, r1
   d62fa:	689b      	ldr	r3, [r3, #8]
   d62fc:	4620      	mov	r0, r4
   d62fe:	4798      	blx	r3
            write('\\');
   d6300:	215c      	movs	r1, #92	; 0x5c
   d6302:	4620      	mov	r0, r4
   d6304:	f7ff ff32 	bl	d616c <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d6308:	2d0c      	cmp	r5, #12
   d630a:	d019      	beq.n	d6340 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d630c:	d807      	bhi.n	d631e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d630e:	2d09      	cmp	r5, #9
   d6310:	d00f      	beq.n	d6332 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d6312:	2d0a      	cmp	r5, #10
   d6314:	d012      	beq.n	d633c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d6316:	2d08      	cmp	r5, #8
   d6318:	d114      	bne.n	d6344 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d631a:	2162      	movs	r1, #98	; 0x62
   d631c:	e00a      	b.n	d6334 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d631e:	2d22      	cmp	r5, #34	; 0x22
   d6320:	d005      	beq.n	d632e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6322:	2d5c      	cmp	r5, #92	; 0x5c
   d6324:	d003      	beq.n	d632e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6326:	2d0d      	cmp	r5, #13
   d6328:	d10c      	bne.n	d6344 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d632a:	2172      	movs	r1, #114	; 0x72
   d632c:	e002      	b.n	d6334 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d632e:	4629      	mov	r1, r5
   d6330:	e000      	b.n	d6334 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d6332:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d6334:	4620      	mov	r0, r4
   d6336:	f7ff ff19 	bl	d616c <_ZN5spark10JSONWriter5writeEc>
                break;
   d633a:	e009      	b.n	d6350 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d633c:	216e      	movs	r1, #110	; 0x6e
   d633e:	e7f9      	b.n	d6334 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d6340:	2166      	movs	r1, #102	; 0x66
   d6342:	e7f7      	b.n	d6334 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d6344:	6823      	ldr	r3, [r4, #0]
   d6346:	490a      	ldr	r1, [pc, #40]	; (d6370 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d6348:	68db      	ldr	r3, [r3, #12]
   d634a:	462a      	mov	r2, r5
   d634c:	4620      	mov	r0, r4
   d634e:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d6350:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d6352:	4632      	mov	r2, r6
   d6354:	e7c4      	b.n	d62e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d6356:	4291      	cmp	r1, r2
   d6358:	d004      	beq.n	d6364 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d635a:	6823      	ldr	r3, [r4, #0]
   d635c:	1a52      	subs	r2, r2, r1
   d635e:	689d      	ldr	r5, [r3, #8]
   d6360:	4620      	mov	r0, r4
   d6362:	47a8      	blx	r5
    }
    write('"');
   d6364:	2122      	movs	r1, #34	; 0x22
   d6366:	4620      	mov	r0, r4
   d6368:	f7ff ff00 	bl	d616c <_ZN5spark10JSONWriter5writeEc>
   d636c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d636e:	bf00      	nop
   d6370:	000dab36 	.word	0x000dab36

000d6374 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d6374:	b570      	push	{r4, r5, r6, lr}
   d6376:	4604      	mov	r4, r0
   d6378:	460d      	mov	r5, r1
   d637a:	4616      	mov	r6, r2
    writeSeparator();
   d637c:	f7ff ff68 	bl	d6250 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d6380:	4620      	mov	r0, r4
   d6382:	4632      	mov	r2, r6
   d6384:	4629      	mov	r1, r5
   d6386:	f7ff ffa1 	bl	d62cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d638a:	2302      	movs	r3, #2
   d638c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d638e:	4620      	mov	r0, r4
   d6390:	bd70      	pop	{r4, r5, r6, pc}

000d6392 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d6392:	b570      	push	{r4, r5, r6, lr}
   d6394:	4604      	mov	r4, r0
   d6396:	460d      	mov	r5, r1
   d6398:	4616      	mov	r6, r2
    writeSeparator();
   d639a:	f7ff ff59 	bl	d6250 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d639e:	4620      	mov	r0, r4
   d63a0:	4632      	mov	r2, r6
   d63a2:	4629      	mov	r1, r5
   d63a4:	f7ff ff92 	bl	d62cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d63a8:	2301      	movs	r3, #1
   d63aa:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d63ac:	4620      	mov	r0, r4
   d63ae:	bd70      	pop	{r4, r5, r6, pc}

000d63b0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d63b0:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d63b2:	2300      	movs	r3, #0
   d63b4:	4604      	mov	r4, r0
   d63b6:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d63b8:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d63ba:	4810      	ldr	r0, [pc, #64]	; (d63fc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d63bc:	60a0      	str	r0, [r4, #8]
   d63be:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d63c0:	b1d1      	cbz	r1, d63f8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d63c2:	780b      	ldrb	r3, [r1, #0]
   d63c4:	2b03      	cmp	r3, #3
   d63c6:	d006      	beq.n	d63d6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d63c8:	b9b3      	cbnz	r3, d63f8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d63ca:	6813      	ldr	r3, [r2, #0]
   d63cc:	6858      	ldr	r0, [r3, #4]
   d63ce:	684b      	ldr	r3, [r1, #4]
   d63d0:	5cc3      	ldrb	r3, [r0, r3]
   d63d2:	2b6e      	cmp	r3, #110	; 0x6e
   d63d4:	d008      	beq.n	d63e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d63d6:	6813      	ldr	r3, [r2, #0]
   d63d8:	6858      	ldr	r0, [r3, #4]
   d63da:	684b      	ldr	r3, [r1, #4]
   d63dc:	4403      	add	r3, r0
   d63de:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d63e0:	688b      	ldr	r3, [r1, #8]
   d63e2:	6849      	ldr	r1, [r1, #4]
   d63e4:	1a5b      	subs	r3, r3, r1
   d63e6:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d63e8:	4611      	mov	r1, r2
   d63ea:	4620      	mov	r0, r4
   d63ec:	f851 3b04 	ldr.w	r3, [r1], #4
   d63f0:	f840 3b04 	str.w	r3, [r0], #4
   d63f4:	f7ff f9b7 	bl	d5766 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d63f8:	4620      	mov	r0, r4
   d63fa:	bd10      	pop	{r4, pc}
   d63fc:	000dac25 	.word	0x000dac25

000d6400 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d6400:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6402:	b510      	push	{r4, lr}
   d6404:	4604      	mov	r4, r0
   d6406:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6408:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d640a:	6083      	str	r3, [r0, #8]
   d640c:	60c3      	str	r3, [r0, #12]
   d640e:	6103      	str	r3, [r0, #16]
   d6410:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d6412:	b171      	cbz	r1, d6432 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d6414:	780b      	ldrb	r3, [r1, #0]
   d6416:	2b01      	cmp	r3, #1
   d6418:	d10b      	bne.n	d6432 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d641a:	f101 0310 	add.w	r3, r1, #16
   d641e:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d6420:	68cb      	ldr	r3, [r1, #12]
   d6422:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d6424:	4611      	mov	r1, r2
   d6426:	f851 3b04 	ldr.w	r3, [r1], #4
   d642a:	f840 3b04 	str.w	r3, [r0], #4
   d642e:	f7ff f99a 	bl	d5766 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d6432:	4620      	mov	r0, r4
   d6434:	bd10      	pop	{r4, pc}

000d6436 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d6436:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6438:	b510      	push	{r4, lr}
   d643a:	4604      	mov	r4, r0
   d643c:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d643e:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d6440:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d6442:	b131      	cbz	r1, d6452 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d6444:	4611      	mov	r1, r2
   d6446:	f851 3b04 	ldr.w	r3, [r1], #4
   d644a:	f840 3b04 	str.w	r3, [r0], #4
   d644e:	f7ff f98a 	bl	d5766 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d6452:	4620      	mov	r0, r4
   d6454:	bd10      	pop	{r4, pc}

000d6456 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d6456:	6880      	ldr	r0, [r0, #8]
   d6458:	6803      	ldr	r3, [r0, #0]
   d645a:	68db      	ldr	r3, [r3, #12]
   d645c:	4718      	bx	r3

000d645e <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d645e:	4770      	bx	lr

000d6460 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d6460:	b119      	cbz	r1, d646a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d6462:	680b      	ldr	r3, [r1, #0]
   d6464:	4608      	mov	r0, r1
   d6466:	685b      	ldr	r3, [r3, #4]
   d6468:	4718      	bx	r3
   d646a:	4770      	bx	lr

000d646c <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d646c:	b119      	cbz	r1, d6476 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d646e:	680b      	ldr	r3, [r1, #0]
   d6470:	4608      	mov	r0, r1
   d6472:	685b      	ldr	r3, [r3, #4]
   d6474:	4718      	bx	r3
   d6476:	4770      	bx	lr

000d6478 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d6478:	4770      	bx	lr

000d647a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d647a:	4770      	bx	lr

000d647c <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d647c:	4770      	bx	lr

000d647e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d647e:	b538      	push	{r3, r4, r5, lr}
   d6480:	4604      	mov	r4, r0
   d6482:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d6484:	6800      	ldr	r0, [r0, #0]
   d6486:	212e      	movs	r1, #46	; 0x2e
   d6488:	f002 fff8 	bl	d947c <strchrnul>
    size = s - category;
   d648c:	6823      	ldr	r3, [r4, #0]
   d648e:	1ac3      	subs	r3, r0, r3
   d6490:	602b      	str	r3, [r5, #0]
    if (size) {
   d6492:	b123      	cbz	r3, d649e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d6494:	7803      	ldrb	r3, [r0, #0]
   d6496:	b103      	cbz	r3, d649a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d6498:	3001      	adds	r0, #1
   d649a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d649c:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d649e:	4618      	mov	r0, r3
}
   d64a0:	bd38      	pop	{r3, r4, r5, pc}

000d64a2 <_ZN5spark16JSONStreamWriterD0Ev>:
   d64a2:	b510      	push	{r4, lr}
   d64a4:	210c      	movs	r1, #12
   d64a6:	4604      	mov	r4, r0
   d64a8:	f001 fdcb 	bl	d8042 <_ZdlPvj>
   d64ac:	4620      	mov	r0, r4
   d64ae:	bd10      	pop	{r4, pc}

000d64b0 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d64b0:	b510      	push	{r4, lr}
   d64b2:	2104      	movs	r1, #4
   d64b4:	4604      	mov	r4, r0
   d64b6:	f001 fdc4 	bl	d8042 <_ZdlPvj>
   d64ba:	4620      	mov	r0, r4
   d64bc:	bd10      	pop	{r4, pc}

000d64be <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d64be:	b510      	push	{r4, lr}
   d64c0:	2104      	movs	r1, #4
   d64c2:	4604      	mov	r4, r0
   d64c4:	f001 fdbd 	bl	d8042 <_ZdlPvj>
   d64c8:	4620      	mov	r0, r4
   d64ca:	bd10      	pop	{r4, pc}

000d64cc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d64cc:	b538      	push	{r3, r4, r5, lr}
   d64ce:	460c      	mov	r4, r1
   d64d0:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d64d2:	f001 fc59 	bl	d7d88 <_Z16_fetch_usbserialv>
   d64d6:	4284      	cmp	r4, r0
   d64d8:	d00d      	beq.n	d64f6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d64da:	f001 fbc9 	bl	d7c70 <_Z22__fetch_global_Serial1v>
   d64de:	4284      	cmp	r4, r0
   d64e0:	d105      	bne.n	d64ee <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d64e2:	f001 fbc5 	bl	d7c70 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d64e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d64ea:	f001 bbba 	b.w	d7c62 <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d64ee:	4621      	mov	r1, r4
   d64f0:	4628      	mov	r0, r5
   d64f2:	f7ff ffbb 	bl	d646c <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d64f6:	bd38      	pop	{r3, r4, r5, pc}

000d64f8 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d64f8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d64fa:	f002 ffc9 	bl	d9490 <strcmp>
}
   d64fe:	fab0 f080 	clz	r0, r0
   d6502:	0940      	lsrs	r0, r0, #5
   d6504:	bd08      	pop	{r3, pc}

000d6506 <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d6506:	b538      	push	{r3, r4, r5, lr}
   d6508:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d650a:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d650c:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d650e:	f003 fd01 	bl	d9f14 <strlen>
   d6512:	4621      	mov	r1, r4
   d6514:	4602      	mov	r2, r0
   d6516:	4628      	mov	r0, r5
}
   d6518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d651c:	f7ff bf39 	b.w	d6392 <_ZN5spark10JSONWriter5valueEPKcj>

000d6520 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6520:	6800      	ldr	r0, [r0, #0]
   d6522:	f7fe be01 	b.w	d5128 <os_mutex_recursive_lock>

000d6526 <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d6526:	b570      	push	{r4, r5, r6, lr}
   d6528:	4604      	mov	r4, r0
    write(str, strlen(str));
   d652a:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d652c:	460d      	mov	r5, r1
    write(str, strlen(str));
   d652e:	f003 fcf1 	bl	d9f14 <strlen>
   d6532:	6823      	ldr	r3, [r4, #0]
   d6534:	4602      	mov	r2, r0
   d6536:	4629      	mov	r1, r5
   d6538:	4620      	mov	r0, r4
   d653a:	68db      	ldr	r3, [r3, #12]
}
   d653c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d6540:	4718      	bx	r3

000d6542 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d6542:	b513      	push	{r0, r1, r4, lr}
   d6544:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d6546:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d6548:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d654c:	68d4      	ldr	r4, [r2, #12]
   d654e:	4619      	mov	r1, r3
   d6550:	2201      	movs	r2, #1
   d6552:	47a0      	blx	r4
}
   d6554:	b002      	add	sp, #8
   d6556:	bd10      	pop	{r4, pc}

000d6558 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d655c:	6845      	ldr	r5, [r0, #4]
   d655e:	6807      	ldr	r7, [r0, #0]
   d6560:	b085      	sub	sp, #20
   d6562:	4691      	mov	r9, r2
   d6564:	2214      	movs	r2, #20
   d6566:	4355      	muls	r5, r2
   d6568:	9301      	str	r3, [sp, #4]
   d656a:	10ab      	asrs	r3, r5, #2
   d656c:	4d19      	ldr	r5, [pc, #100]	; (d65d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d656e:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6570:	435d      	muls	r5, r3
   d6572:	468b      	mov	fp, r1
   d6574:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d6576:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d6578:	2d00      	cmp	r5, #0
   d657a:	9303      	str	r3, [sp, #12]
   d657c:	dd23      	ble.n	d65c6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d657e:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d6580:	106e      	asrs	r6, r5, #1
   d6582:	fb03 f006 	mul.w	r0, r3, r6
   d6586:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d658a:	464a      	mov	r2, r9
   d658c:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d6590:	5820      	ldr	r0, [r4, r0]
   d6592:	45d1      	cmp	r9, sl
   d6594:	bf28      	it	cs
   d6596:	4652      	movcs	r2, sl
   d6598:	4659      	mov	r1, fp
   d659a:	f003 fcc3 	bl	d9f24 <strncmp>
                if (cmp == 0) {
   d659e:	9b03      	ldr	r3, [sp, #12]
   d65a0:	b948      	cbnz	r0, d65b6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d65a2:	45d1      	cmp	r9, sl
   d65a4:	d103      	bne.n	d65ae <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d65a6:	9a01      	ldr	r2, [sp, #4]
   d65a8:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d65aa:	4635      	mov	r5, r6
   d65ac:	e7e4      	b.n	d6578 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d65ae:	bf8c      	ite	hi
   d65b0:	2001      	movhi	r0, #1
   d65b2:	2000      	movls	r0, #0
   d65b4:	e000      	b.n	d65b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d65b6:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d65b8:	2800      	cmp	r0, #0
   d65ba:	d0f6      	beq.n	d65aa <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d65bc:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d65be:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d65c2:	3e01      	subs	r6, #1
   d65c4:	e7f1      	b.n	d65aa <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d65c6:	1be4      	subs	r4, r4, r7
}
   d65c8:	4802      	ldr	r0, [pc, #8]	; (d65d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d65ca:	10a4      	asrs	r4, r4, #2
}
   d65cc:	4360      	muls	r0, r4
   d65ce:	b005      	add	sp, #20
   d65d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d65d4:	cccccccd 	.word	0xcccccccd

000d65d8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d65d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d65da:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d65dc:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d65de:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d65e0:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d65e2:	b313      	cbz	r3, d662a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d65e4:	b309      	cbz	r1, d662a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d65e6:	af04      	add	r7, sp, #16
   d65e8:	2300      	movs	r3, #0
   d65ea:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d65ee:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d65f2:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d65f4:	4639      	mov	r1, r7
   d65f6:	a801      	add	r0, sp, #4
   d65f8:	f7ff ff41 	bl	d647e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d65fc:	4601      	mov	r1, r0
   d65fe:	b1a0      	cbz	r0, d662a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d6600:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d6602:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d6604:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d6608:	4620      	mov	r0, r4
   d660a:	f7ff ffa5 	bl	d6558 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d660e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6612:	b153      	cbz	r3, d662a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d6614:	6823      	ldr	r3, [r4, #0]
   d6616:	2414      	movs	r4, #20
   d6618:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d661c:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d661e:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d6622:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d6624:	bfa8      	it	ge
   d6626:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6628:	e7e4      	b.n	d65f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d662a:	4630      	mov	r0, r6
   d662c:	b005      	add	sp, #20
   d662e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6630 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d6630:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d6632:	4c09      	ldr	r4, [pc, #36]	; (d6658 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d6634:	6823      	ldr	r3, [r4, #0]
   d6636:	07db      	lsls	r3, r3, #31
   d6638:	d40b      	bmi.n	d6652 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d663a:	4620      	mov	r0, r4
   d663c:	f7fd fd3e 	bl	d40bc <__cxa_guard_acquire>
   d6640:	b138      	cbz	r0, d6652 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6642:	4620      	mov	r0, r4
   d6644:	f7fd fd3f 	bl	d40c6 <__cxa_guard_release>
   d6648:	4a04      	ldr	r2, [pc, #16]	; (d665c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d664a:	4905      	ldr	r1, [pc, #20]	; (d6660 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d664c:	4805      	ldr	r0, [pc, #20]	; (d6664 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d664e:	f001 fcf3 	bl	d8038 <__aeabi_atexit>
    return &factory;
}
   d6652:	4804      	ldr	r0, [pc, #16]	; (d6664 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6654:	bd10      	pop	{r4, pc}
   d6656:	bf00      	nop
   d6658:	2003e230 	.word	0x2003e230
   d665c:	2003e158 	.word	0x2003e158
   d6660:	000d647b 	.word	0x000d647b
   d6664:	2003e09c 	.word	0x2003e09c

000d6668 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d6668:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d666a:	4c09      	ldr	r4, [pc, #36]	; (d6690 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d666c:	6823      	ldr	r3, [r4, #0]
   d666e:	07db      	lsls	r3, r3, #31
   d6670:	d40b      	bmi.n	d668a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d6672:	4620      	mov	r0, r4
   d6674:	f7fd fd22 	bl	d40bc <__cxa_guard_acquire>
   d6678:	b138      	cbz	r0, d668a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d667a:	4620      	mov	r0, r4
   d667c:	f7fd fd23 	bl	d40c6 <__cxa_guard_release>
   d6680:	4a04      	ldr	r2, [pc, #16]	; (d6694 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d6682:	4905      	ldr	r1, [pc, #20]	; (d6698 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d6684:	4805      	ldr	r0, [pc, #20]	; (d669c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d6686:	f001 fcd7 	bl	d8038 <__aeabi_atexit>
    return &factory;
}
   d668a:	4804      	ldr	r0, [pc, #16]	; (d669c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d668c:	bd10      	pop	{r4, pc}
   d668e:	bf00      	nop
   d6690:	2003e260 	.word	0x2003e260
   d6694:	2003e158 	.word	0x2003e158
   d6698:	000d6479 	.word	0x000d6479
   d669c:	2003e098 	.word	0x2003e098

000d66a0 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d66a0:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d66a2:	2500      	movs	r5, #0
   d66a4:	4604      	mov	r4, r0
   d66a6:	6005      	str	r5, [r0, #0]
   d66a8:	6045      	str	r5, [r0, #4]
   d66aa:	6085      	str	r5, [r0, #8]
   d66ac:	6105      	str	r5, [r0, #16]
   d66ae:	6145      	str	r5, [r0, #20]
   d66b0:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d66b2:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d66b6:	f7fe fd2f 	bl	d5118 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d66ba:	f7ff ffb9 	bl	d6630 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d66be:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d66c0:	f7ff ffd2 	bl	d6668 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d66c4:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d66c6:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d66c8:	4620      	mov	r0, r4
   d66ca:	bd38      	pop	{r3, r4, r5, pc}

000d66cc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d66cc:	b510      	push	{r4, lr}
    static LogManager mgr;
   d66ce:	4c0a      	ldr	r4, [pc, #40]	; (d66f8 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d66d0:	6823      	ldr	r3, [r4, #0]
   d66d2:	07db      	lsls	r3, r3, #31
   d66d4:	d40e      	bmi.n	d66f4 <_ZN5spark10LogManager8instanceEv+0x28>
   d66d6:	4620      	mov	r0, r4
   d66d8:	f7fd fcf0 	bl	d40bc <__cxa_guard_acquire>
   d66dc:	b150      	cbz	r0, d66f4 <_ZN5spark10LogManager8instanceEv+0x28>
   d66de:	4807      	ldr	r0, [pc, #28]	; (d66fc <_ZN5spark10LogManager8instanceEv+0x30>)
   d66e0:	f7ff ffde 	bl	d66a0 <_ZN5spark10LogManagerC1Ev>
   d66e4:	4620      	mov	r0, r4
   d66e6:	f7fd fcee 	bl	d40c6 <__cxa_guard_release>
   d66ea:	4a05      	ldr	r2, [pc, #20]	; (d6700 <_ZN5spark10LogManager8instanceEv+0x34>)
   d66ec:	4905      	ldr	r1, [pc, #20]	; (d6704 <_ZN5spark10LogManager8instanceEv+0x38>)
   d66ee:	4803      	ldr	r0, [pc, #12]	; (d66fc <_ZN5spark10LogManager8instanceEv+0x30>)
   d66f0:	f001 fca2 	bl	d8038 <__aeabi_atexit>
    return &mgr;
}
   d66f4:	4801      	ldr	r0, [pc, #4]	; (d66fc <_ZN5spark10LogManager8instanceEv+0x30>)
   d66f6:	bd10      	pop	{r4, pc}
   d66f8:	2003e234 	.word	0x2003e234
   d66fc:	2003e238 	.word	0x2003e238
   d6700:	2003e158 	.word	0x2003e158
   d6704:	000d6b37 	.word	0x000d6b37

000d6708 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d6708:	2300      	movs	r3, #0
   d670a:	4a02      	ldr	r2, [pc, #8]	; (d6714 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d670c:	4902      	ldr	r1, [pc, #8]	; (d6718 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d670e:	4803      	ldr	r0, [pc, #12]	; (d671c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d6710:	f7fe beca 	b.w	d54a8 <log_set_callbacks>
   d6714:	000d6a19 	.word	0x000d6a19
   d6718:	000d69a9 	.word	0x000d69a9
   d671c:	000d6931 	.word	0x000d6931

000d6720 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d6720:	2300      	movs	r3, #0
   d6722:	461a      	mov	r2, r3
   d6724:	4619      	mov	r1, r3
   d6726:	4618      	mov	r0, r3
   d6728:	f7fe bebe 	b.w	d54a8 <log_set_callbacks>

000d672c <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d672c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d672e:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d6730:	690e      	ldr	r6, [r1, #16]
   d6732:	f851 3b04 	ldr.w	r3, [r1], #4
   d6736:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d673a:	4605      	mov	r5, r0
   d673c:	a801      	add	r0, sp, #4
   d673e:	f7ff f80b 	bl	d5758 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d6742:	4622      	mov	r2, r4
   d6744:	4631      	mov	r1, r6
   d6746:	4628      	mov	r0, r5
   d6748:	f7ff fe75 	bl	d6436 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d674c:	a801      	add	r0, sp, #4
   d674e:	f7fd fe24 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6752:	4628      	mov	r0, r5
   d6754:	b002      	add	sp, #8
   d6756:	bd70      	pop	{r4, r5, r6, pc}

000d6758 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6758:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d675a:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d675c:	688e      	ldr	r6, [r1, #8]
   d675e:	f851 3b04 	ldr.w	r3, [r1], #4
   d6762:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6766:	4605      	mov	r5, r0
   d6768:	a801      	add	r0, sp, #4
   d676a:	f7fe fff5 	bl	d5758 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d676e:	4622      	mov	r2, r4
   d6770:	4631      	mov	r1, r6
   d6772:	4628      	mov	r0, r5
   d6774:	f7ff fe44 	bl	d6400 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6778:	a801      	add	r0, sp, #4
   d677a:	f7fd fe0e 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d677e:	4628      	mov	r0, r5
   d6780:	b002      	add	sp, #8
   d6782:	bd70      	pop	{r4, r5, r6, pc}

000d6784 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6784:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6786:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d6788:	68ce      	ldr	r6, [r1, #12]
   d678a:	f851 3b04 	ldr.w	r3, [r1], #4
   d678e:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6792:	4605      	mov	r5, r0
   d6794:	a801      	add	r0, sp, #4
   d6796:	f7fe ffdf 	bl	d5758 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d679a:	4622      	mov	r2, r4
   d679c:	4631      	mov	r1, r6
   d679e:	4628      	mov	r0, r5
   d67a0:	f7ff fe06 	bl	d63b0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d67a4:	a801      	add	r0, sp, #4
   d67a6:	f7fd fdf8 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d67aa:	4628      	mov	r0, r5
   d67ac:	b002      	add	sp, #8
   d67ae:	bd70      	pop	{r4, r5, r6, pc}

000d67b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d67b0:	b530      	push	{r4, r5, lr}
   d67b2:	b08b      	sub	sp, #44	; 0x2c
   d67b4:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d67b6:	4601      	mov	r1, r0
   d67b8:	a804      	add	r0, sp, #16
   d67ba:	f7ff ffcd 	bl	d6758 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d67be:	a804      	add	r0, sp, #16
   d67c0:	f7ff fd29 	bl	d6216 <_ZN5spark18JSONObjectIterator4nextEv>
   d67c4:	b1e8      	cbz	r0, d6802 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d67c6:	a904      	add	r1, sp, #16
   d67c8:	4668      	mov	r0, sp
   d67ca:	f7ff ffdb 	bl	d6784 <_ZNK5spark18JSONObjectIterator4nameEv>
   d67ce:	490f      	ldr	r1, [pc, #60]	; (d680c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d67d0:	9802      	ldr	r0, [sp, #8]
   d67d2:	f7ff fe91 	bl	d64f8 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d67d6:	4604      	mov	r4, r0
   d67d8:	b110      	cbz	r0, d67e0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d67da:	1c2c      	adds	r4, r5, #0
   d67dc:	bf18      	it	ne
   d67de:	2401      	movne	r4, #1
   d67e0:	a801      	add	r0, sp, #4
   d67e2:	f7fd fdda 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d67e6:	2c00      	cmp	r4, #0
   d67e8:	d0e9      	beq.n	d67be <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d67ea:	a904      	add	r1, sp, #16
   d67ec:	4668      	mov	r0, sp
   d67ee:	f7ff ff9d 	bl	d672c <_ZNK5spark18JSONObjectIterator5valueEv>
   d67f2:	4668      	mov	r0, sp
   d67f4:	f7ff fcef 	bl	d61d6 <_ZNK5spark9JSONValue5toIntEv>
   d67f8:	6028      	str	r0, [r5, #0]
   d67fa:	a801      	add	r0, sp, #4
   d67fc:	f7fd fdcd 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6800:	e7dd      	b.n	d67be <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d6802:	a805      	add	r0, sp, #20
   d6804:	f7fd fdc9 	bl	d439a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d6808:	b00b      	add	sp, #44	; 0x2c
   d680a:	bd30      	pop	{r4, r5, pc}
   d680c:	000dab84 	.word	0x000dab84

000d6810 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6810:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6812:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d6814:	4620      	mov	r0, r4
   d6816:	4913      	ldr	r1, [pc, #76]	; (d6864 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6818:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d681a:	f002 fe39 	bl	d9490 <strcmp>
   d681e:	b940      	cbnz	r0, d6832 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d6820:	f001 fab2 	bl	d7d88 <_Z16_fetch_usbserialv>
   d6824:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d6828:	f001 fa9e 	bl	d7d68 <_ZN9USBSerial5beginEl>
        return &Serial;
   d682c:	f001 faac 	bl	d7d88 <_Z16_fetch_usbserialv>
   d6830:	e015      	b.n	d685e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d6832:	490d      	ldr	r1, [pc, #52]	; (d6868 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d6834:	4620      	mov	r0, r4
   d6836:	f002 fe2b 	bl	d9490 <strcmp>
   d683a:	b978      	cbnz	r0, d685c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d683c:	a902      	add	r1, sp, #8
   d683e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d6842:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d6846:	4628      	mov	r0, r5
   d6848:	f7ff ffb2 	bl	d67b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d684c:	f001 fa10 	bl	d7c70 <_Z22__fetch_global_Serial1v>
   d6850:	9901      	ldr	r1, [sp, #4]
   d6852:	f001 fa03 	bl	d7c5c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d6856:	f001 fa0b 	bl	d7c70 <_Z22__fetch_global_Serial1v>
   d685a:	e000      	b.n	d685e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d685c:	2000      	movs	r0, #0
}
   d685e:	b003      	add	sp, #12
   d6860:	bd30      	pop	{r4, r5, pc}
   d6862:	bf00      	nop
   d6864:	000dab89 	.word	0x000dab89
   d6868:	000dab90 	.word	0x000dab90

000d686c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d686c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d686e:	6804      	ldr	r4, [r0, #0]
   d6870:	6843      	ldr	r3, [r0, #4]
   d6872:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6874:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6876:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d687a:	42a6      	cmp	r6, r4
   d687c:	d005      	beq.n	d688a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d687e:	f104 0008 	add.w	r0, r4, #8
   d6882:	f7ff fff3 	bl	d686c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6886:	3414      	adds	r4, #20
   d6888:	e7f7      	b.n	d687a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d688a:	6828      	ldr	r0, [r5, #0]
   d688c:	f7fe fef8 	bl	d5680 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6890:	4628      	mov	r0, r5
   d6892:	bd70      	pop	{r4, r5, r6, pc}

000d6894 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6894:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6896:	6804      	ldr	r4, [r0, #0]
   d6898:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d689a:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d689c:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d68a0:	42a6      	cmp	r6, r4
   d68a2:	d004      	beq.n	d68ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d68a4:	4620      	mov	r0, r4
   d68a6:	f000 ffc4 	bl	d7832 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d68aa:	3410      	adds	r4, #16
   d68ac:	e7f8      	b.n	d68a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d68ae:	6828      	ldr	r0, [r5, #0]
   d68b0:	f7fe fee6 	bl	d5680 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d68b4:	4628      	mov	r0, r5
   d68b6:	bd70      	pop	{r4, r5, r6, pc}

000d68b8 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d68b8:	b510      	push	{r4, lr}
   d68ba:	4604      	mov	r4, r0
   d68bc:	300c      	adds	r0, #12
   d68be:	f7ff ffd5 	bl	d686c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d68c2:	4620      	mov	r0, r4
   d68c4:	f7ff ffe6 	bl	d6894 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d68c8:	4620      	mov	r0, r4
   d68ca:	bd10      	pop	{r4, pc}

000d68cc <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d68cc:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d68ce:	4b04      	ldr	r3, [pc, #16]	; (d68e0 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d68d0:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d68d2:	f840 3b04 	str.w	r3, [r0], #4
   d68d6:	f7ff ffef 	bl	d68b8 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d68da:	4620      	mov	r0, r4
   d68dc:	bd10      	pop	{r4, pc}
   d68de:	bf00      	nop
   d68e0:	000da70c 	.word	0x000da70c

000d68e4 <_ZN5spark16StreamLogHandlerD0Ev>:
   d68e4:	b510      	push	{r4, lr}
   d68e6:	4604      	mov	r4, r0
   d68e8:	f7ff fff0 	bl	d68cc <_ZN5spark16StreamLogHandlerD1Ev>
   d68ec:	4620      	mov	r0, r4
   d68ee:	2124      	movs	r1, #36	; 0x24
   d68f0:	f001 fba7 	bl	d8042 <_ZdlPvj>
   d68f4:	4620      	mov	r0, r4
   d68f6:	bd10      	pop	{r4, pc}

000d68f8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d68f8:	b510      	push	{r4, lr}
   d68fa:	4b03      	ldr	r3, [pc, #12]	; (d6908 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d68fc:	6003      	str	r3, [r0, #0]
   d68fe:	4604      	mov	r4, r0
   d6900:	f7ff ffe4 	bl	d68cc <_ZN5spark16StreamLogHandlerD1Ev>
   d6904:	4620      	mov	r0, r4
   d6906:	bd10      	pop	{r4, pc}
   d6908:	000dab5c 	.word	0x000dab5c

000d690c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d690c:	b510      	push	{r4, lr}
   d690e:	4604      	mov	r4, r0
   d6910:	f7ff fff2 	bl	d68f8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d6914:	4620      	mov	r0, r4
   d6916:	2124      	movs	r1, #36	; 0x24
   d6918:	f001 fb93 	bl	d8042 <_ZdlPvj>
   d691c:	4620      	mov	r0, r4
   d691e:	bd10      	pop	{r4, pc}

000d6920 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6920:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6922:	6803      	ldr	r3, [r0, #0]
   d6924:	4604      	mov	r4, r0
   d6926:	6818      	ldr	r0, [r3, #0]
   d6928:	f7fe fc06 	bl	d5138 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d692c:	4620      	mov	r0, r4
   d692e:	bd10      	pop	{r4, pc}

000d6930 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6934:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d6936:	4b1b      	ldr	r3, [pc, #108]	; (d69a4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d6938:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d693a:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d693e:	b085      	sub	sp, #20
   d6940:	4682      	mov	sl, r0
   d6942:	460e      	mov	r6, r1
   d6944:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6946:	bb53      	cbnz	r3, d699e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d6948:	f7ff fec0 	bl	d66cc <_ZN5spark10LogManager8instanceEv>
   d694c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d694e:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6950:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6952:	f7ff fde5 	bl	d6520 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d6956:	7b23      	ldrb	r3, [r4, #12]
   d6958:	b9f3      	cbnz	r3, d6998 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d695a:	2301      	movs	r3, #1
   d695c:	7323      	strb	r3, [r4, #12]
   d695e:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6960:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d6962:	b2f6      	uxtb	r6, r6
   d6964:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6968:	454d      	cmp	r5, r9
   d696a:	d013      	beq.n	d6994 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d696c:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d6970:	4641      	mov	r1, r8
   d6972:	1d38      	adds	r0, r7, #4
   d6974:	f7ff fe30 	bl	d65d8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6978:	4286      	cmp	r6, r0
   d697a:	d3f5      	bcc.n	d6968 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d697c:	683b      	ldr	r3, [r7, #0]
   d697e:	f8cd b000 	str.w	fp, [sp]
   d6982:	689b      	ldr	r3, [r3, #8]
   d6984:	469e      	mov	lr, r3
   d6986:	4638      	mov	r0, r7
   d6988:	4643      	mov	r3, r8
   d698a:	4632      	mov	r2, r6
   d698c:	4651      	mov	r1, sl
   d698e:	4677      	mov	r7, lr
   d6990:	47b8      	blx	r7
   d6992:	e7e9      	b.n	d6968 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6994:	2300      	movs	r3, #0
   d6996:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d6998:	a803      	add	r0, sp, #12
   d699a:	f7ff ffc1 	bl	d6920 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d699e:	b005      	add	sp, #20
   d69a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d69a4:	e000ed00 	.word	0xe000ed00

000d69a8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d69a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d69ac:	4699      	mov	r9, r3
   d69ae:	4b19      	ldr	r3, [pc, #100]	; (d6a14 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d69b0:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d69b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d69b6:	4607      	mov	r7, r0
   d69b8:	4688      	mov	r8, r1
   d69ba:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d69bc:	bb33      	cbnz	r3, d6a0c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d69be:	f7ff fe85 	bl	d66cc <_ZN5spark10LogManager8instanceEv>
   d69c2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d69c4:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d69c6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d69c8:	f7ff fdaa 	bl	d6520 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d69cc:	7b23      	ldrb	r3, [r4, #12]
   d69ce:	b9d3      	cbnz	r3, d6a06 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d69d0:	2301      	movs	r3, #1
   d69d2:	7323      	strb	r3, [r4, #12]
   d69d4:	6825      	ldr	r5, [r4, #0]
   d69d6:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d69d8:	fa5f fb86 	uxtb.w	fp, r6
   d69dc:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d69e0:	4555      	cmp	r5, sl
   d69e2:	d00e      	beq.n	d6a02 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d69e4:	f855 6b04 	ldr.w	r6, [r5], #4
   d69e8:	4649      	mov	r1, r9
   d69ea:	1d30      	adds	r0, r6, #4
   d69ec:	f7ff fdf4 	bl	d65d8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d69f0:	4583      	cmp	fp, r0
   d69f2:	d3f5      	bcc.n	d69e0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d69f4:	6833      	ldr	r3, [r6, #0]
   d69f6:	4642      	mov	r2, r8
   d69f8:	68db      	ldr	r3, [r3, #12]
   d69fa:	4639      	mov	r1, r7
   d69fc:	4630      	mov	r0, r6
   d69fe:	4798      	blx	r3
   d6a00:	e7ee      	b.n	d69e0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6a02:	2300      	movs	r3, #0
   d6a04:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d6a06:	a801      	add	r0, sp, #4
   d6a08:	f7ff ff8a 	bl	d6920 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d6a0c:	b003      	add	sp, #12
   d6a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6a12:	bf00      	nop
   d6a14:	e000ed00 	.word	0xe000ed00

000d6a18 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6a18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6a1c:	4b15      	ldr	r3, [pc, #84]	; (d6a74 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d6a1e:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6a24:	4604      	mov	r4, r0
   d6a26:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6a28:	b9fb      	cbnz	r3, d6a6a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d6a2a:	f7ff fe4f 	bl	d66cc <_ZN5spark10LogManager8instanceEv>
   d6a2e:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6a30:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6a32:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6a34:	f7ff fd74 	bl	d6520 <_ZN14RecursiveMutex4lockEv>
   d6a38:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d6a3c:	2646      	movs	r6, #70	; 0x46
   d6a3e:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d6a42:	42af      	cmp	r7, r5
   d6a44:	d107      	bne.n	d6a56 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6a46:	a801      	add	r0, sp, #4
   d6a48:	f7ff ff6a 	bl	d6920 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d6a4c:	42b4      	cmp	r4, r6
   d6a4e:	bfb4      	ite	lt
   d6a50:	2000      	movlt	r0, #0
   d6a52:	2001      	movge	r0, #1
   d6a54:	e00a      	b.n	d6a6c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d6a56:	f855 0b04 	ldr.w	r0, [r5], #4
   d6a5a:	4641      	mov	r1, r8
   d6a5c:	3004      	adds	r0, #4
   d6a5e:	f7ff fdbb 	bl	d65d8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6a62:	4286      	cmp	r6, r0
   d6a64:	bfa8      	it	ge
   d6a66:	4606      	movge	r6, r0
   d6a68:	e7eb      	b.n	d6a42 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d6a6a:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d6a6c:	b002      	add	sp, #8
   d6a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6a72:	bf00      	nop
   d6a74:	e000ed00 	.word	0xe000ed00

000d6a78 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6a78:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d6a7a:	6803      	ldr	r3, [r0, #0]
   d6a7c:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6a7e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d6a80:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6a84:	429a      	cmp	r2, r3
   d6a86:	4618      	mov	r0, r3
   d6a88:	d00e      	beq.n	d6aa8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d6a8a:	6806      	ldr	r6, [r0, #0]
   d6a8c:	680d      	ldr	r5, [r1, #0]
   d6a8e:	42ae      	cmp	r6, r5
   d6a90:	f103 0304 	add.w	r3, r3, #4
   d6a94:	d1f6      	bne.n	d6a84 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d6a96:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6a98:	1a52      	subs	r2, r2, r1
   d6a9a:	f002 fa48 	bl	d8f2e <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d6a9e:	6863      	ldr	r3, [r4, #4]
   d6aa0:	3b01      	subs	r3, #1
   d6aa2:	6063      	str	r3, [r4, #4]
    return true;
   d6aa4:	2001      	movs	r0, #1
}
   d6aa6:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d6aa8:	2000      	movs	r0, #0
   d6aaa:	bd70      	pop	{r4, r5, r6, pc}

000d6aac <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6aac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6aae:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d6ab0:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6ab2:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6ab4:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6ab6:	f7ff fd33 	bl	d6520 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6aba:	a901      	add	r1, sp, #4
   d6abc:	4620      	mov	r0, r4
   d6abe:	f7ff ffdb 	bl	d6a78 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6ac2:	b920      	cbnz	r0, d6ace <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d6ac4:	a803      	add	r0, sp, #12
   d6ac6:	f7ff ff2b 	bl	d6920 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d6aca:	b004      	add	sp, #16
   d6acc:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6ace:	6863      	ldr	r3, [r4, #4]
   d6ad0:	2b00      	cmp	r3, #0
   d6ad2:	d1f7      	bne.n	d6ac4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d6ad4:	f7ff fe24 	bl	d6720 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d6ad8:	e7f4      	b.n	d6ac4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d6ada <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d6ada:	b570      	push	{r4, r5, r6, lr}
   d6adc:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6ade:	6943      	ldr	r3, [r0, #20]
   d6ae0:	2618      	movs	r6, #24
   d6ae2:	4604      	mov	r4, r0
   d6ae4:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d6ae8:	42ae      	cmp	r6, r5
   d6aea:	d015      	beq.n	d6b18 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d6aec:	f105 0110 	add.w	r1, r5, #16
   d6af0:	4620      	mov	r0, r4
   d6af2:	f7ff ffc1 	bl	d6a78 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d6af6:	6863      	ldr	r3, [r4, #4]
   d6af8:	b90b      	cbnz	r3, d6afe <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d6afa:	f7ff fe11 	bl	d6720 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d6afe:	69e0      	ldr	r0, [r4, #28]
   d6b00:	6929      	ldr	r1, [r5, #16]
   d6b02:	6803      	ldr	r3, [r0, #0]
   d6b04:	68db      	ldr	r3, [r3, #12]
   d6b06:	4798      	blx	r3
        if (h.stream) {
   d6b08:	6969      	ldr	r1, [r5, #20]
   d6b0a:	b119      	cbz	r1, d6b14 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d6b0c:	6a20      	ldr	r0, [r4, #32]
   d6b0e:	6803      	ldr	r3, [r0, #0]
   d6b10:	68db      	ldr	r3, [r3, #12]
   d6b12:	4798      	blx	r3
   d6b14:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d6b16:	e7e7      	b.n	d6ae8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6b18:	6925      	ldr	r5, [r4, #16]
   d6b1a:	6963      	ldr	r3, [r4, #20]
   d6b1c:	2618      	movs	r6, #24
   d6b1e:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6b22:	42b5      	cmp	r5, r6
   d6b24:	d004      	beq.n	d6b30 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6b26:	4628      	mov	r0, r5
   d6b28:	f000 fe83 	bl	d7832 <_ZN6StringD1Ev>
   d6b2c:	3518      	adds	r5, #24
   d6b2e:	e7f8      	b.n	d6b22 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6b30:	2300      	movs	r3, #0
   d6b32:	6163      	str	r3, [r4, #20]
   d6b34:	bd70      	pop	{r4, r5, r6, pc}

000d6b36 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d6b36:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6b38:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6b3a:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d6b3c:	f7ff fdf0 	bl	d6720 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6b40:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6b44:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d6b48:	f7ff fcea 	bl	d6520 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d6b4c:	4620      	mov	r0, r4
   d6b4e:	f7ff ffc4 	bl	d6ada <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6b52:	4628      	mov	r0, r5
   d6b54:	f7ff fee4 	bl	d6920 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6b58:	6925      	ldr	r5, [r4, #16]
   d6b5a:	6963      	ldr	r3, [r4, #20]
   d6b5c:	2618      	movs	r6, #24
   d6b5e:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6b62:	42b5      	cmp	r5, r6
   d6b64:	d004      	beq.n	d6b70 <_ZN5spark10LogManagerD1Ev+0x3a>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6b66:	4628      	mov	r0, r5
   d6b68:	f000 fe63 	bl	d7832 <_ZN6StringD1Ev>
   d6b6c:	3518      	adds	r5, #24
   d6b6e:	e7f8      	b.n	d6b62 <_ZN5spark10LogManagerD1Ev+0x2c>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6b70:	6920      	ldr	r0, [r4, #16]
   d6b72:	f7fe fd85 	bl	d5680 <free>
   d6b76:	6820      	ldr	r0, [r4, #0]
   d6b78:	f7fe fd82 	bl	d5680 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d6b7c:	4620      	mov	r0, r4
   d6b7e:	b002      	add	sp, #8
   d6b80:	bd70      	pop	{r4, r5, r6, pc}

000d6b82 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b82:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6b84:	680a      	ldr	r2, [r1, #0]
   d6b86:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b88:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b8a:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6b8c:	684a      	ldr	r2, [r1, #4]
   d6b8e:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b90:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b92:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6b94:	688a      	ldr	r2, [r1, #8]
   d6b96:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b98:	608b      	str	r3, [r1, #8]
   d6b9a:	4770      	bx	lr

000d6b9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6b9c:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6b9e:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6ba0:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6ba2:	6003      	str	r3, [r0, #0]
   d6ba4:	6043      	str	r3, [r0, #4]
   d6ba6:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6ba8:	f7ff ffeb 	bl	d6b82 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d6bac:	4620      	mov	r0, r4
   d6bae:	bd10      	pop	{r4, pc}

000d6bb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6bb0:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6bb4:	4604      	mov	r4, r0
   d6bb6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6bb8:	d925      	bls.n	d6c06 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d6bba:	4290      	cmp	r0, r2
   d6bbc:	d224      	bcs.n	d6c08 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d6bbe:	1a55      	subs	r5, r2, r1
   d6bc0:	3d14      	subs	r5, #20
   d6bc2:	442c      	add	r4, r5
   d6bc4:	f1a1 0714 	sub.w	r7, r1, #20
   d6bc8:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6bcc:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6bce:	f1a5 0308 	sub.w	r3, r5, #8
   d6bd2:	429f      	cmp	r7, r3
   d6bd4:	d037      	beq.n	d6c46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d6bd6:	b184      	cbz	r4, d6bfa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6bd8:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d6bdc:	6023      	str	r3, [r4, #0]
   d6bde:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6be2:	80a3      	strh	r3, [r4, #4]
   d6be4:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6be8:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6bea:	60a6      	str	r6, [r4, #8]
   d6bec:	60e6      	str	r6, [r4, #12]
   d6bee:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6bf0:	4629      	mov	r1, r5
   d6bf2:	f104 0008 	add.w	r0, r4, #8
   d6bf6:	f7ff ffc4 	bl	d6b82 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6bfa:	4628      	mov	r0, r5
   d6bfc:	f7ff fe36 	bl	d686c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6c00:	3c14      	subs	r4, #20
   d6c02:	3d14      	subs	r5, #20
   d6c04:	e7e3      	b.n	d6bce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6c06:	d01e      	beq.n	d6c46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d6c08:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6c0c:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6c0e:	f1a5 0308 	sub.w	r3, r5, #8
   d6c12:	429e      	cmp	r6, r3
   d6c14:	d017      	beq.n	d6c46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d6c16:	b184      	cbz	r4, d6c3a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d6c18:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d6c1c:	6023      	str	r3, [r4, #0]
   d6c1e:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6c22:	80a3      	strh	r3, [r4, #4]
   d6c24:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6c28:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6c2a:	60a7      	str	r7, [r4, #8]
   d6c2c:	60e7      	str	r7, [r4, #12]
   d6c2e:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6c30:	4629      	mov	r1, r5
   d6c32:	f104 0008 	add.w	r0, r4, #8
   d6c36:	f7ff ffa4 	bl	d6b82 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6c3a:	4628      	mov	r0, r5
   d6c3c:	f7ff fe16 	bl	d686c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6c40:	3414      	adds	r4, #20
   d6c42:	3514      	adds	r5, #20
   d6c44:	e7e3      	b.n	d6c0e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d6c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c48 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6c4a:	6845      	ldr	r5, [r0, #4]
   d6c4c:	6883      	ldr	r3, [r0, #8]
   d6c4e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6c50:	4604      	mov	r4, r0
   d6c52:	460e      	mov	r6, r1
   d6c54:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6c56:	db0e      	blt.n	d6c76 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d6c58:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6c5a:	2d00      	cmp	r5, #0
   d6c5c:	dd05      	ble.n	d6c6a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d6c5e:	00a9      	lsls	r1, r5, #2
   d6c60:	6800      	ldr	r0, [r0, #0]
   d6c62:	f7fe fd15 	bl	d5690 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d6c66:	b920      	cbnz	r0, d6c72 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d6c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6c6a:	6800      	ldr	r0, [r0, #0]
   d6c6c:	f7fe fd08 	bl	d5680 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6c70:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d6c72:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d6c74:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6c76:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6c78:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6c7a:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6c7e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d6c82:	1a52      	subs	r2, r2, r1
   d6c84:	1d08      	adds	r0, r1, #4
   d6c86:	f002 f952 	bl	d8f2e <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d6c8a:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d6c8e:	6863      	ldr	r3, [r4, #4]
   d6c90:	3301      	adds	r3, #1
   d6c92:	6063      	str	r3, [r4, #4]
   d6c94:	2001      	movs	r0, #1
    return true;
}
   d6c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c98 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d6c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6c9a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d6c9c:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d6c9e:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6ca0:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6ca2:	f7ff fc3d 	bl	d6520 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d6ca6:	6823      	ldr	r3, [r4, #0]
   d6ca8:	6861      	ldr	r1, [r4, #4]
   d6caa:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6cae:	4283      	cmp	r3, r0
   d6cb0:	461a      	mov	r2, r3
   d6cb2:	d009      	beq.n	d6cc8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d6cb4:	6812      	ldr	r2, [r2, #0]
   d6cb6:	42aa      	cmp	r2, r5
   d6cb8:	f103 0304 	add.w	r3, r3, #4
   d6cbc:	d1f7      	bne.n	d6cae <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d6cbe:	a801      	add	r0, sp, #4
   d6cc0:	f7ff fe2e 	bl	d6920 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d6cc4:	2500      	movs	r5, #0
   d6cc6:	e00e      	b.n	d6ce6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6cc8:	462a      	mov	r2, r5
   d6cca:	4620      	mov	r0, r4
   d6ccc:	f7ff ffbc 	bl	d6c48 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d6cd0:	4605      	mov	r5, r0
   d6cd2:	2800      	cmp	r0, #0
   d6cd4:	d0f3      	beq.n	d6cbe <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d6cd6:	6863      	ldr	r3, [r4, #4]
   d6cd8:	2b01      	cmp	r3, #1
   d6cda:	d101      	bne.n	d6ce0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d6cdc:	f7ff fd14 	bl	d6708 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d6ce0:	a801      	add	r0, sp, #4
   d6ce2:	f7ff fe1d 	bl	d6920 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d6ce6:	4628      	mov	r0, r5
   d6ce8:	b003      	add	sp, #12
   d6cea:	bd30      	pop	{r4, r5, pc}

000d6cec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6cec:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6cf0:	4606      	mov	r6, r0
   d6cf2:	460c      	mov	r4, r1
   d6cf4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6cf6:	d914      	bls.n	d6d22 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d6cf8:	4290      	cmp	r0, r2
   d6cfa:	d213      	bcs.n	d6d24 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6cfc:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d6d00:	1a6c      	subs	r4, r5, r1
   d6d02:	f1a1 0710 	sub.w	r7, r1, #16
   d6d06:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6d08:	42af      	cmp	r7, r5
   d6d0a:	d018      	beq.n	d6d3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d6d0c:	b11c      	cbz	r4, d6d16 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d6d0e:	4629      	mov	r1, r5
   d6d10:	4620      	mov	r0, r4
   d6d12:	f000 fd7e 	bl	d7812 <_ZN6StringC1EOS_>
                end->~T();
   d6d16:	4628      	mov	r0, r5
   d6d18:	f000 fd8b 	bl	d7832 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6d1c:	3d10      	subs	r5, #16
   d6d1e:	3c10      	subs	r4, #16
   d6d20:	e7f2      	b.n	d6d08 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6d22:	d00c      	beq.n	d6d3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d6d24:	42ac      	cmp	r4, r5
   d6d26:	d00a      	beq.n	d6d3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d6d28:	b11e      	cbz	r6, d6d32 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d6d2a:	4621      	mov	r1, r4
   d6d2c:	4630      	mov	r0, r6
   d6d2e:	f000 fd70 	bl	d7812 <_ZN6StringC1EOS_>
                p->~T();
   d6d32:	4620      	mov	r0, r4
   d6d34:	f000 fd7d 	bl	d7832 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6d38:	3410      	adds	r4, #16
   d6d3a:	3610      	adds	r6, #16
   d6d3c:	e7f2      	b.n	d6d24 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d6d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6d40:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6d42:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6d44:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6d46:	dd0b      	ble.n	d6d60 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6d48:	0130      	lsls	r0, r6, #4
   d6d4a:	f7fe fc91 	bl	d5670 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6d4e:	4604      	mov	r4, r0
   d6d50:	b170      	cbz	r0, d6d70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6d52:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6d56:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d6d5a:	f7ff ffc7 	bl	d6cec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d6d5e:	e000      	b.n	d6d62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6d60:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6d62:	6828      	ldr	r0, [r5, #0]
   d6d64:	f7fe fc8c 	bl	d5680 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6d68:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6d6a:	60ae      	str	r6, [r5, #8]
        return true;
   d6d6c:	2001      	movs	r0, #1
   d6d6e:	bd70      	pop	{r4, r5, r6, pc}
    }
   d6d70:	bd70      	pop	{r4, r5, r6, pc}

000d6d72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6d72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6d76:	2300      	movs	r3, #0
   d6d78:	b095      	sub	sp, #84	; 0x54
   d6d7a:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d6d7c:	2246      	movs	r2, #70	; 0x46
   d6d7e:	6003      	str	r3, [r0, #0]
   d6d80:	6043      	str	r3, [r0, #4]
   d6d82:	6083      	str	r3, [r0, #8]
   d6d84:	60c3      	str	r3, [r0, #12]
   d6d86:	6103      	str	r3, [r0, #16]
   d6d88:	6143      	str	r3, [r0, #20]
   d6d8a:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6d8c:	9102      	str	r1, [sp, #8]
   d6d8e:	f8da 1004 	ldr.w	r1, [sl, #4]
   d6d92:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6d94:	4299      	cmp	r1, r3
   d6d96:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6d98:	9309      	str	r3, [sp, #36]	; 0x24
   d6d9a:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6d9c:	f340 809d 	ble.w	d6eda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d6da0:	a808      	add	r0, sp, #32
   d6da2:	f7ff ffcd 	bl	d6d40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6da6:	2800      	cmp	r0, #0
   d6da8:	f040 8097 	bne.w	d6eda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d6dac:	e08e      	b.n	d6ecc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d6dae:	4621      	mov	r1, r4
   d6db0:	a80b      	add	r0, sp, #44	; 0x2c
   d6db2:	f000 fd2e 	bl	d7812 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6db6:	a90b      	add	r1, sp, #44	; 0x2c
   d6db8:	a80f      	add	r0, sp, #60	; 0x3c
   d6dba:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d6dbc:	f000 fd29 	bl	d7812 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6dc0:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6dc4:	4299      	cmp	r1, r3
   d6dc6:	f2c0 80ce 	blt.w	d6f66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d6dca:	3101      	adds	r1, #1
   d6dcc:	a808      	add	r0, sp, #32
   d6dce:	f7ff ffb7 	bl	d6d40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6dd2:	2800      	cmp	r0, #0
   d6dd4:	f040 80c7 	bne.w	d6f66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6dd8:	a80f      	add	r0, sp, #60	; 0x3c
   d6dda:	f000 fd2a 	bl	d7832 <_ZN6StringD1Ev>
   d6dde:	a80b      	add	r0, sp, #44	; 0x2c
   d6de0:	f000 fd27 	bl	d7832 <_ZN6StringD1Ev>
   d6de4:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d6de6:	42a7      	cmp	r7, r4
   d6de8:	d1e1      	bne.n	d6dae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6dea:	2600      	movs	r6, #0
   d6dec:	960b      	str	r6, [sp, #44]	; 0x2c
   d6dee:	960c      	str	r6, [sp, #48]	; 0x30
   d6df0:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6df2:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6df6:	429e      	cmp	r6, r3
   d6df8:	f280 80a8 	bge.w	d6f4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d6dfc:	0133      	lsls	r3, r6, #4
   d6dfe:	9a08      	ldr	r2, [sp, #32]
   d6e00:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d6e02:	9306      	str	r3, [sp, #24]
        if (!category) {
   d6e04:	2b00      	cmp	r3, #0
   d6e06:	f000 809f 	beq.w	d6f48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d6e0a:	2314      	movs	r3, #20
   d6e0c:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6e0e:	f8cd 901c 	str.w	r9, [sp, #28]
   d6e12:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d6e14:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6e16:	a907      	add	r1, sp, #28
   d6e18:	a806      	add	r0, sp, #24
   d6e1a:	f7ff fb30 	bl	d647e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6e1e:	4607      	mov	r7, r0
   d6e20:	2800      	cmp	r0, #0
   d6e22:	f000 8091 	beq.w	d6f48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d6e26:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d6e28:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d6e2a:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d6e2e:	9a07      	ldr	r2, [sp, #28]
   d6e30:	4620      	mov	r0, r4
   d6e32:	f7ff fb91 	bl	d6558 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6e36:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d6e3a:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6e3c:	f1b8 0f00 	cmp.w	r8, #0
   d6e40:	d153      	bne.n	d6eea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d6e42:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d6e46:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d6e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6e4e:	970f      	str	r7, [sp, #60]	; 0x3c
   d6e50:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d6e54:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d6e58:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d6e5c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6e60:	6867      	ldr	r7, [r4, #4]
   d6e62:	68a3      	ldr	r3, [r4, #8]
   d6e64:	429f      	cmp	r7, r3
   d6e66:	da4f      	bge.n	d6f08 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d6e68:	9b00      	ldr	r3, [sp, #0]
   d6e6a:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d6e6e:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6e70:	2214      	movs	r2, #20
   d6e72:	4353      	muls	r3, r2
   d6e74:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d6e78:	fb02 b201 	mla	r2, r2, r1, fp
   d6e7c:	f107 0014 	add.w	r0, r7, #20
   d6e80:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6e82:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d6e84:	f7ff fe94 	bl	d6bb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d6e88:	b1a7      	cbz	r7, d6eb4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6e8a:	9b03      	ldr	r3, [sp, #12]
   d6e8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d6e8e:	f84b 2003 	str.w	r2, [fp, r3]
   d6e92:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d6e96:	80bb      	strh	r3, [r7, #4]
   d6e98:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d6e9c:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6e9e:	f8c7 9008 	str.w	r9, [r7, #8]
   d6ea2:	f8c7 900c 	str.w	r9, [r7, #12]
   d6ea6:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6eaa:	a911      	add	r1, sp, #68	; 0x44
   d6eac:	f107 0008 	add.w	r0, r7, #8
   d6eb0:	f7ff fe67 	bl	d6b82 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d6eb4:	6863      	ldr	r3, [r4, #4]
   d6eb6:	3301      	adds	r3, #1
   d6eb8:	6063      	str	r3, [r4, #4]
   d6eba:	a811      	add	r0, sp, #68	; 0x44
   d6ebc:	f7ff fcd6 	bl	d686c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6ec0:	f1b8 0f00 	cmp.w	r8, #0
   d6ec4:	d011      	beq.n	d6eea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d6ec6:	a80b      	add	r0, sp, #44	; 0x2c
   d6ec8:	f7ff fcd0 	bl	d686c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6ecc:	a808      	add	r0, sp, #32
   d6ece:	f7ff fce1 	bl	d6894 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d6ed2:	4628      	mov	r0, r5
   d6ed4:	b015      	add	sp, #84	; 0x54
   d6ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6eda:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6ede:	f8da 3004 	ldr.w	r3, [sl, #4]
   d6ee2:	2714      	movs	r7, #20
   d6ee4:	fb07 4703 	mla	r7, r7, r3, r4
   d6ee8:	e77d      	b.n	d6de6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d6eea:	6823      	ldr	r3, [r4, #0]
   d6eec:	9a00      	ldr	r2, [sp, #0]
   d6eee:	2414      	movs	r4, #20
   d6ef0:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d6ef4:	9b06      	ldr	r3, [sp, #24]
   d6ef6:	781b      	ldrb	r3, [r3, #0]
   d6ef8:	bb23      	cbnz	r3, d6f44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d6efa:	f8da 3000 	ldr.w	r3, [sl]
   d6efe:	9a01      	ldr	r2, [sp, #4]
   d6f00:	4413      	add	r3, r2
   d6f02:	7c1b      	ldrb	r3, [r3, #16]
   d6f04:	80e3      	strh	r3, [r4, #6]
   d6f06:	e01d      	b.n	d6f44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6f08:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6f0a:	2f00      	cmp	r7, #0
   d6f0c:	dd0f      	ble.n	d6f2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6f0e:	2314      	movs	r3, #20
   d6f10:	fb03 f007 	mul.w	r0, r3, r7
   d6f14:	9303      	str	r3, [sp, #12]
   d6f16:	f7fe fbab 	bl	d5670 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6f1a:	4683      	mov	fp, r0
   d6f1c:	b178      	cbz	r0, d6f3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d6f1e:	e894 0006 	ldmia.w	r4, {r1, r2}
   d6f22:	9b03      	ldr	r3, [sp, #12]
   d6f24:	fb03 1202 	mla	r2, r3, r2, r1
   d6f28:	f7ff fe42 	bl	d6bb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d6f2c:	e000      	b.n	d6f30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6f2e:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6f30:	6820      	ldr	r0, [r4, #0]
   d6f32:	f7fe fba5 	bl	d5680 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6f36:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d6f3a:	60a7      	str	r7, [r4, #8]
   d6f3c:	e794      	b.n	d6e68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6f3e:	f04f 0801 	mov.w	r8, #1
   d6f42:	e7ba      	b.n	d6eba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d6f44:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6f46:	e766      	b.n	d6e16 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6f48:	3601      	adds	r6, #1
   d6f4a:	e753      	b.n	d6df4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d6f4c:	a908      	add	r1, sp, #32
   d6f4e:	4628      	mov	r0, r5
   d6f50:	f7ff fe17 	bl	d6b82 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d6f54:	a90b      	add	r1, sp, #44	; 0x2c
   d6f56:	f105 000c 	add.w	r0, r5, #12
   d6f5a:	f7ff fe12 	bl	d6b82 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d6f5e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6f62:	762b      	strb	r3, [r5, #24]
   d6f64:	e7af      	b.n	d6ec6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6f66:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d6f68:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6f6a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d6f6e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d6f72:	4631      	mov	r1, r6
   d6f74:	f106 0010 	add.w	r0, r6, #16
   d6f78:	f7ff feb8 	bl	d6cec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d6f7c:	b11e      	cbz	r6, d6f86 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d6f7e:	a90f      	add	r1, sp, #60	; 0x3c
   d6f80:	4630      	mov	r0, r6
   d6f82:	f000 fc46 	bl	d7812 <_ZN6StringC1EOS_>
    ++size_;
   d6f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6f88:	3301      	adds	r3, #1
   d6f8a:	9309      	str	r3, [sp, #36]	; 0x24
   d6f8c:	e724      	b.n	d6dd8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d6f90 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d6f90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d6f92:	4604      	mov	r4, r0
   d6f94:	4b09      	ldr	r3, [pc, #36]	; (d6fbc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d6f96:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d6f9a:	4605      	mov	r5, r0
   d6f9c:	460e      	mov	r6, r1
        filter_(level, filters) {
   d6f9e:	a801      	add	r0, sp, #4
   d6fa0:	4611      	mov	r1, r2
   d6fa2:	f7fd fc00 	bl	d47a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6fa6:	aa01      	add	r2, sp, #4
   d6fa8:	4631      	mov	r1, r6
   d6faa:	4620      	mov	r0, r4
   d6fac:	f7ff fee1 	bl	d6d72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6fb0:	a801      	add	r0, sp, #4
   d6fb2:	f7fd fbb7 	bl	d4724 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d6fb6:	4628      	mov	r0, r5
   d6fb8:	b004      	add	sp, #16
   d6fba:	bd70      	pop	{r4, r5, r6, pc}
   d6fbc:	000da70c 	.word	0x000da70c

000d6fc0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6fc2:	460f      	mov	r7, r1
   d6fc4:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6fc6:	492b      	ldr	r1, [pc, #172]	; (d7074 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6fc8:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6fca:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6fcc:	4616      	mov	r6, r2
   d6fce:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6fd0:	f002 fa5e 	bl	d9490 <strcmp>
   d6fd4:	bb28      	cbnz	r0, d7022 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d6fd6:	2c00      	cmp	r4, #0
   d6fd8:	d049      	beq.n	d706e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d6fda:	4629      	mov	r1, r5
   d6fdc:	a801      	add	r0, sp, #4
   d6fde:	f7ff fddd 	bl	d6b9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6fe2:	4925      	ldr	r1, [pc, #148]	; (d7078 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6fe4:	2024      	movs	r0, #36	; 0x24
   d6fe6:	f001 f837 	bl	d8058 <_ZnwjRKSt9nothrow_t>
   d6fea:	4605      	mov	r5, r0
   d6fec:	b1b8      	cbz	r0, d701e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d6fee:	a901      	add	r1, sp, #4
   d6ff0:	a804      	add	r0, sp, #16
   d6ff2:	f7ff fdd3 	bl	d6b9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d6ff6:	a904      	add	r1, sp, #16
   d6ff8:	a807      	add	r0, sp, #28
   d6ffa:	f7fd fbd4 	bl	d47a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6ffe:	aa07      	add	r2, sp, #28
   d7000:	4631      	mov	r1, r6
   d7002:	4628      	mov	r0, r5
   d7004:	f7ff ffc4 	bl	d6f90 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7008:	a807      	add	r0, sp, #28
   d700a:	f7fd fb8b 	bl	d4724 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d700e:	4b1b      	ldr	r3, [pc, #108]	; (d707c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d7010:	602b      	str	r3, [r5, #0]
   d7012:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d7014:	a804      	add	r0, sp, #16
   d7016:	f7fd fb85 	bl	d4724 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d701a:	4b19      	ldr	r3, [pc, #100]	; (d7080 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d701c:	602b      	str	r3, [r5, #0]
   d701e:	a801      	add	r0, sp, #4
   d7020:	e01f      	b.n	d7062 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d7022:	4918      	ldr	r1, [pc, #96]	; (d7084 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d7024:	4638      	mov	r0, r7
   d7026:	f002 fa33 	bl	d9490 <strcmp>
   d702a:	b9f0      	cbnz	r0, d706a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d702c:	b1fc      	cbz	r4, d706e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d702e:	4629      	mov	r1, r5
   d7030:	a804      	add	r0, sp, #16
   d7032:	f7ff fdb3 	bl	d6b9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7036:	4910      	ldr	r1, [pc, #64]	; (d7078 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d7038:	2024      	movs	r0, #36	; 0x24
   d703a:	f001 f80d 	bl	d8058 <_ZnwjRKSt9nothrow_t>
   d703e:	4605      	mov	r5, r0
   d7040:	b170      	cbz	r0, d7060 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d7042:	a904      	add	r1, sp, #16
   d7044:	a807      	add	r0, sp, #28
   d7046:	f7fd fbae 	bl	d47a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d704a:	aa07      	add	r2, sp, #28
   d704c:	4631      	mov	r1, r6
   d704e:	4628      	mov	r0, r5
   d7050:	f7ff ff9e 	bl	d6f90 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7054:	a807      	add	r0, sp, #28
   d7056:	f7fd fb65 	bl	d4724 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d705a:	4b08      	ldr	r3, [pc, #32]	; (d707c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d705c:	602b      	str	r3, [r5, #0]
   d705e:	622c      	str	r4, [r5, #32]
   d7060:	a804      	add	r0, sp, #16
   d7062:	f7fd fb5f 	bl	d4724 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7066:	4628      	mov	r0, r5
   d7068:	e002      	b.n	d7070 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d706a:	2000      	movs	r0, #0
   d706c:	e000      	b.n	d7070 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d706e:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d7070:	b00b      	add	sp, #44	; 0x2c
   d7072:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7074:	000dabdf 	.word	0x000dabdf
   d7078:	000dad90 	.word	0x000dad90
   d707c:	000dac68 	.word	0x000dac68
   d7080:	000dab5c 	.word	0x000dab5c
   d7084:	000dabe3 	.word	0x000dabe3

000d7088 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7088:	4b01      	ldr	r3, [pc, #4]	; (d7090 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d708a:	4a02      	ldr	r2, [pc, #8]	; (d7094 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d708c:	601a      	str	r2, [r3, #0]
   d708e:	4770      	bx	lr
   d7090:	2003e264 	.word	0x2003e264
   d7094:	000dabf4 	.word	0x000dabf4

000d7098 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d709c:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d709e:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d70a2:	4604      	mov	r4, r0
   d70a4:	460e      	mov	r6, r1
   d70a6:	4617      	mov	r7, r2
   d70a8:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d70aa:	f000 fe6d 	bl	d7d88 <_Z16_fetch_usbserialv>
   d70ae:	4581      	cmp	r9, r0
   d70b0:	d105      	bne.n	d70be <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d70b2:	485a      	ldr	r0, [pc, #360]	; (d721c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d70b4:	f000 fa67 	bl	d7586 <_ZN5spark12NetworkClass9listeningEv>
   d70b8:	2800      	cmp	r0, #0
   d70ba:	f040 80ac 	bne.w	d7216 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d70be:	792b      	ldrb	r3, [r5, #4]
   d70c0:	071b      	lsls	r3, r3, #28
   d70c2:	d505      	bpl.n	d70d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d70c4:	696b      	ldr	r3, [r5, #20]
   d70c6:	4a56      	ldr	r2, [pc, #344]	; (d7220 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d70c8:	6a20      	ldr	r0, [r4, #32]
   d70ca:	2100      	movs	r1, #0
   d70cc:	f000 fb34 	bl	d7738 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d70d0:	f1b8 0f00 	cmp.w	r8, #0
   d70d4:	d00d      	beq.n	d70f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d70d6:	215b      	movs	r1, #91	; 0x5b
   d70d8:	4620      	mov	r0, r4
   d70da:	f7ff fa32 	bl	d6542 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d70de:	4641      	mov	r1, r8
   d70e0:	4620      	mov	r0, r4
   d70e2:	f7ff fa20 	bl	d6526 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d70e6:	6823      	ldr	r3, [r4, #0]
   d70e8:	494e      	ldr	r1, [pc, #312]	; (d7224 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d70ea:	68db      	ldr	r3, [r3, #12]
   d70ec:	2202      	movs	r2, #2
   d70ee:	4620      	mov	r0, r4
   d70f0:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d70f2:	792b      	ldrb	r3, [r5, #4]
   d70f4:	07d9      	lsls	r1, r3, #31
   d70f6:	d525      	bpl.n	d7144 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d70f8:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d70fc:	212f      	movs	r1, #47	; 0x2f
   d70fe:	4640      	mov	r0, r8
   d7100:	f002 ff25 	bl	d9f4e <strrchr>
    if (s1) {
   d7104:	b108      	cbz	r0, d710a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d7106:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d710a:	4641      	mov	r1, r8
   d710c:	4620      	mov	r0, r4
   d710e:	f7ff fa0a 	bl	d6526 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d7112:	792b      	ldrb	r3, [r5, #4]
   d7114:	079a      	lsls	r2, r3, #30
   d7116:	d509      	bpl.n	d712c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d7118:	213a      	movs	r1, #58	; 0x3a
   d711a:	4620      	mov	r0, r4
   d711c:	f7ff fa11 	bl	d6542 <_ZN5spark16StreamLogHandler5writeEc>
   d7120:	68eb      	ldr	r3, [r5, #12]
   d7122:	4a41      	ldr	r2, [pc, #260]	; (d7228 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d7124:	6a20      	ldr	r0, [r4, #32]
   d7126:	2100      	movs	r1, #0
   d7128:	f000 fb06 	bl	d7738 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d712c:	792b      	ldrb	r3, [r5, #4]
   d712e:	f013 0f04 	tst.w	r3, #4
   d7132:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d7134:	bf18      	it	ne
   d7136:	493d      	ldrne	r1, [pc, #244]	; (d722c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7138:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d713a:	bf08      	it	eq
   d713c:	493c      	ldreq	r1, [pc, #240]	; (d7230 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d713e:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d7140:	4620      	mov	r0, r4
   d7142:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d7144:	792b      	ldrb	r3, [r5, #4]
   d7146:	075b      	lsls	r3, r3, #29
   d7148:	d518      	bpl.n	d717c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d714a:	6929      	ldr	r1, [r5, #16]
   d714c:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d714e:	4613      	mov	r3, r2
   d7150:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7154:	b138      	cbz	r0, d7166 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d7156:	2820      	cmp	r0, #32
   d7158:	d101      	bne.n	d715e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d715a:	4619      	mov	r1, r3
   d715c:	e001      	b.n	d7162 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d715e:	2828      	cmp	r0, #40	; 0x28
   d7160:	d001      	beq.n	d7166 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7162:	461a      	mov	r2, r3
   d7164:	e7f3      	b.n	d714e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d7166:	6823      	ldr	r3, [r4, #0]
   d7168:	1a52      	subs	r2, r2, r1
   d716a:	68db      	ldr	r3, [r3, #12]
   d716c:	4620      	mov	r0, r4
   d716e:	4798      	blx	r3
        write("(): ", 4);
   d7170:	6823      	ldr	r3, [r4, #0]
   d7172:	4930      	ldr	r1, [pc, #192]	; (d7234 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d7174:	68db      	ldr	r3, [r3, #12]
   d7176:	2204      	movs	r2, #4
   d7178:	4620      	mov	r0, r4
   d717a:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d717c:	2100      	movs	r1, #0
   d717e:	4638      	mov	r0, r7
   d7180:	f7fe f98a 	bl	d5498 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d7184:	4601      	mov	r1, r0
   d7186:	4620      	mov	r0, r4
   d7188:	f7ff f9cd 	bl	d6526 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d718c:	6823      	ldr	r3, [r4, #0]
   d718e:	4928      	ldr	r1, [pc, #160]	; (d7230 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d7190:	68db      	ldr	r3, [r3, #12]
   d7192:	2202      	movs	r2, #2
   d7194:	4620      	mov	r0, r4
   d7196:	4798      	blx	r3
    // Message
    if (msg) {
   d7198:	b11e      	cbz	r6, d71a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d719a:	4631      	mov	r1, r6
   d719c:	4620      	mov	r0, r4
   d719e:	f7ff f9c2 	bl	d6526 <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d71a2:	792b      	ldrb	r3, [r5, #4]
   d71a4:	f013 0f30 	tst.w	r3, #48	; 0x30
   d71a8:	d02d      	beq.n	d7206 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d71aa:	6823      	ldr	r3, [r4, #0]
   d71ac:	4922      	ldr	r1, [pc, #136]	; (d7238 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d71ae:	68db      	ldr	r3, [r3, #12]
   d71b0:	4620      	mov	r0, r4
   d71b2:	2202      	movs	r2, #2
   d71b4:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d71b6:	792b      	ldrb	r3, [r5, #4]
   d71b8:	06d8      	lsls	r0, r3, #27
   d71ba:	d50b      	bpl.n	d71d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d71bc:	6823      	ldr	r3, [r4, #0]
   d71be:	491f      	ldr	r1, [pc, #124]	; (d723c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d71c0:	68db      	ldr	r3, [r3, #12]
   d71c2:	2207      	movs	r2, #7
   d71c4:	4620      	mov	r0, r4
   d71c6:	4798      	blx	r3
   d71c8:	69ab      	ldr	r3, [r5, #24]
   d71ca:	4a1d      	ldr	r2, [pc, #116]	; (d7240 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d71cc:	6a20      	ldr	r0, [r4, #32]
   d71ce:	2100      	movs	r1, #0
   d71d0:	f000 fab2 	bl	d7738 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d71d4:	792b      	ldrb	r3, [r5, #4]
   d71d6:	0699      	lsls	r1, r3, #26
   d71d8:	d511      	bpl.n	d71fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d71da:	06da      	lsls	r2, r3, #27
   d71dc:	d505      	bpl.n	d71ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d71de:	6823      	ldr	r3, [r4, #0]
   d71e0:	4912      	ldr	r1, [pc, #72]	; (d722c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d71e2:	68db      	ldr	r3, [r3, #12]
   d71e4:	2202      	movs	r2, #2
   d71e6:	4620      	mov	r0, r4
   d71e8:	4798      	blx	r3
            }
            write("details = ", 10);
   d71ea:	6823      	ldr	r3, [r4, #0]
   d71ec:	4915      	ldr	r1, [pc, #84]	; (d7244 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d71ee:	68db      	ldr	r3, [r3, #12]
   d71f0:	4620      	mov	r0, r4
   d71f2:	220a      	movs	r2, #10
   d71f4:	4798      	blx	r3
            write(attr.details);
   d71f6:	69e9      	ldr	r1, [r5, #28]
   d71f8:	4620      	mov	r0, r4
   d71fa:	f7ff f994 	bl	d6526 <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d71fe:	215d      	movs	r1, #93	; 0x5d
   d7200:	4620      	mov	r0, r4
   d7202:	f7ff f99e 	bl	d6542 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d7206:	6823      	ldr	r3, [r4, #0]
   d7208:	490f      	ldr	r1, [pc, #60]	; (d7248 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d720a:	68db      	ldr	r3, [r3, #12]
   d720c:	4620      	mov	r0, r4
   d720e:	2202      	movs	r2, #2
}
   d7210:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d7214:	4718      	bx	r3
   d7216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d721a:	bf00      	nop
   d721c:	2003e43c 	.word	0x2003e43c
   d7220:	000dabf8 	.word	0x000dabf8
   d7224:	000dabff 	.word	0x000dabff
   d7228:	000db03f 	.word	0x000db03f
   d722c:	000dac02 	.word	0x000dac02
   d7230:	000dac07 	.word	0x000dac07
   d7234:	000dac05 	.word	0x000dac05
   d7238:	000dac0a 	.word	0x000dac0a
   d723c:	000dac0d 	.word	0x000dac0d
   d7240:	000dac15 	.word	0x000dac15
   d7244:	000dac18 	.word	0x000dac18
   d7248:	000dac23 	.word	0x000dac23

000d724c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d724c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7250:	b085      	sub	sp, #20
   d7252:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d7256:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d7258:	4606      	mov	r6, r0
   d725a:	460f      	mov	r7, r1
   d725c:	4691      	mov	r9, r2
   d725e:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d7260:	f000 fd92 	bl	d7d88 <_Z16_fetch_usbserialv>
   d7264:	4580      	cmp	r8, r0
   d7266:	d105      	bne.n	d7274 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d7268:	484a      	ldr	r0, [pc, #296]	; (d7394 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d726a:	f000 f98c 	bl	d7586 <_ZN5spark12NetworkClass9listeningEv>
   d726e:	2800      	cmp	r0, #0
   d7270:	f040 808c 	bne.w	d738c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d7274:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7276:	4a48      	ldr	r2, [pc, #288]	; (d7398 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d7278:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d727a:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d727e:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7280:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d7282:	f88d 8008 	strb.w	r8, [sp, #8]
   d7286:	f7fe fff0 	bl	d626a <_ZN5spark10JSONWriter11beginObjectEv>
   d728a:	4641      	mov	r1, r8
   d728c:	4648      	mov	r0, r9
   d728e:	f7fe f903 	bl	d5498 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d7292:	4942      	ldr	r1, [pc, #264]	; (d739c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d7294:	4680      	mov	r8, r0
   d7296:	2201      	movs	r2, #1
   d7298:	a801      	add	r0, sp, #4
   d729a:	f7ff f86b 	bl	d6374 <_ZN5spark10JSONWriter4nameEPKcj>
   d729e:	4641      	mov	r1, r8
   d72a0:	f7ff f931 	bl	d6506 <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d72a4:	b13f      	cbz	r7, d72b6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d72a6:	493e      	ldr	r1, [pc, #248]	; (d73a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d72a8:	2201      	movs	r2, #1
   d72aa:	a801      	add	r0, sp, #4
   d72ac:	f7ff f862 	bl	d6374 <_ZN5spark10JSONWriter4nameEPKcj>
   d72b0:	4639      	mov	r1, r7
   d72b2:	f7ff f928 	bl	d6506 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d72b6:	b13d      	cbz	r5, d72c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d72b8:	493a      	ldr	r1, [pc, #232]	; (d73a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d72ba:	2201      	movs	r2, #1
   d72bc:	a801      	add	r0, sp, #4
   d72be:	f7ff f859 	bl	d6374 <_ZN5spark10JSONWriter4nameEPKcj>
   d72c2:	4629      	mov	r1, r5
   d72c4:	f7ff f91f 	bl	d6506 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d72c8:	7923      	ldrb	r3, [r4, #4]
   d72ca:	07df      	lsls	r7, r3, #31
   d72cc:	d50e      	bpl.n	d72ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d72ce:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d72d0:	212f      	movs	r1, #47	; 0x2f
   d72d2:	4628      	mov	r0, r5
   d72d4:	f002 fe3b 	bl	d9f4e <strrchr>
    if (s1) {
   d72d8:	b100      	cbz	r0, d72dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d72da:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d72dc:	4932      	ldr	r1, [pc, #200]	; (d73a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d72de:	2201      	movs	r2, #1
   d72e0:	a801      	add	r0, sp, #4
   d72e2:	f7ff f847 	bl	d6374 <_ZN5spark10JSONWriter4nameEPKcj>
   d72e6:	4629      	mov	r1, r5
   d72e8:	f7ff f90d 	bl	d6506 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d72ec:	7923      	ldrb	r3, [r4, #4]
   d72ee:	079d      	lsls	r5, r3, #30
   d72f0:	d507      	bpl.n	d7302 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d72f2:	492e      	ldr	r1, [pc, #184]	; (d73ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d72f4:	2202      	movs	r2, #2
   d72f6:	a801      	add	r0, sp, #4
   d72f8:	f7ff f83c 	bl	d6374 <_ZN5spark10JSONWriter4nameEPKcj>
   d72fc:	68e1      	ldr	r1, [r4, #12]
   d72fe:	f7fe ffc1 	bl	d6284 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d7302:	7923      	ldrb	r3, [r4, #4]
   d7304:	0758      	lsls	r0, r3, #29
   d7306:	d516      	bpl.n	d7336 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7308:	6925      	ldr	r5, [r4, #16]
   d730a:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d730c:	463b      	mov	r3, r7
   d730e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7312:	b13a      	cbz	r2, d7324 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d7314:	2a20      	cmp	r2, #32
   d7316:	d101      	bne.n	d731c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d7318:	461d      	mov	r5, r3
   d731a:	e001      	b.n	d7320 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d731c:	2a28      	cmp	r2, #40	; 0x28
   d731e:	d001      	beq.n	d7324 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7320:	461f      	mov	r7, r3
   d7322:	e7f3      	b.n	d730c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d7324:	2202      	movs	r2, #2
   d7326:	4922      	ldr	r1, [pc, #136]	; (d73b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d7328:	a801      	add	r0, sp, #4
   d732a:	f7ff f823 	bl	d6374 <_ZN5spark10JSONWriter4nameEPKcj>
   d732e:	1b7a      	subs	r2, r7, r5
   d7330:	4629      	mov	r1, r5
   d7332:	f7ff f82e 	bl	d6392 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d7336:	7923      	ldrb	r3, [r4, #4]
   d7338:	0719      	lsls	r1, r3, #28
   d733a:	d507      	bpl.n	d734c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d733c:	491d      	ldr	r1, [pc, #116]	; (d73b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d733e:	2201      	movs	r2, #1
   d7340:	a801      	add	r0, sp, #4
   d7342:	f7ff f817 	bl	d6374 <_ZN5spark10JSONWriter4nameEPKcj>
   d7346:	6961      	ldr	r1, [r4, #20]
   d7348:	f7fe ffae 	bl	d62a8 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d734c:	7923      	ldrb	r3, [r4, #4]
   d734e:	06da      	lsls	r2, r3, #27
   d7350:	d508      	bpl.n	d7364 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d7352:	2204      	movs	r2, #4
   d7354:	4918      	ldr	r1, [pc, #96]	; (d73b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d7356:	eb0d 0002 	add.w	r0, sp, r2
   d735a:	f7ff f80b 	bl	d6374 <_ZN5spark10JSONWriter4nameEPKcj>
   d735e:	69a1      	ldr	r1, [r4, #24]
   d7360:	f7fe ff90 	bl	d6284 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d7364:	7923      	ldrb	r3, [r4, #4]
   d7366:	069b      	lsls	r3, r3, #26
   d7368:	d507      	bpl.n	d737a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d736a:	4914      	ldr	r1, [pc, #80]	; (d73bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d736c:	2206      	movs	r2, #6
   d736e:	a801      	add	r0, sp, #4
   d7370:	f7ff f800 	bl	d6374 <_ZN5spark10JSONWriter4nameEPKcj>
   d7374:	69e1      	ldr	r1, [r4, #28]
   d7376:	f7ff f8c6 	bl	d6506 <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d737a:	a801      	add	r0, sp, #4
   d737c:	f7fe ff5f 	bl	d623e <_ZN5spark10JSONWriter9endObjectEv>
   d7380:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d7382:	490f      	ldr	r1, [pc, #60]	; (d73c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d7384:	6803      	ldr	r3, [r0, #0]
   d7386:	2202      	movs	r2, #2
   d7388:	68db      	ldr	r3, [r3, #12]
   d738a:	4798      	blx	r3
}
   d738c:	b005      	add	sp, #20
   d738e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7392:	bf00      	nop
   d7394:	2003e43c 	.word	0x2003e43c
   d7398:	000dab44 	.word	0x000dab44
   d739c:	000dab8e 	.word	0x000dab8e
   d73a0:	000daba1 	.word	0x000daba1
   d73a4:	000db0a1 	.word	0x000db0a1
   d73a8:	000da750 	.word	0x000da750
   d73ac:	000dac26 	.word	0x000dac26
   d73b0:	000dac29 	.word	0x000dac29
   d73b4:	000db10f 	.word	0x000db10f
   d73b8:	000dac2c 	.word	0x000dac2c
   d73bc:	000dac31 	.word	0x000dac31
   d73c0:	000dac23 	.word	0x000dac23

000d73c4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d73c4:	2200      	movs	r2, #0
   d73c6:	4611      	mov	r1, r2
   d73c8:	6840      	ldr	r0, [r0, #4]
   d73ca:	f7fe b939 	b.w	d5640 <network_listening>

000d73ce <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d73ce:	2200      	movs	r2, #0
   d73d0:	4611      	mov	r1, r2
   d73d2:	6840      	ldr	r0, [r0, #4]
   d73d4:	f7fe b944 	b.w	d5660 <network_get_listen_timeout>

000d73d8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d73d8:	2200      	movs	r2, #0
   d73da:	6840      	ldr	r0, [r0, #4]
   d73dc:	f7fe b938 	b.w	d5650 <network_set_listen_timeout>

000d73e0 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d73e0:	2200      	movs	r2, #0
   d73e2:	f081 0101 	eor.w	r1, r1, #1
   d73e6:	6840      	ldr	r0, [r0, #4]
   d73e8:	f7fe b922 	b.w	d5630 <network_listen>

000d73ec <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d73ec:	2300      	movs	r3, #0
   d73ee:	461a      	mov	r2, r3
   d73f0:	2101      	movs	r1, #1
   d73f2:	6840      	ldr	r0, [r0, #4]
   d73f4:	f7fe b914 	b.w	d5620 <network_off>

000d73f8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d73f8:	2300      	movs	r3, #0
   d73fa:	461a      	mov	r2, r3
   d73fc:	4619      	mov	r1, r3
   d73fe:	6840      	ldr	r0, [r0, #4]
   d7400:	f7fe b906 	b.w	d5610 <network_on>

000d7404 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7404:	2200      	movs	r2, #0
   d7406:	4611      	mov	r1, r2
   d7408:	6840      	ldr	r0, [r0, #4]
   d740a:	f7fe b8f9 	b.w	d5600 <network_ready>

000d740e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d740e:	2200      	movs	r2, #0
   d7410:	4611      	mov	r1, r2
   d7412:	6840      	ldr	r0, [r0, #4]
   d7414:	f7fe b8e4 	b.w	d55e0 <network_connecting>

000d7418 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7418:	2200      	movs	r2, #0
   d741a:	2102      	movs	r1, #2
   d741c:	6840      	ldr	r0, [r0, #4]
   d741e:	f7fe b8e7 	b.w	d55f0 <network_disconnect>

000d7422 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7422:	2300      	movs	r3, #0
   d7424:	461a      	mov	r2, r3
   d7426:	6840      	ldr	r0, [r0, #4]
   d7428:	f7fe b8d2 	b.w	d55d0 <network_connect>

000d742c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d742c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d742e:	4605      	mov	r5, r0
   d7430:	b188      	cbz	r0, d7456 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7432:	6804      	ldr	r4, [r0, #0]
   d7434:	b14c      	cbz	r4, d744a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7436:	68a3      	ldr	r3, [r4, #8]
   d7438:	b11b      	cbz	r3, d7442 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d743a:	2203      	movs	r2, #3
   d743c:	4621      	mov	r1, r4
   d743e:	4620      	mov	r0, r4
   d7440:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7442:	2110      	movs	r1, #16
   d7444:	4620      	mov	r0, r4
   d7446:	f000 fdfc 	bl	d8042 <_ZdlPvj>
   d744a:	4628      	mov	r0, r5
   d744c:	2114      	movs	r1, #20
      }
   d744e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7452:	f000 bdf6 	b.w	d8042 <_ZdlPvj>
   d7456:	bd38      	pop	{r3, r4, r5, pc}

000d7458 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7458:	b110      	cbz	r0, d7460 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d745a:	6803      	ldr	r3, [r0, #0]
   d745c:	685b      	ldr	r3, [r3, #4]
   d745e:	4718      	bx	r3
   d7460:	4770      	bx	lr

000d7462 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7462:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7464:	6803      	ldr	r3, [r0, #0]
   d7466:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7468:	b1bb      	cbz	r3, d749a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d746a:	6858      	ldr	r0, [r3, #4]
   d746c:	f7fd fe34 	bl	d50d8 <os_thread_is_current>
   d7470:	b978      	cbnz	r0, d7492 <_ZN6ThreadD1Ev+0x30>
   d7472:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7474:	7c5a      	ldrb	r2, [r3, #17]
   d7476:	b912      	cbnz	r2, d747e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7478:	6858      	ldr	r0, [r3, #4]
   d747a:	f7fd fe35 	bl	d50e8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d747e:	6823      	ldr	r3, [r4, #0]
   d7480:	6858      	ldr	r0, [r3, #4]
   d7482:	f7fd fe39 	bl	d50f8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7486:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7488:	2300      	movs	r3, #0
   d748a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d748c:	b128      	cbz	r0, d749a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d748e:	f7ff ffcd 	bl	d742c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7492:	6820      	ldr	r0, [r4, #0]
   d7494:	b108      	cbz	r0, d749a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7496:	f7ff ffc9 	bl	d742c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d749a:	4620      	mov	r0, r4
   d749c:	bd10      	pop	{r4, pc}
	...

000d74a0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d74a0:	b538      	push	{r3, r4, r5, lr}
   d74a2:	4b0c      	ldr	r3, [pc, #48]	; (d74d4 <_ZN5spark9MeshClassD1Ev+0x34>)
   d74a4:	6003      	str	r3, [r0, #0]
   d74a6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d74a8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d74ac:	b108      	cbz	r0, d74b2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d74ae:	f7fc fdf8 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d74b2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d74b6:	b135      	cbz	r5, d74c6 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d74b8:	4628      	mov	r0, r5
   d74ba:	f7ff ffd2 	bl	d7462 <_ZN6ThreadD1Ev>
   d74be:	2104      	movs	r1, #4
   d74c0:	4628      	mov	r0, r5
   d74c2:	f000 fdbe 	bl	d8042 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d74c6:	68a0      	ldr	r0, [r4, #8]
   d74c8:	b108      	cbz	r0, d74ce <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d74ca:	f7ff ffc5 	bl	d7458 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d74ce:	4620      	mov	r0, r4
   d74d0:	bd38      	pop	{r3, r4, r5, pc}
   d74d2:	bf00      	nop
   d74d4:	000dac98 	.word	0x000dac98

000d74d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d74d8:	b538      	push	{r3, r4, r5, lr}
   d74da:	4c0e      	ldr	r4, [pc, #56]	; (d7514 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d74dc:	4b0e      	ldr	r3, [pc, #56]	; (d7518 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d74de:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d74e0:	2500      	movs	r5, #0
   d74e2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d74e4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d74e8:	6063      	str	r3, [r4, #4]
   d74ea:	60a5      	str	r5, [r4, #8]
   d74ec:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d74f0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d74f4:	f7fd fe10 	bl	d5118 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d74f8:	4b08      	ldr	r3, [pc, #32]	; (d751c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d74fa:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d74fe:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7502:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7504:	4620      	mov	r0, r4
   d7506:	4a06      	ldr	r2, [pc, #24]	; (d7520 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7508:	4906      	ldr	r1, [pc, #24]	; (d7524 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d750a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d750e:	f000 bd93 	b.w	d8038 <__aeabi_atexit>
   d7512:	bf00      	nop
   d7514:	2003e268 	.word	0x2003e268
   d7518:	000daccc 	.word	0x000daccc
   d751c:	000dac98 	.word	0x000dac98
   d7520:	2003e158 	.word	0x2003e158
   d7524:	000d74a1 	.word	0x000d74a1

000d7528 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7528:	2300      	movs	r3, #0
   d752a:	461a      	mov	r2, r3
   d752c:	6840      	ldr	r0, [r0, #4]
   d752e:	f7fe b84f 	b.w	d55d0 <network_connect>

000d7532 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7532:	2200      	movs	r2, #0
   d7534:	2102      	movs	r1, #2
   d7536:	6840      	ldr	r0, [r0, #4]
   d7538:	f7fe b85a 	b.w	d55f0 <network_disconnect>

000d753c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d753c:	2200      	movs	r2, #0
   d753e:	4611      	mov	r1, r2
   d7540:	6840      	ldr	r0, [r0, #4]
   d7542:	f7fe b84d 	b.w	d55e0 <network_connecting>

000d7546 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7546:	2200      	movs	r2, #0
   d7548:	4611      	mov	r1, r2
   d754a:	6840      	ldr	r0, [r0, #4]
   d754c:	f7fe b858 	b.w	d5600 <network_ready>

000d7550 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7550:	2300      	movs	r3, #0
   d7552:	461a      	mov	r2, r3
   d7554:	4619      	mov	r1, r3
   d7556:	6840      	ldr	r0, [r0, #4]
   d7558:	f7fe b85a 	b.w	d5610 <network_on>

000d755c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d755c:	2300      	movs	r3, #0
   d755e:	461a      	mov	r2, r3
   d7560:	4619      	mov	r1, r3
   d7562:	6840      	ldr	r0, [r0, #4]
   d7564:	f7fe b85c 	b.w	d5620 <network_off>

000d7568 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7568:	2200      	movs	r2, #0
   d756a:	f081 0101 	eor.w	r1, r1, #1
   d756e:	6840      	ldr	r0, [r0, #4]
   d7570:	f7fe b85e 	b.w	d5630 <network_listen>

000d7574 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7574:	2200      	movs	r2, #0
   d7576:	6840      	ldr	r0, [r0, #4]
   d7578:	f7fe b86a 	b.w	d5650 <network_set_listen_timeout>

000d757c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d757c:	2200      	movs	r2, #0
   d757e:	4611      	mov	r1, r2
   d7580:	6840      	ldr	r0, [r0, #4]
   d7582:	f7fe b86d 	b.w	d5660 <network_get_listen_timeout>

000d7586 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7586:	2200      	movs	r2, #0
   d7588:	4611      	mov	r1, r2
   d758a:	6840      	ldr	r0, [r0, #4]
   d758c:	f7fe b858 	b.w	d5640 <network_listening>

000d7590 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7594:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7596:	b095      	sub	sp, #84	; 0x54
   d7598:	4616      	mov	r6, r2
   d759a:	460d      	mov	r5, r1
   d759c:	4607      	mov	r7, r0
    IPAddress addr;
   d759e:	f7fe fd5d 	bl	d605c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d75a2:	4621      	mov	r1, r4
   d75a4:	2220      	movs	r2, #32
   d75a6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d75a8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d75aa:	f001 fcdb 	bl	d8f64 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d75ae:	2340      	movs	r3, #64	; 0x40
   d75b0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d75b2:	4621      	mov	r1, r4
   d75b4:	466b      	mov	r3, sp
   d75b6:	aa0c      	add	r2, sp, #48	; 0x30
   d75b8:	4630      	mov	r0, r6
   d75ba:	f7fd feb5 	bl	d5328 <netdb_getaddrinfo>
    if (!r) {
   d75be:	4604      	mov	r4, r0
   d75c0:	2800      	cmp	r0, #0
   d75c2:	d144      	bne.n	d764e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d75c4:	4602      	mov	r2, r0
   d75c6:	2101      	movs	r1, #1
   d75c8:	6868      	ldr	r0, [r5, #4]
   d75ca:	f7fe f819 	bl	d5600 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d75ce:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d75d0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d75d2:	4622      	mov	r2, r4
   d75d4:	6868      	ldr	r0, [r5, #4]
   d75d6:	f7fe f813 	bl	d5600 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d75da:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d75dc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d75de:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d75e0:	2e00      	cmp	r6, #0
   d75e2:	d034      	beq.n	d764e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d75e4:	2900      	cmp	r1, #0
   d75e6:	d132      	bne.n	d764e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d75e8:	6873      	ldr	r3, [r6, #4]
   d75ea:	2b02      	cmp	r3, #2
   d75ec:	d002      	beq.n	d75f4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d75ee:	2b0a      	cmp	r3, #10
   d75f0:	d009      	beq.n	d7606 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d75f2:	e02a      	b.n	d764a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d75f4:	f1b8 0f00 	cmp.w	r8, #0
   d75f8:	d027      	beq.n	d764a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d75fa:	6971      	ldr	r1, [r6, #20]
   d75fc:	4638      	mov	r0, r7
   d75fe:	3104      	adds	r1, #4
   d7600:	f7fe fd59 	bl	d60b6 <_ZN9IPAddressaSEPKh>
   d7604:	e020      	b.n	d7648 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7606:	f1b9 0f00 	cmp.w	r9, #0
   d760a:	d01e      	beq.n	d764a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d760c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d760e:	2211      	movs	r2, #17
   d7610:	a801      	add	r0, sp, #4
   d7612:	f001 fca7 	bl	d8f64 <memset>
                    a.v = 6;
   d7616:	2306      	movs	r3, #6
   d7618:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d761c:	ad01      	add	r5, sp, #4
   d761e:	f104 0308 	add.w	r3, r4, #8
   d7622:	3418      	adds	r4, #24
   d7624:	6818      	ldr	r0, [r3, #0]
   d7626:	6859      	ldr	r1, [r3, #4]
   d7628:	462a      	mov	r2, r5
   d762a:	c203      	stmia	r2!, {r0, r1}
   d762c:	3308      	adds	r3, #8
   d762e:	42a3      	cmp	r3, r4
   d7630:	4615      	mov	r5, r2
   d7632:	d1f7      	bne.n	d7624 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7634:	a901      	add	r1, sp, #4
   d7636:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7638:	ad07      	add	r5, sp, #28
   d763a:	f7fe fd1d 	bl	d6078 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d763e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7640:	1d3c      	adds	r4, r7, #4
   d7642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7644:	682b      	ldr	r3, [r5, #0]
   d7646:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7648:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d764a:	69f6      	ldr	r6, [r6, #28]
   d764c:	e7c8      	b.n	d75e0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d764e:	9800      	ldr	r0, [sp, #0]
   d7650:	f7fd fe62 	bl	d5318 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7654:	4638      	mov	r0, r7
   d7656:	b015      	add	sp, #84	; 0x54
   d7658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d765c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d765c:	4b02      	ldr	r3, [pc, #8]	; (d7668 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d765e:	4a03      	ldr	r2, [pc, #12]	; (d766c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7660:	601a      	str	r2, [r3, #0]
   d7662:	2200      	movs	r2, #0
   d7664:	605a      	str	r2, [r3, #4]
   d7666:	4770      	bx	lr
   d7668:	2003e43c 	.word	0x2003e43c
   d766c:	000daccc 	.word	0x000daccc

000d7670 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7672:	4606      	mov	r6, r0
   d7674:	460d      	mov	r5, r1
   d7676:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7678:	2400      	movs	r4, #0
  while (size--) {
   d767a:	42bd      	cmp	r5, r7
   d767c:	d00c      	beq.n	d7698 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d767e:	6833      	ldr	r3, [r6, #0]
   d7680:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7684:	689b      	ldr	r3, [r3, #8]
   d7686:	4630      	mov	r0, r6
   d7688:	4798      	blx	r3
     if (chunk>=0)
   d768a:	2800      	cmp	r0, #0
   d768c:	db01      	blt.n	d7692 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d768e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7690:	e7f3      	b.n	d767a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7692:	2c00      	cmp	r4, #0
   d7694:	bf08      	it	eq
   d7696:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7698:	4620      	mov	r0, r4
   d769a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d769c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d769c:	b570      	push	{r4, r5, r6, lr}
   d769e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d76a0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d76a2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d76a4:	b149      	cbz	r1, d76ba <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d76a6:	f002 fc35 	bl	d9f14 <strlen>
   d76aa:	682b      	ldr	r3, [r5, #0]
   d76ac:	4602      	mov	r2, r0
   d76ae:	4621      	mov	r1, r4
   d76b0:	4628      	mov	r0, r5
   d76b2:	68db      	ldr	r3, [r3, #12]
    }
   d76b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d76b8:	4718      	bx	r3
    }
   d76ba:	bd70      	pop	{r4, r5, r6, pc}

000d76bc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d76bc:	6803      	ldr	r3, [r0, #0]
   d76be:	689b      	ldr	r3, [r3, #8]
   d76c0:	4718      	bx	r3

000d76c2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d76c2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d76c4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d76c6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d76c8:	f7ff fff8 	bl	d76bc <_ZN5Print5printEc>
  n += print('\n');
   d76cc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d76ce:	4604      	mov	r4, r0
  n += print('\n');
   d76d0:	4628      	mov	r0, r5
   d76d2:	f7ff fff3 	bl	d76bc <_ZN5Print5printEc>
  return n;
}
   d76d6:	4420      	add	r0, r4
   d76d8:	bd38      	pop	{r3, r4, r5, pc}

000d76da <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d76da:	b530      	push	{r4, r5, lr}
   d76dc:	b08b      	sub	sp, #44	; 0x2c
   d76de:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d76e0:	2100      	movs	r1, #0
   d76e2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d76e6:	2a01      	cmp	r2, #1
   d76e8:	bf98      	it	ls
   d76ea:	220a      	movls	r2, #10
   d76ec:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d76f0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d76f4:	fb05 3312 	mls	r3, r5, r2, r3
   d76f8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d76fc:	2b09      	cmp	r3, #9
   d76fe:	bf94      	ite	ls
   d7700:	3330      	addls	r3, #48	; 0x30
   d7702:	3337      	addhi	r3, #55	; 0x37
   d7704:	b2db      	uxtb	r3, r3
   d7706:	4621      	mov	r1, r4
   d7708:	f804 3901 	strb.w	r3, [r4], #-1
   d770c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d770e:	2d00      	cmp	r5, #0
   d7710:	d1ee      	bne.n	d76f0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7712:	f7ff ffc3 	bl	d769c <_ZN5Print5writeEPKc>
}
   d7716:	b00b      	add	sp, #44	; 0x2c
   d7718:	bd30      	pop	{r4, r5, pc}

000d771a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d771a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d771c:	b92a      	cbnz	r2, d772a <_ZN5Print5printEmi+0x10>
   d771e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d7720:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d7724:	689b      	ldr	r3, [r3, #8]
   d7726:	b2c9      	uxtb	r1, r1
   d7728:	4718      	bx	r3
  else return printNumber(n, base);
   d772a:	b2d2      	uxtb	r2, r2
}
   d772c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d7730:	f7ff bfd3 	b.w	d76da <_ZN5Print11printNumberEmh>

000d7734 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d7734:	f7ff bff1 	b.w	d771a <_ZN5Print5printEmi>

000d7738 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7738:	b40c      	push	{r2, r3}
   d773a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d773e:	b087      	sub	sp, #28
   d7740:	af00      	add	r7, sp, #0
   d7742:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7746:	4605      	mov	r5, r0
   d7748:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d774c:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d774e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d7750:	4623      	mov	r3, r4
   d7752:	464a      	mov	r2, r9
   d7754:	2114      	movs	r1, #20
   d7756:	1d38      	adds	r0, r7, #4
   d7758:	f7fd ffc2 	bl	d56e0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d775c:	2813      	cmp	r0, #19
   d775e:	d805      	bhi.n	d776c <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7760:	1d39      	adds	r1, r7, #4
   d7762:	4628      	mov	r0, r5
   d7764:	f7ff ff9a 	bl	d769c <_ZN5Print5writeEPKc>
   d7768:	4604      	mov	r4, r0
   d776a:	e013      	b.n	d7794 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d776c:	f100 0308 	add.w	r3, r0, #8
   d7770:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d7774:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7776:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d777a:	1c41      	adds	r1, r0, #1
   d777c:	4623      	mov	r3, r4
   d777e:	464a      	mov	r2, r9
   d7780:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d7782:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d7784:	f7fd ffac 	bl	d56e0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7788:	4669      	mov	r1, sp
   d778a:	4628      	mov	r0, r5
   d778c:	f7ff ff86 	bl	d769c <_ZN5Print5writeEPKc>
   d7790:	4604      	mov	r4, r0
   d7792:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d7794:	b11e      	cbz	r6, d779e <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7796:	4628      	mov	r0, r5
   d7798:	f7ff ff93 	bl	d76c2 <_ZN5Print7printlnEv>
   d779c:	4404      	add	r4, r0
    return n;
}
   d779e:	4620      	mov	r0, r4
   d77a0:	371c      	adds	r7, #28
   d77a2:	46bd      	mov	sp, r7
   d77a4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d77a8:	b002      	add	sp, #8
   d77aa:	4770      	bx	lr

000d77ac <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d77ac:	b510      	push	{r4, lr}
   d77ae:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d77b0:	f7fe f851 	bl	d5856 <_ZNSt14_Function_baseD1Ev>
   d77b4:	4620      	mov	r0, r4
   d77b6:	bd10      	pop	{r4, pc}

000d77b8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d77b8:	4803      	ldr	r0, [pc, #12]	; (d77c8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d77ba:	4a04      	ldr	r2, [pc, #16]	; (d77cc <_GLOBAL__sub_I_RGB+0x14>)
   d77bc:	4904      	ldr	r1, [pc, #16]	; (d77d0 <_GLOBAL__sub_I_RGB+0x18>)
   d77be:	2300      	movs	r3, #0
   d77c0:	6083      	str	r3, [r0, #8]
   d77c2:	f000 bc39 	b.w	d8038 <__aeabi_atexit>
   d77c6:	bf00      	nop
   d77c8:	2003e444 	.word	0x2003e444
   d77cc:	2003e158 	.word	0x2003e158
   d77d0:	000d77ad 	.word	0x000d77ad

000d77d4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d77d4:	4770      	bx	lr

000d77d6 <_ZN8SPIClassD0Ev>:
   d77d6:	b510      	push	{r4, lr}
   d77d8:	2110      	movs	r1, #16
   d77da:	4604      	mov	r4, r0
   d77dc:	f000 fc31 	bl	d8042 <_ZdlPvj>
   d77e0:	4620      	mov	r0, r4
   d77e2:	bd10      	pop	{r4, pc}

000d77e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d77e4:	b570      	push	{r4, r5, r6, lr}
   d77e6:	4b08      	ldr	r3, [pc, #32]	; (d7808 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d77e8:	6003      	str	r3, [r0, #0]
   d77ea:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d77ec:	2500      	movs	r5, #0
   d77ee:	460e      	mov	r6, r1
   d77f0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d77f4:	f7fd fc88 	bl	d5108 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d77f8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d77fa:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d77fc:	f7fd fd9c 	bl	d5338 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d7800:	60a5      	str	r5, [r4, #8]
}
   d7802:	4620      	mov	r0, r4
   d7804:	bd70      	pop	{r4, r5, r6, pc}
   d7806:	bf00      	nop
   d7808:	000dad00 	.word	0x000dad00

000d780c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d780c:	7900      	ldrb	r0, [r0, #4]
   d780e:	f7fd bd9b 	b.w	d5348 <HAL_SPI_Is_Enabled>

000d7812 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7812:	2300      	movs	r3, #0
   d7814:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7816:	6043      	str	r3, [r0, #4]
	len = 0;
   d7818:	6083      	str	r3, [r0, #8]
	flags = 0;
   d781a:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d781c:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d781e:	680c      	ldr	r4, [r1, #0]
   d7820:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d7822:	684c      	ldr	r4, [r1, #4]
   d7824:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d7826:	688c      	ldr	r4, [r1, #8]
   d7828:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d782a:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d782c:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d782e:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d7830:	bd10      	pop	{r4, pc}

000d7832 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7832:	b510      	push	{r4, lr}
   d7834:	4604      	mov	r4, r0
{
	free(buffer);
   d7836:	6800      	ldr	r0, [r0, #0]
   d7838:	f7fd ff22 	bl	d5680 <free>
}
   d783c:	4620      	mov	r0, r4
   d783e:	bd10      	pop	{r4, pc}

000d7840 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7840:	b510      	push	{r4, lr}
   d7842:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7844:	6800      	ldr	r0, [r0, #0]
   d7846:	b108      	cbz	r0, d784c <_ZN6String10invalidateEv+0xc>
   d7848:	f7fd ff1a 	bl	d5680 <free>
	buffer = NULL;
   d784c:	2300      	movs	r3, #0
   d784e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7850:	60a3      	str	r3, [r4, #8]
   d7852:	6063      	str	r3, [r4, #4]
   d7854:	bd10      	pop	{r4, pc}

000d7856 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7856:	b538      	push	{r3, r4, r5, lr}
   d7858:	4604      	mov	r4, r0
   d785a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d785c:	6800      	ldr	r0, [r0, #0]
   d785e:	3101      	adds	r1, #1
   d7860:	f7fd ff16 	bl	d5690 <realloc>
	if (newbuffer) {
   d7864:	b110      	cbz	r0, d786c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7866:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d786a:	2001      	movs	r0, #1
	}
	return 0;
}
   d786c:	bd38      	pop	{r3, r4, r5, pc}

000d786e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d786e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7870:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7872:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7874:	b113      	cbz	r3, d787c <_ZN6String7reserveEj+0xe>
   d7876:	6843      	ldr	r3, [r0, #4]
   d7878:	428b      	cmp	r3, r1
   d787a:	d207      	bcs.n	d788c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d787c:	4620      	mov	r0, r4
   d787e:	f7ff ffea 	bl	d7856 <_ZN6String12changeBufferEj>
   d7882:	b120      	cbz	r0, d788e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7884:	68a3      	ldr	r3, [r4, #8]
   d7886:	b90b      	cbnz	r3, d788c <_ZN6String7reserveEj+0x1e>
   d7888:	6822      	ldr	r2, [r4, #0]
   d788a:	7013      	strb	r3, [r2, #0]
   d788c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d788e:	bd10      	pop	{r4, pc}

000d7890 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7890:	b570      	push	{r4, r5, r6, lr}
   d7892:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7894:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7896:	4604      	mov	r4, r0
   d7898:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d789a:	f7ff ffe8 	bl	d786e <_ZN6String7reserveEj>
   d789e:	b918      	cbnz	r0, d78a8 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d78a0:	4620      	mov	r0, r4
   d78a2:	f7ff ffcd 	bl	d7840 <_ZN6String10invalidateEv>
		return *this;
   d78a6:	e009      	b.n	d78bc <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d78a8:	462a      	mov	r2, r5
   d78aa:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d78ac:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d78ae:	6820      	ldr	r0, [r4, #0]
   d78b0:	f001 fb32 	bl	d8f18 <memcpy>
	buffer[len] = 0;
   d78b4:	6822      	ldr	r2, [r4, #0]
   d78b6:	68a3      	ldr	r3, [r4, #8]
   d78b8:	2100      	movs	r1, #0
   d78ba:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d78bc:	4620      	mov	r0, r4
   d78be:	bd70      	pop	{r4, r5, r6, pc}

000d78c0 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d78c0:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d78c2:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d78c4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d78c6:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d78c8:	6043      	str	r3, [r0, #4]
	len = 0;
   d78ca:	6083      	str	r3, [r0, #8]
	flags = 0;
   d78cc:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d78ce:	460d      	mov	r5, r1
   d78d0:	b139      	cbz	r1, d78e2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d78d2:	4608      	mov	r0, r1
   d78d4:	f002 fb1e 	bl	d9f14 <strlen>
   d78d8:	4629      	mov	r1, r5
   d78da:	4602      	mov	r2, r0
   d78dc:	4620      	mov	r0, r4
   d78de:	f7ff ffd7 	bl	d7890 <_ZN6String4copyEPKcj>
}
   d78e2:	4620      	mov	r0, r4
   d78e4:	bd38      	pop	{r3, r4, r5, pc}

000d78e6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d78e6:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d78e8:	b510      	push	{r4, lr}
   d78ea:	460b      	mov	r3, r1
   d78ec:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d78ee:	d007      	beq.n	d7900 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d78f0:	6809      	ldr	r1, [r1, #0]
   d78f2:	b119      	cbz	r1, d78fc <_ZN6StringaSERKS_+0x16>
   d78f4:	689a      	ldr	r2, [r3, #8]
   d78f6:	f7ff ffcb 	bl	d7890 <_ZN6String4copyEPKcj>
   d78fa:	e001      	b.n	d7900 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d78fc:	f7ff ffa0 	bl	d7840 <_ZN6String10invalidateEv>

	return *this;
}
   d7900:	4620      	mov	r0, r4
   d7902:	bd10      	pop	{r4, pc}

000d7904 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7904:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7906:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7908:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d790a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d790c:	6043      	str	r3, [r0, #4]
	len = 0;
   d790e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7910:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d7912:	f7ff ffe8 	bl	d78e6 <_ZN6StringaSERKS_>
}
   d7916:	4620      	mov	r0, r4
   d7918:	bd10      	pop	{r4, pc}
	...

000d791c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d791c:	4b04      	ldr	r3, [pc, #16]	; (d7930 <_GLOBAL__sub_I_System+0x14>)
   d791e:	2000      	movs	r0, #0
   d7920:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7924:	7018      	strb	r0, [r3, #0]
   d7926:	8058      	strh	r0, [r3, #2]
   d7928:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d792a:	f7fd bdcd 	b.w	d54c8 <set_system_mode>
   d792e:	bf00      	nop
   d7930:	2003e454 	.word	0x2003e454

000d7934 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7934:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d7936:	4b14      	ldr	r3, [pc, #80]	; (d7988 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7938:	4f14      	ldr	r7, [pc, #80]	; (d798c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d793a:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d793c:	4b14      	ldr	r3, [pc, #80]	; (d7990 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d793e:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d7940:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d7942:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d7944:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d7946:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7948:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d794a:	d01b      	beq.n	d7984 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d794c:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d794e:	ad01      	add	r5, sp, #4
   d7950:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d7954:	f001 f9e8 	bl	d8d28 <localtime>
	calendar_time->tm_year += 1900;
   d7958:	6943      	ldr	r3, [r0, #20]
   d795a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d795e:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d7960:	4604      	mov	r4, r0
   d7962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d796a:	f8d4 e000 	ldr.w	lr, [r4]
   d796e:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7972:	ad01      	add	r5, sp, #4
   d7974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7976:	4c07      	ldr	r4, [pc, #28]	; (d7994 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d7978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d797a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d797c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d797e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7980:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d7984:	b00b      	add	sp, #44	; 0x2c
   d7986:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7988:	2003e490 	.word	0x2003e490
   d798c:	2003e48c 	.word	0x2003e48c
   d7990:	2003e488 	.word	0x2003e488
   d7994:	2003e45c 	.word	0x2003e45c

000d7998 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d7998:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d799a:	2000      	movs	r0, #0
   d799c:	f7fd fe00 	bl	d55a0 <spark_sync_time_pending>
   d79a0:	b128      	cbz	r0, d79ae <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d79a2:	f7fd fded 	bl	d5580 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d79a6:	f080 0001 	eor.w	r0, r0, #1
   d79aa:	b2c0      	uxtb	r0, r0
   d79ac:	bd08      	pop	{r3, pc}
   d79ae:	2001      	movs	r0, #1
    }
   d79b0:	bd08      	pop	{r3, pc}

000d79b2 <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d79b2:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
   d79b4:	f7fd fbe8 	bl	d5188 <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d79b8:	2200      	movs	r2, #0
   d79ba:	4611      	mov	r1, r2
   d79bc:	4610      	mov	r0, r2
}
   d79be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d79c2:	f7fd bda9 	b.w	d5518 <system_notify_time_changed>
	...

000d79c8 <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d79c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d79ca:	4b0e      	ldr	r3, [pc, #56]	; (d7a04 <_ZN9TimeClass7timeStrEl+0x3c>)
   d79cc:	681b      	ldr	r3, [r3, #0]
   d79ce:	4419      	add	r1, r3
   d79d0:	4b0d      	ldr	r3, [pc, #52]	; (d7a08 <_ZN9TimeClass7timeStrEl+0x40>)
   d79d2:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d79d4:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d79d6:	a802      	add	r0, sp, #8
   d79d8:	4419      	add	r1, r3
   d79da:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d79de:	f001 f9a3 	bl	d8d28 <localtime>
        char* ascstr = asctime(calendar_time);
   d79e2:	f001 f8ad 	bl	d8b40 <asctime>
   d79e6:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d79e8:	f002 fa94 	bl	d9f14 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d79ec:	4428      	add	r0, r5
   d79ee:	2300      	movs	r3, #0
   d79f0:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d79f4:	4629      	mov	r1, r5
   d79f6:	4620      	mov	r0, r4
   d79f8:	f7ff ff62 	bl	d78c0 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d79fc:	4620      	mov	r0, r4
   d79fe:	b003      	add	sp, #12
   d7a00:	bd30      	pop	{r4, r5, pc}
   d7a02:	bf00      	nop
   d7a04:	2003e490 	.word	0x2003e490
   d7a08:	2003e488 	.word	0x2003e488

000d7a0c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d7a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7a10:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
   d7a12:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d7a14:	4607      	mov	r7, r0
   d7a16:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
   d7a18:	4620      	mov	r0, r4
   d7a1a:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d7a1c:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
   d7a1e:	f001 fd41 	bl	d94a4 <strcpy>
    size_t len = strlen(format_str);
   d7a22:	4620      	mov	r0, r4
   d7a24:	f002 fa76 	bl	d9f14 <strlen>
   d7a28:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d7a2a:	b925      	cbnz	r5, d7a36 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
   d7a2c:	4924      	ldr	r1, [pc, #144]	; (d7ac0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
   d7a2e:	a803      	add	r0, sp, #12
   d7a30:	f001 fd38 	bl	d94a4 <strcpy>
   d7a34:	e013      	b.n	d7a5e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d7a36:	213c      	movs	r1, #60	; 0x3c
   d7a38:	fb95 f2f1 	sdiv	r2, r5, r1
   d7a3c:	2a00      	cmp	r2, #0
   d7a3e:	bfb8      	it	lt
   d7a40:	4252      	neglt	r2, r2
   d7a42:	fb92 f3f1 	sdiv	r3, r2, r1
   d7a46:	fb01 2213 	mls	r2, r1, r3, r2
   d7a4a:	9200      	str	r2, [sp, #0]
   d7a4c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7a50:	4a1c      	ldr	r2, [pc, #112]	; (d7ac4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
   d7a52:	fb95 f3f3 	sdiv	r3, r5, r3
   d7a56:	2110      	movs	r1, #16
   d7a58:	a803      	add	r0, sp, #12
   d7a5a:	f7fd fe31 	bl	d56c0 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d7a5e:	4625      	mov	r5, r4
   d7a60:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d7a62:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   d7a66:	45b2      	cmp	sl, r6
   d7a68:	d91b      	bls.n	d7aa2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d7a6a:	782b      	ldrb	r3, [r5, #0]
   d7a6c:	2b25      	cmp	r3, #37	; 0x25
   d7a6e:	d116      	bne.n	d7a9e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
   d7a70:	786b      	ldrb	r3, [r5, #1]
   d7a72:	2b7a      	cmp	r3, #122	; 0x7a
   d7a74:	d113      	bne.n	d7a9e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
   d7a76:	a803      	add	r0, sp, #12
   d7a78:	f002 fa4c 	bl	d9f14 <strlen>
   d7a7c:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d7a7e:	4430      	add	r0, r6
   d7a80:	ebc6 020a 	rsb	r2, r6, sl
   d7a84:	1ca9      	adds	r1, r5, #2
   d7a86:	4420      	add	r0, r4
   d7a88:	f001 fa46 	bl	d8f18 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d7a8c:	4642      	mov	r2, r8
   d7a8e:	a903      	add	r1, sp, #12
   d7a90:	4628      	mov	r0, r5
   d7a92:	f001 fa41 	bl	d8f18 <memcpy>
            len = strlen(format_str);
   d7a96:	4620      	mov	r0, r4
   d7a98:	f002 fa3c 	bl	d9f14 <strlen>
   d7a9c:	4680      	mov	r8, r0
   d7a9e:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d7aa0:	e7de      	b.n	d7a60 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d7aa2:	464b      	mov	r3, r9
   d7aa4:	4622      	mov	r2, r4
   d7aa6:	2132      	movs	r1, #50	; 0x32
   d7aa8:	a807      	add	r0, sp, #28
   d7aaa:	f001 fd7f 	bl	d95ac <strftime>
    return String(buf);
   d7aae:	a907      	add	r1, sp, #28
   d7ab0:	4638      	mov	r0, r7
   d7ab2:	f7ff ff05 	bl	d78c0 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d7ab6:	4638      	mov	r0, r7
   d7ab8:	b024      	add	sp, #144	; 0x90
   d7aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7abe:	bf00      	nop
   d7ac0:	000db295 	.word	0x000db295
   d7ac4:	000dad08 	.word	0x000dad08

000d7ac8 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d7ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7aca:	4605      	mov	r5, r0
   d7acc:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d7ace:	461c      	mov	r4, r3
   d7ad0:	b913      	cbnz	r3, d7ad8 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d7ad2:	4b12      	ldr	r3, [pc, #72]	; (d7b1c <_ZN9TimeClass6formatElPKc+0x54>)
   d7ad4:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d7ad6:	b12c      	cbz	r4, d7ae4 <_ZN9TimeClass6formatElPKc+0x1c>
   d7ad8:	4b11      	ldr	r3, [pc, #68]	; (d7b20 <_ZN9TimeClass6formatElPKc+0x58>)
   d7ada:	4620      	mov	r0, r4
   d7adc:	6819      	ldr	r1, [r3, #0]
   d7ade:	f001 fcd7 	bl	d9490 <strcmp>
   d7ae2:	b920      	cbnz	r0, d7aee <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d7ae4:	9901      	ldr	r1, [sp, #4]
   d7ae6:	4628      	mov	r0, r5
   d7ae8:	f7ff ff6e 	bl	d79c8 <_ZN9TimeClass7timeStrEl>
   d7aec:	e013      	b.n	d7b16 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d7aee:	4f0d      	ldr	r7, [pc, #52]	; (d7b24 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d7af0:	9a01      	ldr	r2, [sp, #4]
   d7af2:	683b      	ldr	r3, [r7, #0]
   d7af4:	4e0c      	ldr	r6, [pc, #48]	; (d7b28 <_ZN9TimeClass6formatElPKc+0x60>)
   d7af6:	441a      	add	r2, r3
   d7af8:	6833      	ldr	r3, [r6, #0]
   d7afa:	a802      	add	r0, sp, #8
   d7afc:	4413      	add	r3, r2
   d7afe:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d7b02:	f001 f911 	bl	d8d28 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d7b06:	683a      	ldr	r2, [r7, #0]
   d7b08:	6833      	ldr	r3, [r6, #0]
   d7b0a:	4601      	mov	r1, r0
   d7b0c:	4413      	add	r3, r2
   d7b0e:	4628      	mov	r0, r5
   d7b10:	4622      	mov	r2, r4
   d7b12:	f7ff ff7b 	bl	d7a0c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d7b16:	4628      	mov	r0, r5
   d7b18:	b003      	add	sp, #12
   d7b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7b1c:	2003e484 	.word	0x2003e484
   d7b20:	2003e0a0 	.word	0x2003e0a0
   d7b24:	2003e490 	.word	0x2003e490
   d7b28:	2003e488 	.word	0x2003e488

000d7b2c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7b2c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d7b2e:	2000      	movs	r0, #0
   d7b30:	f7fd fb32 	bl	d5198 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d7b34:	4604      	mov	r4, r0
   d7b36:	b968      	cbnz	r0, d7b54 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7b38:	f7fd fcbe 	bl	d54b8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7b3c:	2801      	cmp	r0, #1
   d7b3e:	d10b      	bne.n	d7b58 <_ZN9TimeClass7isValidEv+0x2c>
   d7b40:	4620      	mov	r0, r4
   d7b42:	f7fd fce1 	bl	d5508 <system_thread_get_state>
   d7b46:	b938      	cbnz	r0, d7b58 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d7b48:	f7ff ff26 	bl	d7998 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7b4c:	b930      	cbnz	r0, d7b5c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d7b4e:	f7fd fd07 	bl	d5560 <spark_process>
   d7b52:	e7f9      	b.n	d7b48 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d7b54:	2001      	movs	r0, #1
   d7b56:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d7b58:	2000      	movs	r0, #0
   d7b5a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d7b5c:	f7ff ff1c 	bl	d7998 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d7b60:	2000      	movs	r0, #0
   d7b62:	f7fd fb19 	bl	d5198 <HAL_RTC_Time_Is_Valid>
   d7b66:	3000      	adds	r0, #0
   d7b68:	bf18      	it	ne
   d7b6a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d7b6c:	bd10      	pop	{r4, pc}

000d7b6e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d7b6e:	b508      	push	{r3, lr}
    (void)isValid();
   d7b70:	f7ff ffdc 	bl	d7b2c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d7b74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d7b78:	f7fd bafe 	b.w	d5178 <HAL_RTC_Get_UnixTime>

000d7b7c <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d7b7c:	b508      	push	{r3, lr}
	return year(now());
   d7b7e:	f7ff fff6 	bl	d7b6e <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d7b82:	f7ff fed7 	bl	d7934 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d7b86:	4b01      	ldr	r3, [pc, #4]	; (d7b8c <_ZN9TimeClass4yearEv+0x10>)
   d7b88:	6958      	ldr	r0, [r3, #20]
   d7b8a:	bd08      	pop	{r3, pc}
   d7b8c:	2003e45c 	.word	0x2003e45c

000d7b90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7b90:	4b02      	ldr	r3, [pc, #8]	; (d7b9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7b92:	681a      	ldr	r2, [r3, #0]
   d7b94:	4b02      	ldr	r3, [pc, #8]	; (d7ba0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7b96:	601a      	str	r2, [r3, #0]
   d7b98:	4770      	bx	lr
   d7b9a:	bf00      	nop
   d7b9c:	2003e0a0 	.word	0x2003e0a0
   d7ba0:	2003e484 	.word	0x2003e484

000d7ba4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7ba4:	4770      	bx	lr

000d7ba6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7ba6:	7441      	strb	r1, [r0, #17]
   d7ba8:	4770      	bx	lr

000d7baa <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7baa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7bac:	7c00      	ldrb	r0, [r0, #16]
   d7bae:	f7fd fc13 	bl	d53d8 <HAL_USART_Available_Data_For_Write>
}
   d7bb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7bb6:	bd08      	pop	{r3, pc}

000d7bb8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7bb8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7bba:	7c00      	ldrb	r0, [r0, #16]
   d7bbc:	f7fd fbe4 	bl	d5388 <HAL_USART_Available_Data>
}
   d7bc0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7bc4:	bd08      	pop	{r3, pc}

000d7bc6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7bc6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7bc8:	7c00      	ldrb	r0, [r0, #16]
   d7bca:	f7fd fbed 	bl	d53a8 <HAL_USART_Peek_Data>
}
   d7bce:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7bd2:	bf28      	it	cs
   d7bd4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7bd8:	bd08      	pop	{r3, pc}

000d7bda <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7bda:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7bdc:	7c00      	ldrb	r0, [r0, #16]
   d7bde:	f7fd fbdb 	bl	d5398 <HAL_USART_Read_Data>
}
   d7be2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7be6:	bf28      	it	cs
   d7be8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7bec:	bd08      	pop	{r3, pc}

000d7bee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7bee:	7c00      	ldrb	r0, [r0, #16]
   d7bf0:	f7fd bbe2 	b.w	d53b8 <HAL_USART_Flush_Data>

000d7bf4 <_ZN11USARTSerialD0Ev>:
   d7bf4:	b510      	push	{r4, lr}
   d7bf6:	2114      	movs	r1, #20
   d7bf8:	4604      	mov	r4, r0
   d7bfa:	f000 fa22 	bl	d8042 <_ZdlPvj>
   d7bfe:	4620      	mov	r0, r4
   d7c00:	bd10      	pop	{r4, pc}

000d7c02 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7c02:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7c04:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7c06:	4604      	mov	r4, r0
   d7c08:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7c0a:	b925      	cbnz	r5, d7c16 <_ZN11USARTSerial5writeEh+0x14>
   d7c0c:	7c00      	ldrb	r0, [r0, #16]
   d7c0e:	f7fd fbe3 	bl	d53d8 <HAL_USART_Available_Data_For_Write>
   d7c12:	2800      	cmp	r0, #0
   d7c14:	dd05      	ble.n	d7c22 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7c16:	4631      	mov	r1, r6
   d7c18:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7c1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7c1e:	f7fd bbab 	b.w	d5378 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7c22:	4628      	mov	r0, r5
   d7c24:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7c28 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7c28:	b510      	push	{r4, lr}
   d7c2a:	4604      	mov	r4, r0
   d7c2c:	4608      	mov	r0, r1
   d7c2e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7c30:	2200      	movs	r2, #0
   d7c32:	6062      	str	r2, [r4, #4]
   d7c34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7c38:	60a2      	str	r2, [r4, #8]
   d7c3a:	4a05      	ldr	r2, [pc, #20]	; (d7c50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7c3c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7c3e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7c40:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7c42:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7c44:	461a      	mov	r2, r3
   d7c46:	f7fd fb87 	bl	d5358 <HAL_USART_Init>
}
   d7c4a:	4620      	mov	r0, r4
   d7c4c:	bd10      	pop	{r4, pc}
   d7c4e:	bf00      	nop
   d7c50:	000dad38 	.word	0x000dad38

000d7c54 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7c54:	2300      	movs	r3, #0
   d7c56:	7c00      	ldrb	r0, [r0, #16]
   d7c58:	f7fd bbc6 	b.w	d53e8 <HAL_USART_BeginConfig>

000d7c5c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d7c5c:	2200      	movs	r2, #0
   d7c5e:	f7ff bff9 	b.w	d7c54 <_ZN11USARTSerial5beginEmm>

000d7c62 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d7c62:	7c00      	ldrb	r0, [r0, #16]
   d7c64:	f7fd bb80 	b.w	d5368 <HAL_USART_End>

000d7c68 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7c68:	7c00      	ldrb	r0, [r0, #16]
   d7c6a:	f7fd bbad 	b.w	d53c8 <HAL_USART_Is_Enabled>
	...

000d7c70 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7c70:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7c72:	4d0c      	ldr	r5, [pc, #48]	; (d7ca4 <_Z22__fetch_global_Serial1v+0x34>)
   d7c74:	6829      	ldr	r1, [r5, #0]
   d7c76:	f011 0401 	ands.w	r4, r1, #1
   d7c7a:	d111      	bne.n	d7ca0 <_Z22__fetch_global_Serial1v+0x30>
   d7c7c:	4628      	mov	r0, r5
   d7c7e:	f7fc fa1d 	bl	d40bc <__cxa_guard_acquire>
   d7c82:	b168      	cbz	r0, d7ca0 <_Z22__fetch_global_Serial1v+0x30>
   d7c84:	4a08      	ldr	r2, [pc, #32]	; (d7ca8 <_Z22__fetch_global_Serial1v+0x38>)
   d7c86:	4b09      	ldr	r3, [pc, #36]	; (d7cac <_Z22__fetch_global_Serial1v+0x3c>)
   d7c88:	4809      	ldr	r0, [pc, #36]	; (d7cb0 <_Z22__fetch_global_Serial1v+0x40>)
   d7c8a:	4621      	mov	r1, r4
   d7c8c:	f7ff ffcc 	bl	d7c28 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7c90:	4628      	mov	r0, r5
   d7c92:	f7fc fa18 	bl	d40c6 <__cxa_guard_release>
   d7c96:	4a07      	ldr	r2, [pc, #28]	; (d7cb4 <_Z22__fetch_global_Serial1v+0x44>)
   d7c98:	4907      	ldr	r1, [pc, #28]	; (d7cb8 <_Z22__fetch_global_Serial1v+0x48>)
   d7c9a:	4805      	ldr	r0, [pc, #20]	; (d7cb0 <_Z22__fetch_global_Serial1v+0x40>)
   d7c9c:	f000 f9cc 	bl	d8038 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7ca0:	4803      	ldr	r0, [pc, #12]	; (d7cb0 <_Z22__fetch_global_Serial1v+0x40>)
   d7ca2:	bd38      	pop	{r3, r4, r5, pc}
   d7ca4:	2003e52c 	.word	0x2003e52c
   d7ca8:	2003e530 	.word	0x2003e530
   d7cac:	2003e4a8 	.word	0x2003e4a8
   d7cb0:	2003e494 	.word	0x2003e494
   d7cb4:	2003e158 	.word	0x2003e158
   d7cb8:	000d7ba5 	.word	0x000d7ba5

000d7cbc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7cbc:	7441      	strb	r1, [r0, #17]
   d7cbe:	4770      	bx	lr

000d7cc0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7cc0:	4770      	bx	lr

000d7cc2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7cc2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7cc4:	2100      	movs	r1, #0
   d7cc6:	7c00      	ldrb	r0, [r0, #16]
   d7cc8:	f7fd fbbe 	bl	d5448 <HAL_USB_USART_Receive_Data>
}
   d7ccc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7cd0:	bf28      	it	cs
   d7cd2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7cd6:	bd08      	pop	{r3, pc}

000d7cd8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7cd8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7cda:	2101      	movs	r1, #1
   d7cdc:	7c00      	ldrb	r0, [r0, #16]
   d7cde:	f7fd fbb3 	bl	d5448 <HAL_USB_USART_Receive_Data>
}
   d7ce2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7ce6:	bf28      	it	cs
   d7ce8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7cec:	bd08      	pop	{r3, pc}

000d7cee <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7cee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7cf0:	7c00      	ldrb	r0, [r0, #16]
   d7cf2:	f7fd fba1 	bl	d5438 <HAL_USB_USART_Available_Data_For_Write>
}
   d7cf6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7cfa:	bd08      	pop	{r3, pc}

000d7cfc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7cfc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7cfe:	7c00      	ldrb	r0, [r0, #16]
   d7d00:	f7fd fb92 	bl	d5428 <HAL_USB_USART_Available_Data>
}
   d7d04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7d08:	bd08      	pop	{r3, pc}

000d7d0a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7d0a:	7c00      	ldrb	r0, [r0, #16]
   d7d0c:	f7fd bbac 	b.w	d5468 <HAL_USB_USART_Flush_Data>

000d7d10 <_ZN9USBSerialD0Ev>:
   d7d10:	b510      	push	{r4, lr}
   d7d12:	2114      	movs	r1, #20
   d7d14:	4604      	mov	r4, r0
   d7d16:	f000 f994 	bl	d8042 <_ZdlPvj>
   d7d1a:	4620      	mov	r0, r4
   d7d1c:	bd10      	pop	{r4, pc}

000d7d1e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7d1e:	b538      	push	{r3, r4, r5, lr}
   d7d20:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7d22:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7d24:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7d26:	f7fd fb87 	bl	d5438 <HAL_USB_USART_Available_Data_For_Write>
   d7d2a:	2800      	cmp	r0, #0
   d7d2c:	dc01      	bgt.n	d7d32 <_ZN9USBSerial5writeEh+0x14>
   d7d2e:	7c60      	ldrb	r0, [r4, #17]
   d7d30:	b128      	cbz	r0, d7d3e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7d32:	4629      	mov	r1, r5
   d7d34:	7c20      	ldrb	r0, [r4, #16]
   d7d36:	f7fd fb8f 	bl	d5458 <HAL_USB_USART_Send_Data>
   d7d3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7d3e:	bd38      	pop	{r3, r4, r5, pc}

000d7d40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7d40:	b510      	push	{r4, lr}
   d7d42:	4604      	mov	r4, r0
   d7d44:	2300      	movs	r3, #0
   d7d46:	6063      	str	r3, [r4, #4]
   d7d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7d4c:	60a3      	str	r3, [r4, #8]
   d7d4e:	4b05      	ldr	r3, [pc, #20]	; (d7d64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7d50:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7d52:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7d54:	4608      	mov	r0, r1
{
  _serial = serial;
   d7d56:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7d58:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7d5a:	4611      	mov	r1, r2
   d7d5c:	f7fd fb4c 	bl	d53f8 <HAL_USB_USART_Init>
}
   d7d60:	4620      	mov	r0, r4
   d7d62:	bd10      	pop	{r4, pc}
   d7d64:	000dad68 	.word	0x000dad68

000d7d68 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7d68:	2200      	movs	r2, #0
   d7d6a:	7c00      	ldrb	r0, [r0, #16]
   d7d6c:	f7fd bb4c 	b.w	d5408 <HAL_USB_USART_Begin>

000d7d70 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d7d70:	7c00      	ldrb	r0, [r0, #16]
   d7d72:	f7fd bb51 	b.w	d5418 <HAL_USB_USART_End>

000d7d76 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7d76:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7d78:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7d7a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7d7c:	2100      	movs	r1, #0
   d7d7e:	f001 f8f1 	bl	d8f64 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7d82:	4620      	mov	r0, r4
   d7d84:	bd10      	pop	{r4, pc}
	...

000d7d88 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7d88:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7d8a:	4d0e      	ldr	r5, [pc, #56]	; (d7dc4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7d8c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7d8e:	a801      	add	r0, sp, #4
   d7d90:	f7ff fff1 	bl	d7d76 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7d94:	6829      	ldr	r1, [r5, #0]
   d7d96:	f011 0401 	ands.w	r4, r1, #1
   d7d9a:	d110      	bne.n	d7dbe <_Z16_fetch_usbserialv+0x36>
   d7d9c:	4628      	mov	r0, r5
   d7d9e:	f7fc f98d 	bl	d40bc <__cxa_guard_acquire>
   d7da2:	b160      	cbz	r0, d7dbe <_Z16_fetch_usbserialv+0x36>
   d7da4:	aa01      	add	r2, sp, #4
   d7da6:	4621      	mov	r1, r4
   d7da8:	4807      	ldr	r0, [pc, #28]	; (d7dc8 <_Z16_fetch_usbserialv+0x40>)
   d7daa:	f7ff ffc9 	bl	d7d40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7dae:	4628      	mov	r0, r5
   d7db0:	f7fc f989 	bl	d40c6 <__cxa_guard_release>
   d7db4:	4a05      	ldr	r2, [pc, #20]	; (d7dcc <_Z16_fetch_usbserialv+0x44>)
   d7db6:	4906      	ldr	r1, [pc, #24]	; (d7dd0 <_Z16_fetch_usbserialv+0x48>)
   d7db8:	4803      	ldr	r0, [pc, #12]	; (d7dc8 <_Z16_fetch_usbserialv+0x40>)
   d7dba:	f000 f93d 	bl	d8038 <__aeabi_atexit>
	return _usbserial;
}
   d7dbe:	4802      	ldr	r0, [pc, #8]	; (d7dc8 <_Z16_fetch_usbserialv+0x40>)
   d7dc0:	b007      	add	sp, #28
   d7dc2:	bd30      	pop	{r4, r5, pc}
   d7dc4:	2003e5b4 	.word	0x2003e5b4
   d7dc8:	2003e5b8 	.word	0x2003e5b8
   d7dcc:	2003e158 	.word	0x2003e158
   d7dd0:	000d7cc1 	.word	0x000d7cc1

000d7dd4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7dd4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7dd6:	4b0c      	ldr	r3, [pc, #48]	; (d7e08 <serialEventRun+0x34>)
   d7dd8:	b133      	cbz	r3, d7de8 <serialEventRun+0x14>
   d7dda:	f7ff ffd5 	bl	d7d88 <_Z16_fetch_usbserialv>
   d7dde:	6803      	ldr	r3, [r0, #0]
   d7de0:	691b      	ldr	r3, [r3, #16]
   d7de2:	4798      	blx	r3
   d7de4:	2800      	cmp	r0, #0
   d7de6:	dc09      	bgt.n	d7dfc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7de8:	4b08      	ldr	r3, [pc, #32]	; (d7e0c <serialEventRun+0x38>)
   d7dea:	b163      	cbz	r3, d7e06 <serialEventRun+0x32>
   d7dec:	f7ff ff40 	bl	d7c70 <_Z22__fetch_global_Serial1v>
   d7df0:	6803      	ldr	r3, [r0, #0]
   d7df2:	691b      	ldr	r3, [r3, #16]
   d7df4:	4798      	blx	r3
   d7df6:	2800      	cmp	r0, #0
   d7df8:	dc03      	bgt.n	d7e02 <serialEventRun+0x2e>
   d7dfa:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7dfc:	f3af 8000 	nop.w
   d7e00:	e7f2      	b.n	d7de8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7e02:	f3af 8000 	nop.w
   d7e06:	bd08      	pop	{r3, pc}
	...

000d7e10 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7e10:	b508      	push	{r3, lr}
	serialEventRun();
   d7e12:	f7ff ffdf 	bl	d7dd4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7e16:	f7fd f9a7 	bl	d5168 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7e1a:	4b01      	ldr	r3, [pc, #4]	; (d7e20 <_post_loop+0x10>)
   d7e1c:	6018      	str	r0, [r3, #0]
   d7e1e:	bd08      	pop	{r3, pc}
   d7e20:	2003e5d0 	.word	0x2003e5d0

000d7e24 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7e24:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7e26:	2300      	movs	r3, #0
   d7e28:	9300      	str	r3, [sp, #0]
   d7e2a:	461a      	mov	r2, r3
   d7e2c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7e30:	f7fd fb84 	bl	d553c <system_ctrl_set_result>
}
   d7e34:	b003      	add	sp, #12
   d7e36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7e3c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7e3c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7e3e:	8843      	ldrh	r3, [r0, #2]
   d7e40:	2b0a      	cmp	r3, #10
   d7e42:	d008      	beq.n	d7e56 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7e44:	2b50      	cmp	r3, #80	; 0x50
   d7e46:	d109      	bne.n	d7e5c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7e48:	4b09      	ldr	r3, [pc, #36]	; (d7e70 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7e4a:	681b      	ldr	r3, [r3, #0]
   d7e4c:	b13b      	cbz	r3, d7e5e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7e4e:	b003      	add	sp, #12
   d7e50:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7e54:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7e56:	f7ff ffe5 	bl	d7e24 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7e5a:	e006      	b.n	d7e6a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7e5c:	2300      	movs	r3, #0
   d7e5e:	9300      	str	r3, [sp, #0]
   d7e60:	461a      	mov	r2, r3
   d7e62:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7e66:	f7fd fb69 	bl	d553c <system_ctrl_set_result>
        break;
    }
}
   d7e6a:	b003      	add	sp, #12
   d7e6c:	f85d fb04 	ldr.w	pc, [sp], #4
   d7e70:	2003e5cc 	.word	0x2003e5cc

000d7e74 <module_user_init_hook>:

void module_user_init_hook()
{
   d7e74:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7e76:	f7fd f967 	bl	d5148 <HAL_RNG_GetRandomNumber>
   d7e7a:	4604      	mov	r4, r0
    srand(seed);
   d7e7c:	f001 fac8 	bl	d9410 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7e80:	4b07      	ldr	r3, [pc, #28]	; (d7ea0 <module_user_init_hook+0x2c>)
   d7e82:	b113      	cbz	r3, d7e8a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d7e84:	4620      	mov	r0, r4
   d7e86:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7e8a:	2100      	movs	r1, #0
   d7e8c:	4804      	ldr	r0, [pc, #16]	; (d7ea0 <module_user_init_hook+0x2c>)
   d7e8e:	f7fd fb97 	bl	d55c0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7e92:	2100      	movs	r1, #0
   d7e94:	4803      	ldr	r0, [pc, #12]	; (d7ea4 <module_user_init_hook+0x30>)
}
   d7e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7e9a:	f7fd bb45 	b.w	d5528 <system_ctrl_set_app_request_handler>
   d7e9e:	bf00      	nop
   d7ea0:	00000000 	.word	0x00000000
   d7ea4:	000d7e3d 	.word	0x000d7e3d

000d7ea8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7ea8:	b510      	push	{r4, lr}
   d7eaa:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7eac:	480f      	ldr	r0, [pc, #60]	; (d7eec <pinAvailable+0x44>)
   d7eae:	f7ff fcad 	bl	d780c <_ZN8SPIClass9isEnabledEv>
   d7eb2:	b128      	cbz	r0, d7ec0 <pinAvailable+0x18>
   d7eb4:	f1a4 030b 	sub.w	r3, r4, #11
   d7eb8:	2b02      	cmp	r3, #2
   d7eba:	d801      	bhi.n	d7ec0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d7ebc:	2000      	movs	r0, #0
   d7ebe:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7ec0:	f000 f858 	bl	d7f74 <_Z19__fetch_global_Wirev>
   d7ec4:	f7fe f851 	bl	d5f6a <_ZN7TwoWire9isEnabledEv>
   d7ec8:	b108      	cbz	r0, d7ece <pinAvailable+0x26>
   d7eca:	2c01      	cmp	r4, #1
   d7ecc:	d9f6      	bls.n	d7ebc <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7ece:	f7ff fecf 	bl	d7c70 <_Z22__fetch_global_Serial1v>
   d7ed2:	f7ff fec9 	bl	d7c68 <_ZN11USARTSerial9isEnabledEv>
   d7ed6:	b118      	cbz	r0, d7ee0 <pinAvailable+0x38>
   d7ed8:	f1a4 0309 	sub.w	r3, r4, #9
   d7edc:	2b01      	cmp	r3, #1
   d7ede:	d9ed      	bls.n	d7ebc <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7ee0:	2c23      	cmp	r4, #35	; 0x23
   d7ee2:	bf8c      	ite	hi
   d7ee4:	2000      	movhi	r0, #0
   d7ee6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7ee8:	bd10      	pop	{r4, pc}
   d7eea:	bf00      	nop
   d7eec:	2003e604 	.word	0x2003e604

000d7ef0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7ef0:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7ef2:	b538      	push	{r3, r4, r5, lr}
   d7ef4:	4604      	mov	r4, r0
   d7ef6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7ef8:	d80a      	bhi.n	d7f10 <pinMode+0x20>
   d7efa:	29ff      	cmp	r1, #255	; 0xff
   d7efc:	d008      	beq.n	d7f10 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7efe:	f7ff ffd3 	bl	d7ea8 <pinAvailable>
   d7f02:	b128      	cbz	r0, d7f10 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7f04:	4629      	mov	r1, r5
   d7f06:	4620      	mov	r0, r4
}
   d7f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7f0c:	f7fd b964 	b.w	d51d8 <HAL_Pin_Mode>
   d7f10:	bd38      	pop	{r3, r4, r5, pc}

000d7f12 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7f12:	b538      	push	{r3, r4, r5, lr}
   d7f14:	4604      	mov	r4, r0
   d7f16:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7f18:	f7fd f966 	bl	d51e8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7f1c:	28ff      	cmp	r0, #255	; 0xff
   d7f1e:	d010      	beq.n	d7f42 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7f20:	2806      	cmp	r0, #6
   d7f22:	d804      	bhi.n	d7f2e <digitalWrite+0x1c>
   d7f24:	234d      	movs	r3, #77	; 0x4d
   d7f26:	fa23 f000 	lsr.w	r0, r3, r0
   d7f2a:	07c3      	lsls	r3, r0, #31
   d7f2c:	d409      	bmi.n	d7f42 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7f2e:	4620      	mov	r0, r4
   d7f30:	f7ff ffba 	bl	d7ea8 <pinAvailable>
   d7f34:	b128      	cbz	r0, d7f42 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7f36:	4629      	mov	r1, r5
   d7f38:	4620      	mov	r0, r4
}
   d7f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7f3e:	f7fd b95b 	b.w	d51f8 <HAL_GPIO_Write>
   d7f42:	bd38      	pop	{r3, r4, r5, pc}

000d7f44 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7f44:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d7f46:	b510      	push	{r4, lr}
   d7f48:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7f4a:	bf9c      	itt	ls
   d7f4c:	340e      	addls	r4, #14
   d7f4e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7f50:	4620      	mov	r0, r4
   d7f52:	f7ff ffa9 	bl	d7ea8 <pinAvailable>
   d7f56:	b150      	cbz	r0, d7f6e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7f58:	2103      	movs	r1, #3
   d7f5a:	4620      	mov	r0, r4
   d7f5c:	f7fd f934 	bl	d51c8 <HAL_Validate_Pin_Function>
   d7f60:	2803      	cmp	r0, #3
   d7f62:	d104      	bne.n	d7f6e <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7f64:	4620      	mov	r0, r4
}
   d7f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7f6a:	f7fd b95d 	b.w	d5228 <HAL_ADC_Read>
}
   d7f6e:	2000      	movs	r0, #0
   d7f70:	bd10      	pop	{r4, pc}
	...

000d7f74 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7f74:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d7f76:	4d0b      	ldr	r5, [pc, #44]	; (d7fa4 <_Z19__fetch_global_Wirev+0x30>)
   d7f78:	6829      	ldr	r1, [r5, #0]
   d7f7a:	f011 0401 	ands.w	r4, r1, #1
   d7f7e:	d10f      	bne.n	d7fa0 <_Z19__fetch_global_Wirev+0x2c>
   d7f80:	4628      	mov	r0, r5
   d7f82:	f7fc f89b 	bl	d40bc <__cxa_guard_acquire>
   d7f86:	b158      	cbz	r0, d7fa0 <_Z19__fetch_global_Wirev+0x2c>
   d7f88:	4621      	mov	r1, r4
   d7f8a:	4807      	ldr	r0, [pc, #28]	; (d7fa8 <_Z19__fetch_global_Wirev+0x34>)
   d7f8c:	f7fd ffbe 	bl	d5f0c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7f90:	4628      	mov	r0, r5
   d7f92:	f7fc f898 	bl	d40c6 <__cxa_guard_release>
   d7f96:	4a05      	ldr	r2, [pc, #20]	; (d7fac <_Z19__fetch_global_Wirev+0x38>)
   d7f98:	4905      	ldr	r1, [pc, #20]	; (d7fb0 <_Z19__fetch_global_Wirev+0x3c>)
   d7f9a:	4803      	ldr	r0, [pc, #12]	; (d7fa8 <_Z19__fetch_global_Wirev+0x34>)
   d7f9c:	f000 f84c 	bl	d8038 <__aeabi_atexit>
	return wire;
}
   d7fa0:	4801      	ldr	r0, [pc, #4]	; (d7fa8 <_Z19__fetch_global_Wirev+0x34>)
   d7fa2:	bd38      	pop	{r3, r4, r5, pc}
   d7fa4:	2003e5d4 	.word	0x2003e5d4
   d7fa8:	2003e5ec 	.word	0x2003e5ec
   d7fac:	2003e158 	.word	0x2003e158
   d7fb0:	000d5eb3 	.word	0x000d5eb3

000d7fb4 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d7fb4:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   d7fb6:	4c0b      	ldr	r4, [pc, #44]	; (d7fe4 <_Z20__fetch_global_Wire1v+0x30>)
   d7fb8:	6823      	ldr	r3, [r4, #0]
   d7fba:	07db      	lsls	r3, r3, #31
   d7fbc:	d40f      	bmi.n	d7fde <_Z20__fetch_global_Wire1v+0x2a>
   d7fbe:	4620      	mov	r0, r4
   d7fc0:	f7fc f87c 	bl	d40bc <__cxa_guard_acquire>
   d7fc4:	b158      	cbz	r0, d7fde <_Z20__fetch_global_Wire1v+0x2a>
   d7fc6:	2101      	movs	r1, #1
   d7fc8:	4807      	ldr	r0, [pc, #28]	; (d7fe8 <_Z20__fetch_global_Wire1v+0x34>)
   d7fca:	f7fd ff9f 	bl	d5f0c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7fce:	4620      	mov	r0, r4
   d7fd0:	f7fc f879 	bl	d40c6 <__cxa_guard_release>
   d7fd4:	4a05      	ldr	r2, [pc, #20]	; (d7fec <_Z20__fetch_global_Wire1v+0x38>)
   d7fd6:	4906      	ldr	r1, [pc, #24]	; (d7ff0 <_Z20__fetch_global_Wire1v+0x3c>)
   d7fd8:	4803      	ldr	r0, [pc, #12]	; (d7fe8 <_Z20__fetch_global_Wire1v+0x34>)
   d7fda:	f000 f82d 	bl	d8038 <__aeabi_atexit>
	return wire;
}
   d7fde:	4802      	ldr	r0, [pc, #8]	; (d7fe8 <_Z20__fetch_global_Wire1v+0x34>)
   d7fe0:	bd10      	pop	{r4, pc}
   d7fe2:	bf00      	nop
   d7fe4:	2003e600 	.word	0x2003e600
   d7fe8:	2003e5d8 	.word	0x2003e5d8
   d7fec:	2003e158 	.word	0x2003e158
   d7ff0:	000d5eb3 	.word	0x000d5eb3

000d7ff4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7ff4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7ff6:	4c0c      	ldr	r4, [pc, #48]	; (d8028 <_GLOBAL__sub_I_SPI+0x34>)
   d7ff8:	4e0c      	ldr	r6, [pc, #48]	; (d802c <_GLOBAL__sub_I_SPI+0x38>)
   d7ffa:	4d0d      	ldr	r5, [pc, #52]	; (d8030 <_GLOBAL__sub_I_SPI+0x3c>)
   d7ffc:	2100      	movs	r1, #0
   d7ffe:	4620      	mov	r0, r4
   d8000:	f7ff fbf0 	bl	d77e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8004:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8006:	4c0b      	ldr	r4, [pc, #44]	; (d8034 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d8008:	4632      	mov	r2, r6
   d800a:	4629      	mov	r1, r5
   d800c:	f000 f814 	bl	d8038 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8010:	2101      	movs	r1, #1
   d8012:	4620      	mov	r0, r4
   d8014:	f7ff fbe6 	bl	d77e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8018:	4632      	mov	r2, r6
   d801a:	4629      	mov	r1, r5
   d801c:	4620      	mov	r0, r4
   d801e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8022:	f000 b809 	b.w	d8038 <__aeabi_atexit>
   d8026:	bf00      	nop
   d8028:	2003e604 	.word	0x2003e604
   d802c:	2003e158 	.word	0x2003e158
   d8030:	000d77d5 	.word	0x000d77d5
   d8034:	2003e614 	.word	0x2003e614

000d8038 <__aeabi_atexit>:
   d8038:	460b      	mov	r3, r1
   d803a:	4601      	mov	r1, r0
   d803c:	4618      	mov	r0, r3
   d803e:	f000 bdbb 	b.w	d8bb8 <__cxa_atexit>

000d8042 <_ZdlPvj>:
   d8042:	f7fc b82c 	b.w	d409e <_ZdlPv>
	...

000d8048 <_ZSt15get_new_handlerv>:
   d8048:	4b02      	ldr	r3, [pc, #8]	; (d8054 <_ZSt15get_new_handlerv+0xc>)
   d804a:	6818      	ldr	r0, [r3, #0]
   d804c:	f3bf 8f5f 	dmb	sy
   d8050:	4770      	bx	lr
   d8052:	bf00      	nop
   d8054:	2003e624 	.word	0x2003e624

000d8058 <_ZnwjRKSt9nothrow_t>:
   d8058:	b510      	push	{r4, lr}
   d805a:	2800      	cmp	r0, #0
   d805c:	bf14      	ite	ne
   d805e:	4604      	movne	r4, r0
   d8060:	2401      	moveq	r4, #1
   d8062:	4620      	mov	r0, r4
   d8064:	f7fd fb04 	bl	d5670 <malloc>
   d8068:	b920      	cbnz	r0, d8074 <_ZnwjRKSt9nothrow_t+0x1c>
   d806a:	f7ff ffed 	bl	d8048 <_ZSt15get_new_handlerv>
   d806e:	b108      	cbz	r0, d8074 <_ZnwjRKSt9nothrow_t+0x1c>
   d8070:	4780      	blx	r0
   d8072:	e7f6      	b.n	d8062 <_ZnwjRKSt9nothrow_t+0xa>
   d8074:	bd10      	pop	{r4, pc}

000d8076 <_ZSt25__throw_bad_function_callv>:
   d8076:	b508      	push	{r3, lr}
   d8078:	f7fd fb3a 	bl	d56f0 <abort>

000d807c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d807c:	4b24      	ldr	r3, [pc, #144]	; (d8110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d807e:	681a      	ldr	r2, [r3, #0]
   d8080:	07d0      	lsls	r0, r2, #31
   d8082:	bf5c      	itt	pl
   d8084:	2201      	movpl	r2, #1
   d8086:	601a      	strpl	r2, [r3, #0]
   d8088:	4b22      	ldr	r3, [pc, #136]	; (d8114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d808a:	681a      	ldr	r2, [r3, #0]
   d808c:	07d1      	lsls	r1, r2, #31
   d808e:	bf5c      	itt	pl
   d8090:	2201      	movpl	r2, #1
   d8092:	601a      	strpl	r2, [r3, #0]
   d8094:	4b20      	ldr	r3, [pc, #128]	; (d8118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8096:	681a      	ldr	r2, [r3, #0]
   d8098:	07d2      	lsls	r2, r2, #31
   d809a:	bf5c      	itt	pl
   d809c:	2201      	movpl	r2, #1
   d809e:	601a      	strpl	r2, [r3, #0]
   d80a0:	4b1e      	ldr	r3, [pc, #120]	; (d811c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d80a2:	681a      	ldr	r2, [r3, #0]
   d80a4:	07d0      	lsls	r0, r2, #31
   d80a6:	bf5c      	itt	pl
   d80a8:	2201      	movpl	r2, #1
   d80aa:	601a      	strpl	r2, [r3, #0]
   d80ac:	4b1c      	ldr	r3, [pc, #112]	; (d8120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d80ae:	681a      	ldr	r2, [r3, #0]
   d80b0:	07d1      	lsls	r1, r2, #31
   d80b2:	bf5c      	itt	pl
   d80b4:	2201      	movpl	r2, #1
   d80b6:	601a      	strpl	r2, [r3, #0]
   d80b8:	4b1a      	ldr	r3, [pc, #104]	; (d8124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d80ba:	681a      	ldr	r2, [r3, #0]
   d80bc:	07d2      	lsls	r2, r2, #31
   d80be:	bf5c      	itt	pl
   d80c0:	2201      	movpl	r2, #1
   d80c2:	601a      	strpl	r2, [r3, #0]
   d80c4:	4b18      	ldr	r3, [pc, #96]	; (d8128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d80c6:	681a      	ldr	r2, [r3, #0]
   d80c8:	07d0      	lsls	r0, r2, #31
   d80ca:	bf5c      	itt	pl
   d80cc:	2201      	movpl	r2, #1
   d80ce:	601a      	strpl	r2, [r3, #0]
   d80d0:	4b16      	ldr	r3, [pc, #88]	; (d812c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d80d2:	681a      	ldr	r2, [r3, #0]
   d80d4:	07d1      	lsls	r1, r2, #31
   d80d6:	bf5c      	itt	pl
   d80d8:	2201      	movpl	r2, #1
   d80da:	601a      	strpl	r2, [r3, #0]
   d80dc:	4b14      	ldr	r3, [pc, #80]	; (d8130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d80de:	681a      	ldr	r2, [r3, #0]
   d80e0:	07d2      	lsls	r2, r2, #31
   d80e2:	bf5c      	itt	pl
   d80e4:	2201      	movpl	r2, #1
   d80e6:	601a      	strpl	r2, [r3, #0]
   d80e8:	4b12      	ldr	r3, [pc, #72]	; (d8134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d80ea:	681a      	ldr	r2, [r3, #0]
   d80ec:	07d0      	lsls	r0, r2, #31
   d80ee:	bf5c      	itt	pl
   d80f0:	2201      	movpl	r2, #1
   d80f2:	601a      	strpl	r2, [r3, #0]
   d80f4:	4b10      	ldr	r3, [pc, #64]	; (d8138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d80f6:	681a      	ldr	r2, [r3, #0]
   d80f8:	07d1      	lsls	r1, r2, #31
   d80fa:	bf5c      	itt	pl
   d80fc:	2201      	movpl	r2, #1
   d80fe:	601a      	strpl	r2, [r3, #0]
   d8100:	4b0e      	ldr	r3, [pc, #56]	; (d813c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8102:	681a      	ldr	r2, [r3, #0]
   d8104:	07d2      	lsls	r2, r2, #31
   d8106:	bf5c      	itt	pl
   d8108:	2201      	movpl	r2, #1
   d810a:	601a      	strpl	r2, [r3, #0]
   d810c:	4770      	bx	lr
   d810e:	bf00      	nop
   d8110:	2003e654 	.word	0x2003e654
   d8114:	2003e650 	.word	0x2003e650
   d8118:	2003e64c 	.word	0x2003e64c
   d811c:	2003e648 	.word	0x2003e648
   d8120:	2003e644 	.word	0x2003e644
   d8124:	2003e640 	.word	0x2003e640
   d8128:	2003e63c 	.word	0x2003e63c
   d812c:	2003e638 	.word	0x2003e638
   d8130:	2003e634 	.word	0x2003e634
   d8134:	2003e630 	.word	0x2003e630
   d8138:	2003e62c 	.word	0x2003e62c
   d813c:	2003e628 	.word	0x2003e628

000d8140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8140:	4b18      	ldr	r3, [pc, #96]	; (d81a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8142:	681a      	ldr	r2, [r3, #0]
   d8144:	07d1      	lsls	r1, r2, #31
   d8146:	bf5c      	itt	pl
   d8148:	2201      	movpl	r2, #1
   d814a:	601a      	strpl	r2, [r3, #0]
   d814c:	4b16      	ldr	r3, [pc, #88]	; (d81a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d814e:	681a      	ldr	r2, [r3, #0]
   d8150:	07d2      	lsls	r2, r2, #31
   d8152:	bf5c      	itt	pl
   d8154:	2201      	movpl	r2, #1
   d8156:	601a      	strpl	r2, [r3, #0]
   d8158:	4b14      	ldr	r3, [pc, #80]	; (d81ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d815a:	681a      	ldr	r2, [r3, #0]
   d815c:	07d0      	lsls	r0, r2, #31
   d815e:	bf5c      	itt	pl
   d8160:	2201      	movpl	r2, #1
   d8162:	601a      	strpl	r2, [r3, #0]
   d8164:	4b12      	ldr	r3, [pc, #72]	; (d81b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8166:	681a      	ldr	r2, [r3, #0]
   d8168:	07d1      	lsls	r1, r2, #31
   d816a:	bf5c      	itt	pl
   d816c:	2201      	movpl	r2, #1
   d816e:	601a      	strpl	r2, [r3, #0]
   d8170:	4b10      	ldr	r3, [pc, #64]	; (d81b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8172:	681a      	ldr	r2, [r3, #0]
   d8174:	07d2      	lsls	r2, r2, #31
   d8176:	bf5c      	itt	pl
   d8178:	2201      	movpl	r2, #1
   d817a:	601a      	strpl	r2, [r3, #0]
   d817c:	4b0e      	ldr	r3, [pc, #56]	; (d81b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d817e:	681a      	ldr	r2, [r3, #0]
   d8180:	07d0      	lsls	r0, r2, #31
   d8182:	bf5c      	itt	pl
   d8184:	2201      	movpl	r2, #1
   d8186:	601a      	strpl	r2, [r3, #0]
   d8188:	4b0c      	ldr	r3, [pc, #48]	; (d81bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d818a:	681a      	ldr	r2, [r3, #0]
   d818c:	07d1      	lsls	r1, r2, #31
   d818e:	bf5c      	itt	pl
   d8190:	2201      	movpl	r2, #1
   d8192:	601a      	strpl	r2, [r3, #0]
   d8194:	4b0a      	ldr	r3, [pc, #40]	; (d81c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8196:	681a      	ldr	r2, [r3, #0]
   d8198:	07d2      	lsls	r2, r2, #31
   d819a:	bf5c      	itt	pl
   d819c:	2201      	movpl	r2, #1
   d819e:	601a      	strpl	r2, [r3, #0]
   d81a0:	4770      	bx	lr
   d81a2:	bf00      	nop
   d81a4:	2003e674 	.word	0x2003e674
   d81a8:	2003e670 	.word	0x2003e670
   d81ac:	2003e66c 	.word	0x2003e66c
   d81b0:	2003e668 	.word	0x2003e668
   d81b4:	2003e664 	.word	0x2003e664
   d81b8:	2003e660 	.word	0x2003e660
   d81bc:	2003e65c 	.word	0x2003e65c
   d81c0:	2003e658 	.word	0x2003e658

000d81c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d81c4:	4b18      	ldr	r3, [pc, #96]	; (d8228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d81c6:	681a      	ldr	r2, [r3, #0]
   d81c8:	07d1      	lsls	r1, r2, #31
   d81ca:	bf5c      	itt	pl
   d81cc:	2201      	movpl	r2, #1
   d81ce:	601a      	strpl	r2, [r3, #0]
   d81d0:	4b16      	ldr	r3, [pc, #88]	; (d822c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d81d2:	681a      	ldr	r2, [r3, #0]
   d81d4:	07d2      	lsls	r2, r2, #31
   d81d6:	bf5c      	itt	pl
   d81d8:	2201      	movpl	r2, #1
   d81da:	601a      	strpl	r2, [r3, #0]
   d81dc:	4b14      	ldr	r3, [pc, #80]	; (d8230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d81de:	681a      	ldr	r2, [r3, #0]
   d81e0:	07d0      	lsls	r0, r2, #31
   d81e2:	bf5c      	itt	pl
   d81e4:	2201      	movpl	r2, #1
   d81e6:	601a      	strpl	r2, [r3, #0]
   d81e8:	4b12      	ldr	r3, [pc, #72]	; (d8234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d81ea:	681a      	ldr	r2, [r3, #0]
   d81ec:	07d1      	lsls	r1, r2, #31
   d81ee:	bf5c      	itt	pl
   d81f0:	2201      	movpl	r2, #1
   d81f2:	601a      	strpl	r2, [r3, #0]
   d81f4:	4b10      	ldr	r3, [pc, #64]	; (d8238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d81f6:	681a      	ldr	r2, [r3, #0]
   d81f8:	07d2      	lsls	r2, r2, #31
   d81fa:	bf5c      	itt	pl
   d81fc:	2201      	movpl	r2, #1
   d81fe:	601a      	strpl	r2, [r3, #0]
   d8200:	4b0e      	ldr	r3, [pc, #56]	; (d823c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8202:	681a      	ldr	r2, [r3, #0]
   d8204:	07d0      	lsls	r0, r2, #31
   d8206:	bf5c      	itt	pl
   d8208:	2201      	movpl	r2, #1
   d820a:	601a      	strpl	r2, [r3, #0]
   d820c:	4b0c      	ldr	r3, [pc, #48]	; (d8240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d820e:	681a      	ldr	r2, [r3, #0]
   d8210:	07d1      	lsls	r1, r2, #31
   d8212:	bf5c      	itt	pl
   d8214:	2201      	movpl	r2, #1
   d8216:	601a      	strpl	r2, [r3, #0]
   d8218:	4b0a      	ldr	r3, [pc, #40]	; (d8244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d821a:	681a      	ldr	r2, [r3, #0]
   d821c:	07d2      	lsls	r2, r2, #31
   d821e:	bf5c      	itt	pl
   d8220:	2201      	movpl	r2, #1
   d8222:	601a      	strpl	r2, [r3, #0]
   d8224:	4770      	bx	lr
   d8226:	bf00      	nop
   d8228:	2003e694 	.word	0x2003e694
   d822c:	2003e690 	.word	0x2003e690
   d8230:	2003e68c 	.word	0x2003e68c
   d8234:	2003e688 	.word	0x2003e688
   d8238:	2003e684 	.word	0x2003e684
   d823c:	2003e680 	.word	0x2003e680
   d8240:	2003e67c 	.word	0x2003e67c
   d8244:	2003e678 	.word	0x2003e678

000d8248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8248:	4b24      	ldr	r3, [pc, #144]	; (d82dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d824a:	681a      	ldr	r2, [r3, #0]
   d824c:	07d0      	lsls	r0, r2, #31
   d824e:	bf5c      	itt	pl
   d8250:	2201      	movpl	r2, #1
   d8252:	601a      	strpl	r2, [r3, #0]
   d8254:	4b22      	ldr	r3, [pc, #136]	; (d82e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d8256:	681a      	ldr	r2, [r3, #0]
   d8258:	07d1      	lsls	r1, r2, #31
   d825a:	bf5c      	itt	pl
   d825c:	2201      	movpl	r2, #1
   d825e:	601a      	strpl	r2, [r3, #0]
   d8260:	4b20      	ldr	r3, [pc, #128]	; (d82e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8262:	681a      	ldr	r2, [r3, #0]
   d8264:	07d2      	lsls	r2, r2, #31
   d8266:	bf5c      	itt	pl
   d8268:	2201      	movpl	r2, #1
   d826a:	601a      	strpl	r2, [r3, #0]
   d826c:	4b1e      	ldr	r3, [pc, #120]	; (d82e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d826e:	681a      	ldr	r2, [r3, #0]
   d8270:	07d0      	lsls	r0, r2, #31
   d8272:	bf5c      	itt	pl
   d8274:	2201      	movpl	r2, #1
   d8276:	601a      	strpl	r2, [r3, #0]
   d8278:	4b1c      	ldr	r3, [pc, #112]	; (d82ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d827a:	681a      	ldr	r2, [r3, #0]
   d827c:	07d1      	lsls	r1, r2, #31
   d827e:	bf5c      	itt	pl
   d8280:	2201      	movpl	r2, #1
   d8282:	601a      	strpl	r2, [r3, #0]
   d8284:	4b1a      	ldr	r3, [pc, #104]	; (d82f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d8286:	681a      	ldr	r2, [r3, #0]
   d8288:	07d2      	lsls	r2, r2, #31
   d828a:	bf5c      	itt	pl
   d828c:	2201      	movpl	r2, #1
   d828e:	601a      	strpl	r2, [r3, #0]
   d8290:	4b18      	ldr	r3, [pc, #96]	; (d82f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8292:	681a      	ldr	r2, [r3, #0]
   d8294:	07d0      	lsls	r0, r2, #31
   d8296:	bf5c      	itt	pl
   d8298:	2201      	movpl	r2, #1
   d829a:	601a      	strpl	r2, [r3, #0]
   d829c:	4b16      	ldr	r3, [pc, #88]	; (d82f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d829e:	681a      	ldr	r2, [r3, #0]
   d82a0:	07d1      	lsls	r1, r2, #31
   d82a2:	bf5c      	itt	pl
   d82a4:	2201      	movpl	r2, #1
   d82a6:	601a      	strpl	r2, [r3, #0]
   d82a8:	4b14      	ldr	r3, [pc, #80]	; (d82fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d82aa:	681a      	ldr	r2, [r3, #0]
   d82ac:	07d2      	lsls	r2, r2, #31
   d82ae:	bf5c      	itt	pl
   d82b0:	2201      	movpl	r2, #1
   d82b2:	601a      	strpl	r2, [r3, #0]
   d82b4:	4b12      	ldr	r3, [pc, #72]	; (d8300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d82b6:	681a      	ldr	r2, [r3, #0]
   d82b8:	07d0      	lsls	r0, r2, #31
   d82ba:	bf5c      	itt	pl
   d82bc:	2201      	movpl	r2, #1
   d82be:	601a      	strpl	r2, [r3, #0]
   d82c0:	4b10      	ldr	r3, [pc, #64]	; (d8304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d82c2:	681a      	ldr	r2, [r3, #0]
   d82c4:	07d1      	lsls	r1, r2, #31
   d82c6:	bf5c      	itt	pl
   d82c8:	2201      	movpl	r2, #1
   d82ca:	601a      	strpl	r2, [r3, #0]
   d82cc:	4b0e      	ldr	r3, [pc, #56]	; (d8308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d82ce:	681a      	ldr	r2, [r3, #0]
   d82d0:	07d2      	lsls	r2, r2, #31
   d82d2:	bf5c      	itt	pl
   d82d4:	2201      	movpl	r2, #1
   d82d6:	601a      	strpl	r2, [r3, #0]
   d82d8:	4770      	bx	lr
   d82da:	bf00      	nop
   d82dc:	2003e6c4 	.word	0x2003e6c4
   d82e0:	2003e6c0 	.word	0x2003e6c0
   d82e4:	2003e6bc 	.word	0x2003e6bc
   d82e8:	2003e6b8 	.word	0x2003e6b8
   d82ec:	2003e6b4 	.word	0x2003e6b4
   d82f0:	2003e6b0 	.word	0x2003e6b0
   d82f4:	2003e6ac 	.word	0x2003e6ac
   d82f8:	2003e6a8 	.word	0x2003e6a8
   d82fc:	2003e6a4 	.word	0x2003e6a4
   d8300:	2003e6a0 	.word	0x2003e6a0
   d8304:	2003e69c 	.word	0x2003e69c
   d8308:	2003e698 	.word	0x2003e698

000d830c <__aeabi_drsub>:
   d830c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8310:	e002      	b.n	d8318 <__adddf3>
   d8312:	bf00      	nop

000d8314 <__aeabi_dsub>:
   d8314:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8318 <__adddf3>:
   d8318:	b530      	push	{r4, r5, lr}
   d831a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d831e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8322:	ea94 0f05 	teq	r4, r5
   d8326:	bf08      	it	eq
   d8328:	ea90 0f02 	teqeq	r0, r2
   d832c:	bf1f      	itttt	ne
   d832e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8332:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8336:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d833a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d833e:	f000 80e2 	beq.w	d8506 <__adddf3+0x1ee>
   d8342:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8346:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d834a:	bfb8      	it	lt
   d834c:	426d      	neglt	r5, r5
   d834e:	dd0c      	ble.n	d836a <__adddf3+0x52>
   d8350:	442c      	add	r4, r5
   d8352:	ea80 0202 	eor.w	r2, r0, r2
   d8356:	ea81 0303 	eor.w	r3, r1, r3
   d835a:	ea82 0000 	eor.w	r0, r2, r0
   d835e:	ea83 0101 	eor.w	r1, r3, r1
   d8362:	ea80 0202 	eor.w	r2, r0, r2
   d8366:	ea81 0303 	eor.w	r3, r1, r3
   d836a:	2d36      	cmp	r5, #54	; 0x36
   d836c:	bf88      	it	hi
   d836e:	bd30      	pophi	{r4, r5, pc}
   d8370:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8374:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8378:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d837c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8380:	d002      	beq.n	d8388 <__adddf3+0x70>
   d8382:	4240      	negs	r0, r0
   d8384:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8388:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d838c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8390:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8394:	d002      	beq.n	d839c <__adddf3+0x84>
   d8396:	4252      	negs	r2, r2
   d8398:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d839c:	ea94 0f05 	teq	r4, r5
   d83a0:	f000 80a7 	beq.w	d84f2 <__adddf3+0x1da>
   d83a4:	f1a4 0401 	sub.w	r4, r4, #1
   d83a8:	f1d5 0e20 	rsbs	lr, r5, #32
   d83ac:	db0d      	blt.n	d83ca <__adddf3+0xb2>
   d83ae:	fa02 fc0e 	lsl.w	ip, r2, lr
   d83b2:	fa22 f205 	lsr.w	r2, r2, r5
   d83b6:	1880      	adds	r0, r0, r2
   d83b8:	f141 0100 	adc.w	r1, r1, #0
   d83bc:	fa03 f20e 	lsl.w	r2, r3, lr
   d83c0:	1880      	adds	r0, r0, r2
   d83c2:	fa43 f305 	asr.w	r3, r3, r5
   d83c6:	4159      	adcs	r1, r3
   d83c8:	e00e      	b.n	d83e8 <__adddf3+0xd0>
   d83ca:	f1a5 0520 	sub.w	r5, r5, #32
   d83ce:	f10e 0e20 	add.w	lr, lr, #32
   d83d2:	2a01      	cmp	r2, #1
   d83d4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d83d8:	bf28      	it	cs
   d83da:	f04c 0c02 	orrcs.w	ip, ip, #2
   d83de:	fa43 f305 	asr.w	r3, r3, r5
   d83e2:	18c0      	adds	r0, r0, r3
   d83e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d83e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d83ec:	d507      	bpl.n	d83fe <__adddf3+0xe6>
   d83ee:	f04f 0e00 	mov.w	lr, #0
   d83f2:	f1dc 0c00 	rsbs	ip, ip, #0
   d83f6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d83fa:	eb6e 0101 	sbc.w	r1, lr, r1
   d83fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8402:	d31b      	bcc.n	d843c <__adddf3+0x124>
   d8404:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8408:	d30c      	bcc.n	d8424 <__adddf3+0x10c>
   d840a:	0849      	lsrs	r1, r1, #1
   d840c:	ea5f 0030 	movs.w	r0, r0, rrx
   d8410:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8414:	f104 0401 	add.w	r4, r4, #1
   d8418:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d841c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8420:	f080 809a 	bcs.w	d8558 <__adddf3+0x240>
   d8424:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8428:	bf08      	it	eq
   d842a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d842e:	f150 0000 	adcs.w	r0, r0, #0
   d8432:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8436:	ea41 0105 	orr.w	r1, r1, r5
   d843a:	bd30      	pop	{r4, r5, pc}
   d843c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8440:	4140      	adcs	r0, r0
   d8442:	eb41 0101 	adc.w	r1, r1, r1
   d8446:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d844a:	f1a4 0401 	sub.w	r4, r4, #1
   d844e:	d1e9      	bne.n	d8424 <__adddf3+0x10c>
   d8450:	f091 0f00 	teq	r1, #0
   d8454:	bf04      	itt	eq
   d8456:	4601      	moveq	r1, r0
   d8458:	2000      	moveq	r0, #0
   d845a:	fab1 f381 	clz	r3, r1
   d845e:	bf08      	it	eq
   d8460:	3320      	addeq	r3, #32
   d8462:	f1a3 030b 	sub.w	r3, r3, #11
   d8466:	f1b3 0220 	subs.w	r2, r3, #32
   d846a:	da0c      	bge.n	d8486 <__adddf3+0x16e>
   d846c:	320c      	adds	r2, #12
   d846e:	dd08      	ble.n	d8482 <__adddf3+0x16a>
   d8470:	f102 0c14 	add.w	ip, r2, #20
   d8474:	f1c2 020c 	rsb	r2, r2, #12
   d8478:	fa01 f00c 	lsl.w	r0, r1, ip
   d847c:	fa21 f102 	lsr.w	r1, r1, r2
   d8480:	e00c      	b.n	d849c <__adddf3+0x184>
   d8482:	f102 0214 	add.w	r2, r2, #20
   d8486:	bfd8      	it	le
   d8488:	f1c2 0c20 	rsble	ip, r2, #32
   d848c:	fa01 f102 	lsl.w	r1, r1, r2
   d8490:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8494:	bfdc      	itt	le
   d8496:	ea41 010c 	orrle.w	r1, r1, ip
   d849a:	4090      	lslle	r0, r2
   d849c:	1ae4      	subs	r4, r4, r3
   d849e:	bfa2      	ittt	ge
   d84a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d84a4:	4329      	orrge	r1, r5
   d84a6:	bd30      	popge	{r4, r5, pc}
   d84a8:	ea6f 0404 	mvn.w	r4, r4
   d84ac:	3c1f      	subs	r4, #31
   d84ae:	da1c      	bge.n	d84ea <__adddf3+0x1d2>
   d84b0:	340c      	adds	r4, #12
   d84b2:	dc0e      	bgt.n	d84d2 <__adddf3+0x1ba>
   d84b4:	f104 0414 	add.w	r4, r4, #20
   d84b8:	f1c4 0220 	rsb	r2, r4, #32
   d84bc:	fa20 f004 	lsr.w	r0, r0, r4
   d84c0:	fa01 f302 	lsl.w	r3, r1, r2
   d84c4:	ea40 0003 	orr.w	r0, r0, r3
   d84c8:	fa21 f304 	lsr.w	r3, r1, r4
   d84cc:	ea45 0103 	orr.w	r1, r5, r3
   d84d0:	bd30      	pop	{r4, r5, pc}
   d84d2:	f1c4 040c 	rsb	r4, r4, #12
   d84d6:	f1c4 0220 	rsb	r2, r4, #32
   d84da:	fa20 f002 	lsr.w	r0, r0, r2
   d84de:	fa01 f304 	lsl.w	r3, r1, r4
   d84e2:	ea40 0003 	orr.w	r0, r0, r3
   d84e6:	4629      	mov	r1, r5
   d84e8:	bd30      	pop	{r4, r5, pc}
   d84ea:	fa21 f004 	lsr.w	r0, r1, r4
   d84ee:	4629      	mov	r1, r5
   d84f0:	bd30      	pop	{r4, r5, pc}
   d84f2:	f094 0f00 	teq	r4, #0
   d84f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d84fa:	bf06      	itte	eq
   d84fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8500:	3401      	addeq	r4, #1
   d8502:	3d01      	subne	r5, #1
   d8504:	e74e      	b.n	d83a4 <__adddf3+0x8c>
   d8506:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d850a:	bf18      	it	ne
   d850c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8510:	d029      	beq.n	d8566 <__adddf3+0x24e>
   d8512:	ea94 0f05 	teq	r4, r5
   d8516:	bf08      	it	eq
   d8518:	ea90 0f02 	teqeq	r0, r2
   d851c:	d005      	beq.n	d852a <__adddf3+0x212>
   d851e:	ea54 0c00 	orrs.w	ip, r4, r0
   d8522:	bf04      	itt	eq
   d8524:	4619      	moveq	r1, r3
   d8526:	4610      	moveq	r0, r2
   d8528:	bd30      	pop	{r4, r5, pc}
   d852a:	ea91 0f03 	teq	r1, r3
   d852e:	bf1e      	ittt	ne
   d8530:	2100      	movne	r1, #0
   d8532:	2000      	movne	r0, #0
   d8534:	bd30      	popne	{r4, r5, pc}
   d8536:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d853a:	d105      	bne.n	d8548 <__adddf3+0x230>
   d853c:	0040      	lsls	r0, r0, #1
   d853e:	4149      	adcs	r1, r1
   d8540:	bf28      	it	cs
   d8542:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8546:	bd30      	pop	{r4, r5, pc}
   d8548:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d854c:	bf3c      	itt	cc
   d854e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8552:	bd30      	popcc	{r4, r5, pc}
   d8554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8558:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d855c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8560:	f04f 0000 	mov.w	r0, #0
   d8564:	bd30      	pop	{r4, r5, pc}
   d8566:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d856a:	bf1a      	itte	ne
   d856c:	4619      	movne	r1, r3
   d856e:	4610      	movne	r0, r2
   d8570:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8574:	bf1c      	itt	ne
   d8576:	460b      	movne	r3, r1
   d8578:	4602      	movne	r2, r0
   d857a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d857e:	bf06      	itte	eq
   d8580:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8584:	ea91 0f03 	teqeq	r1, r3
   d8588:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d858c:	bd30      	pop	{r4, r5, pc}
   d858e:	bf00      	nop

000d8590 <__aeabi_ui2d>:
   d8590:	f090 0f00 	teq	r0, #0
   d8594:	bf04      	itt	eq
   d8596:	2100      	moveq	r1, #0
   d8598:	4770      	bxeq	lr
   d859a:	b530      	push	{r4, r5, lr}
   d859c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d85a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d85a4:	f04f 0500 	mov.w	r5, #0
   d85a8:	f04f 0100 	mov.w	r1, #0
   d85ac:	e750      	b.n	d8450 <__adddf3+0x138>
   d85ae:	bf00      	nop

000d85b0 <__aeabi_i2d>:
   d85b0:	f090 0f00 	teq	r0, #0
   d85b4:	bf04      	itt	eq
   d85b6:	2100      	moveq	r1, #0
   d85b8:	4770      	bxeq	lr
   d85ba:	b530      	push	{r4, r5, lr}
   d85bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d85c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d85c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d85c8:	bf48      	it	mi
   d85ca:	4240      	negmi	r0, r0
   d85cc:	f04f 0100 	mov.w	r1, #0
   d85d0:	e73e      	b.n	d8450 <__adddf3+0x138>
   d85d2:	bf00      	nop

000d85d4 <__aeabi_f2d>:
   d85d4:	0042      	lsls	r2, r0, #1
   d85d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d85da:	ea4f 0131 	mov.w	r1, r1, rrx
   d85de:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d85e2:	bf1f      	itttt	ne
   d85e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d85e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d85ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d85f0:	4770      	bxne	lr
   d85f2:	f092 0f00 	teq	r2, #0
   d85f6:	bf14      	ite	ne
   d85f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d85fc:	4770      	bxeq	lr
   d85fe:	b530      	push	{r4, r5, lr}
   d8600:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8604:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d860c:	e720      	b.n	d8450 <__adddf3+0x138>
   d860e:	bf00      	nop

000d8610 <__aeabi_ul2d>:
   d8610:	ea50 0201 	orrs.w	r2, r0, r1
   d8614:	bf08      	it	eq
   d8616:	4770      	bxeq	lr
   d8618:	b530      	push	{r4, r5, lr}
   d861a:	f04f 0500 	mov.w	r5, #0
   d861e:	e00a      	b.n	d8636 <__aeabi_l2d+0x16>

000d8620 <__aeabi_l2d>:
   d8620:	ea50 0201 	orrs.w	r2, r0, r1
   d8624:	bf08      	it	eq
   d8626:	4770      	bxeq	lr
   d8628:	b530      	push	{r4, r5, lr}
   d862a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d862e:	d502      	bpl.n	d8636 <__aeabi_l2d+0x16>
   d8630:	4240      	negs	r0, r0
   d8632:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8636:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d863a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d863e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8642:	f43f aedc 	beq.w	d83fe <__adddf3+0xe6>
   d8646:	f04f 0203 	mov.w	r2, #3
   d864a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d864e:	bf18      	it	ne
   d8650:	3203      	addne	r2, #3
   d8652:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8656:	bf18      	it	ne
   d8658:	3203      	addne	r2, #3
   d865a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d865e:	f1c2 0320 	rsb	r3, r2, #32
   d8662:	fa00 fc03 	lsl.w	ip, r0, r3
   d8666:	fa20 f002 	lsr.w	r0, r0, r2
   d866a:	fa01 fe03 	lsl.w	lr, r1, r3
   d866e:	ea40 000e 	orr.w	r0, r0, lr
   d8672:	fa21 f102 	lsr.w	r1, r1, r2
   d8676:	4414      	add	r4, r2
   d8678:	e6c1      	b.n	d83fe <__adddf3+0xe6>
   d867a:	bf00      	nop

000d867c <__aeabi_dmul>:
   d867c:	b570      	push	{r4, r5, r6, lr}
   d867e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8682:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8686:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d868a:	bf1d      	ittte	ne
   d868c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8690:	ea94 0f0c 	teqne	r4, ip
   d8694:	ea95 0f0c 	teqne	r5, ip
   d8698:	f000 f8de 	bleq	d8858 <__aeabi_dmul+0x1dc>
   d869c:	442c      	add	r4, r5
   d869e:	ea81 0603 	eor.w	r6, r1, r3
   d86a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d86a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d86aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d86ae:	bf18      	it	ne
   d86b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d86b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d86b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d86bc:	d038      	beq.n	d8730 <__aeabi_dmul+0xb4>
   d86be:	fba0 ce02 	umull	ip, lr, r0, r2
   d86c2:	f04f 0500 	mov.w	r5, #0
   d86c6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d86ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d86ce:	fbe0 e503 	umlal	lr, r5, r0, r3
   d86d2:	f04f 0600 	mov.w	r6, #0
   d86d6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d86da:	f09c 0f00 	teq	ip, #0
   d86de:	bf18      	it	ne
   d86e0:	f04e 0e01 	orrne.w	lr, lr, #1
   d86e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d86e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d86ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d86f0:	d204      	bcs.n	d86fc <__aeabi_dmul+0x80>
   d86f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d86f6:	416d      	adcs	r5, r5
   d86f8:	eb46 0606 	adc.w	r6, r6, r6
   d86fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8700:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8704:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8708:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d870c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8710:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8714:	bf88      	it	hi
   d8716:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d871a:	d81e      	bhi.n	d875a <__aeabi_dmul+0xde>
   d871c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8720:	bf08      	it	eq
   d8722:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8726:	f150 0000 	adcs.w	r0, r0, #0
   d872a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d872e:	bd70      	pop	{r4, r5, r6, pc}
   d8730:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8734:	ea46 0101 	orr.w	r1, r6, r1
   d8738:	ea40 0002 	orr.w	r0, r0, r2
   d873c:	ea81 0103 	eor.w	r1, r1, r3
   d8740:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8744:	bfc2      	ittt	gt
   d8746:	ebd4 050c 	rsbsgt	r5, r4, ip
   d874a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d874e:	bd70      	popgt	{r4, r5, r6, pc}
   d8750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8754:	f04f 0e00 	mov.w	lr, #0
   d8758:	3c01      	subs	r4, #1
   d875a:	f300 80ab 	bgt.w	d88b4 <__aeabi_dmul+0x238>
   d875e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8762:	bfde      	ittt	le
   d8764:	2000      	movle	r0, #0
   d8766:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d876a:	bd70      	pople	{r4, r5, r6, pc}
   d876c:	f1c4 0400 	rsb	r4, r4, #0
   d8770:	3c20      	subs	r4, #32
   d8772:	da35      	bge.n	d87e0 <__aeabi_dmul+0x164>
   d8774:	340c      	adds	r4, #12
   d8776:	dc1b      	bgt.n	d87b0 <__aeabi_dmul+0x134>
   d8778:	f104 0414 	add.w	r4, r4, #20
   d877c:	f1c4 0520 	rsb	r5, r4, #32
   d8780:	fa00 f305 	lsl.w	r3, r0, r5
   d8784:	fa20 f004 	lsr.w	r0, r0, r4
   d8788:	fa01 f205 	lsl.w	r2, r1, r5
   d878c:	ea40 0002 	orr.w	r0, r0, r2
   d8790:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8794:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d879c:	fa21 f604 	lsr.w	r6, r1, r4
   d87a0:	eb42 0106 	adc.w	r1, r2, r6
   d87a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d87a8:	bf08      	it	eq
   d87aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d87ae:	bd70      	pop	{r4, r5, r6, pc}
   d87b0:	f1c4 040c 	rsb	r4, r4, #12
   d87b4:	f1c4 0520 	rsb	r5, r4, #32
   d87b8:	fa00 f304 	lsl.w	r3, r0, r4
   d87bc:	fa20 f005 	lsr.w	r0, r0, r5
   d87c0:	fa01 f204 	lsl.w	r2, r1, r4
   d87c4:	ea40 0002 	orr.w	r0, r0, r2
   d87c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d87cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d87d0:	f141 0100 	adc.w	r1, r1, #0
   d87d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d87d8:	bf08      	it	eq
   d87da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d87de:	bd70      	pop	{r4, r5, r6, pc}
   d87e0:	f1c4 0520 	rsb	r5, r4, #32
   d87e4:	fa00 f205 	lsl.w	r2, r0, r5
   d87e8:	ea4e 0e02 	orr.w	lr, lr, r2
   d87ec:	fa20 f304 	lsr.w	r3, r0, r4
   d87f0:	fa01 f205 	lsl.w	r2, r1, r5
   d87f4:	ea43 0302 	orr.w	r3, r3, r2
   d87f8:	fa21 f004 	lsr.w	r0, r1, r4
   d87fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8800:	fa21 f204 	lsr.w	r2, r1, r4
   d8804:	ea20 0002 	bic.w	r0, r0, r2
   d8808:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d880c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8810:	bf08      	it	eq
   d8812:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8816:	bd70      	pop	{r4, r5, r6, pc}
   d8818:	f094 0f00 	teq	r4, #0
   d881c:	d10f      	bne.n	d883e <__aeabi_dmul+0x1c2>
   d881e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8822:	0040      	lsls	r0, r0, #1
   d8824:	eb41 0101 	adc.w	r1, r1, r1
   d8828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d882c:	bf08      	it	eq
   d882e:	3c01      	subeq	r4, #1
   d8830:	d0f7      	beq.n	d8822 <__aeabi_dmul+0x1a6>
   d8832:	ea41 0106 	orr.w	r1, r1, r6
   d8836:	f095 0f00 	teq	r5, #0
   d883a:	bf18      	it	ne
   d883c:	4770      	bxne	lr
   d883e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8842:	0052      	lsls	r2, r2, #1
   d8844:	eb43 0303 	adc.w	r3, r3, r3
   d8848:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d884c:	bf08      	it	eq
   d884e:	3d01      	subeq	r5, #1
   d8850:	d0f7      	beq.n	d8842 <__aeabi_dmul+0x1c6>
   d8852:	ea43 0306 	orr.w	r3, r3, r6
   d8856:	4770      	bx	lr
   d8858:	ea94 0f0c 	teq	r4, ip
   d885c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8860:	bf18      	it	ne
   d8862:	ea95 0f0c 	teqne	r5, ip
   d8866:	d00c      	beq.n	d8882 <__aeabi_dmul+0x206>
   d8868:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d886c:	bf18      	it	ne
   d886e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8872:	d1d1      	bne.n	d8818 <__aeabi_dmul+0x19c>
   d8874:	ea81 0103 	eor.w	r1, r1, r3
   d8878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d887c:	f04f 0000 	mov.w	r0, #0
   d8880:	bd70      	pop	{r4, r5, r6, pc}
   d8882:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8886:	bf06      	itte	eq
   d8888:	4610      	moveq	r0, r2
   d888a:	4619      	moveq	r1, r3
   d888c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8890:	d019      	beq.n	d88c6 <__aeabi_dmul+0x24a>
   d8892:	ea94 0f0c 	teq	r4, ip
   d8896:	d102      	bne.n	d889e <__aeabi_dmul+0x222>
   d8898:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d889c:	d113      	bne.n	d88c6 <__aeabi_dmul+0x24a>
   d889e:	ea95 0f0c 	teq	r5, ip
   d88a2:	d105      	bne.n	d88b0 <__aeabi_dmul+0x234>
   d88a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d88a8:	bf1c      	itt	ne
   d88aa:	4610      	movne	r0, r2
   d88ac:	4619      	movne	r1, r3
   d88ae:	d10a      	bne.n	d88c6 <__aeabi_dmul+0x24a>
   d88b0:	ea81 0103 	eor.w	r1, r1, r3
   d88b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d88b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d88bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d88c0:	f04f 0000 	mov.w	r0, #0
   d88c4:	bd70      	pop	{r4, r5, r6, pc}
   d88c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d88ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d88ce:	bd70      	pop	{r4, r5, r6, pc}

000d88d0 <__aeabi_ddiv>:
   d88d0:	b570      	push	{r4, r5, r6, lr}
   d88d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d88d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d88da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d88de:	bf1d      	ittte	ne
   d88e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d88e4:	ea94 0f0c 	teqne	r4, ip
   d88e8:	ea95 0f0c 	teqne	r5, ip
   d88ec:	f000 f8a7 	bleq	d8a3e <__aeabi_ddiv+0x16e>
   d88f0:	eba4 0405 	sub.w	r4, r4, r5
   d88f4:	ea81 0e03 	eor.w	lr, r1, r3
   d88f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d88fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8900:	f000 8088 	beq.w	d8a14 <__aeabi_ddiv+0x144>
   d8904:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8908:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d890c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8910:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8914:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8918:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d891c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8920:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8924:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8928:	429d      	cmp	r5, r3
   d892a:	bf08      	it	eq
   d892c:	4296      	cmpeq	r6, r2
   d892e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8932:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8936:	d202      	bcs.n	d893e <__aeabi_ddiv+0x6e>
   d8938:	085b      	lsrs	r3, r3, #1
   d893a:	ea4f 0232 	mov.w	r2, r2, rrx
   d893e:	1ab6      	subs	r6, r6, r2
   d8940:	eb65 0503 	sbc.w	r5, r5, r3
   d8944:	085b      	lsrs	r3, r3, #1
   d8946:	ea4f 0232 	mov.w	r2, r2, rrx
   d894a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d894e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8952:	ebb6 0e02 	subs.w	lr, r6, r2
   d8956:	eb75 0e03 	sbcs.w	lr, r5, r3
   d895a:	bf22      	ittt	cs
   d895c:	1ab6      	subcs	r6, r6, r2
   d895e:	4675      	movcs	r5, lr
   d8960:	ea40 000c 	orrcs.w	r0, r0, ip
   d8964:	085b      	lsrs	r3, r3, #1
   d8966:	ea4f 0232 	mov.w	r2, r2, rrx
   d896a:	ebb6 0e02 	subs.w	lr, r6, r2
   d896e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8972:	bf22      	ittt	cs
   d8974:	1ab6      	subcs	r6, r6, r2
   d8976:	4675      	movcs	r5, lr
   d8978:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d897c:	085b      	lsrs	r3, r3, #1
   d897e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8982:	ebb6 0e02 	subs.w	lr, r6, r2
   d8986:	eb75 0e03 	sbcs.w	lr, r5, r3
   d898a:	bf22      	ittt	cs
   d898c:	1ab6      	subcs	r6, r6, r2
   d898e:	4675      	movcs	r5, lr
   d8990:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8994:	085b      	lsrs	r3, r3, #1
   d8996:	ea4f 0232 	mov.w	r2, r2, rrx
   d899a:	ebb6 0e02 	subs.w	lr, r6, r2
   d899e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d89a2:	bf22      	ittt	cs
   d89a4:	1ab6      	subcs	r6, r6, r2
   d89a6:	4675      	movcs	r5, lr
   d89a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d89ac:	ea55 0e06 	orrs.w	lr, r5, r6
   d89b0:	d018      	beq.n	d89e4 <__aeabi_ddiv+0x114>
   d89b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d89b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d89ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d89be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d89c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d89c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d89ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d89ce:	d1c0      	bne.n	d8952 <__aeabi_ddiv+0x82>
   d89d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d89d4:	d10b      	bne.n	d89ee <__aeabi_ddiv+0x11e>
   d89d6:	ea41 0100 	orr.w	r1, r1, r0
   d89da:	f04f 0000 	mov.w	r0, #0
   d89de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d89e2:	e7b6      	b.n	d8952 <__aeabi_ddiv+0x82>
   d89e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d89e8:	bf04      	itt	eq
   d89ea:	4301      	orreq	r1, r0
   d89ec:	2000      	moveq	r0, #0
   d89ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d89f2:	bf88      	it	hi
   d89f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d89f8:	f63f aeaf 	bhi.w	d875a <__aeabi_dmul+0xde>
   d89fc:	ebb5 0c03 	subs.w	ip, r5, r3
   d8a00:	bf04      	itt	eq
   d8a02:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8a06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8a0a:	f150 0000 	adcs.w	r0, r0, #0
   d8a0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8a12:	bd70      	pop	{r4, r5, r6, pc}
   d8a14:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8a18:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8a1c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8a20:	bfc2      	ittt	gt
   d8a22:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8a26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8a2a:	bd70      	popgt	{r4, r5, r6, pc}
   d8a2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8a30:	f04f 0e00 	mov.w	lr, #0
   d8a34:	3c01      	subs	r4, #1
   d8a36:	e690      	b.n	d875a <__aeabi_dmul+0xde>
   d8a38:	ea45 0e06 	orr.w	lr, r5, r6
   d8a3c:	e68d      	b.n	d875a <__aeabi_dmul+0xde>
   d8a3e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8a42:	ea94 0f0c 	teq	r4, ip
   d8a46:	bf08      	it	eq
   d8a48:	ea95 0f0c 	teqeq	r5, ip
   d8a4c:	f43f af3b 	beq.w	d88c6 <__aeabi_dmul+0x24a>
   d8a50:	ea94 0f0c 	teq	r4, ip
   d8a54:	d10a      	bne.n	d8a6c <__aeabi_ddiv+0x19c>
   d8a56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8a5a:	f47f af34 	bne.w	d88c6 <__aeabi_dmul+0x24a>
   d8a5e:	ea95 0f0c 	teq	r5, ip
   d8a62:	f47f af25 	bne.w	d88b0 <__aeabi_dmul+0x234>
   d8a66:	4610      	mov	r0, r2
   d8a68:	4619      	mov	r1, r3
   d8a6a:	e72c      	b.n	d88c6 <__aeabi_dmul+0x24a>
   d8a6c:	ea95 0f0c 	teq	r5, ip
   d8a70:	d106      	bne.n	d8a80 <__aeabi_ddiv+0x1b0>
   d8a72:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8a76:	f43f aefd 	beq.w	d8874 <__aeabi_dmul+0x1f8>
   d8a7a:	4610      	mov	r0, r2
   d8a7c:	4619      	mov	r1, r3
   d8a7e:	e722      	b.n	d88c6 <__aeabi_dmul+0x24a>
   d8a80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8a84:	bf18      	it	ne
   d8a86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8a8a:	f47f aec5 	bne.w	d8818 <__aeabi_dmul+0x19c>
   d8a8e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8a92:	f47f af0d 	bne.w	d88b0 <__aeabi_dmul+0x234>
   d8a96:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8a9a:	f47f aeeb 	bne.w	d8874 <__aeabi_dmul+0x1f8>
   d8a9e:	e712      	b.n	d88c6 <__aeabi_dmul+0x24a>

000d8aa0 <__aeabi_d2f>:
   d8aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8aa8:	bf24      	itt	cs
   d8aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8ab2:	d90d      	bls.n	d8ad0 <__aeabi_d2f+0x30>
   d8ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8ac8:	bf08      	it	eq
   d8aca:	f020 0001 	biceq.w	r0, r0, #1
   d8ace:	4770      	bx	lr
   d8ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8ad4:	d121      	bne.n	d8b1a <__aeabi_d2f+0x7a>
   d8ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8ada:	bfbc      	itt	lt
   d8adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8ae0:	4770      	bxlt	lr
   d8ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8aea:	f1c2 0218 	rsb	r2, r2, #24
   d8aee:	f1c2 0c20 	rsb	ip, r2, #32
   d8af2:	fa10 f30c 	lsls.w	r3, r0, ip
   d8af6:	fa20 f002 	lsr.w	r0, r0, r2
   d8afa:	bf18      	it	ne
   d8afc:	f040 0001 	orrne.w	r0, r0, #1
   d8b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8b08:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8b0c:	ea40 000c 	orr.w	r0, r0, ip
   d8b10:	fa23 f302 	lsr.w	r3, r3, r2
   d8b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8b18:	e7cc      	b.n	d8ab4 <__aeabi_d2f+0x14>
   d8b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8b1e:	d107      	bne.n	d8b30 <__aeabi_d2f+0x90>
   d8b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8b24:	bf1e      	ittt	ne
   d8b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8b2e:	4770      	bxne	lr
   d8b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8b3c:	4770      	bx	lr
   d8b3e:	bf00      	nop

000d8b40 <asctime>:
   d8b40:	4b09      	ldr	r3, [pc, #36]	; (d8b68 <asctime+0x28>)
   d8b42:	b570      	push	{r4, r5, r6, lr}
   d8b44:	681c      	ldr	r4, [r3, #0]
   d8b46:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d8b48:	4606      	mov	r6, r0
   d8b4a:	b93d      	cbnz	r5, d8b5c <asctime+0x1c>
   d8b4c:	201a      	movs	r0, #26
   d8b4e:	f7fc fd8f 	bl	d5670 <malloc>
   d8b52:	221a      	movs	r2, #26
   d8b54:	6420      	str	r0, [r4, #64]	; 0x40
   d8b56:	4629      	mov	r1, r5
   d8b58:	f000 fa04 	bl	d8f64 <memset>
   d8b5c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d8b5e:	4630      	mov	r0, r6
   d8b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8b64:	f000 b802 	b.w	d8b6c <asctime_r>
   d8b68:	2003e108 	.word	0x2003e108

000d8b6c <asctime_r>:
   d8b6c:	b510      	push	{r4, lr}
   d8b6e:	460c      	mov	r4, r1
   d8b70:	6941      	ldr	r1, [r0, #20]
   d8b72:	6903      	ldr	r3, [r0, #16]
   d8b74:	6982      	ldr	r2, [r0, #24]
   d8b76:	b086      	sub	sp, #24
   d8b78:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d8b7c:	9104      	str	r1, [sp, #16]
   d8b7e:	6801      	ldr	r1, [r0, #0]
   d8b80:	9103      	str	r1, [sp, #12]
   d8b82:	6841      	ldr	r1, [r0, #4]
   d8b84:	9102      	str	r1, [sp, #8]
   d8b86:	6881      	ldr	r1, [r0, #8]
   d8b88:	9101      	str	r1, [sp, #4]
   d8b8a:	68c1      	ldr	r1, [r0, #12]
   d8b8c:	9100      	str	r1, [sp, #0]
   d8b8e:	4907      	ldr	r1, [pc, #28]	; (d8bac <asctime_r+0x40>)
   d8b90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d8b94:	440b      	add	r3, r1
   d8b96:	4906      	ldr	r1, [pc, #24]	; (d8bb0 <asctime_r+0x44>)
   d8b98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d8b9c:	440a      	add	r2, r1
   d8b9e:	4620      	mov	r0, r4
   d8ba0:	4904      	ldr	r1, [pc, #16]	; (d8bb4 <asctime_r+0x48>)
   d8ba2:	f7fc fd7d 	bl	d56a0 <siprintf>
   d8ba6:	4620      	mov	r0, r4
   d8ba8:	b006      	add	sp, #24
   d8baa:	bd10      	pop	{r4, pc}
   d8bac:	000dada6 	.word	0x000dada6
   d8bb0:	000dad91 	.word	0x000dad91
   d8bb4:	000dadca 	.word	0x000dadca

000d8bb8 <__cxa_atexit>:
   d8bb8:	b510      	push	{r4, lr}
   d8bba:	4c05      	ldr	r4, [pc, #20]	; (d8bd0 <__cxa_atexit+0x18>)
   d8bbc:	4613      	mov	r3, r2
   d8bbe:	b12c      	cbz	r4, d8bcc <__cxa_atexit+0x14>
   d8bc0:	460a      	mov	r2, r1
   d8bc2:	4601      	mov	r1, r0
   d8bc4:	2002      	movs	r0, #2
   d8bc6:	f3af 8000 	nop.w
   d8bca:	bd10      	pop	{r4, pc}
   d8bcc:	4620      	mov	r0, r4
   d8bce:	bd10      	pop	{r4, pc}
   d8bd0:	00000000 	.word	0x00000000

000d8bd4 <gmtime>:
   d8bd4:	b538      	push	{r3, r4, r5, lr}
   d8bd6:	4b07      	ldr	r3, [pc, #28]	; (d8bf4 <gmtime+0x20>)
   d8bd8:	681c      	ldr	r4, [r3, #0]
   d8bda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d8bdc:	4605      	mov	r5, r0
   d8bde:	b91b      	cbnz	r3, d8be8 <gmtime+0x14>
   d8be0:	2024      	movs	r0, #36	; 0x24
   d8be2:	f7fc fd45 	bl	d5670 <malloc>
   d8be6:	63e0      	str	r0, [r4, #60]	; 0x3c
   d8be8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d8bea:	4628      	mov	r0, r5
   d8bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8bf0:	f000 b802 	b.w	d8bf8 <gmtime_r>
   d8bf4:	2003e108 	.word	0x2003e108

000d8bf8 <gmtime_r>:
   d8bf8:	6802      	ldr	r2, [r0, #0]
   d8bfa:	4b47      	ldr	r3, [pc, #284]	; (d8d18 <gmtime_r+0x120>)
   d8bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8bfe:	fb92 f4f3 	sdiv	r4, r2, r3
   d8c02:	fb03 2214 	mls	r2, r3, r4, r2
   d8c06:	2a00      	cmp	r2, #0
   d8c08:	bfbc      	itt	lt
   d8c0a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d8c0e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d8c12:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d8c16:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d8c1a:	fb92 f3f0 	sdiv	r3, r2, r0
   d8c1e:	fb00 2213 	mls	r2, r0, r3, r2
   d8c22:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d8c26:	bfac      	ite	ge
   d8c28:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d8c2c:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d8c30:	608b      	str	r3, [r1, #8]
   d8c32:	fb92 f3f0 	sdiv	r3, r2, r0
   d8c36:	fb00 2213 	mls	r2, r0, r3, r2
   d8c3a:	604b      	str	r3, [r1, #4]
   d8c3c:	600a      	str	r2, [r1, #0]
   d8c3e:	2307      	movs	r3, #7
   d8c40:	1ce2      	adds	r2, r4, #3
   d8c42:	fb92 f3f3 	sdiv	r3, r2, r3
   d8c46:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d8c4a:	1ad3      	subs	r3, r2, r3
   d8c4c:	618b      	str	r3, [r1, #24]
   d8c4e:	4b33      	ldr	r3, [pc, #204]	; (d8d1c <gmtime_r+0x124>)
   d8c50:	4d33      	ldr	r5, [pc, #204]	; (d8d20 <gmtime_r+0x128>)
   d8c52:	fb94 f5f5 	sdiv	r5, r4, r5
   d8c56:	fb03 4405 	mla	r4, r3, r5, r4
   d8c5a:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d8c5e:	fbb4 f2f2 	udiv	r2, r4, r2
   d8c62:	4422      	add	r2, r4
   d8c64:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d8c68:	fbb4 f3f7 	udiv	r3, r4, r7
   d8c6c:	1ad2      	subs	r2, r2, r3
   d8c6e:	482d      	ldr	r0, [pc, #180]	; (d8d24 <gmtime_r+0x12c>)
   d8c70:	fbb4 f0f0 	udiv	r0, r4, r0
   d8c74:	f648 6694 	movw	r6, #36500	; 0x8e94
   d8c78:	1a13      	subs	r3, r2, r0
   d8c7a:	fbb3 f6f6 	udiv	r6, r3, r6
   d8c7e:	4434      	add	r4, r6
   d8c80:	f240 126d 	movw	r2, #365	; 0x16d
   d8c84:	fbb3 f0f2 	udiv	r0, r3, r2
   d8c88:	fbb3 f3f7 	udiv	r3, r3, r7
   d8c8c:	1ae3      	subs	r3, r4, r3
   d8c8e:	fb02 3310 	mls	r3, r2, r0, r3
   d8c92:	2499      	movs	r4, #153	; 0x99
   d8c94:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d8c98:	3202      	adds	r2, #2
   d8c9a:	fbb2 f2f4 	udiv	r2, r2, r4
   d8c9e:	2a0a      	cmp	r2, #10
   d8ca0:	fb04 f402 	mul.w	r4, r4, r2
   d8ca4:	f104 0602 	add.w	r6, r4, #2
   d8ca8:	f04f 0405 	mov.w	r4, #5
   d8cac:	fbb6 f4f4 	udiv	r4, r6, r4
   d8cb0:	bf34      	ite	cc
   d8cb2:	2602      	movcc	r6, #2
   d8cb4:	f06f 0609 	mvncs.w	r6, #9
   d8cb8:	4416      	add	r6, r2
   d8cba:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8cbe:	fb02 0505 	mla	r5, r2, r5, r0
   d8cc2:	1c5f      	adds	r7, r3, #1
   d8cc4:	2e01      	cmp	r6, #1
   d8cc6:	bf98      	it	ls
   d8cc8:	3501      	addls	r5, #1
   d8cca:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d8cce:	eba7 0704 	sub.w	r7, r7, r4
   d8cd2:	d302      	bcc.n	d8cda <gmtime_r+0xe2>
   d8cd4:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d8cd8:	e014      	b.n	d8d04 <gmtime_r+0x10c>
   d8cda:	0782      	lsls	r2, r0, #30
   d8cdc:	d105      	bne.n	d8cea <gmtime_r+0xf2>
   d8cde:	2464      	movs	r4, #100	; 0x64
   d8ce0:	fbb0 f2f4 	udiv	r2, r0, r4
   d8ce4:	fb04 0212 	mls	r2, r4, r2, r0
   d8ce8:	b94a      	cbnz	r2, d8cfe <gmtime_r+0x106>
   d8cea:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8cee:	fbb0 f4f2 	udiv	r4, r0, r2
   d8cf2:	fb02 0014 	mls	r0, r2, r4, r0
   d8cf6:	fab0 f280 	clz	r2, r0
   d8cfa:	0952      	lsrs	r2, r2, #5
   d8cfc:	e000      	b.n	d8d00 <gmtime_r+0x108>
   d8cfe:	2201      	movs	r2, #1
   d8d00:	333b      	adds	r3, #59	; 0x3b
   d8d02:	441a      	add	r2, r3
   d8d04:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d8d08:	2300      	movs	r3, #0
   d8d0a:	61ca      	str	r2, [r1, #28]
   d8d0c:	614d      	str	r5, [r1, #20]
   d8d0e:	610e      	str	r6, [r1, #16]
   d8d10:	60cf      	str	r7, [r1, #12]
   d8d12:	620b      	str	r3, [r1, #32]
   d8d14:	4608      	mov	r0, r1
   d8d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8d18:	00015180 	.word	0x00015180
   d8d1c:	fffdc54f 	.word	0xfffdc54f
   d8d20:	00023ab1 	.word	0x00023ab1
   d8d24:	00023ab0 	.word	0x00023ab0

000d8d28 <localtime>:
   d8d28:	b538      	push	{r3, r4, r5, lr}
   d8d2a:	4b07      	ldr	r3, [pc, #28]	; (d8d48 <localtime+0x20>)
   d8d2c:	681c      	ldr	r4, [r3, #0]
   d8d2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d8d30:	4605      	mov	r5, r0
   d8d32:	b91b      	cbnz	r3, d8d3c <localtime+0x14>
   d8d34:	2024      	movs	r0, #36	; 0x24
   d8d36:	f7fc fc9b 	bl	d5670 <malloc>
   d8d3a:	63e0      	str	r0, [r4, #60]	; 0x3c
   d8d3c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d8d3e:	4628      	mov	r0, r5
   d8d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8d44:	f000 b802 	b.w	d8d4c <localtime_r>
   d8d48:	2003e108 	.word	0x2003e108

000d8d4c <localtime_r>:
   d8d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8d50:	460c      	mov	r4, r1
   d8d52:	4680      	mov	r8, r0
   d8d54:	f001 fcc2 	bl	da6dc <__gettzinfo>
   d8d58:	4621      	mov	r1, r4
   d8d5a:	4607      	mov	r7, r0
   d8d5c:	4640      	mov	r0, r8
   d8d5e:	f7ff ff4b 	bl	d8bf8 <gmtime_r>
   d8d62:	6946      	ldr	r6, [r0, #20]
   d8d64:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d8d68:	07b3      	lsls	r3, r6, #30
   d8d6a:	4604      	mov	r4, r0
   d8d6c:	d105      	bne.n	d8d7a <localtime_r+0x2e>
   d8d6e:	2264      	movs	r2, #100	; 0x64
   d8d70:	fb96 f3f2 	sdiv	r3, r6, r2
   d8d74:	fb02 6313 	mls	r3, r2, r3, r6
   d8d78:	b94b      	cbnz	r3, d8d8e <localtime_r+0x42>
   d8d7a:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d8d7e:	fb96 f3f5 	sdiv	r3, r6, r5
   d8d82:	fb05 6513 	mls	r5, r5, r3, r6
   d8d86:	fab5 f385 	clz	r3, r5
   d8d8a:	095b      	lsrs	r3, r3, #5
   d8d8c:	e000      	b.n	d8d90 <localtime_r+0x44>
   d8d8e:	2301      	movs	r3, #1
   d8d90:	4a5f      	ldr	r2, [pc, #380]	; (d8f10 <localtime_r+0x1c4>)
   d8d92:	2530      	movs	r5, #48	; 0x30
   d8d94:	fb05 2503 	mla	r5, r5, r3, r2
   d8d98:	f001 fabc 	bl	da314 <__tz_lock>
   d8d9c:	f001 fabc 	bl	da318 <_tzset_unlocked>
   d8da0:	4b5c      	ldr	r3, [pc, #368]	; (d8f14 <localtime_r+0x1c8>)
   d8da2:	681b      	ldr	r3, [r3, #0]
   d8da4:	b1f3      	cbz	r3, d8de4 <localtime_r+0x98>
   d8da6:	687b      	ldr	r3, [r7, #4]
   d8da8:	429e      	cmp	r6, r3
   d8daa:	d105      	bne.n	d8db8 <localtime_r+0x6c>
   d8dac:	6839      	ldr	r1, [r7, #0]
   d8dae:	f8d8 3000 	ldr.w	r3, [r8]
   d8db2:	69fa      	ldr	r2, [r7, #28]
   d8db4:	b941      	cbnz	r1, d8dc8 <localtime_r+0x7c>
   d8db6:	e00a      	b.n	d8dce <localtime_r+0x82>
   d8db8:	4630      	mov	r0, r6
   d8dba:	f001 fa03 	bl	da1c4 <__tzcalc_limits>
   d8dbe:	2800      	cmp	r0, #0
   d8dc0:	d1f4      	bne.n	d8dac <localtime_r+0x60>
   d8dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8dc6:	e00d      	b.n	d8de4 <localtime_r+0x98>
   d8dc8:	4293      	cmp	r3, r2
   d8dca:	db08      	blt.n	d8dde <localtime_r+0x92>
   d8dcc:	e001      	b.n	d8dd2 <localtime_r+0x86>
   d8dce:	4293      	cmp	r3, r2
   d8dd0:	da07      	bge.n	d8de2 <localtime_r+0x96>
   d8dd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d8dd4:	4293      	cmp	r3, r2
   d8dd6:	bfac      	ite	ge
   d8dd8:	2300      	movge	r3, #0
   d8dda:	2301      	movlt	r3, #1
   d8ddc:	e002      	b.n	d8de4 <localtime_r+0x98>
   d8dde:	2300      	movs	r3, #0
   d8de0:	e000      	b.n	d8de4 <localtime_r+0x98>
   d8de2:	2301      	movs	r3, #1
   d8de4:	6223      	str	r3, [r4, #32]
   d8de6:	6a23      	ldr	r3, [r4, #32]
   d8de8:	2b01      	cmp	r3, #1
   d8dea:	bf0c      	ite	eq
   d8dec:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d8dee:	6a39      	ldrne	r1, [r7, #32]
   d8df0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8df4:	203c      	movs	r0, #60	; 0x3c
   d8df6:	fb91 f6f3 	sdiv	r6, r1, r3
   d8dfa:	fb03 1316 	mls	r3, r3, r6, r1
   d8dfe:	6861      	ldr	r1, [r4, #4]
   d8e00:	fb93 f2f0 	sdiv	r2, r3, r0
   d8e04:	fb00 3012 	mls	r0, r0, r2, r3
   d8e08:	6823      	ldr	r3, [r4, #0]
   d8e0a:	1a89      	subs	r1, r1, r2
   d8e0c:	68a2      	ldr	r2, [r4, #8]
   d8e0e:	6061      	str	r1, [r4, #4]
   d8e10:	1a1b      	subs	r3, r3, r0
   d8e12:	1b92      	subs	r2, r2, r6
   d8e14:	2b3b      	cmp	r3, #59	; 0x3b
   d8e16:	6023      	str	r3, [r4, #0]
   d8e18:	60a2      	str	r2, [r4, #8]
   d8e1a:	dd03      	ble.n	d8e24 <localtime_r+0xd8>
   d8e1c:	3101      	adds	r1, #1
   d8e1e:	6061      	str	r1, [r4, #4]
   d8e20:	3b3c      	subs	r3, #60	; 0x3c
   d8e22:	e004      	b.n	d8e2e <localtime_r+0xe2>
   d8e24:	2b00      	cmp	r3, #0
   d8e26:	da03      	bge.n	d8e30 <localtime_r+0xe4>
   d8e28:	3901      	subs	r1, #1
   d8e2a:	6061      	str	r1, [r4, #4]
   d8e2c:	333c      	adds	r3, #60	; 0x3c
   d8e2e:	6023      	str	r3, [r4, #0]
   d8e30:	6863      	ldr	r3, [r4, #4]
   d8e32:	2b3b      	cmp	r3, #59	; 0x3b
   d8e34:	dd03      	ble.n	d8e3e <localtime_r+0xf2>
   d8e36:	3201      	adds	r2, #1
   d8e38:	60a2      	str	r2, [r4, #8]
   d8e3a:	3b3c      	subs	r3, #60	; 0x3c
   d8e3c:	e004      	b.n	d8e48 <localtime_r+0xfc>
   d8e3e:	2b00      	cmp	r3, #0
   d8e40:	da03      	bge.n	d8e4a <localtime_r+0xfe>
   d8e42:	3a01      	subs	r2, #1
   d8e44:	60a2      	str	r2, [r4, #8]
   d8e46:	333c      	adds	r3, #60	; 0x3c
   d8e48:	6063      	str	r3, [r4, #4]
   d8e4a:	68a3      	ldr	r3, [r4, #8]
   d8e4c:	2b17      	cmp	r3, #23
   d8e4e:	dd22      	ble.n	d8e96 <localtime_r+0x14a>
   d8e50:	69e2      	ldr	r2, [r4, #28]
   d8e52:	3201      	adds	r2, #1
   d8e54:	61e2      	str	r2, [r4, #28]
   d8e56:	69a2      	ldr	r2, [r4, #24]
   d8e58:	3201      	adds	r2, #1
   d8e5a:	2a06      	cmp	r2, #6
   d8e5c:	bfc8      	it	gt
   d8e5e:	2200      	movgt	r2, #0
   d8e60:	61a2      	str	r2, [r4, #24]
   d8e62:	68e2      	ldr	r2, [r4, #12]
   d8e64:	3b18      	subs	r3, #24
   d8e66:	3201      	adds	r2, #1
   d8e68:	60a3      	str	r3, [r4, #8]
   d8e6a:	6923      	ldr	r3, [r4, #16]
   d8e6c:	60e2      	str	r2, [r4, #12]
   d8e6e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d8e72:	428a      	cmp	r2, r1
   d8e74:	dd46      	ble.n	d8f04 <localtime_r+0x1b8>
   d8e76:	3301      	adds	r3, #1
   d8e78:	2b0c      	cmp	r3, #12
   d8e7a:	bf0c      	ite	eq
   d8e7c:	6963      	ldreq	r3, [r4, #20]
   d8e7e:	6123      	strne	r3, [r4, #16]
   d8e80:	eba2 0201 	sub.w	r2, r2, r1
   d8e84:	60e2      	str	r2, [r4, #12]
   d8e86:	bf01      	itttt	eq
   d8e88:	3301      	addeq	r3, #1
   d8e8a:	2200      	moveq	r2, #0
   d8e8c:	6122      	streq	r2, [r4, #16]
   d8e8e:	6163      	streq	r3, [r4, #20]
   d8e90:	bf08      	it	eq
   d8e92:	61e2      	streq	r2, [r4, #28]
   d8e94:	e036      	b.n	d8f04 <localtime_r+0x1b8>
   d8e96:	2b00      	cmp	r3, #0
   d8e98:	da34      	bge.n	d8f04 <localtime_r+0x1b8>
   d8e9a:	69e2      	ldr	r2, [r4, #28]
   d8e9c:	3a01      	subs	r2, #1
   d8e9e:	61e2      	str	r2, [r4, #28]
   d8ea0:	69a2      	ldr	r2, [r4, #24]
   d8ea2:	3a01      	subs	r2, #1
   d8ea4:	bf48      	it	mi
   d8ea6:	2206      	movmi	r2, #6
   d8ea8:	61a2      	str	r2, [r4, #24]
   d8eaa:	68e2      	ldr	r2, [r4, #12]
   d8eac:	3318      	adds	r3, #24
   d8eae:	3a01      	subs	r2, #1
   d8eb0:	60e2      	str	r2, [r4, #12]
   d8eb2:	60a3      	str	r3, [r4, #8]
   d8eb4:	bb32      	cbnz	r2, d8f04 <localtime_r+0x1b8>
   d8eb6:	6923      	ldr	r3, [r4, #16]
   d8eb8:	3b01      	subs	r3, #1
   d8eba:	d401      	bmi.n	d8ec0 <localtime_r+0x174>
   d8ebc:	6123      	str	r3, [r4, #16]
   d8ebe:	e01d      	b.n	d8efc <localtime_r+0x1b0>
   d8ec0:	230b      	movs	r3, #11
   d8ec2:	6123      	str	r3, [r4, #16]
   d8ec4:	6963      	ldr	r3, [r4, #20]
   d8ec6:	1e5a      	subs	r2, r3, #1
   d8ec8:	f012 0f03 	tst.w	r2, #3
   d8ecc:	6162      	str	r2, [r4, #20]
   d8ece:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d8ed2:	d105      	bne.n	d8ee0 <localtime_r+0x194>
   d8ed4:	2164      	movs	r1, #100	; 0x64
   d8ed6:	fb93 f2f1 	sdiv	r2, r3, r1
   d8eda:	fb01 3212 	mls	r2, r1, r2, r3
   d8ede:	b94a      	cbnz	r2, d8ef4 <localtime_r+0x1a8>
   d8ee0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d8ee4:	fb93 f2f1 	sdiv	r2, r3, r1
   d8ee8:	fb01 3312 	mls	r3, r1, r2, r3
   d8eec:	fab3 f383 	clz	r3, r3
   d8ef0:	095b      	lsrs	r3, r3, #5
   d8ef2:	e000      	b.n	d8ef6 <localtime_r+0x1aa>
   d8ef4:	2301      	movs	r3, #1
   d8ef6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d8efa:	61e3      	str	r3, [r4, #28]
   d8efc:	6923      	ldr	r3, [r4, #16]
   d8efe:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d8f02:	60e3      	str	r3, [r4, #12]
   d8f04:	f001 fa07 	bl	da316 <__tz_unlock>
   d8f08:	4620      	mov	r0, r4
   d8f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8f0e:	bf00      	nop
   d8f10:	000dafb0 	.word	0x000dafb0
   d8f14:	2003e7e4 	.word	0x2003e7e4

000d8f18 <memcpy>:
   d8f18:	b510      	push	{r4, lr}
   d8f1a:	1e43      	subs	r3, r0, #1
   d8f1c:	440a      	add	r2, r1
   d8f1e:	4291      	cmp	r1, r2
   d8f20:	d004      	beq.n	d8f2c <memcpy+0x14>
   d8f22:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8f26:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8f2a:	e7f8      	b.n	d8f1e <memcpy+0x6>
   d8f2c:	bd10      	pop	{r4, pc}

000d8f2e <memmove>:
   d8f2e:	4288      	cmp	r0, r1
   d8f30:	b510      	push	{r4, lr}
   d8f32:	eb01 0302 	add.w	r3, r1, r2
   d8f36:	d801      	bhi.n	d8f3c <memmove+0xe>
   d8f38:	1e42      	subs	r2, r0, #1
   d8f3a:	e00b      	b.n	d8f54 <memmove+0x26>
   d8f3c:	4298      	cmp	r0, r3
   d8f3e:	d2fb      	bcs.n	d8f38 <memmove+0xa>
   d8f40:	1881      	adds	r1, r0, r2
   d8f42:	1ad2      	subs	r2, r2, r3
   d8f44:	42d3      	cmn	r3, r2
   d8f46:	d004      	beq.n	d8f52 <memmove+0x24>
   d8f48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8f4c:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d8f50:	e7f8      	b.n	d8f44 <memmove+0x16>
   d8f52:	bd10      	pop	{r4, pc}
   d8f54:	4299      	cmp	r1, r3
   d8f56:	d004      	beq.n	d8f62 <memmove+0x34>
   d8f58:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8f5c:	f802 4f01 	strb.w	r4, [r2, #1]!
   d8f60:	e7f8      	b.n	d8f54 <memmove+0x26>
   d8f62:	bd10      	pop	{r4, pc}

000d8f64 <memset>:
   d8f64:	4402      	add	r2, r0
   d8f66:	4603      	mov	r3, r0
   d8f68:	4293      	cmp	r3, r2
   d8f6a:	d002      	beq.n	d8f72 <memset+0xe>
   d8f6c:	f803 1b01 	strb.w	r1, [r3], #1
   d8f70:	e7fa      	b.n	d8f68 <memset+0x4>
   d8f72:	4770      	bx	lr

000d8f74 <validate_structure>:
   d8f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8f76:	6801      	ldr	r1, [r0, #0]
   d8f78:	293b      	cmp	r1, #59	; 0x3b
   d8f7a:	4604      	mov	r4, r0
   d8f7c:	d911      	bls.n	d8fa2 <validate_structure+0x2e>
   d8f7e:	223c      	movs	r2, #60	; 0x3c
   d8f80:	4668      	mov	r0, sp
   d8f82:	f001 fb53 	bl	da62c <div>
   d8f86:	9a01      	ldr	r2, [sp, #4]
   d8f88:	6863      	ldr	r3, [r4, #4]
   d8f8a:	9900      	ldr	r1, [sp, #0]
   d8f8c:	2a00      	cmp	r2, #0
   d8f8e:	440b      	add	r3, r1
   d8f90:	6063      	str	r3, [r4, #4]
   d8f92:	bfbb      	ittet	lt
   d8f94:	323c      	addlt	r2, #60	; 0x3c
   d8f96:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d8f9a:	6022      	strge	r2, [r4, #0]
   d8f9c:	6022      	strlt	r2, [r4, #0]
   d8f9e:	bfb8      	it	lt
   d8fa0:	6063      	strlt	r3, [r4, #4]
   d8fa2:	6861      	ldr	r1, [r4, #4]
   d8fa4:	293b      	cmp	r1, #59	; 0x3b
   d8fa6:	d911      	bls.n	d8fcc <validate_structure+0x58>
   d8fa8:	223c      	movs	r2, #60	; 0x3c
   d8faa:	4668      	mov	r0, sp
   d8fac:	f001 fb3e 	bl	da62c <div>
   d8fb0:	9a01      	ldr	r2, [sp, #4]
   d8fb2:	68a1      	ldr	r1, [r4, #8]
   d8fb4:	9b00      	ldr	r3, [sp, #0]
   d8fb6:	2a00      	cmp	r2, #0
   d8fb8:	440b      	add	r3, r1
   d8fba:	60a3      	str	r3, [r4, #8]
   d8fbc:	bfbb      	ittet	lt
   d8fbe:	323c      	addlt	r2, #60	; 0x3c
   d8fc0:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d8fc4:	6062      	strge	r2, [r4, #4]
   d8fc6:	6062      	strlt	r2, [r4, #4]
   d8fc8:	bfb8      	it	lt
   d8fca:	60a3      	strlt	r3, [r4, #8]
   d8fcc:	68a1      	ldr	r1, [r4, #8]
   d8fce:	2917      	cmp	r1, #23
   d8fd0:	d911      	bls.n	d8ff6 <validate_structure+0x82>
   d8fd2:	2218      	movs	r2, #24
   d8fd4:	4668      	mov	r0, sp
   d8fd6:	f001 fb29 	bl	da62c <div>
   d8fda:	9a01      	ldr	r2, [sp, #4]
   d8fdc:	68e1      	ldr	r1, [r4, #12]
   d8fde:	9b00      	ldr	r3, [sp, #0]
   d8fe0:	2a00      	cmp	r2, #0
   d8fe2:	440b      	add	r3, r1
   d8fe4:	60e3      	str	r3, [r4, #12]
   d8fe6:	bfbb      	ittet	lt
   d8fe8:	3218      	addlt	r2, #24
   d8fea:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d8fee:	60a2      	strge	r2, [r4, #8]
   d8ff0:	60a2      	strlt	r2, [r4, #8]
   d8ff2:	bfb8      	it	lt
   d8ff4:	60e3      	strlt	r3, [r4, #12]
   d8ff6:	6921      	ldr	r1, [r4, #16]
   d8ff8:	290b      	cmp	r1, #11
   d8ffa:	d911      	bls.n	d9020 <validate_structure+0xac>
   d8ffc:	220c      	movs	r2, #12
   d8ffe:	4668      	mov	r0, sp
   d9000:	f001 fb14 	bl	da62c <div>
   d9004:	9a01      	ldr	r2, [sp, #4]
   d9006:	6961      	ldr	r1, [r4, #20]
   d9008:	9b00      	ldr	r3, [sp, #0]
   d900a:	2a00      	cmp	r2, #0
   d900c:	440b      	add	r3, r1
   d900e:	6163      	str	r3, [r4, #20]
   d9010:	bfbb      	ittet	lt
   d9012:	320c      	addlt	r2, #12
   d9014:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d9018:	6122      	strge	r2, [r4, #16]
   d901a:	6122      	strlt	r2, [r4, #16]
   d901c:	bfb8      	it	lt
   d901e:	6163      	strlt	r3, [r4, #20]
   d9020:	6963      	ldr	r3, [r4, #20]
   d9022:	0799      	lsls	r1, r3, #30
   d9024:	d112      	bne.n	d904c <validate_structure+0xd8>
   d9026:	2164      	movs	r1, #100	; 0x64
   d9028:	fb93 f2f1 	sdiv	r2, r3, r1
   d902c:	fb01 3212 	mls	r2, r1, r2, r3
   d9030:	b972      	cbnz	r2, d9050 <validate_structure+0xdc>
   d9032:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d9036:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d903a:	fb93 f2f1 	sdiv	r2, r3, r1
   d903e:	fb01 3312 	mls	r3, r1, r2, r3
   d9042:	2b00      	cmp	r3, #0
   d9044:	bf14      	ite	ne
   d9046:	231c      	movne	r3, #28
   d9048:	231d      	moveq	r3, #29
   d904a:	e002      	b.n	d9052 <validate_structure+0xde>
   d904c:	231c      	movs	r3, #28
   d904e:	e000      	b.n	d9052 <validate_structure+0xde>
   d9050:	231d      	movs	r3, #29
   d9052:	68e2      	ldr	r2, [r4, #12]
   d9054:	2a00      	cmp	r2, #0
   d9056:	dd06      	ble.n	d9066 <validate_structure+0xf2>
   d9058:	4f33      	ldr	r7, [pc, #204]	; (d9128 <validate_structure+0x1b4>)
   d905a:	f04f 0e00 	mov.w	lr, #0
   d905e:	2564      	movs	r5, #100	; 0x64
   d9060:	f44f 76c8 	mov.w	r6, #400	; 0x190
   d9064:	e039      	b.n	d90da <validate_structure+0x166>
   d9066:	4f30      	ldr	r7, [pc, #192]	; (d9128 <validate_structure+0x1b4>)
   d9068:	260b      	movs	r6, #11
   d906a:	2064      	movs	r0, #100	; 0x64
   d906c:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d9070:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   d9074:	f1be 0f00 	cmp.w	lr, #0
   d9078:	dc53      	bgt.n	d9122 <validate_structure+0x1ae>
   d907a:	6921      	ldr	r1, [r4, #16]
   d907c:	3901      	subs	r1, #1
   d907e:	6121      	str	r1, [r4, #16]
   d9080:	3101      	adds	r1, #1
   d9082:	d118      	bne.n	d90b6 <validate_structure+0x142>
   d9084:	6963      	ldr	r3, [r4, #20]
   d9086:	6126      	str	r6, [r4, #16]
   d9088:	1e59      	subs	r1, r3, #1
   d908a:	078a      	lsls	r2, r1, #30
   d908c:	6161      	str	r1, [r4, #20]
   d908e:	d10f      	bne.n	d90b0 <validate_structure+0x13c>
   d9090:	fb91 f2f0 	sdiv	r2, r1, r0
   d9094:	fb00 1112 	mls	r1, r0, r2, r1
   d9098:	b961      	cbnz	r1, d90b4 <validate_structure+0x140>
   d909a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d909e:	fb93 f2f5 	sdiv	r2, r3, r5
   d90a2:	fb05 3312 	mls	r3, r5, r2, r3
   d90a6:	2b00      	cmp	r3, #0
   d90a8:	bf14      	ite	ne
   d90aa:	231c      	movne	r3, #28
   d90ac:	231d      	moveq	r3, #29
   d90ae:	e002      	b.n	d90b6 <validate_structure+0x142>
   d90b0:	231c      	movs	r3, #28
   d90b2:	e000      	b.n	d90b6 <validate_structure+0x142>
   d90b4:	231d      	movs	r3, #29
   d90b6:	6922      	ldr	r2, [r4, #16]
   d90b8:	2a01      	cmp	r2, #1
   d90ba:	bf14      	ite	ne
   d90bc:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   d90c0:	461a      	moveq	r2, r3
   d90c2:	4472      	add	r2, lr
   d90c4:	60e2      	str	r2, [r4, #12]
   d90c6:	e7d3      	b.n	d9070 <validate_structure+0xfc>
   d90c8:	428b      	cmp	r3, r1
   d90ca:	da2a      	bge.n	d9122 <validate_structure+0x1ae>
   d90cc:	4618      	mov	r0, r3
   d90ce:	3201      	adds	r2, #1
   d90d0:	1a09      	subs	r1, r1, r0
   d90d2:	2a0c      	cmp	r2, #12
   d90d4:	60e1      	str	r1, [r4, #12]
   d90d6:	6122      	str	r2, [r4, #16]
   d90d8:	d008      	beq.n	d90ec <validate_structure+0x178>
   d90da:	6922      	ldr	r2, [r4, #16]
   d90dc:	68e1      	ldr	r1, [r4, #12]
   d90de:	2a01      	cmp	r2, #1
   d90e0:	d0f2      	beq.n	d90c8 <validate_structure+0x154>
   d90e2:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   d90e6:	4281      	cmp	r1, r0
   d90e8:	dcf1      	bgt.n	d90ce <validate_structure+0x15a>
   d90ea:	e01a      	b.n	d9122 <validate_structure+0x1ae>
   d90ec:	6963      	ldr	r3, [r4, #20]
   d90ee:	f8c4 e010 	str.w	lr, [r4, #16]
   d90f2:	1c5a      	adds	r2, r3, #1
   d90f4:	0791      	lsls	r1, r2, #30
   d90f6:	6162      	str	r2, [r4, #20]
   d90f8:	d10f      	bne.n	d911a <validate_structure+0x1a6>
   d90fa:	fb92 f1f5 	sdiv	r1, r2, r5
   d90fe:	fb05 2211 	mls	r2, r5, r1, r2
   d9102:	b962      	cbnz	r2, d911e <validate_structure+0x1aa>
   d9104:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   d9108:	fb93 f2f6 	sdiv	r2, r3, r6
   d910c:	fb06 3312 	mls	r3, r6, r2, r3
   d9110:	2b00      	cmp	r3, #0
   d9112:	bf14      	ite	ne
   d9114:	231c      	movne	r3, #28
   d9116:	231d      	moveq	r3, #29
   d9118:	e7df      	b.n	d90da <validate_structure+0x166>
   d911a:	231c      	movs	r3, #28
   d911c:	e7dd      	b.n	d90da <validate_structure+0x166>
   d911e:	231d      	movs	r3, #29
   d9120:	e7db      	b.n	d90da <validate_structure+0x166>
   d9122:	b003      	add	sp, #12
   d9124:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9126:	bf00      	nop
   d9128:	000daf80 	.word	0x000daf80

000d912c <mktime>:
   d912c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9130:	4605      	mov	r5, r0
   d9132:	f001 fad3 	bl	da6dc <__gettzinfo>
   d9136:	4681      	mov	r9, r0
   d9138:	4628      	mov	r0, r5
   d913a:	f7ff ff1b 	bl	d8f74 <validate_structure>
   d913e:	e895 000c 	ldmia.w	r5, {r2, r3}
   d9142:	213c      	movs	r1, #60	; 0x3c
   d9144:	fb01 2303 	mla	r3, r1, r3, r2
   d9148:	68aa      	ldr	r2, [r5, #8]
   d914a:	68ec      	ldr	r4, [r5, #12]
   d914c:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   d9150:	fb08 3102 	mla	r1, r8, r2, r3
   d9154:	692b      	ldr	r3, [r5, #16]
   d9156:	4aab      	ldr	r2, [pc, #684]	; (d9404 <mktime+0x2d8>)
   d9158:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   d915c:	3c01      	subs	r4, #1
   d915e:	2b01      	cmp	r3, #1
   d9160:	4414      	add	r4, r2
   d9162:	696b      	ldr	r3, [r5, #20]
   d9164:	dd11      	ble.n	d918a <mktime+0x5e>
   d9166:	079e      	lsls	r6, r3, #30
   d9168:	d10f      	bne.n	d918a <mktime+0x5e>
   d916a:	2064      	movs	r0, #100	; 0x64
   d916c:	fb93 f2f0 	sdiv	r2, r3, r0
   d9170:	fb00 3212 	mls	r2, r0, r2, r3
   d9174:	b942      	cbnz	r2, d9188 <mktime+0x5c>
   d9176:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   d917a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d917e:	fb96 f0f2 	sdiv	r0, r6, r2
   d9182:	fb02 6210 	mls	r2, r2, r0, r6
   d9186:	b902      	cbnz	r2, d918a <mktime+0x5e>
   d9188:	3401      	adds	r4, #1
   d918a:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   d918e:	3210      	adds	r2, #16
   d9190:	f644 6020 	movw	r0, #20000	; 0x4e20
   d9194:	4282      	cmp	r2, r0
   d9196:	61ec      	str	r4, [r5, #28]
   d9198:	461f      	mov	r7, r3
   d919a:	f200 812e 	bhi.w	d93fa <mktime+0x2ce>
   d919e:	2b46      	cmp	r3, #70	; 0x46
   d91a0:	dd22      	ble.n	d91e8 <mktime+0xbc>
   d91a2:	2246      	movs	r2, #70	; 0x46
   d91a4:	f240 1c6d 	movw	ip, #365	; 0x16d
   d91a8:	2664      	movs	r6, #100	; 0x64
   d91aa:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   d91ae:	0790      	lsls	r0, r2, #30
   d91b0:	d110      	bne.n	d91d4 <mktime+0xa8>
   d91b2:	fb92 f0f6 	sdiv	r0, r2, r6
   d91b6:	fb06 2010 	mls	r0, r6, r0, r2
   d91ba:	b970      	cbnz	r0, d91da <mktime+0xae>
   d91bc:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   d91c0:	fb98 f0fe 	sdiv	r0, r8, lr
   d91c4:	fb0e 8010 	mls	r0, lr, r0, r8
   d91c8:	2800      	cmp	r0, #0
   d91ca:	bf14      	ite	ne
   d91cc:	4660      	movne	r0, ip
   d91ce:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   d91d2:	e004      	b.n	d91de <mktime+0xb2>
   d91d4:	f240 106d 	movw	r0, #365	; 0x16d
   d91d8:	e001      	b.n	d91de <mktime+0xb2>
   d91da:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   d91de:	3201      	adds	r2, #1
   d91e0:	4293      	cmp	r3, r2
   d91e2:	4404      	add	r4, r0
   d91e4:	d1e3      	bne.n	d91ae <mktime+0x82>
   d91e6:	e044      	b.n	d9272 <mktime+0x146>
   d91e8:	d043      	beq.n	d9272 <mktime+0x146>
   d91ea:	2245      	movs	r2, #69	; 0x45
   d91ec:	f240 1e6d 	movw	lr, #365	; 0x16d
   d91f0:	2664      	movs	r6, #100	; 0x64
   d91f2:	f44f 77c8 	mov.w	r7, #400	; 0x190
   d91f6:	429a      	cmp	r2, r3
   d91f8:	dd1a      	ble.n	d9230 <mktime+0x104>
   d91fa:	0790      	lsls	r0, r2, #30
   d91fc:	d110      	bne.n	d9220 <mktime+0xf4>
   d91fe:	fb92 f0f6 	sdiv	r0, r2, r6
   d9202:	fb06 2010 	mls	r0, r6, r0, r2
   d9206:	b970      	cbnz	r0, d9226 <mktime+0xfa>
   d9208:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   d920c:	fb9c f0f7 	sdiv	r0, ip, r7
   d9210:	fb07 c010 	mls	r0, r7, r0, ip
   d9214:	2800      	cmp	r0, #0
   d9216:	bf14      	ite	ne
   d9218:	4670      	movne	r0, lr
   d921a:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   d921e:	e004      	b.n	d922a <mktime+0xfe>
   d9220:	f240 106d 	movw	r0, #365	; 0x16d
   d9224:	e001      	b.n	d922a <mktime+0xfe>
   d9226:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   d922a:	1a24      	subs	r4, r4, r0
   d922c:	3a01      	subs	r2, #1
   d922e:	e7e2      	b.n	d91f6 <mktime+0xca>
   d9230:	2b45      	cmp	r3, #69	; 0x45
   d9232:	bfa8      	it	ge
   d9234:	2345      	movge	r3, #69	; 0x45
   d9236:	079e      	lsls	r6, r3, #30
   d9238:	461f      	mov	r7, r3
   d923a:	d114      	bne.n	d9266 <mktime+0x13a>
   d923c:	2264      	movs	r2, #100	; 0x64
   d923e:	fb93 f3f2 	sdiv	r3, r3, r2
   d9242:	fb02 7313 	mls	r3, r2, r3, r7
   d9246:	b98b      	cbnz	r3, d926c <mktime+0x140>
   d9248:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   d924c:	f44f 73c8 	mov.w	r3, #400	; 0x190
   d9250:	fb90 f2f3 	sdiv	r2, r0, r3
   d9254:	fb03 0312 	mls	r3, r3, r2, r0
   d9258:	2b00      	cmp	r3, #0
   d925a:	f240 136d 	movw	r3, #365	; 0x16d
   d925e:	bf08      	it	eq
   d9260:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   d9264:	e004      	b.n	d9270 <mktime+0x144>
   d9266:	f240 136d 	movw	r3, #365	; 0x16d
   d926a:	e001      	b.n	d9270 <mktime+0x144>
   d926c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   d9270:	1ae4      	subs	r4, r4, r3
   d9272:	4865      	ldr	r0, [pc, #404]	; (d9408 <mktime+0x2dc>)
   d9274:	fb00 1804 	mla	r8, r0, r4, r1
   d9278:	f001 f84c 	bl	da314 <__tz_lock>
   d927c:	f001 f84c 	bl	da318 <_tzset_unlocked>
   d9280:	4b62      	ldr	r3, [pc, #392]	; (d940c <mktime+0x2e0>)
   d9282:	681e      	ldr	r6, [r3, #0]
   d9284:	2e00      	cmp	r6, #0
   d9286:	f000 80a4 	beq.w	d93d2 <mktime+0x2a6>
   d928a:	6a2b      	ldr	r3, [r5, #32]
   d928c:	6968      	ldr	r0, [r5, #20]
   d928e:	2b01      	cmp	r3, #1
   d9290:	bfa8      	it	ge
   d9292:	2301      	movge	r3, #1
   d9294:	469a      	mov	sl, r3
   d9296:	f8d9 3004 	ldr.w	r3, [r9, #4]
   d929a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d929e:	4298      	cmp	r0, r3
   d92a0:	d10d      	bne.n	d92be <mktime+0x192>
   d92a2:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   d92a6:	f8d9 3020 	ldr.w	r3, [r9, #32]
   d92aa:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   d92ae:	f8d9 101c 	ldr.w	r1, [r9, #28]
   d92b2:	1ad6      	subs	r6, r2, r3
   d92b4:	45b0      	cmp	r8, r6
   d92b6:	eba1 0100 	sub.w	r1, r1, r0
   d92ba:	da05      	bge.n	d92c8 <mktime+0x19c>
   d92bc:	e007      	b.n	d92ce <mktime+0x1a2>
   d92be:	f000 ff81 	bl	da1c4 <__tzcalc_limits>
   d92c2:	2800      	cmp	r0, #0
   d92c4:	d1ed      	bne.n	d92a2 <mktime+0x176>
   d92c6:	e076      	b.n	d93b6 <mktime+0x28a>
   d92c8:	1a12      	subs	r2, r2, r0
   d92ca:	4590      	cmp	r8, r2
   d92cc:	db73      	blt.n	d93b6 <mktime+0x28a>
   d92ce:	f8d9 2000 	ldr.w	r2, [r9]
   d92d2:	b112      	cbz	r2, d92da <mktime+0x1ae>
   d92d4:	4588      	cmp	r8, r1
   d92d6:	db77      	blt.n	d93c8 <mktime+0x29c>
   d92d8:	e001      	b.n	d92de <mktime+0x1b2>
   d92da:	4588      	cmp	r8, r1
   d92dc:	da07      	bge.n	d92ee <mktime+0x1c2>
   d92de:	45b0      	cmp	r8, r6
   d92e0:	bfac      	ite	ge
   d92e2:	2600      	movge	r6, #0
   d92e4:	2601      	movlt	r6, #1
   d92e6:	f1ba 0f00 	cmp.w	sl, #0
   d92ea:	da04      	bge.n	d92f6 <mktime+0x1ca>
   d92ec:	e064      	b.n	d93b8 <mktime+0x28c>
   d92ee:	f1ba 0f00 	cmp.w	sl, #0
   d92f2:	db63      	blt.n	d93bc <mktime+0x290>
   d92f4:	2601      	movs	r6, #1
   d92f6:	ea8a 0a06 	eor.w	sl, sl, r6
   d92fa:	f1ba 0f01 	cmp.w	sl, #1
   d92fe:	d15b      	bne.n	d93b8 <mktime+0x28c>
   d9300:	1a1b      	subs	r3, r3, r0
   d9302:	b906      	cbnz	r6, d9306 <mktime+0x1da>
   d9304:	425b      	negs	r3, r3
   d9306:	682a      	ldr	r2, [r5, #0]
   d9308:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   d930c:	441a      	add	r2, r3
   d930e:	602a      	str	r2, [r5, #0]
   d9310:	4628      	mov	r0, r5
   d9312:	4498      	add	r8, r3
   d9314:	f7ff fe2e 	bl	d8f74 <validate_structure>
   d9318:	68eb      	ldr	r3, [r5, #12]
   d931a:	ebb3 030a 	subs.w	r3, r3, sl
   d931e:	d04b      	beq.n	d93b8 <mktime+0x28c>
   d9320:	2b01      	cmp	r3, #1
   d9322:	dc03      	bgt.n	d932c <mktime+0x200>
   d9324:	1c98      	adds	r0, r3, #2
   d9326:	bfd8      	it	le
   d9328:	2301      	movle	r3, #1
   d932a:	e001      	b.n	d9330 <mktime+0x204>
   d932c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9330:	69ea      	ldr	r2, [r5, #28]
   d9332:	441c      	add	r4, r3
   d9334:	189b      	adds	r3, r3, r2
   d9336:	d51d      	bpl.n	d9374 <mktime+0x248>
   d9338:	1e7b      	subs	r3, r7, #1
   d933a:	0799      	lsls	r1, r3, #30
   d933c:	d114      	bne.n	d9368 <mktime+0x23c>
   d933e:	2164      	movs	r1, #100	; 0x64
   d9340:	fb93 f2f1 	sdiv	r2, r3, r1
   d9344:	fb01 3312 	mls	r3, r1, r2, r3
   d9348:	b98b      	cbnz	r3, d936e <mktime+0x242>
   d934a:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   d934e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9352:	fb97 f3f2 	sdiv	r3, r7, r2
   d9356:	fb02 7713 	mls	r7, r2, r3, r7
   d935a:	2f00      	cmp	r7, #0
   d935c:	f240 136d 	movw	r3, #365	; 0x16d
   d9360:	bf18      	it	ne
   d9362:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   d9366:	e024      	b.n	d93b2 <mktime+0x286>
   d9368:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   d936c:	e021      	b.n	d93b2 <mktime+0x286>
   d936e:	f240 136d 	movw	r3, #365	; 0x16d
   d9372:	e01e      	b.n	d93b2 <mktime+0x286>
   d9374:	07ba      	lsls	r2, r7, #30
   d9376:	d114      	bne.n	d93a2 <mktime+0x276>
   d9378:	2164      	movs	r1, #100	; 0x64
   d937a:	fb97 f2f1 	sdiv	r2, r7, r1
   d937e:	fb01 7212 	mls	r2, r1, r2, r7
   d9382:	b98a      	cbnz	r2, d93a8 <mktime+0x27c>
   d9384:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   d9388:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d938c:	fb97 f2f1 	sdiv	r2, r7, r1
   d9390:	fb01 7712 	mls	r7, r1, r2, r7
   d9394:	2f00      	cmp	r7, #0
   d9396:	f240 126d 	movw	r2, #365	; 0x16d
   d939a:	bf08      	it	eq
   d939c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   d93a0:	e004      	b.n	d93ac <mktime+0x280>
   d93a2:	f240 126d 	movw	r2, #365	; 0x16d
   d93a6:	e001      	b.n	d93ac <mktime+0x280>
   d93a8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   d93ac:	429a      	cmp	r2, r3
   d93ae:	bfd8      	it	le
   d93b0:	1a9b      	suble	r3, r3, r2
   d93b2:	61eb      	str	r3, [r5, #28]
   d93b4:	e000      	b.n	d93b8 <mktime+0x28c>
   d93b6:	4656      	mov	r6, sl
   d93b8:	2e01      	cmp	r6, #1
   d93ba:	d10a      	bne.n	d93d2 <mktime+0x2a6>
   d93bc:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   d93c0:	2601      	movs	r6, #1
   d93c2:	eb08 0700 	add.w	r7, r8, r0
   d93c6:	e008      	b.n	d93da <mktime+0x2ae>
   d93c8:	f1ba 0f00 	cmp.w	sl, #0
   d93cc:	f04f 0600 	mov.w	r6, #0
   d93d0:	da91      	bge.n	d92f6 <mktime+0x1ca>
   d93d2:	f8d9 0020 	ldr.w	r0, [r9, #32]
   d93d6:	eb08 0700 	add.w	r7, r8, r0
   d93da:	f000 ff9c 	bl	da316 <__tz_unlock>
   d93de:	3404      	adds	r4, #4
   d93e0:	2307      	movs	r3, #7
   d93e2:	fb94 f3f3 	sdiv	r3, r4, r3
   d93e6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d93ea:	1ae4      	subs	r4, r4, r3
   d93ec:	bf48      	it	mi
   d93ee:	3407      	addmi	r4, #7
   d93f0:	622e      	str	r6, [r5, #32]
   d93f2:	61ac      	str	r4, [r5, #24]
   d93f4:	4638      	mov	r0, r7
   d93f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d93fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d93fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9402:	bf00      	nop
   d9404:	000daf50 	.word	0x000daf50
   d9408:	00015180 	.word	0x00015180
   d940c:	2003e7e4 	.word	0x2003e7e4

000d9410 <srand>:
   d9410:	b538      	push	{r3, r4, r5, lr}
   d9412:	4b12      	ldr	r3, [pc, #72]	; (d945c <srand+0x4c>)
   d9414:	681c      	ldr	r4, [r3, #0]
   d9416:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9418:	4605      	mov	r5, r0
   d941a:	b9d3      	cbnz	r3, d9452 <srand+0x42>
   d941c:	2018      	movs	r0, #24
   d941e:	f7fc f927 	bl	d5670 <malloc>
   d9422:	f243 330e 	movw	r3, #13070	; 0x330e
   d9426:	63a0      	str	r0, [r4, #56]	; 0x38
   d9428:	8003      	strh	r3, [r0, #0]
   d942a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d942e:	8043      	strh	r3, [r0, #2]
   d9430:	f241 2334 	movw	r3, #4660	; 0x1234
   d9434:	8083      	strh	r3, [r0, #4]
   d9436:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d943a:	80c3      	strh	r3, [r0, #6]
   d943c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9440:	8103      	strh	r3, [r0, #8]
   d9442:	2305      	movs	r3, #5
   d9444:	8143      	strh	r3, [r0, #10]
   d9446:	230b      	movs	r3, #11
   d9448:	8183      	strh	r3, [r0, #12]
   d944a:	2201      	movs	r2, #1
   d944c:	2300      	movs	r3, #0
   d944e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9452:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9454:	2200      	movs	r2, #0
   d9456:	611d      	str	r5, [r3, #16]
   d9458:	615a      	str	r2, [r3, #20]
   d945a:	bd38      	pop	{r3, r4, r5, pc}
   d945c:	2003e108 	.word	0x2003e108

000d9460 <strchr>:
   d9460:	b2c9      	uxtb	r1, r1
   d9462:	4603      	mov	r3, r0
   d9464:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9468:	b11a      	cbz	r2, d9472 <strchr+0x12>
   d946a:	4291      	cmp	r1, r2
   d946c:	d1f9      	bne.n	d9462 <strchr+0x2>
   d946e:	4618      	mov	r0, r3
   d9470:	4770      	bx	lr
   d9472:	2900      	cmp	r1, #0
   d9474:	bf0c      	ite	eq
   d9476:	4618      	moveq	r0, r3
   d9478:	2000      	movne	r0, #0
   d947a:	4770      	bx	lr

000d947c <strchrnul>:
   d947c:	b510      	push	{r4, lr}
   d947e:	4604      	mov	r4, r0
   d9480:	f7ff ffee 	bl	d9460 <strchr>
   d9484:	b918      	cbnz	r0, d948e <strchrnul+0x12>
   d9486:	4620      	mov	r0, r4
   d9488:	f000 fd44 	bl	d9f14 <strlen>
   d948c:	4420      	add	r0, r4
   d948e:	bd10      	pop	{r4, pc}

000d9490 <strcmp>:
   d9490:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9494:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9498:	2a01      	cmp	r2, #1
   d949a:	bf28      	it	cs
   d949c:	429a      	cmpcs	r2, r3
   d949e:	d0f7      	beq.n	d9490 <strcmp>
   d94a0:	1ad0      	subs	r0, r2, r3
   d94a2:	4770      	bx	lr

000d94a4 <strcpy>:
   d94a4:	4603      	mov	r3, r0
   d94a6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d94aa:	f803 2b01 	strb.w	r2, [r3], #1
   d94ae:	2a00      	cmp	r2, #0
   d94b0:	d1f9      	bne.n	d94a6 <strcpy+0x2>
   d94b2:	4770      	bx	lr

000d94b4 <strdup>:
   d94b4:	4b02      	ldr	r3, [pc, #8]	; (d94c0 <strdup+0xc>)
   d94b6:	4601      	mov	r1, r0
   d94b8:	6818      	ldr	r0, [r3, #0]
   d94ba:	f000 b803 	b.w	d94c4 <_strdup_r>
   d94be:	bf00      	nop
   d94c0:	2003e108 	.word	0x2003e108

000d94c4 <_strdup_r>:
   d94c4:	b570      	push	{r4, r5, r6, lr}
   d94c6:	4606      	mov	r6, r0
   d94c8:	4608      	mov	r0, r1
   d94ca:	460c      	mov	r4, r1
   d94cc:	f000 fd22 	bl	d9f14 <strlen>
   d94d0:	1c45      	adds	r5, r0, #1
   d94d2:	4629      	mov	r1, r5
   d94d4:	4630      	mov	r0, r6
   d94d6:	f7fc f913 	bl	d5700 <_malloc_r>
   d94da:	4606      	mov	r6, r0
   d94dc:	b118      	cbz	r0, d94e6 <_strdup_r+0x22>
   d94de:	462a      	mov	r2, r5
   d94e0:	4621      	mov	r1, r4
   d94e2:	f7ff fd19 	bl	d8f18 <memcpy>
   d94e6:	4630      	mov	r0, r6
   d94e8:	bd70      	pop	{r4, r5, r6, pc}

000d94ea <iso_year_adjust>:
   d94ea:	6941      	ldr	r1, [r0, #20]
   d94ec:	078b      	lsls	r3, r1, #30
   d94ee:	b510      	push	{r4, lr}
   d94f0:	d10c      	bne.n	d950c <iso_year_adjust+0x22>
   d94f2:	2900      	cmp	r1, #0
   d94f4:	f240 736c 	movw	r3, #1900	; 0x76c
   d94f8:	bfa8      	it	ge
   d94fa:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   d94fe:	440b      	add	r3, r1
   d9500:	2464      	movs	r4, #100	; 0x64
   d9502:	fb93 f2f4 	sdiv	r2, r3, r4
   d9506:	fb04 3312 	mls	r3, r4, r2, r3
   d950a:	b983      	cbnz	r3, d952e <iso_year_adjust+0x44>
   d950c:	2900      	cmp	r1, #0
   d950e:	f240 736c 	movw	r3, #1900	; 0x76c
   d9512:	bfa8      	it	ge
   d9514:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   d9518:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d951c:	440b      	add	r3, r1
   d951e:	fb93 f1f2 	sdiv	r1, r3, r2
   d9522:	fb02 3311 	mls	r3, r2, r1, r3
   d9526:	fab3 f283 	clz	r2, r3
   d952a:	0952      	lsrs	r2, r2, #5
   d952c:	e000      	b.n	d9530 <iso_year_adjust+0x46>
   d952e:	2201      	movs	r2, #1
   d9530:	6983      	ldr	r3, [r0, #24]
   d9532:	69c1      	ldr	r1, [r0, #28]
   d9534:	005b      	lsls	r3, r3, #1
   d9536:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   d953a:	4413      	add	r3, r2
   d953c:	2b21      	cmp	r3, #33	; 0x21
   d953e:	dc0e      	bgt.n	d955e <iso_year_adjust+0x74>
   d9540:	2b20      	cmp	r3, #32
   d9542:	da2f      	bge.n	d95a4 <iso_year_adjust+0xba>
   d9544:	2b0d      	cmp	r3, #13
   d9546:	dc02      	bgt.n	d954e <iso_year_adjust+0x64>
   d9548:	2b0a      	cmp	r3, #10
   d954a:	db05      	blt.n	d9558 <iso_year_adjust+0x6e>
   d954c:	e02a      	b.n	d95a4 <iso_year_adjust+0xba>
   d954e:	2b10      	cmp	r3, #16
   d9550:	db26      	blt.n	d95a0 <iso_year_adjust+0xb6>
   d9552:	2b11      	cmp	r3, #17
   d9554:	dd26      	ble.n	d95a4 <iso_year_adjust+0xba>
   d9556:	3b1c      	subs	r3, #28
   d9558:	2b01      	cmp	r3, #1
   d955a:	d923      	bls.n	d95a4 <iso_year_adjust+0xba>
   d955c:	e020      	b.n	d95a0 <iso_year_adjust+0xb6>
   d955e:	f241 62c6 	movw	r2, #5830	; 0x16c6
   d9562:	4293      	cmp	r3, r2
   d9564:	dc0e      	bgt.n	d9584 <iso_year_adjust+0x9a>
   d9566:	f241 62c2 	movw	r2, #5826	; 0x16c2
   d956a:	4293      	cmp	r3, r2
   d956c:	da16      	bge.n	d959c <iso_year_adjust+0xb2>
   d956e:	f241 62a2 	movw	r2, #5794	; 0x16a2
   d9572:	4293      	cmp	r3, r2
   d9574:	d012      	beq.n	d959c <iso_year_adjust+0xb2>
   d9576:	db13      	blt.n	d95a0 <iso_year_adjust+0xb6>
   d9578:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   d957c:	3b12      	subs	r3, #18
   d957e:	2b02      	cmp	r3, #2
   d9580:	d90c      	bls.n	d959c <iso_year_adjust+0xb2>
   d9582:	e00d      	b.n	d95a0 <iso_year_adjust+0xb6>
   d9584:	f241 62d5 	movw	r2, #5845	; 0x16d5
   d9588:	4293      	cmp	r3, r2
   d958a:	d007      	beq.n	d959c <iso_year_adjust+0xb2>
   d958c:	f241 62d7 	movw	r2, #5847	; 0x16d7
   d9590:	4293      	cmp	r3, r2
   d9592:	d003      	beq.n	d959c <iso_year_adjust+0xb2>
   d9594:	f241 62d3 	movw	r2, #5843	; 0x16d3
   d9598:	4293      	cmp	r3, r2
   d959a:	d101      	bne.n	d95a0 <iso_year_adjust+0xb6>
   d959c:	2001      	movs	r0, #1
   d959e:	bd10      	pop	{r4, pc}
   d95a0:	2000      	movs	r0, #0
   d95a2:	bd10      	pop	{r4, pc}
   d95a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d95a8:	bd10      	pop	{r4, pc}
	...

000d95ac <strftime>:
   d95ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d95b0:	b093      	sub	sp, #76	; 0x4c
   d95b2:	460e      	mov	r6, r1
   d95b4:	461d      	mov	r5, r3
   d95b6:	4607      	mov	r7, r0
   d95b8:	4691      	mov	r9, r2
   d95ba:	f000 fdf3 	bl	da1a4 <__get_current_time_locale>
   d95be:	2300      	movs	r3, #0
   d95c0:	9306      	str	r3, [sp, #24]
   d95c2:	461c      	mov	r4, r3
   d95c4:	1e73      	subs	r3, r6, #1
   d95c6:	9003      	str	r0, [sp, #12]
   d95c8:	9302      	str	r3, [sp, #8]
   d95ca:	f899 3000 	ldrb.w	r3, [r9]
   d95ce:	2b00      	cmp	r3, #0
   d95d0:	f000 8492 	beq.w	d9ef8 <strftime+0x94c>
   d95d4:	2b25      	cmp	r3, #37	; 0x25
   d95d6:	d008      	beq.n	d95ea <strftime+0x3e>
   d95d8:	9a02      	ldr	r2, [sp, #8]
   d95da:	4294      	cmp	r4, r2
   d95dc:	f080 8490 	bcs.w	d9f00 <strftime+0x954>
   d95e0:	553b      	strb	r3, [r7, r4]
   d95e2:	f109 0901 	add.w	r9, r9, #1
   d95e6:	3401      	adds	r4, #1
   d95e8:	e7ef      	b.n	d95ca <strftime+0x1e>
   d95ea:	f899 a001 	ldrb.w	sl, [r9, #1]
   d95ee:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   d95f2:	d007      	beq.n	d9604 <strftime+0x58>
   d95f4:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d95f8:	d004      	beq.n	d9604 <strftime+0x58>
   d95fa:	f109 0901 	add.w	r9, r9, #1
   d95fe:	f04f 0a00 	mov.w	sl, #0
   d9602:	e001      	b.n	d9608 <strftime+0x5c>
   d9604:	f109 0902 	add.w	r9, r9, #2
   d9608:	f899 3000 	ldrb.w	r3, [r9]
   d960c:	3b31      	subs	r3, #49	; 0x31
   d960e:	2b08      	cmp	r3, #8
   d9610:	d808      	bhi.n	d9624 <strftime+0x78>
   d9612:	4648      	mov	r0, r9
   d9614:	220a      	movs	r2, #10
   d9616:	a90a      	add	r1, sp, #40	; 0x28
   d9618:	f000 fdba 	bl	da190 <strtoul>
   d961c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   d9620:	4680      	mov	r8, r0
   d9622:	e001      	b.n	d9628 <strftime+0x7c>
   d9624:	f04f 0800 	mov.w	r8, #0
   d9628:	f899 3000 	ldrb.w	r3, [r9]
   d962c:	2b45      	cmp	r3, #69	; 0x45
   d962e:	d001      	beq.n	d9634 <strftime+0x88>
   d9630:	2b4f      	cmp	r3, #79	; 0x4f
   d9632:	d101      	bne.n	d9638 <strftime+0x8c>
   d9634:	f109 0901 	add.w	r9, r9, #1
   d9638:	f899 0000 	ldrb.w	r0, [r9]
   d963c:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   d9640:	2b55      	cmp	r3, #85	; 0x55
   d9642:	f200 845d 	bhi.w	d9f00 <strftime+0x954>
   d9646:	e8df f013 	tbh	[pc, r3, lsl #1]
   d964a:	044a      	.short	0x044a
   d964c:	045b045b 	.word	0x045b045b
   d9650:	045b045b 	.word	0x045b045b
   d9654:	045b045b 	.word	0x045b045b
   d9658:	045b045b 	.word	0x045b045b
   d965c:	045b045b 	.word	0x045b045b
   d9660:	045b045b 	.word	0x045b045b
   d9664:	045b045b 	.word	0x045b045b
   d9668:	045b045b 	.word	0x045b045b
   d966c:	045b045b 	.word	0x045b045b
   d9670:	045b045b 	.word	0x045b045b
   d9674:	045b045b 	.word	0x045b045b
   d9678:	045b045b 	.word	0x045b045b
   d967c:	045b045b 	.word	0x045b045b
   d9680:	006f045b 	.word	0x006f045b
   d9684:	00d400a1 	.word	0x00d400a1
   d9688:	045b011a 	.word	0x045b011a
   d968c:	01a0013f 	.word	0x01a0013f
   d9690:	022d0226 	.word	0x022d0226
   d9694:	045b045b 	.word	0x045b045b
   d9698:	0260045b 	.word	0x0260045b
   d969c:	045b045b 	.word	0x045b045b
   d96a0:	045b0268 	.word	0x045b0268
   d96a4:	031d0297 	.word	0x031d0297
   d96a8:	033b0325 	.word	0x033b0325
   d96ac:	03860343 	.word	0x03860343
   d96b0:	03a000c6 	.word	0x03a000c6
   d96b4:	045b041f 	.word	0x045b041f
   d96b8:	045b045b 	.word	0x045b045b
   d96bc:	045b045b 	.word	0x045b045b
   d96c0:	0056045b 	.word	0x0056045b
   d96c4:	00ba0089 	.word	0x00ba0089
   d96c8:	010c010c 	.word	0x010c010c
   d96cc:	0171045b 	.word	0x0171045b
   d96d0:	045b0089 	.word	0x045b0089
   d96d4:	0226023d 	.word	0x0226023d
   d96d8:	025d022d 	.word	0x025d022d
   d96dc:	045b0262 	.word	0x045b0262
   d96e0:	045b0268 	.word	0x045b0268
   d96e4:	029c00be 	.word	0x029c00be
   d96e8:	032e031f 	.word	0x032e031f
   d96ec:	037f045b 	.word	0x037f045b
   d96f0:	039200c2 	.word	0x039200c2
   d96f4:	03e7      	.short	0x03e7
   d96f6:	69ab      	ldr	r3, [r5, #24]
   d96f8:	9a03      	ldr	r2, [sp, #12]
   d96fa:	3318      	adds	r3, #24
   d96fc:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d9700:	4640      	mov	r0, r8
   d9702:	f000 fc07 	bl	d9f14 <strlen>
   d9706:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d970a:	193b      	adds	r3, r7, r4
   d970c:	4420      	add	r0, r4
   d970e:	4284      	cmp	r4, r0
   d9710:	f000 83eb 	beq.w	d9eea <strftime+0x93e>
   d9714:	9a02      	ldr	r2, [sp, #8]
   d9716:	4294      	cmp	r4, r2
   d9718:	f080 83f2 	bcs.w	d9f00 <strftime+0x954>
   d971c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d9720:	f803 2b01 	strb.w	r2, [r3], #1
   d9724:	3401      	adds	r4, #1
   d9726:	e7f2      	b.n	d970e <strftime+0x162>
   d9728:	69ab      	ldr	r3, [r5, #24]
   d972a:	9a03      	ldr	r2, [sp, #12]
   d972c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d9730:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   d9734:	4640      	mov	r0, r8
   d9736:	f000 fbed 	bl	d9f14 <strlen>
   d973a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d973e:	193b      	adds	r3, r7, r4
   d9740:	4420      	add	r0, r4
   d9742:	4284      	cmp	r4, r0
   d9744:	f000 83d1 	beq.w	d9eea <strftime+0x93e>
   d9748:	9a02      	ldr	r2, [sp, #8]
   d974a:	4294      	cmp	r4, r2
   d974c:	f080 83d8 	bcs.w	d9f00 <strftime+0x954>
   d9750:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d9754:	f803 2b01 	strb.w	r2, [r3], #1
   d9758:	3401      	adds	r4, #1
   d975a:	e7f2      	b.n	d9742 <strftime+0x196>
   d975c:	692b      	ldr	r3, [r5, #16]
   d975e:	9a03      	ldr	r2, [sp, #12]
   d9760:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d9764:	4640      	mov	r0, r8
   d9766:	f000 fbd5 	bl	d9f14 <strlen>
   d976a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d976e:	193b      	adds	r3, r7, r4
   d9770:	4420      	add	r0, r4
   d9772:	4284      	cmp	r4, r0
   d9774:	f000 83b9 	beq.w	d9eea <strftime+0x93e>
   d9778:	9a02      	ldr	r2, [sp, #8]
   d977a:	4294      	cmp	r4, r2
   d977c:	f080 83c0 	bcs.w	d9f00 <strftime+0x954>
   d9780:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d9784:	f803 2b01 	strb.w	r2, [r3], #1
   d9788:	3401      	adds	r4, #1
   d978a:	e7f2      	b.n	d9772 <strftime+0x1c6>
   d978c:	692b      	ldr	r3, [r5, #16]
   d978e:	9a03      	ldr	r2, [sp, #12]
   d9790:	330c      	adds	r3, #12
   d9792:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d9796:	4640      	mov	r0, r8
   d9798:	f000 fbbc 	bl	d9f14 <strlen>
   d979c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d97a0:	193b      	adds	r3, r7, r4
   d97a2:	4420      	add	r0, r4
   d97a4:	4284      	cmp	r4, r0
   d97a6:	f000 83a0 	beq.w	d9eea <strftime+0x93e>
   d97aa:	9a02      	ldr	r2, [sp, #8]
   d97ac:	4294      	cmp	r4, r2
   d97ae:	f080 83a7 	bcs.w	d9f00 <strftime+0x954>
   d97b2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d97b6:	f803 2b01 	strb.w	r2, [r3], #1
   d97ba:	3401      	adds	r4, #1
   d97bc:	e7f2      	b.n	d97a4 <strftime+0x1f8>
   d97be:	9b03      	ldr	r3, [sp, #12]
   d97c0:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   d97c4:	e00a      	b.n	d97dc <strftime+0x230>
   d97c6:	9b03      	ldr	r3, [sp, #12]
   d97c8:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   d97cc:	e006      	b.n	d97dc <strftime+0x230>
   d97ce:	9b03      	ldr	r3, [sp, #12]
   d97d0:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   d97d4:	e002      	b.n	d97dc <strftime+0x230>
   d97d6:	9b03      	ldr	r3, [sp, #12]
   d97d8:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   d97dc:	4640      	mov	r0, r8
   d97de:	f000 fb99 	bl	d9f14 <strlen>
   d97e2:	f898 3000 	ldrb.w	r3, [r8]
   d97e6:	2b00      	cmp	r3, #0
   d97e8:	f000 837f 	beq.w	d9eea <strftime+0x93e>
   d97ec:	462b      	mov	r3, r5
   d97ee:	4642      	mov	r2, r8
   d97f0:	e093      	b.n	d991a <strftime+0x36e>
   d97f2:	49b6      	ldr	r1, [pc, #728]	; (d9acc <strftime+0x520>)
   d97f4:	f8d5 b014 	ldr.w	fp, [r5, #20]
   d97f8:	458b      	cmp	fp, r1
   d97fa:	bfac      	ite	ge
   d97fc:	2100      	movge	r1, #0
   d97fe:	2101      	movlt	r1, #1
   d9800:	f1bb 0f00 	cmp.w	fp, #0
   d9804:	db04      	blt.n	d9810 <strftime+0x264>
   d9806:	2064      	movs	r0, #100	; 0x64
   d9808:	fb9b f0f0 	sdiv	r0, fp, r0
   d980c:	3013      	adds	r0, #19
   d980e:	e008      	b.n	d9822 <strftime+0x276>
   d9810:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   d9814:	9107      	str	r1, [sp, #28]
   d9816:	f000 ff05 	bl	da624 <abs>
   d981a:	9907      	ldr	r1, [sp, #28]
   d981c:	2364      	movs	r3, #100	; 0x64
   d981e:	fb90 f0f3 	sdiv	r0, r0, r3
   d9822:	f1ba 0f00 	cmp.w	sl, #0
   d9826:	d008      	beq.n	d983a <strftime+0x28e>
   d9828:	2863      	cmp	r0, #99	; 0x63
   d982a:	dd09      	ble.n	d9840 <strftime+0x294>
   d982c:	4ba8      	ldr	r3, [pc, #672]	; (d9ad0 <strftime+0x524>)
   d982e:	4aa9      	ldr	r2, [pc, #676]	; (d9ad4 <strftime+0x528>)
   d9830:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d9834:	bf18      	it	ne
   d9836:	4613      	movne	r3, r2
   d9838:	e003      	b.n	d9842 <strftime+0x296>
   d983a:	4ba6      	ldr	r3, [pc, #664]	; (d9ad4 <strftime+0x528>)
   d983c:	4aa6      	ldr	r2, [pc, #664]	; (d9ad8 <strftime+0x52c>)
   d983e:	e001      	b.n	d9844 <strftime+0x298>
   d9840:	4ba4      	ldr	r3, [pc, #656]	; (d9ad4 <strftime+0x528>)
   d9842:	4aa6      	ldr	r2, [pc, #664]	; (d9adc <strftime+0x530>)
   d9844:	9001      	str	r0, [sp, #4]
   d9846:	f1b8 0f01 	cmp.w	r8, #1
   d984a:	bf98      	it	ls
   d984c:	f04f 0802 	movls.w	r8, #2
   d9850:	ebc1 0108 	rsb	r1, r1, r8
   d9854:	9100      	str	r1, [sp, #0]
   d9856:	489d      	ldr	r0, [pc, #628]	; (d9acc <strftime+0x520>)
   d9858:	49a1      	ldr	r1, [pc, #644]	; (d9ae0 <strftime+0x534>)
   d985a:	4583      	cmp	fp, r0
   d985c:	bfb8      	it	lt
   d985e:	460b      	movlt	r3, r1
   d9860:	e21e      	b.n	d9ca0 <strftime+0x6f4>
   d9862:	4aa0      	ldr	r2, [pc, #640]	; (d9ae4 <strftime+0x538>)
   d9864:	49a0      	ldr	r1, [pc, #640]	; (d9ae8 <strftime+0x53c>)
   d9866:	68eb      	ldr	r3, [r5, #12]
   d9868:	2864      	cmp	r0, #100	; 0x64
   d986a:	bf08      	it	eq
   d986c:	460a      	moveq	r2, r1
   d986e:	1b31      	subs	r1, r6, r4
   d9870:	1938      	adds	r0, r7, r4
   d9872:	f7fb ff2d 	bl	d56d0 <sniprintf>
   d9876:	2800      	cmp	r0, #0
   d9878:	f280 8302 	bge.w	d9e80 <strftime+0x8d4>
   d987c:	e340      	b.n	d9f00 <strftime+0x954>
   d987e:	6968      	ldr	r0, [r5, #20]
   d9880:	692b      	ldr	r3, [r5, #16]
   d9882:	2800      	cmp	r0, #0
   d9884:	f103 0b01 	add.w	fp, r3, #1
   d9888:	eb07 0804 	add.w	r8, r7, r4
   d988c:	ebc4 0a06 	rsb	sl, r4, r6
   d9890:	68eb      	ldr	r3, [r5, #12]
   d9892:	db05      	blt.n	d98a0 <strftime+0x2f4>
   d9894:	2264      	movs	r2, #100	; 0x64
   d9896:	fb90 f1f2 	sdiv	r1, r0, r2
   d989a:	fb02 0011 	mls	r0, r2, r1, r0
   d989e:	e00a      	b.n	d98b6 <strftime+0x30a>
   d98a0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d98a4:	9307      	str	r3, [sp, #28]
   d98a6:	f000 febd 	bl	da624 <abs>
   d98aa:	2264      	movs	r2, #100	; 0x64
   d98ac:	9b07      	ldr	r3, [sp, #28]
   d98ae:	fb90 f1f2 	sdiv	r1, r0, r2
   d98b2:	fb01 0012 	mls	r0, r1, r2, r0
   d98b6:	4a8d      	ldr	r2, [pc, #564]	; (d9aec <strftime+0x540>)
   d98b8:	9001      	str	r0, [sp, #4]
   d98ba:	9300      	str	r3, [sp, #0]
   d98bc:	4651      	mov	r1, sl
   d98be:	465b      	mov	r3, fp
   d98c0:	4640      	mov	r0, r8
   d98c2:	f7fb ff05 	bl	d56d0 <sniprintf>
   d98c6:	e7d6      	b.n	d9876 <strftime+0x2ca>
   d98c8:	2325      	movs	r3, #37	; 0x25
   d98ca:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   d98ce:	f1ba 0f00 	cmp.w	sl, #0
   d98d2:	d007      	beq.n	d98e4 <strftime+0x338>
   d98d4:	f1b8 0f05 	cmp.w	r8, #5
   d98d8:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   d98dc:	bf98      	it	ls
   d98de:	f04f 0806 	movls.w	r8, #6
   d98e2:	e004      	b.n	d98ee <strftime+0x342>
   d98e4:	232b      	movs	r3, #43	; 0x2b
   d98e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   d98ea:	f04f 080a 	mov.w	r8, #10
   d98ee:	f1b8 0306 	subs.w	r3, r8, #6
   d98f2:	d102      	bne.n	d98fa <strftime+0x34e>
   d98f4:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   d98f8:	e00a      	b.n	d9910 <strftime+0x364>
   d98fa:	4a7d      	ldr	r2, [pc, #500]	; (d9af0 <strftime+0x544>)
   d98fc:	211e      	movs	r1, #30
   d98fe:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   d9902:	f7fb fee5 	bl	d56d0 <sniprintf>
   d9906:	2800      	cmp	r0, #0
   d9908:	ddf4      	ble.n	d98f4 <strftime+0x348>
   d990a:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   d990e:	4418      	add	r0, r3
   d9910:	4978      	ldr	r1, [pc, #480]	; (d9af4 <strftime+0x548>)
   d9912:	f7ff fdc7 	bl	d94a4 <strcpy>
   d9916:	462b      	mov	r3, r5
   d9918:	aa0a      	add	r2, sp, #40	; 0x28
   d991a:	1b31      	subs	r1, r6, r4
   d991c:	1938      	adds	r0, r7, r4
   d991e:	f7ff fe45 	bl	d95ac <strftime>
   d9922:	2800      	cmp	r0, #0
   d9924:	f340 82ec 	ble.w	d9f00 <strftime+0x954>
   d9928:	4404      	add	r4, r0
   d992a:	e2de      	b.n	d9eea <strftime+0x93e>
   d992c:	4628      	mov	r0, r5
   d992e:	f7ff fddc 	bl	d94ea <iso_year_adjust>
   d9932:	4680      	mov	r8, r0
   d9934:	6968      	ldr	r0, [r5, #20]
   d9936:	2800      	cmp	r0, #0
   d9938:	db05      	blt.n	d9946 <strftime+0x39a>
   d993a:	2264      	movs	r2, #100	; 0x64
   d993c:	fb90 f1f2 	sdiv	r1, r0, r2
   d9940:	fb02 0011 	mls	r0, r2, r1, r0
   d9944:	e008      	b.n	d9958 <strftime+0x3ac>
   d9946:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d994a:	f000 fe6b 	bl	da624 <abs>
   d994e:	2264      	movs	r2, #100	; 0x64
   d9950:	fb90 f3f2 	sdiv	r3, r0, r2
   d9954:	fb03 0012 	mls	r0, r3, r2, r0
   d9958:	f1b8 0f00 	cmp.w	r8, #0
   d995c:	da06      	bge.n	d996c <strftime+0x3c0>
   d995e:	696a      	ldr	r2, [r5, #20]
   d9960:	4b65      	ldr	r3, [pc, #404]	; (d9af8 <strftime+0x54c>)
   d9962:	429a      	cmp	r2, r3
   d9964:	bfb8      	it	lt
   d9966:	f04f 0801 	movlt.w	r8, #1
   d996a:	e006      	b.n	d997a <strftime+0x3ce>
   d996c:	d005      	beq.n	d997a <strftime+0x3ce>
   d996e:	696a      	ldr	r2, [r5, #20]
   d9970:	4b56      	ldr	r3, [pc, #344]	; (d9acc <strftime+0x520>)
   d9972:	429a      	cmp	r2, r3
   d9974:	bfb8      	it	lt
   d9976:	f04f 38ff 	movlt.w	r8, #4294967295	; 0xffffffff
   d997a:	2364      	movs	r3, #100	; 0x64
   d997c:	4440      	add	r0, r8
   d997e:	fb90 f2f3 	sdiv	r2, r0, r3
   d9982:	fb03 0012 	mls	r0, r3, r2, r0
   d9986:	4418      	add	r0, r3
   d9988:	e1f9      	b.n	d9d7e <strftime+0x7d2>
   d998a:	4b50      	ldr	r3, [pc, #320]	; (d9acc <strftime+0x520>)
   d998c:	6969      	ldr	r1, [r5, #20]
   d998e:	9108      	str	r1, [sp, #32]
   d9990:	4299      	cmp	r1, r3
   d9992:	bfac      	ite	ge
   d9994:	2300      	movge	r3, #0
   d9996:	2301      	movlt	r3, #1
   d9998:	4628      	mov	r0, r5
   d999a:	9307      	str	r3, [sp, #28]
   d999c:	f7ff fda5 	bl	d94ea <iso_year_adjust>
   d99a0:	9908      	ldr	r1, [sp, #32]
   d99a2:	2900      	cmp	r1, #0
   d99a4:	4683      	mov	fp, r0
   d99a6:	db04      	blt.n	d99b2 <strftime+0x406>
   d99a8:	2364      	movs	r3, #100	; 0x64
   d99aa:	fb91 f3f3 	sdiv	r3, r1, r3
   d99ae:	3313      	adds	r3, #19
   d99b0:	e008      	b.n	d99c4 <strftime+0x418>
   d99b2:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   d99b6:	9108      	str	r1, [sp, #32]
   d99b8:	f000 fe34 	bl	da624 <abs>
   d99bc:	9908      	ldr	r1, [sp, #32]
   d99be:	2364      	movs	r3, #100	; 0x64
   d99c0:	fb90 f3f3 	sdiv	r3, r0, r3
   d99c4:	6968      	ldr	r0, [r5, #20]
   d99c6:	2800      	cmp	r0, #0
   d99c8:	db06      	blt.n	d99d8 <strftime+0x42c>
   d99ca:	f04f 0e64 	mov.w	lr, #100	; 0x64
   d99ce:	fb90 fcfe 	sdiv	ip, r0, lr
   d99d2:	fb0e 001c 	mls	r0, lr, ip, r0
   d99d6:	e00d      	b.n	d99f4 <strftime+0x448>
   d99d8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d99dc:	9109      	str	r1, [sp, #36]	; 0x24
   d99de:	9308      	str	r3, [sp, #32]
   d99e0:	f000 fe20 	bl	da624 <abs>
   d99e4:	f04f 0e64 	mov.w	lr, #100	; 0x64
   d99e8:	9909      	ldr	r1, [sp, #36]	; 0x24
   d99ea:	9b08      	ldr	r3, [sp, #32]
   d99ec:	fb90 fcfe 	sdiv	ip, r0, lr
   d99f0:	fb0c 001e 	mls	r0, ip, lr, r0
   d99f4:	f1bb 0f00 	cmp.w	fp, #0
   d99f8:	da08      	bge.n	d9a0c <strftime+0x460>
   d99fa:	6969      	ldr	r1, [r5, #20]
   d99fc:	4a3e      	ldr	r2, [pc, #248]	; (d9af8 <strftime+0x54c>)
   d99fe:	4291      	cmp	r1, r2
   d9a00:	da0a      	bge.n	d9a18 <strftime+0x46c>
   d9a02:	f04f 0b01 	mov.w	fp, #1
   d9a06:	f8cd b01c 	str.w	fp, [sp, #28]
   d9a0a:	e005      	b.n	d9a18 <strftime+0x46c>
   d9a0c:	d004      	beq.n	d9a18 <strftime+0x46c>
   d9a0e:	4a2f      	ldr	r2, [pc, #188]	; (d9acc <strftime+0x520>)
   d9a10:	4291      	cmp	r1, r2
   d9a12:	bfb8      	it	lt
   d9a14:	f04f 3bff 	movlt.w	fp, #4294967295	; 0xffffffff
   d9a18:	eb0b 0200 	add.w	r2, fp, r0
   d9a1c:	1c50      	adds	r0, r2, #1
   d9a1e:	d102      	bne.n	d9a26 <strftime+0x47a>
   d9a20:	3b01      	subs	r3, #1
   d9a22:	2263      	movs	r2, #99	; 0x63
   d9a24:	e003      	b.n	d9a2e <strftime+0x482>
   d9a26:	2a64      	cmp	r2, #100	; 0x64
   d9a28:	bf04      	itt	eq
   d9a2a:	3301      	addeq	r3, #1
   d9a2c:	2200      	moveq	r2, #0
   d9a2e:	2064      	movs	r0, #100	; 0x64
   d9a30:	fb00 2303 	mla	r3, r0, r3, r2
   d9a34:	9a07      	ldr	r2, [sp, #28]
   d9a36:	b142      	cbz	r2, d9a4a <strftime+0x49e>
   d9a38:	222d      	movs	r2, #45	; 0x2d
   d9a3a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   d9a3e:	f1b8 0f00 	cmp.w	r8, #0
   d9a42:	d013      	beq.n	d9a6c <strftime+0x4c0>
   d9a44:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d9a48:	e010      	b.n	d9a6c <strftime+0x4c0>
   d9a4a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d9a4e:	d110      	bne.n	d9a72 <strftime+0x4c6>
   d9a50:	f242 720f 	movw	r2, #9999	; 0x270f
   d9a54:	4293      	cmp	r3, r2
   d9a56:	d90c      	bls.n	d9a72 <strftime+0x4c6>
   d9a58:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   d9a5c:	f1b8 0f00 	cmp.w	r8, #0
   d9a60:	d1f0      	bne.n	d9a44 <strftime+0x498>
   d9a62:	aa12      	add	r2, sp, #72	; 0x48
   d9a64:	2125      	movs	r1, #37	; 0x25
   d9a66:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   d9a6a:	e00a      	b.n	d9a82 <strftime+0x4d6>
   d9a6c:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   d9a70:	e000      	b.n	d9a74 <strftime+0x4c8>
   d9a72:	aa0a      	add	r2, sp, #40	; 0x28
   d9a74:	2125      	movs	r1, #37	; 0x25
   d9a76:	7011      	strb	r1, [r2, #0]
   d9a78:	f1ba 0f00 	cmp.w	sl, #0
   d9a7c:	d101      	bne.n	d9a82 <strftime+0x4d6>
   d9a7e:	1c50      	adds	r0, r2, #1
   d9a80:	e002      	b.n	d9a88 <strftime+0x4dc>
   d9a82:	2130      	movs	r1, #48	; 0x30
   d9a84:	1c90      	adds	r0, r2, #2
   d9a86:	7051      	strb	r1, [r2, #1]
   d9a88:	491c      	ldr	r1, [pc, #112]	; (d9afc <strftime+0x550>)
   d9a8a:	9307      	str	r3, [sp, #28]
   d9a8c:	f7ff fd0a 	bl	d94a4 <strcpy>
   d9a90:	9b07      	ldr	r3, [sp, #28]
   d9a92:	9300      	str	r3, [sp, #0]
   d9a94:	e1ad      	b.n	d9df2 <strftime+0x846>
   d9a96:	4a14      	ldr	r2, [pc, #80]	; (d9ae8 <strftime+0x53c>)
   d9a98:	4912      	ldr	r1, [pc, #72]	; (d9ae4 <strftime+0x538>)
   d9a9a:	68ab      	ldr	r3, [r5, #8]
   d9a9c:	286b      	cmp	r0, #107	; 0x6b
   d9a9e:	bf08      	it	eq
   d9aa0:	460a      	moveq	r2, r1
   d9aa2:	e6e4      	b.n	d986e <strftime+0x2c2>
   d9aa4:	68a9      	ldr	r1, [r5, #8]
   d9aa6:	230c      	movs	r3, #12
   d9aa8:	b131      	cbz	r1, d9ab8 <strftime+0x50c>
   d9aaa:	4299      	cmp	r1, r3
   d9aac:	bf0e      	itee	eq
   d9aae:	460b      	moveq	r3, r1
   d9ab0:	fb91 f2f3 	sdivne	r2, r1, r3
   d9ab4:	fb03 1312 	mlsne	r3, r3, r2, r1
   d9ab8:	4a0a      	ldr	r2, [pc, #40]	; (d9ae4 <strftime+0x538>)
   d9aba:	490b      	ldr	r1, [pc, #44]	; (d9ae8 <strftime+0x53c>)
   d9abc:	2849      	cmp	r0, #73	; 0x49
   d9abe:	bf08      	it	eq
   d9ac0:	460a      	moveq	r2, r1
   d9ac2:	e6d4      	b.n	d986e <strftime+0x2c2>
   d9ac4:	69eb      	ldr	r3, [r5, #28]
   d9ac6:	4a0e      	ldr	r2, [pc, #56]	; (d9b00 <strftime+0x554>)
   d9ac8:	3301      	adds	r3, #1
   d9aca:	e6d0      	b.n	d986e <strftime+0x2c2>
   d9acc:	fffff894 	.word	0xfffff894
   d9ad0:	000db01f 	.word	0x000db01f
   d9ad4:	000dac25 	.word	0x000dac25
   d9ad8:	000db010 	.word	0x000db010
   d9adc:	000db017 	.word	0x000db017
   d9ae0:	000db021 	.word	0x000db021
   d9ae4:	000db023 	.word	0x000db023
   d9ae8:	000db031 	.word	0x000db031
   d9aec:	000db027 	.word	0x000db027
   d9af0:	000db036 	.word	0x000db036
   d9af4:	000db03a 	.word	0x000db03a
   d9af8:	fffff895 	.word	0xfffff895
   d9afc:	000db042 	.word	0x000db042
   d9b00:	000db046 	.word	0x000db046
   d9b04:	692b      	ldr	r3, [r5, #16]
   d9b06:	3301      	adds	r3, #1
   d9b08:	e13d      	b.n	d9d86 <strftime+0x7da>
   d9b0a:	686b      	ldr	r3, [r5, #4]
   d9b0c:	e13b      	b.n	d9d86 <strftime+0x7da>
   d9b0e:	9b02      	ldr	r3, [sp, #8]
   d9b10:	429c      	cmp	r4, r3
   d9b12:	f080 81f5 	bcs.w	d9f00 <strftime+0x954>
   d9b16:	230a      	movs	r3, #10
   d9b18:	e1e5      	b.n	d9ee6 <strftime+0x93a>
   d9b1a:	68ab      	ldr	r3, [r5, #8]
   d9b1c:	9a03      	ldr	r2, [sp, #12]
   d9b1e:	2b0b      	cmp	r3, #11
   d9b20:	bfcc      	ite	gt
   d9b22:	23a4      	movgt	r3, #164	; 0xa4
   d9b24:	23a0      	movle	r3, #160	; 0xa0
   d9b26:	4413      	add	r3, r2
   d9b28:	f8d3 8004 	ldr.w	r8, [r3, #4]
   d9b2c:	4640      	mov	r0, r8
   d9b2e:	f000 f9f1 	bl	d9f14 <strlen>
   d9b32:	4bb2      	ldr	r3, [pc, #712]	; (d9dfc <strftime+0x850>)
   d9b34:	f8d3 e000 	ldr.w	lr, [r3]
   d9b38:	1939      	adds	r1, r7, r4
   d9b3a:	4642      	mov	r2, r8
   d9b3c:	4420      	add	r0, r4
   d9b3e:	4284      	cmp	r4, r0
   d9b40:	f000 81d3 	beq.w	d9eea <strftime+0x93e>
   d9b44:	9b02      	ldr	r3, [sp, #8]
   d9b46:	429c      	cmp	r4, r3
   d9b48:	f080 81da 	bcs.w	d9f00 <strftime+0x954>
   d9b4c:	f899 3000 	ldrb.w	r3, [r9]
   d9b50:	2b50      	cmp	r3, #80	; 0x50
   d9b52:	f104 0401 	add.w	r4, r4, #1
   d9b56:	7813      	ldrb	r3, [r2, #0]
   d9b58:	d10a      	bne.n	d9b70 <strftime+0x5c4>
   d9b5a:	eb0e 0c03 	add.w	ip, lr, r3
   d9b5e:	f89c c001 	ldrb.w	ip, [ip, #1]
   d9b62:	f00c 0c03 	and.w	ip, ip, #3
   d9b66:	f1bc 0f01 	cmp.w	ip, #1
   d9b6a:	bf08      	it	eq
   d9b6c:	3320      	addeq	r3, #32
   d9b6e:	b2db      	uxtb	r3, r3
   d9b70:	f801 3b01 	strb.w	r3, [r1], #1
   d9b74:	3201      	adds	r2, #1
   d9b76:	e7e2      	b.n	d9b3e <strftime+0x592>
   d9b78:	686b      	ldr	r3, [r5, #4]
   d9b7a:	9300      	str	r3, [sp, #0]
   d9b7c:	4aa0      	ldr	r2, [pc, #640]	; (d9e00 <strftime+0x854>)
   d9b7e:	68ab      	ldr	r3, [r5, #8]
   d9b80:	e139      	b.n	d9df6 <strftime+0x84a>
   d9b82:	6a2b      	ldr	r3, [r5, #32]
   d9b84:	2b00      	cmp	r3, #0
   d9b86:	db17      	blt.n	d9bb8 <strftime+0x60c>
   d9b88:	f000 fbc4 	bl	da314 <__tz_lock>
   d9b8c:	9b06      	ldr	r3, [sp, #24]
   d9b8e:	b91b      	cbnz	r3, d9b98 <strftime+0x5ec>
   d9b90:	f000 fbc2 	bl	da318 <_tzset_unlocked>
   d9b94:	2301      	movs	r3, #1
   d9b96:	9306      	str	r3, [sp, #24]
   d9b98:	f000 fda0 	bl	da6dc <__gettzinfo>
   d9b9c:	6a2b      	ldr	r3, [r5, #32]
   d9b9e:	2b00      	cmp	r3, #0
   d9ba0:	bfd4      	ite	le
   d9ba2:	2300      	movle	r3, #0
   d9ba4:	2301      	movgt	r3, #1
   d9ba6:	221c      	movs	r2, #28
   d9ba8:	fb02 0003 	mla	r0, r2, r3, r0
   d9bac:	6a03      	ldr	r3, [r0, #32]
   d9bae:	f1c3 0800 	rsb	r8, r3, #0
   d9bb2:	f000 fbb0 	bl	da316 <__tz_unlock>
   d9bb6:	e001      	b.n	d9bbc <strftime+0x610>
   d9bb8:	f04f 0800 	mov.w	r8, #0
   d9bbc:	f8d5 e014 	ldr.w	lr, [r5, #20]
   d9bc0:	4670      	mov	r0, lr
   d9bc2:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   d9bc6:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d9bca:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   d9bce:	2a00      	cmp	r2, #0
   d9bd0:	f173 0b00 	sbcs.w	fp, r3, #0
   d9bd4:	ebc4 0c06 	rsb	ip, r4, r6
   d9bd8:	eb07 0a04 	add.w	sl, r7, r4
   d9bdc:	da03      	bge.n	d9be6 <strftime+0x63a>
   d9bde:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   d9be2:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   d9be6:	0891      	lsrs	r1, r2, #2
   d9be8:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   d9bec:	109b      	asrs	r3, r3, #2
   d9bee:	9104      	str	r1, [sp, #16]
   d9bf0:	9305      	str	r3, [sp, #20]
   d9bf2:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   d9bf6:	2364      	movs	r3, #100	; 0x64
   d9bf8:	fb91 f1f3 	sdiv	r1, r1, r3
   d9bfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d9c00:	1a52      	subs	r2, r2, r1
   d9c02:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   d9c06:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   d9c0a:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d9c0e:	fb90 f1f1 	sdiv	r1, r0, r1
   d9c12:	1852      	adds	r2, r2, r1
   d9c14:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   d9c18:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   d9c1c:	f240 116d 	movw	r1, #365	; 0x16d
   d9c20:	fb01 fe0e 	mul.w	lr, r1, lr
   d9c24:	69e9      	ldr	r1, [r5, #28]
   d9c26:	eb12 020e 	adds.w	r2, r2, lr
   d9c2a:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   d9c2e:	1852      	adds	r2, r2, r1
   d9c30:	f04f 0e18 	mov.w	lr, #24
   d9c34:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   d9c38:	fba2 010e 	umull	r0, r1, r2, lr
   d9c3c:	fb0e 1103 	mla	r1, lr, r3, r1
   d9c40:	68ab      	ldr	r3, [r5, #8]
   d9c42:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   d9c46:	18c0      	adds	r0, r0, r3
   d9c48:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   d9c4c:	fba0 230e 	umull	r2, r3, r0, lr
   d9c50:	fb0e 3301 	mla	r3, lr, r1, r3
   d9c54:	6869      	ldr	r1, [r5, #4]
   d9c56:	1852      	adds	r2, r2, r1
   d9c58:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   d9c5c:	fba2 010e 	umull	r0, r1, r2, lr
   d9c60:	fb0e 1103 	mla	r1, lr, r3, r1
   d9c64:	682b      	ldr	r3, [r5, #0]
   d9c66:	4a67      	ldr	r2, [pc, #412]	; (d9e04 <strftime+0x858>)
   d9c68:	18c0      	adds	r0, r0, r3
   d9c6a:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   d9c6e:	ebb0 0008 	subs.w	r0, r0, r8
   d9c72:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   d9c76:	e9cd 0100 	strd	r0, r1, [sp]
   d9c7a:	4661      	mov	r1, ip
   d9c7c:	4650      	mov	r0, sl
   d9c7e:	f7fb fd27 	bl	d56d0 <sniprintf>
   d9c82:	e5f8      	b.n	d9876 <strftime+0x2ca>
   d9c84:	682b      	ldr	r3, [r5, #0]
   d9c86:	e07e      	b.n	d9d86 <strftime+0x7da>
   d9c88:	9b02      	ldr	r3, [sp, #8]
   d9c8a:	429c      	cmp	r4, r3
   d9c8c:	f080 8138 	bcs.w	d9f00 <strftime+0x954>
   d9c90:	2309      	movs	r3, #9
   d9c92:	e128      	b.n	d9ee6 <strftime+0x93a>
   d9c94:	682b      	ldr	r3, [r5, #0]
   d9c96:	9301      	str	r3, [sp, #4]
   d9c98:	686b      	ldr	r3, [r5, #4]
   d9c9a:	9300      	str	r3, [sp, #0]
   d9c9c:	4a5a      	ldr	r2, [pc, #360]	; (d9e08 <strftime+0x85c>)
   d9c9e:	68ab      	ldr	r3, [r5, #8]
   d9ca0:	1b31      	subs	r1, r6, r4
   d9ca2:	1938      	adds	r0, r7, r4
   d9ca4:	e60d      	b.n	d98c2 <strftime+0x316>
   d9ca6:	9b02      	ldr	r3, [sp, #8]
   d9ca8:	429c      	cmp	r4, r3
   d9caa:	f080 8129 	bcs.w	d9f00 <strftime+0x954>
   d9cae:	69ab      	ldr	r3, [r5, #24]
   d9cb0:	1c62      	adds	r2, r4, #1
   d9cb2:	b90b      	cbnz	r3, d9cb8 <strftime+0x70c>
   d9cb4:	2337      	movs	r3, #55	; 0x37
   d9cb6:	e000      	b.n	d9cba <strftime+0x70e>
   d9cb8:	3330      	adds	r3, #48	; 0x30
   d9cba:	553b      	strb	r3, [r7, r4]
   d9cbc:	4614      	mov	r4, r2
   d9cbe:	e114      	b.n	d9eea <strftime+0x93e>
   d9cc0:	69eb      	ldr	r3, [r5, #28]
   d9cc2:	69aa      	ldr	r2, [r5, #24]
   d9cc4:	3307      	adds	r3, #7
   d9cc6:	1a9b      	subs	r3, r3, r2
   d9cc8:	2207      	movs	r2, #7
   d9cca:	fb93 f3f2 	sdiv	r3, r3, r2
   d9cce:	e05a      	b.n	d9d86 <strftime+0x7da>
   d9cd0:	4628      	mov	r0, r5
   d9cd2:	f7ff fc0a 	bl	d94ea <iso_year_adjust>
   d9cd6:	69aa      	ldr	r2, [r5, #24]
   d9cd8:	b10a      	cbz	r2, d9cde <strftime+0x732>
   d9cda:	1e53      	subs	r3, r2, #1
   d9cdc:	e000      	b.n	d9ce0 <strftime+0x734>
   d9cde:	2306      	movs	r3, #6
   d9ce0:	2800      	cmp	r0, #0
   d9ce2:	dc2f      	bgt.n	d9d44 <strftime+0x798>
   d9ce4:	69ea      	ldr	r2, [r5, #28]
   d9ce6:	d101      	bne.n	d9cec <strftime+0x740>
   d9ce8:	320a      	adds	r2, #10
   d9cea:	e03b      	b.n	d9d64 <strftime+0x7b8>
   d9cec:	1a9a      	subs	r2, r3, r2
   d9cee:	696b      	ldr	r3, [r5, #20]
   d9cf0:	f240 716b 	movw	r1, #1899	; 0x76b
   d9cf4:	2b00      	cmp	r3, #0
   d9cf6:	bfb4      	ite	lt
   d9cf8:	4608      	movlt	r0, r1
   d9cfa:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   d9cfe:	4418      	add	r0, r3
   d9d00:	0781      	lsls	r1, r0, #30
   d9d02:	d107      	bne.n	d9d14 <strftime+0x768>
   d9d04:	4601      	mov	r1, r0
   d9d06:	f04f 0e64 	mov.w	lr, #100	; 0x64
   d9d0a:	fb90 f0fe 	sdiv	r0, r0, lr
   d9d0e:	fb0e 1110 	mls	r1, lr, r0, r1
   d9d12:	b981      	cbnz	r1, d9d36 <strftime+0x78a>
   d9d14:	2b00      	cmp	r3, #0
   d9d16:	f240 716b 	movw	r1, #1899	; 0x76b
   d9d1a:	bfa8      	it	ge
   d9d1c:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   d9d20:	4419      	add	r1, r3
   d9d22:	f44f 73c8 	mov.w	r3, #400	; 0x190
   d9d26:	fb91 f0f3 	sdiv	r0, r1, r3
   d9d2a:	fb03 1110 	mls	r1, r3, r0, r1
   d9d2e:	fab1 f181 	clz	r1, r1
   d9d32:	0949      	lsrs	r1, r1, #5
   d9d34:	e000      	b.n	d9d38 <strftime+0x78c>
   d9d36:	2101      	movs	r1, #1
   d9d38:	1a52      	subs	r2, r2, r1
   d9d3a:	2a05      	cmp	r2, #5
   d9d3c:	bfb4      	ite	lt
   d9d3e:	2335      	movlt	r3, #53	; 0x35
   d9d40:	2334      	movge	r3, #52	; 0x34
   d9d42:	e020      	b.n	d9d86 <strftime+0x7da>
   d9d44:	2301      	movs	r3, #1
   d9d46:	e01e      	b.n	d9d86 <strftime+0x7da>
   d9d48:	9b02      	ldr	r3, [sp, #8]
   d9d4a:	429c      	cmp	r4, r3
   d9d4c:	f080 80d8 	bcs.w	d9f00 <strftime+0x954>
   d9d50:	69ab      	ldr	r3, [r5, #24]
   d9d52:	3330      	adds	r3, #48	; 0x30
   d9d54:	e0c7      	b.n	d9ee6 <strftime+0x93a>
   d9d56:	69aa      	ldr	r2, [r5, #24]
   d9d58:	b10a      	cbz	r2, d9d5e <strftime+0x7b2>
   d9d5a:	1e53      	subs	r3, r2, #1
   d9d5c:	e000      	b.n	d9d60 <strftime+0x7b4>
   d9d5e:	2306      	movs	r3, #6
   d9d60:	69ea      	ldr	r2, [r5, #28]
   d9d62:	3207      	adds	r2, #7
   d9d64:	1ad2      	subs	r2, r2, r3
   d9d66:	2307      	movs	r3, #7
   d9d68:	fb92 f3f3 	sdiv	r3, r2, r3
   d9d6c:	e00b      	b.n	d9d86 <strftime+0x7da>
   d9d6e:	6968      	ldr	r0, [r5, #20]
   d9d70:	2800      	cmp	r0, #0
   d9d72:	da03      	bge.n	d9d7c <strftime+0x7d0>
   d9d74:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d9d78:	f000 fc54 	bl	da624 <abs>
   d9d7c:	2364      	movs	r3, #100	; 0x64
   d9d7e:	fb90 f2f3 	sdiv	r2, r0, r3
   d9d82:	fb02 0313 	mls	r3, r2, r3, r0
   d9d86:	4a21      	ldr	r2, [pc, #132]	; (d9e0c <strftime+0x860>)
   d9d88:	e571      	b.n	d986e <strftime+0x2c2>
   d9d8a:	696b      	ldr	r3, [r5, #20]
   d9d8c:	4a20      	ldr	r2, [pc, #128]	; (d9e10 <strftime+0x864>)
   d9d8e:	4293      	cmp	r3, r2
   d9d90:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   d9d94:	da05      	bge.n	d9da2 <strftime+0x7f6>
   d9d96:	232d      	movs	r3, #45	; 0x2d
   d9d98:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   d9d9c:	f1cb 0b00 	rsb	fp, fp, #0
   d9da0:	e008      	b.n	d9db4 <strftime+0x808>
   d9da2:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d9da6:	d10d      	bne.n	d9dc4 <strftime+0x818>
   d9da8:	f242 730f 	movw	r3, #9999	; 0x270f
   d9dac:	459b      	cmp	fp, r3
   d9dae:	d911      	bls.n	d9dd4 <strftime+0x828>
   d9db0:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   d9db4:	f1b8 0f00 	cmp.w	r8, #0
   d9db8:	d001      	beq.n	d9dbe <strftime+0x812>
   d9dba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d9dbe:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   d9dc2:	e000      	b.n	d9dc6 <strftime+0x81a>
   d9dc4:	ab0a      	add	r3, sp, #40	; 0x28
   d9dc6:	2225      	movs	r2, #37	; 0x25
   d9dc8:	701a      	strb	r2, [r3, #0]
   d9dca:	f1ba 0f00 	cmp.w	sl, #0
   d9dce:	d108      	bne.n	d9de2 <strftime+0x836>
   d9dd0:	1c58      	adds	r0, r3, #1
   d9dd2:	e009      	b.n	d9de8 <strftime+0x83c>
   d9dd4:	f1b8 0f00 	cmp.w	r8, #0
   d9dd8:	d1f4      	bne.n	d9dc4 <strftime+0x818>
   d9dda:	2325      	movs	r3, #37	; 0x25
   d9ddc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   d9de0:	ab0a      	add	r3, sp, #40	; 0x28
   d9de2:	2230      	movs	r2, #48	; 0x30
   d9de4:	1c98      	adds	r0, r3, #2
   d9de6:	705a      	strb	r2, [r3, #1]
   d9de8:	490a      	ldr	r1, [pc, #40]	; (d9e14 <strftime+0x868>)
   d9dea:	f7ff fb5b 	bl	d94a4 <strcpy>
   d9dee:	f8cd b000 	str.w	fp, [sp]
   d9df2:	4643      	mov	r3, r8
   d9df4:	aa0a      	add	r2, sp, #40	; 0x28
   d9df6:	1b31      	subs	r1, r6, r4
   d9df8:	1938      	adds	r0, r7, r4
   d9dfa:	e03e      	b.n	d9e7a <strftime+0x8ce>
   d9dfc:	2003e0a4 	.word	0x2003e0a4
   d9e00:	000db055 	.word	0x000db055
   d9e04:	000db04b 	.word	0x000db04b
   d9e08:	000db050 	.word	0x000db050
   d9e0c:	000db031 	.word	0x000db031
   d9e10:	fffff894 	.word	0xfffff894
   d9e14:	000db042 	.word	0x000db042
   d9e18:	6a2b      	ldr	r3, [r5, #32]
   d9e1a:	2b00      	cmp	r3, #0
   d9e1c:	db65      	blt.n	d9eea <strftime+0x93e>
   d9e1e:	f000 fa79 	bl	da314 <__tz_lock>
   d9e22:	9b06      	ldr	r3, [sp, #24]
   d9e24:	b91b      	cbnz	r3, d9e2e <strftime+0x882>
   d9e26:	f000 fa77 	bl	da318 <_tzset_unlocked>
   d9e2a:	2301      	movs	r3, #1
   d9e2c:	9306      	str	r3, [sp, #24]
   d9e2e:	f000 fc55 	bl	da6dc <__gettzinfo>
   d9e32:	6a2b      	ldr	r3, [r5, #32]
   d9e34:	2b00      	cmp	r3, #0
   d9e36:	bfd4      	ite	le
   d9e38:	2300      	movle	r3, #0
   d9e3a:	2301      	movgt	r3, #1
   d9e3c:	221c      	movs	r2, #28
   d9e3e:	fb02 0003 	mla	r0, r2, r3, r0
   d9e42:	eb07 0a04 	add.w	sl, r7, r4
   d9e46:	6a03      	ldr	r3, [r0, #32]
   d9e48:	f1c3 0800 	rsb	r8, r3, #0
   d9e4c:	f000 fa63 	bl	da316 <__tz_unlock>
   d9e50:	233c      	movs	r3, #60	; 0x3c
   d9e52:	fb98 f0f3 	sdiv	r0, r8, r3
   d9e56:	9307      	str	r3, [sp, #28]
   d9e58:	f000 fc44 	bl	da6e4 <labs>
   d9e5c:	9b07      	ldr	r3, [sp, #28]
   d9e5e:	fb90 f2f3 	sdiv	r2, r0, r3
   d9e62:	ebc4 0b06 	rsb	fp, r4, r6
   d9e66:	fb02 0013 	mls	r0, r2, r3, r0
   d9e6a:	4a28      	ldr	r2, [pc, #160]	; (d9f0c <strftime+0x960>)
   d9e6c:	9000      	str	r0, [sp, #0]
   d9e6e:	4659      	mov	r1, fp
   d9e70:	4650      	mov	r0, sl
   d9e72:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9e76:	fb98 f3f3 	sdiv	r3, r8, r3
   d9e7a:	f7fb fc29 	bl	d56d0 <sniprintf>
   d9e7e:	e4fa      	b.n	d9876 <strftime+0x2ca>
   d9e80:	4404      	add	r4, r0
   d9e82:	42a6      	cmp	r6, r4
   d9e84:	d831      	bhi.n	d9eea <strftime+0x93e>
   d9e86:	e03b      	b.n	d9f00 <strftime+0x954>
   d9e88:	6a2b      	ldr	r3, [r5, #32]
   d9e8a:	2b00      	cmp	r3, #0
   d9e8c:	db2d      	blt.n	d9eea <strftime+0x93e>
   d9e8e:	f000 fa41 	bl	da314 <__tz_lock>
   d9e92:	9b06      	ldr	r3, [sp, #24]
   d9e94:	b91b      	cbnz	r3, d9e9e <strftime+0x8f2>
   d9e96:	f000 fa3f 	bl	da318 <_tzset_unlocked>
   d9e9a:	2301      	movs	r3, #1
   d9e9c:	9306      	str	r3, [sp, #24]
   d9e9e:	6a2b      	ldr	r3, [r5, #32]
   d9ea0:	4a1b      	ldr	r2, [pc, #108]	; (d9f10 <strftime+0x964>)
   d9ea2:	2b00      	cmp	r3, #0
   d9ea4:	bfd4      	ite	le
   d9ea6:	2300      	movle	r3, #0
   d9ea8:	2301      	movgt	r3, #1
   d9eaa:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d9eae:	4640      	mov	r0, r8
   d9eb0:	f000 f830 	bl	d9f14 <strlen>
   d9eb4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d9eb8:	193b      	adds	r3, r7, r4
   d9eba:	4420      	add	r0, r4
   d9ebc:	4284      	cmp	r4, r0
   d9ebe:	d00b      	beq.n	d9ed8 <strftime+0x92c>
   d9ec0:	9a02      	ldr	r2, [sp, #8]
   d9ec2:	4294      	cmp	r4, r2
   d9ec4:	d205      	bcs.n	d9ed2 <strftime+0x926>
   d9ec6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d9eca:	f803 2b01 	strb.w	r2, [r3], #1
   d9ece:	3401      	adds	r4, #1
   d9ed0:	e7f4      	b.n	d9ebc <strftime+0x910>
   d9ed2:	f000 fa20 	bl	da316 <__tz_unlock>
   d9ed6:	e013      	b.n	d9f00 <strftime+0x954>
   d9ed8:	f000 fa1d 	bl	da316 <__tz_unlock>
   d9edc:	e005      	b.n	d9eea <strftime+0x93e>
   d9ede:	9b02      	ldr	r3, [sp, #8]
   d9ee0:	429c      	cmp	r4, r3
   d9ee2:	d20d      	bcs.n	d9f00 <strftime+0x954>
   d9ee4:	2325      	movs	r3, #37	; 0x25
   d9ee6:	553b      	strb	r3, [r7, r4]
   d9ee8:	3401      	adds	r4, #1
   d9eea:	f899 3000 	ldrb.w	r3, [r9]
   d9eee:	b11b      	cbz	r3, d9ef8 <strftime+0x94c>
   d9ef0:	f109 0901 	add.w	r9, r9, #1
   d9ef4:	f7ff bb69 	b.w	d95ca <strftime+0x1e>
   d9ef8:	b126      	cbz	r6, d9f04 <strftime+0x958>
   d9efa:	2300      	movs	r3, #0
   d9efc:	553b      	strb	r3, [r7, r4]
   d9efe:	e001      	b.n	d9f04 <strftime+0x958>
   d9f00:	2000      	movs	r0, #0
   d9f02:	e000      	b.n	d9f06 <strftime+0x95a>
   d9f04:	4620      	mov	r0, r4
   d9f06:	b013      	add	sp, #76	; 0x4c
   d9f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9f0c:	000db05f 	.word	0x000db05f
   d9f10:	2003e10c 	.word	0x2003e10c

000d9f14 <strlen>:
   d9f14:	4603      	mov	r3, r0
   d9f16:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9f1a:	2a00      	cmp	r2, #0
   d9f1c:	d1fb      	bne.n	d9f16 <strlen+0x2>
   d9f1e:	1a18      	subs	r0, r3, r0
   d9f20:	3801      	subs	r0, #1
   d9f22:	4770      	bx	lr

000d9f24 <strncmp>:
   d9f24:	b530      	push	{r4, r5, lr}
   d9f26:	b182      	cbz	r2, d9f4a <strncmp+0x26>
   d9f28:	1e45      	subs	r5, r0, #1
   d9f2a:	3901      	subs	r1, #1
   d9f2c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d9f30:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9f34:	42a3      	cmp	r3, r4
   d9f36:	d106      	bne.n	d9f46 <strncmp+0x22>
   d9f38:	43ec      	mvns	r4, r5
   d9f3a:	4414      	add	r4, r2
   d9f3c:	42e0      	cmn	r0, r4
   d9f3e:	d001      	beq.n	d9f44 <strncmp+0x20>
   d9f40:	2b00      	cmp	r3, #0
   d9f42:	d1f3      	bne.n	d9f2c <strncmp+0x8>
   d9f44:	461c      	mov	r4, r3
   d9f46:	1b18      	subs	r0, r3, r4
   d9f48:	bd30      	pop	{r4, r5, pc}
   d9f4a:	4610      	mov	r0, r2
   d9f4c:	bd30      	pop	{r4, r5, pc}

000d9f4e <strrchr>:
   d9f4e:	b538      	push	{r3, r4, r5, lr}
   d9f50:	4603      	mov	r3, r0
   d9f52:	460d      	mov	r5, r1
   d9f54:	b141      	cbz	r1, d9f68 <strrchr+0x1a>
   d9f56:	2400      	movs	r4, #0
   d9f58:	4629      	mov	r1, r5
   d9f5a:	4618      	mov	r0, r3
   d9f5c:	f7ff fa80 	bl	d9460 <strchr>
   d9f60:	b130      	cbz	r0, d9f70 <strrchr+0x22>
   d9f62:	1c43      	adds	r3, r0, #1
   d9f64:	4604      	mov	r4, r0
   d9f66:	e7f7      	b.n	d9f58 <strrchr+0xa>
   d9f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9f6c:	f7ff ba78 	b.w	d9460 <strchr>
   d9f70:	4620      	mov	r0, r4
   d9f72:	bd38      	pop	{r3, r4, r5, pc}

000d9f74 <_strtol_r>:
   d9f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9f78:	4680      	mov	r8, r0
   d9f7a:	4840      	ldr	r0, [pc, #256]	; (da07c <_strtol_r+0x108>)
   d9f7c:	f8d0 9000 	ldr.w	r9, [r0]
   d9f80:	460f      	mov	r7, r1
   d9f82:	463d      	mov	r5, r7
   d9f84:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9f88:	eb09 0004 	add.w	r0, r9, r4
   d9f8c:	7840      	ldrb	r0, [r0, #1]
   d9f8e:	f000 0008 	and.w	r0, r0, #8
   d9f92:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d9f96:	b108      	cbz	r0, d9f9c <_strtol_r+0x28>
   d9f98:	462f      	mov	r7, r5
   d9f9a:	e7f2      	b.n	d9f82 <_strtol_r+0xe>
   d9f9c:	2c2d      	cmp	r4, #45	; 0x2d
   d9f9e:	d103      	bne.n	d9fa8 <_strtol_r+0x34>
   d9fa0:	1cbd      	adds	r5, r7, #2
   d9fa2:	787c      	ldrb	r4, [r7, #1]
   d9fa4:	2601      	movs	r6, #1
   d9fa6:	e003      	b.n	d9fb0 <_strtol_r+0x3c>
   d9fa8:	2c2b      	cmp	r4, #43	; 0x2b
   d9faa:	bf04      	itt	eq
   d9fac:	787c      	ldrbeq	r4, [r7, #1]
   d9fae:	1cbd      	addeq	r5, r7, #2
   d9fb0:	b113      	cbz	r3, d9fb8 <_strtol_r+0x44>
   d9fb2:	2b10      	cmp	r3, #16
   d9fb4:	d10a      	bne.n	d9fcc <_strtol_r+0x58>
   d9fb6:	e05b      	b.n	da070 <_strtol_r+0xfc>
   d9fb8:	2c30      	cmp	r4, #48	; 0x30
   d9fba:	d157      	bne.n	da06c <_strtol_r+0xf8>
   d9fbc:	7828      	ldrb	r0, [r5, #0]
   d9fbe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9fc2:	2858      	cmp	r0, #88	; 0x58
   d9fc4:	d14d      	bne.n	da062 <_strtol_r+0xee>
   d9fc6:	786c      	ldrb	r4, [r5, #1]
   d9fc8:	2310      	movs	r3, #16
   d9fca:	3502      	adds	r5, #2
   d9fcc:	2e00      	cmp	r6, #0
   d9fce:	bf14      	ite	ne
   d9fd0:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d9fd4:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d9fd8:	2700      	movs	r7, #0
   d9fda:	fbbc faf3 	udiv	sl, ip, r3
   d9fde:	4638      	mov	r0, r7
   d9fe0:	fb03 cc1a 	mls	ip, r3, sl, ip
   d9fe4:	eb09 0e04 	add.w	lr, r9, r4
   d9fe8:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9fec:	f01e 0f04 	tst.w	lr, #4
   d9ff0:	d001      	beq.n	d9ff6 <_strtol_r+0x82>
   d9ff2:	3c30      	subs	r4, #48	; 0x30
   d9ff4:	e00b      	b.n	da00e <_strtol_r+0x9a>
   d9ff6:	f01e 0e03 	ands.w	lr, lr, #3
   d9ffa:	d01b      	beq.n	da034 <_strtol_r+0xc0>
   d9ffc:	f1be 0f01 	cmp.w	lr, #1
   da000:	bf0c      	ite	eq
   da002:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   da006:	f04f 0e57 	movne.w	lr, #87	; 0x57
   da00a:	ebce 0404 	rsb	r4, lr, r4
   da00e:	42a3      	cmp	r3, r4
   da010:	dd10      	ble.n	da034 <_strtol_r+0xc0>
   da012:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   da016:	d00a      	beq.n	da02e <_strtol_r+0xba>
   da018:	4550      	cmp	r0, sl
   da01a:	d806      	bhi.n	da02a <_strtol_r+0xb6>
   da01c:	d101      	bne.n	da022 <_strtol_r+0xae>
   da01e:	4564      	cmp	r4, ip
   da020:	dc03      	bgt.n	da02a <_strtol_r+0xb6>
   da022:	fb03 4000 	mla	r0, r3, r0, r4
   da026:	2701      	movs	r7, #1
   da028:	e001      	b.n	da02e <_strtol_r+0xba>
   da02a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   da02e:	f815 4b01 	ldrb.w	r4, [r5], #1
   da032:	e7d7      	b.n	d9fe4 <_strtol_r+0x70>
   da034:	1c7b      	adds	r3, r7, #1
   da036:	d10c      	bne.n	da052 <_strtol_r+0xde>
   da038:	2e00      	cmp	r6, #0
   da03a:	f04f 0322 	mov.w	r3, #34	; 0x22
   da03e:	bf14      	ite	ne
   da040:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   da044:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   da048:	f8c8 3000 	str.w	r3, [r8]
   da04c:	b92a      	cbnz	r2, da05a <_strtol_r+0xe6>
   da04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da052:	b106      	cbz	r6, da056 <_strtol_r+0xe2>
   da054:	4240      	negs	r0, r0
   da056:	b172      	cbz	r2, da076 <_strtol_r+0x102>
   da058:	b107      	cbz	r7, da05c <_strtol_r+0xe8>
   da05a:	1e69      	subs	r1, r5, #1
   da05c:	6011      	str	r1, [r2, #0]
   da05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da062:	2430      	movs	r4, #48	; 0x30
   da064:	2b00      	cmp	r3, #0
   da066:	d1b1      	bne.n	d9fcc <_strtol_r+0x58>
   da068:	2308      	movs	r3, #8
   da06a:	e7af      	b.n	d9fcc <_strtol_r+0x58>
   da06c:	230a      	movs	r3, #10
   da06e:	e7ad      	b.n	d9fcc <_strtol_r+0x58>
   da070:	2c30      	cmp	r4, #48	; 0x30
   da072:	d0a3      	beq.n	d9fbc <_strtol_r+0x48>
   da074:	e7aa      	b.n	d9fcc <_strtol_r+0x58>
   da076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da07a:	bf00      	nop
   da07c:	2003e0a4 	.word	0x2003e0a4

000da080 <strtol>:
   da080:	4613      	mov	r3, r2
   da082:	460a      	mov	r2, r1
   da084:	4601      	mov	r1, r0
   da086:	4802      	ldr	r0, [pc, #8]	; (da090 <strtol+0x10>)
   da088:	6800      	ldr	r0, [r0, #0]
   da08a:	f7ff bf73 	b.w	d9f74 <_strtol_r>
   da08e:	bf00      	nop
   da090:	2003e108 	.word	0x2003e108

000da094 <_strtoul_r>:
   da094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da098:	4680      	mov	r8, r0
   da09a:	483c      	ldr	r0, [pc, #240]	; (da18c <_strtoul_r+0xf8>)
   da09c:	f8d0 9000 	ldr.w	r9, [r0]
   da0a0:	460e      	mov	r6, r1
   da0a2:	4635      	mov	r5, r6
   da0a4:	f815 4b01 	ldrb.w	r4, [r5], #1
   da0a8:	eb09 0004 	add.w	r0, r9, r4
   da0ac:	7840      	ldrb	r0, [r0, #1]
   da0ae:	f000 0008 	and.w	r0, r0, #8
   da0b2:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   da0b6:	b108      	cbz	r0, da0bc <_strtoul_r+0x28>
   da0b8:	462e      	mov	r6, r5
   da0ba:	e7f2      	b.n	da0a2 <_strtoul_r+0xe>
   da0bc:	2c2d      	cmp	r4, #45	; 0x2d
   da0be:	d103      	bne.n	da0c8 <_strtoul_r+0x34>
   da0c0:	1cb5      	adds	r5, r6, #2
   da0c2:	7874      	ldrb	r4, [r6, #1]
   da0c4:	2701      	movs	r7, #1
   da0c6:	e003      	b.n	da0d0 <_strtoul_r+0x3c>
   da0c8:	2c2b      	cmp	r4, #43	; 0x2b
   da0ca:	bf04      	itt	eq
   da0cc:	7874      	ldrbeq	r4, [r6, #1]
   da0ce:	1cb5      	addeq	r5, r6, #2
   da0d0:	b113      	cbz	r3, da0d8 <_strtoul_r+0x44>
   da0d2:	2b10      	cmp	r3, #16
   da0d4:	d10a      	bne.n	da0ec <_strtoul_r+0x58>
   da0d6:	e053      	b.n	da180 <_strtoul_r+0xec>
   da0d8:	2c30      	cmp	r4, #48	; 0x30
   da0da:	d14f      	bne.n	da17c <_strtoul_r+0xe8>
   da0dc:	7828      	ldrb	r0, [r5, #0]
   da0de:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da0e2:	2858      	cmp	r0, #88	; 0x58
   da0e4:	d145      	bne.n	da172 <_strtoul_r+0xde>
   da0e6:	786c      	ldrb	r4, [r5, #1]
   da0e8:	2310      	movs	r3, #16
   da0ea:	3502      	adds	r5, #2
   da0ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   da0f0:	2600      	movs	r6, #0
   da0f2:	fbbc fcf3 	udiv	ip, ip, r3
   da0f6:	fb03 fa0c 	mul.w	sl, r3, ip
   da0fa:	ea6f 0a0a 	mvn.w	sl, sl
   da0fe:	4630      	mov	r0, r6
   da100:	eb09 0e04 	add.w	lr, r9, r4
   da104:	f89e e001 	ldrb.w	lr, [lr, #1]
   da108:	f01e 0f04 	tst.w	lr, #4
   da10c:	d001      	beq.n	da112 <_strtoul_r+0x7e>
   da10e:	3c30      	subs	r4, #48	; 0x30
   da110:	e00b      	b.n	da12a <_strtoul_r+0x96>
   da112:	f01e 0e03 	ands.w	lr, lr, #3
   da116:	d01a      	beq.n	da14e <_strtoul_r+0xba>
   da118:	f1be 0f01 	cmp.w	lr, #1
   da11c:	bf0c      	ite	eq
   da11e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   da122:	f04f 0e57 	movne.w	lr, #87	; 0x57
   da126:	ebce 0404 	rsb	r4, lr, r4
   da12a:	42a3      	cmp	r3, r4
   da12c:	dd0f      	ble.n	da14e <_strtoul_r+0xba>
   da12e:	2e00      	cmp	r6, #0
   da130:	db08      	blt.n	da144 <_strtoul_r+0xb0>
   da132:	4560      	cmp	r0, ip
   da134:	d806      	bhi.n	da144 <_strtoul_r+0xb0>
   da136:	d101      	bne.n	da13c <_strtoul_r+0xa8>
   da138:	4554      	cmp	r4, sl
   da13a:	dc03      	bgt.n	da144 <_strtoul_r+0xb0>
   da13c:	fb03 4000 	mla	r0, r3, r0, r4
   da140:	2601      	movs	r6, #1
   da142:	e001      	b.n	da148 <_strtoul_r+0xb4>
   da144:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   da148:	f815 4b01 	ldrb.w	r4, [r5], #1
   da14c:	e7d8      	b.n	da100 <_strtoul_r+0x6c>
   da14e:	2e00      	cmp	r6, #0
   da150:	da07      	bge.n	da162 <_strtoul_r+0xce>
   da152:	2322      	movs	r3, #34	; 0x22
   da154:	f8c8 3000 	str.w	r3, [r8]
   da158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da15c:	b92a      	cbnz	r2, da16a <_strtoul_r+0xd6>
   da15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da162:	b107      	cbz	r7, da166 <_strtoul_r+0xd2>
   da164:	4240      	negs	r0, r0
   da166:	b172      	cbz	r2, da186 <_strtoul_r+0xf2>
   da168:	b106      	cbz	r6, da16c <_strtoul_r+0xd8>
   da16a:	1e69      	subs	r1, r5, #1
   da16c:	6011      	str	r1, [r2, #0]
   da16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da172:	2430      	movs	r4, #48	; 0x30
   da174:	2b00      	cmp	r3, #0
   da176:	d1b9      	bne.n	da0ec <_strtoul_r+0x58>
   da178:	2308      	movs	r3, #8
   da17a:	e7b7      	b.n	da0ec <_strtoul_r+0x58>
   da17c:	230a      	movs	r3, #10
   da17e:	e7b5      	b.n	da0ec <_strtoul_r+0x58>
   da180:	2c30      	cmp	r4, #48	; 0x30
   da182:	d0ab      	beq.n	da0dc <_strtoul_r+0x48>
   da184:	e7b2      	b.n	da0ec <_strtoul_r+0x58>
   da186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da18a:	bf00      	nop
   da18c:	2003e0a4 	.word	0x2003e0a4

000da190 <strtoul>:
   da190:	4613      	mov	r3, r2
   da192:	460a      	mov	r2, r1
   da194:	4601      	mov	r1, r0
   da196:	4802      	ldr	r0, [pc, #8]	; (da1a0 <strtoul+0x10>)
   da198:	6800      	ldr	r0, [r0, #0]
   da19a:	f7ff bf7b 	b.w	da094 <_strtoul_r>
   da19e:	bf00      	nop
   da1a0:	2003e108 	.word	0x2003e108

000da1a4 <__get_current_time_locale>:
   da1a4:	4b04      	ldr	r3, [pc, #16]	; (da1b8 <__get_current_time_locale+0x14>)
   da1a6:	4a05      	ldr	r2, [pc, #20]	; (da1bc <__get_current_time_locale+0x18>)
   da1a8:	6818      	ldr	r0, [r3, #0]
   da1aa:	4b05      	ldr	r3, [pc, #20]	; (da1c0 <__get_current_time_locale+0x1c>)
   da1ac:	2800      	cmp	r0, #0
   da1ae:	bf14      	ite	ne
   da1b0:	4610      	movne	r0, r2
   da1b2:	4618      	moveq	r0, r3
   da1b4:	4770      	bx	lr
   da1b6:	bf00      	nop
   da1b8:	2003e6c8 	.word	0x2003e6c8
   da1bc:	2003e6cc 	.word	0x2003e6cc
   da1c0:	000db198 	.word	0x000db198

000da1c4 <__tzcalc_limits>:
   da1c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da1c8:	4604      	mov	r4, r0
   da1ca:	f000 fa87 	bl	da6dc <__gettzinfo>
   da1ce:	f240 73b1 	movw	r3, #1969	; 0x7b1
   da1d2:	429c      	cmp	r4, r3
   da1d4:	f340 8096 	ble.w	da304 <__tzcalc_limits+0x140>
   da1d8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   da1dc:	18e3      	adds	r3, r4, r3
   da1de:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   da1e2:	109b      	asrs	r3, r3, #2
   da1e4:	f240 156d 	movw	r5, #365	; 0x16d
   da1e8:	fb05 3502 	mla	r5, r5, r2, r3
   da1ec:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   da1f0:	f06f 0363 	mvn.w	r3, #99	; 0x63
   da1f4:	fb92 f3f3 	sdiv	r3, r2, r3
   da1f8:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   da1fc:	442b      	add	r3, r5
   da1fe:	18a5      	adds	r5, r4, r2
   da200:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da204:	fb95 f5f2 	sdiv	r5, r5, r2
   da208:	441d      	add	r5, r3
   da20a:	2364      	movs	r3, #100	; 0x64
   da20c:	fb94 f7f2 	sdiv	r7, r4, r2
   da210:	fb94 f6f3 	sdiv	r6, r4, r3
   da214:	fb02 4717 	mls	r7, r2, r7, r4
   da218:	fb03 4616 	mls	r6, r3, r6, r4
   da21c:	f100 0338 	add.w	r3, r0, #56	; 0x38
   da220:	fab7 fe87 	clz	lr, r7
   da224:	9301      	str	r3, [sp, #4]
   da226:	f004 0303 	and.w	r3, r4, #3
   da22a:	6044      	str	r4, [r0, #4]
   da22c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   da230:	4601      	mov	r1, r0
   da232:	9300      	str	r3, [sp, #0]
   da234:	f04f 0c07 	mov.w	ip, #7
   da238:	7a0b      	ldrb	r3, [r1, #8]
   da23a:	2b4a      	cmp	r3, #74	; 0x4a
   da23c:	d10e      	bne.n	da25c <__tzcalc_limits+0x98>
   da23e:	694b      	ldr	r3, [r1, #20]
   da240:	9a00      	ldr	r2, [sp, #0]
   da242:	18ec      	adds	r4, r5, r3
   da244:	b902      	cbnz	r2, da248 <__tzcalc_limits+0x84>
   da246:	b906      	cbnz	r6, da24a <__tzcalc_limits+0x86>
   da248:	b927      	cbnz	r7, da254 <__tzcalc_limits+0x90>
   da24a:	2b3b      	cmp	r3, #59	; 0x3b
   da24c:	bfd4      	ite	le
   da24e:	2300      	movle	r3, #0
   da250:	2301      	movgt	r3, #1
   da252:	e000      	b.n	da256 <__tzcalc_limits+0x92>
   da254:	2300      	movs	r3, #0
   da256:	4423      	add	r3, r4
   da258:	3b01      	subs	r3, #1
   da25a:	e03f      	b.n	da2dc <__tzcalc_limits+0x118>
   da25c:	2b44      	cmp	r3, #68	; 0x44
   da25e:	d102      	bne.n	da266 <__tzcalc_limits+0xa2>
   da260:	694b      	ldr	r3, [r1, #20]
   da262:	442b      	add	r3, r5
   da264:	e03a      	b.n	da2dc <__tzcalc_limits+0x118>
   da266:	9b00      	ldr	r3, [sp, #0]
   da268:	b92b      	cbnz	r3, da276 <__tzcalc_limits+0xb2>
   da26a:	2e00      	cmp	r6, #0
   da26c:	bf0c      	ite	eq
   da26e:	46f0      	moveq	r8, lr
   da270:	f04f 0801 	movne.w	r8, #1
   da274:	e000      	b.n	da278 <__tzcalc_limits+0xb4>
   da276:	46f0      	mov	r8, lr
   da278:	4b24      	ldr	r3, [pc, #144]	; (da30c <__tzcalc_limits+0x148>)
   da27a:	68cc      	ldr	r4, [r1, #12]
   da27c:	2230      	movs	r2, #48	; 0x30
   da27e:	fb02 3808 	mla	r8, r2, r8, r3
   da282:	f1a8 0a04 	sub.w	sl, r8, #4
   da286:	46a9      	mov	r9, r5
   da288:	2301      	movs	r3, #1
   da28a:	42a3      	cmp	r3, r4
   da28c:	da04      	bge.n	da298 <__tzcalc_limits+0xd4>
   da28e:	f85a bf04 	ldr.w	fp, [sl, #4]!
   da292:	3301      	adds	r3, #1
   da294:	44d9      	add	r9, fp
   da296:	e7f8      	b.n	da28a <__tzcalc_limits+0xc6>
   da298:	f109 0304 	add.w	r3, r9, #4
   da29c:	fb93 fbfc 	sdiv	fp, r3, ip
   da2a0:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   da2a4:	2c01      	cmp	r4, #1
   da2a6:	ebca 0a03 	rsb	sl, sl, r3
   da2aa:	694b      	ldr	r3, [r1, #20]
   da2ac:	bfb8      	it	lt
   da2ae:	2401      	movlt	r4, #1
   da2b0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   da2b4:	ebb3 0a0a 	subs.w	sl, r3, sl
   da2b8:	690b      	ldr	r3, [r1, #16]
   da2ba:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   da2be:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   da2c2:	bf48      	it	mi
   da2c4:	f10a 0a07 	addmi.w	sl, sl, #7
   da2c8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   da2cc:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   da2d0:	4453      	add	r3, sl
   da2d2:	42a3      	cmp	r3, r4
   da2d4:	db01      	blt.n	da2da <__tzcalc_limits+0x116>
   da2d6:	3b07      	subs	r3, #7
   da2d8:	e7fb      	b.n	da2d2 <__tzcalc_limits+0x10e>
   da2da:	444b      	add	r3, r9
   da2dc:	698c      	ldr	r4, [r1, #24]
   da2de:	4a0c      	ldr	r2, [pc, #48]	; (da310 <__tzcalc_limits+0x14c>)
   da2e0:	fb02 4303 	mla	r3, r2, r3, r4
   da2e4:	6a0c      	ldr	r4, [r1, #32]
   da2e6:	4423      	add	r3, r4
   da2e8:	f841 3f1c 	str.w	r3, [r1, #28]!
   da2ec:	9b01      	ldr	r3, [sp, #4]
   da2ee:	4299      	cmp	r1, r3
   da2f0:	d1a2      	bne.n	da238 <__tzcalc_limits+0x74>
   da2f2:	69c3      	ldr	r3, [r0, #28]
   da2f4:	6b82      	ldr	r2, [r0, #56]	; 0x38
   da2f6:	4293      	cmp	r3, r2
   da2f8:	bfac      	ite	ge
   da2fa:	2300      	movge	r3, #0
   da2fc:	2301      	movlt	r3, #1
   da2fe:	6003      	str	r3, [r0, #0]
   da300:	2001      	movs	r0, #1
   da302:	e000      	b.n	da306 <__tzcalc_limits+0x142>
   da304:	2000      	movs	r0, #0
   da306:	b003      	add	sp, #12
   da308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da30c:	000dafb0 	.word	0x000dafb0
   da310:	00015180 	.word	0x00015180

000da314 <__tz_lock>:
   da314:	4770      	bx	lr

000da316 <__tz_unlock>:
   da316:	4770      	bx	lr

000da318 <_tzset_unlocked>:
   da318:	4b01      	ldr	r3, [pc, #4]	; (da320 <_tzset_unlocked+0x8>)
   da31a:	6818      	ldr	r0, [r3, #0]
   da31c:	f000 b802 	b.w	da324 <_tzset_unlocked_r>
   da320:	2003e108 	.word	0x2003e108

000da324 <_tzset_unlocked_r>:
   da324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da328:	b08d      	sub	sp, #52	; 0x34
   da32a:	4607      	mov	r7, r0
   da32c:	f000 f9d6 	bl	da6dc <__gettzinfo>
   da330:	49b0      	ldr	r1, [pc, #704]	; (da5f4 <_tzset_unlocked_r+0x2d0>)
   da332:	4eb1      	ldr	r6, [pc, #708]	; (da5f8 <_tzset_unlocked_r+0x2d4>)
   da334:	4604      	mov	r4, r0
   da336:	4638      	mov	r0, r7
   da338:	f000 f9c8 	bl	da6cc <_getenv_r>
   da33c:	4605      	mov	r5, r0
   da33e:	b960      	cbnz	r0, da35a <_tzset_unlocked_r+0x36>
   da340:	4bae      	ldr	r3, [pc, #696]	; (da5fc <_tzset_unlocked_r+0x2d8>)
   da342:	4aaf      	ldr	r2, [pc, #700]	; (da600 <_tzset_unlocked_r+0x2dc>)
   da344:	6018      	str	r0, [r3, #0]
   da346:	4baf      	ldr	r3, [pc, #700]	; (da604 <_tzset_unlocked_r+0x2e0>)
   da348:	6018      	str	r0, [r3, #0]
   da34a:	4baf      	ldr	r3, [pc, #700]	; (da608 <_tzset_unlocked_r+0x2e4>)
   da34c:	6830      	ldr	r0, [r6, #0]
   da34e:	601a      	str	r2, [r3, #0]
   da350:	605a      	str	r2, [r3, #4]
   da352:	f7fb f995 	bl	d5680 <free>
   da356:	6035      	str	r5, [r6, #0]
   da358:	e148      	b.n	da5ec <_tzset_unlocked_r+0x2c8>
   da35a:	6831      	ldr	r1, [r6, #0]
   da35c:	b979      	cbnz	r1, da37e <_tzset_unlocked_r+0x5a>
   da35e:	6830      	ldr	r0, [r6, #0]
   da360:	f7fb f98e 	bl	d5680 <free>
   da364:	4628      	mov	r0, r5
   da366:	f7ff fdd5 	bl	d9f14 <strlen>
   da36a:	1c41      	adds	r1, r0, #1
   da36c:	4638      	mov	r0, r7
   da36e:	f7fb f9c7 	bl	d5700 <_malloc_r>
   da372:	6030      	str	r0, [r6, #0]
   da374:	b148      	cbz	r0, da38a <_tzset_unlocked_r+0x66>
   da376:	4629      	mov	r1, r5
   da378:	f7ff f894 	bl	d94a4 <strcpy>
   da37c:	e005      	b.n	da38a <_tzset_unlocked_r+0x66>
   da37e:	f7ff f887 	bl	d9490 <strcmp>
   da382:	2800      	cmp	r0, #0
   da384:	f000 8132 	beq.w	da5ec <_tzset_unlocked_r+0x2c8>
   da388:	e7e9      	b.n	da35e <_tzset_unlocked_r+0x3a>
   da38a:	782b      	ldrb	r3, [r5, #0]
   da38c:	4a9f      	ldr	r2, [pc, #636]	; (da60c <_tzset_unlocked_r+0x2e8>)
   da38e:	49a0      	ldr	r1, [pc, #640]	; (da610 <_tzset_unlocked_r+0x2ec>)
   da390:	2b3a      	cmp	r3, #58	; 0x3a
   da392:	bf08      	it	eq
   da394:	3501      	addeq	r5, #1
   da396:	ae0a      	add	r6, sp, #40	; 0x28
   da398:	4633      	mov	r3, r6
   da39a:	4628      	mov	r0, r5
   da39c:	f7fb f988 	bl	d56b0 <siscanf>
   da3a0:	2800      	cmp	r0, #0
   da3a2:	f340 8123 	ble.w	da5ec <_tzset_unlocked_r+0x2c8>
   da3a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da3a8:	18ef      	adds	r7, r5, r3
   da3aa:	5ceb      	ldrb	r3, [r5, r3]
   da3ac:	2b2d      	cmp	r3, #45	; 0x2d
   da3ae:	d103      	bne.n	da3b8 <_tzset_unlocked_r+0x94>
   da3b0:	3701      	adds	r7, #1
   da3b2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   da3b6:	e003      	b.n	da3c0 <_tzset_unlocked_r+0x9c>
   da3b8:	2b2b      	cmp	r3, #43	; 0x2b
   da3ba:	bf08      	it	eq
   da3bc:	3701      	addeq	r7, #1
   da3be:	2501      	movs	r5, #1
   da3c0:	f10d 0a20 	add.w	sl, sp, #32
   da3c4:	f10d 0b1e 	add.w	fp, sp, #30
   da3c8:	f04f 0800 	mov.w	r8, #0
   da3cc:	9603      	str	r6, [sp, #12]
   da3ce:	f8cd a008 	str.w	sl, [sp, #8]
   da3d2:	9601      	str	r6, [sp, #4]
   da3d4:	f8cd b000 	str.w	fp, [sp]
   da3d8:	4633      	mov	r3, r6
   da3da:	aa07      	add	r2, sp, #28
   da3dc:	498d      	ldr	r1, [pc, #564]	; (da614 <_tzset_unlocked_r+0x2f0>)
   da3de:	f8ad 801e 	strh.w	r8, [sp, #30]
   da3e2:	4638      	mov	r0, r7
   da3e4:	f8ad 8020 	strh.w	r8, [sp, #32]
   da3e8:	f7fb f962 	bl	d56b0 <siscanf>
   da3ec:	4540      	cmp	r0, r8
   da3ee:	f340 80fd 	ble.w	da5ec <_tzset_unlocked_r+0x2c8>
   da3f2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da3f6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da3fa:	f8df 9224 	ldr.w	r9, [pc, #548]	; da620 <_tzset_unlocked_r+0x2fc>
   da3fe:	213c      	movs	r1, #60	; 0x3c
   da400:	fb01 3302 	mla	r3, r1, r2, r3
   da404:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da408:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da40c:	fb01 3302 	mla	r3, r1, r2, r3
   da410:	435d      	muls	r5, r3
   da412:	6225      	str	r5, [r4, #32]
   da414:	4d7c      	ldr	r5, [pc, #496]	; (da608 <_tzset_unlocked_r+0x2e4>)
   da416:	4b7d      	ldr	r3, [pc, #500]	; (da60c <_tzset_unlocked_r+0x2e8>)
   da418:	602b      	str	r3, [r5, #0]
   da41a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da41c:	497c      	ldr	r1, [pc, #496]	; (da610 <_tzset_unlocked_r+0x2ec>)
   da41e:	441f      	add	r7, r3
   da420:	464a      	mov	r2, r9
   da422:	4633      	mov	r3, r6
   da424:	4638      	mov	r0, r7
   da426:	f7fb f943 	bl	d56b0 <siscanf>
   da42a:	4540      	cmp	r0, r8
   da42c:	dc08      	bgt.n	da440 <_tzset_unlocked_r+0x11c>
   da42e:	682b      	ldr	r3, [r5, #0]
   da430:	606b      	str	r3, [r5, #4]
   da432:	4b72      	ldr	r3, [pc, #456]	; (da5fc <_tzset_unlocked_r+0x2d8>)
   da434:	6a22      	ldr	r2, [r4, #32]
   da436:	601a      	str	r2, [r3, #0]
   da438:	4b72      	ldr	r3, [pc, #456]	; (da604 <_tzset_unlocked_r+0x2e0>)
   da43a:	f8c3 8000 	str.w	r8, [r3]
   da43e:	e0d5      	b.n	da5ec <_tzset_unlocked_r+0x2c8>
   da440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da442:	f8c5 9004 	str.w	r9, [r5, #4]
   da446:	18fd      	adds	r5, r7, r3
   da448:	5cfb      	ldrb	r3, [r7, r3]
   da44a:	2b2d      	cmp	r3, #45	; 0x2d
   da44c:	d103      	bne.n	da456 <_tzset_unlocked_r+0x132>
   da44e:	3501      	adds	r5, #1
   da450:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   da454:	e003      	b.n	da45e <_tzset_unlocked_r+0x13a>
   da456:	2b2b      	cmp	r3, #43	; 0x2b
   da458:	bf08      	it	eq
   da45a:	3501      	addeq	r5, #1
   da45c:	2701      	movs	r7, #1
   da45e:	2300      	movs	r3, #0
   da460:	f8ad 301c 	strh.w	r3, [sp, #28]
   da464:	f8ad 301e 	strh.w	r3, [sp, #30]
   da468:	f8ad 3020 	strh.w	r3, [sp, #32]
   da46c:	930a      	str	r3, [sp, #40]	; 0x28
   da46e:	9603      	str	r6, [sp, #12]
   da470:	f8cd a008 	str.w	sl, [sp, #8]
   da474:	9601      	str	r6, [sp, #4]
   da476:	f8cd b000 	str.w	fp, [sp]
   da47a:	4633      	mov	r3, r6
   da47c:	aa07      	add	r2, sp, #28
   da47e:	4965      	ldr	r1, [pc, #404]	; (da614 <_tzset_unlocked_r+0x2f0>)
   da480:	4628      	mov	r0, r5
   da482:	f7fb f915 	bl	d56b0 <siscanf>
   da486:	2800      	cmp	r0, #0
   da488:	dc04      	bgt.n	da494 <_tzset_unlocked_r+0x170>
   da48a:	6a23      	ldr	r3, [r4, #32]
   da48c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   da490:	63e3      	str	r3, [r4, #60]	; 0x3c
   da492:	e00e      	b.n	da4b2 <_tzset_unlocked_r+0x18e>
   da494:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da498:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da49c:	213c      	movs	r1, #60	; 0x3c
   da49e:	fb01 3302 	mla	r3, r1, r2, r3
   da4a2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da4a6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da4aa:	fb01 3302 	mla	r3, r1, r2, r3
   da4ae:	435f      	muls	r7, r3
   da4b0:	63e7      	str	r7, [r4, #60]	; 0x3c
   da4b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da4b4:	4627      	mov	r7, r4
   da4b6:	441d      	add	r5, r3
   da4b8:	f04f 0900 	mov.w	r9, #0
   da4bc:	782b      	ldrb	r3, [r5, #0]
   da4be:	2b2c      	cmp	r3, #44	; 0x2c
   da4c0:	bf08      	it	eq
   da4c2:	3501      	addeq	r5, #1
   da4c4:	f895 8000 	ldrb.w	r8, [r5]
   da4c8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   da4cc:	d126      	bne.n	da51c <_tzset_unlocked_r+0x1f8>
   da4ce:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   da4d2:	9302      	str	r3, [sp, #8]
   da4d4:	ab09      	add	r3, sp, #36	; 0x24
   da4d6:	9300      	str	r3, [sp, #0]
   da4d8:	9603      	str	r6, [sp, #12]
   da4da:	9601      	str	r6, [sp, #4]
   da4dc:	4633      	mov	r3, r6
   da4de:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   da4e2:	494d      	ldr	r1, [pc, #308]	; (da618 <_tzset_unlocked_r+0x2f4>)
   da4e4:	4628      	mov	r0, r5
   da4e6:	f7fb f8e3 	bl	d56b0 <siscanf>
   da4ea:	2803      	cmp	r0, #3
   da4ec:	d17e      	bne.n	da5ec <_tzset_unlocked_r+0x2c8>
   da4ee:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   da4f2:	1e4b      	subs	r3, r1, #1
   da4f4:	2b0b      	cmp	r3, #11
   da4f6:	d879      	bhi.n	da5ec <_tzset_unlocked_r+0x2c8>
   da4f8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   da4fc:	1e53      	subs	r3, r2, #1
   da4fe:	2b04      	cmp	r3, #4
   da500:	d874      	bhi.n	da5ec <_tzset_unlocked_r+0x2c8>
   da502:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   da506:	2b06      	cmp	r3, #6
   da508:	d870      	bhi.n	da5ec <_tzset_unlocked_r+0x2c8>
   da50a:	f887 8008 	strb.w	r8, [r7, #8]
   da50e:	60f9      	str	r1, [r7, #12]
   da510:	613a      	str	r2, [r7, #16]
   da512:	617b      	str	r3, [r7, #20]
   da514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da516:	eb05 0803 	add.w	r8, r5, r3
   da51a:	e02a      	b.n	da572 <_tzset_unlocked_r+0x24e>
   da51c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   da520:	bf06      	itte	eq
   da522:	3501      	addeq	r5, #1
   da524:	4643      	moveq	r3, r8
   da526:	2344      	movne	r3, #68	; 0x44
   da528:	220a      	movs	r2, #10
   da52a:	a90b      	add	r1, sp, #44	; 0x2c
   da52c:	4628      	mov	r0, r5
   da52e:	9305      	str	r3, [sp, #20]
   da530:	f7ff fe2e 	bl	da190 <strtoul>
   da534:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   da538:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   da53c:	4545      	cmp	r5, r8
   da53e:	9b05      	ldr	r3, [sp, #20]
   da540:	d114      	bne.n	da56c <_tzset_unlocked_r+0x248>
   da542:	234d      	movs	r3, #77	; 0x4d
   da544:	f1b9 0f00 	cmp.w	r9, #0
   da548:	d107      	bne.n	da55a <_tzset_unlocked_r+0x236>
   da54a:	7223      	strb	r3, [r4, #8]
   da54c:	2303      	movs	r3, #3
   da54e:	60e3      	str	r3, [r4, #12]
   da550:	2302      	movs	r3, #2
   da552:	6123      	str	r3, [r4, #16]
   da554:	f8c4 9014 	str.w	r9, [r4, #20]
   da558:	e00b      	b.n	da572 <_tzset_unlocked_r+0x24e>
   da55a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   da55e:	230b      	movs	r3, #11
   da560:	62a3      	str	r3, [r4, #40]	; 0x28
   da562:	2301      	movs	r3, #1
   da564:	62e3      	str	r3, [r4, #44]	; 0x2c
   da566:	2300      	movs	r3, #0
   da568:	6323      	str	r3, [r4, #48]	; 0x30
   da56a:	e002      	b.n	da572 <_tzset_unlocked_r+0x24e>
   da56c:	b280      	uxth	r0, r0
   da56e:	723b      	strb	r3, [r7, #8]
   da570:	6178      	str	r0, [r7, #20]
   da572:	2302      	movs	r3, #2
   da574:	f8ad 301c 	strh.w	r3, [sp, #28]
   da578:	2300      	movs	r3, #0
   da57a:	f8ad 301e 	strh.w	r3, [sp, #30]
   da57e:	f8ad 3020 	strh.w	r3, [sp, #32]
   da582:	930a      	str	r3, [sp, #40]	; 0x28
   da584:	f898 3000 	ldrb.w	r3, [r8]
   da588:	2b2f      	cmp	r3, #47	; 0x2f
   da58a:	d10b      	bne.n	da5a4 <_tzset_unlocked_r+0x280>
   da58c:	9603      	str	r6, [sp, #12]
   da58e:	f8cd a008 	str.w	sl, [sp, #8]
   da592:	9601      	str	r6, [sp, #4]
   da594:	f8cd b000 	str.w	fp, [sp]
   da598:	4633      	mov	r3, r6
   da59a:	aa07      	add	r2, sp, #28
   da59c:	491f      	ldr	r1, [pc, #124]	; (da61c <_tzset_unlocked_r+0x2f8>)
   da59e:	4640      	mov	r0, r8
   da5a0:	f7fb f886 	bl	d56b0 <siscanf>
   da5a4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da5a8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da5ac:	213c      	movs	r1, #60	; 0x3c
   da5ae:	fb01 3302 	mla	r3, r1, r2, r3
   da5b2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da5b6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da5ba:	fb01 3302 	mla	r3, r1, r2, r3
   da5be:	61bb      	str	r3, [r7, #24]
   da5c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   da5c2:	f109 0901 	add.w	r9, r9, #1
   da5c6:	f1b9 0f02 	cmp.w	r9, #2
   da5ca:	4445      	add	r5, r8
   da5cc:	f107 071c 	add.w	r7, r7, #28
   da5d0:	f47f af74 	bne.w	da4bc <_tzset_unlocked_r+0x198>
   da5d4:	6860      	ldr	r0, [r4, #4]
   da5d6:	f7ff fdf5 	bl	da1c4 <__tzcalc_limits>
   da5da:	4b08      	ldr	r3, [pc, #32]	; (da5fc <_tzset_unlocked_r+0x2d8>)
   da5dc:	6a22      	ldr	r2, [r4, #32]
   da5de:	601a      	str	r2, [r3, #0]
   da5e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   da5e2:	1a9b      	subs	r3, r3, r2
   da5e4:	4a07      	ldr	r2, [pc, #28]	; (da604 <_tzset_unlocked_r+0x2e0>)
   da5e6:	bf18      	it	ne
   da5e8:	2301      	movne	r3, #1
   da5ea:	6013      	str	r3, [r2, #0]
   da5ec:	b00d      	add	sp, #52	; 0x34
   da5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da5f2:	bf00      	nop
   da5f4:	000db294 	.word	0x000db294
   da5f8:	2003e7e0 	.word	0x2003e7e0
   da5fc:	2003e7e8 	.word	0x2003e7e8
   da600:	000db297 	.word	0x000db297
   da604:	2003e7e4 	.word	0x2003e7e4
   da608:	2003e10c 	.word	0x2003e10c
   da60c:	2003e7d3 	.word	0x2003e7d3
   da610:	000db29b 	.word	0x000db29b
   da614:	000db2be 	.word	0x000db2be
   da618:	000db2aa 	.word	0x000db2aa
   da61c:	000db2bd 	.word	0x000db2bd
   da620:	2003e7c8 	.word	0x2003e7c8

000da624 <abs>:
   da624:	2800      	cmp	r0, #0
   da626:	bfb8      	it	lt
   da628:	4240      	neglt	r0, r0
   da62a:	4770      	bx	lr

000da62c <div>:
   da62c:	2900      	cmp	r1, #0
   da62e:	b510      	push	{r4, lr}
   da630:	fb91 f4f2 	sdiv	r4, r1, r2
   da634:	fb02 1314 	mls	r3, r2, r4, r1
   da638:	db04      	blt.n	da644 <div+0x18>
   da63a:	2b00      	cmp	r3, #0
   da63c:	da07      	bge.n	da64e <div+0x22>
   da63e:	3401      	adds	r4, #1
   da640:	1a9b      	subs	r3, r3, r2
   da642:	e004      	b.n	da64e <div+0x22>
   da644:	2b00      	cmp	r3, #0
   da646:	bfc4      	itt	gt
   da648:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   da64c:	189b      	addgt	r3, r3, r2
   da64e:	6004      	str	r4, [r0, #0]
   da650:	6043      	str	r3, [r0, #4]
   da652:	bd10      	pop	{r4, pc}

000da654 <_findenv_r>:
   da654:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da658:	4607      	mov	r7, r0
   da65a:	468b      	mov	fp, r1
   da65c:	4690      	mov	r8, r2
   da65e:	f000 f845 	bl	da6ec <__env_lock>
   da662:	4b19      	ldr	r3, [pc, #100]	; (da6c8 <_findenv_r+0x74>)
   da664:	681d      	ldr	r5, [r3, #0]
   da666:	469a      	mov	sl, r3
   da668:	b13d      	cbz	r5, da67a <_findenv_r+0x26>
   da66a:	465c      	mov	r4, fp
   da66c:	4623      	mov	r3, r4
   da66e:	f813 2b01 	ldrb.w	r2, [r3], #1
   da672:	b142      	cbz	r2, da686 <_findenv_r+0x32>
   da674:	2a3d      	cmp	r2, #61	; 0x3d
   da676:	461c      	mov	r4, r3
   da678:	d1f8      	bne.n	da66c <_findenv_r+0x18>
   da67a:	4638      	mov	r0, r7
   da67c:	f000 f837 	bl	da6ee <__env_unlock>
   da680:	2000      	movs	r0, #0
   da682:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da686:	ebcb 0404 	rsb	r4, fp, r4
   da68a:	46a9      	mov	r9, r5
   da68c:	f859 0b04 	ldr.w	r0, [r9], #4
   da690:	2800      	cmp	r0, #0
   da692:	d0f2      	beq.n	da67a <_findenv_r+0x26>
   da694:	4622      	mov	r2, r4
   da696:	4659      	mov	r1, fp
   da698:	f7ff fc44 	bl	d9f24 <strncmp>
   da69c:	b988      	cbnz	r0, da6c2 <_findenv_r+0x6e>
   da69e:	f859 3c04 	ldr.w	r3, [r9, #-4]
   da6a2:	191e      	adds	r6, r3, r4
   da6a4:	5d1b      	ldrb	r3, [r3, r4]
   da6a6:	2b3d      	cmp	r3, #61	; 0x3d
   da6a8:	d10b      	bne.n	da6c2 <_findenv_r+0x6e>
   da6aa:	f8da 3000 	ldr.w	r3, [sl]
   da6ae:	1aed      	subs	r5, r5, r3
   da6b0:	10ad      	asrs	r5, r5, #2
   da6b2:	4638      	mov	r0, r7
   da6b4:	f8c8 5000 	str.w	r5, [r8]
   da6b8:	f000 f819 	bl	da6ee <__env_unlock>
   da6bc:	1c70      	adds	r0, r6, #1
   da6be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da6c2:	464d      	mov	r5, r9
   da6c4:	e7e1      	b.n	da68a <_findenv_r+0x36>
   da6c6:	bf00      	nop
   da6c8:	2003e154 	.word	0x2003e154

000da6cc <_getenv_r>:
   da6cc:	b507      	push	{r0, r1, r2, lr}
   da6ce:	aa01      	add	r2, sp, #4
   da6d0:	f7ff ffc0 	bl	da654 <_findenv_r>
   da6d4:	b003      	add	sp, #12
   da6d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da6dc <__gettzinfo>:
   da6dc:	4800      	ldr	r0, [pc, #0]	; (da6e0 <__gettzinfo+0x4>)
   da6de:	4770      	bx	lr
   da6e0:	2003e114 	.word	0x2003e114

000da6e4 <labs>:
   da6e4:	2800      	cmp	r0, #0
   da6e6:	bfb8      	it	lt
   da6e8:	4240      	neglt	r0, r0
   da6ea:	4770      	bx	lr

000da6ec <__env_lock>:
   da6ec:	4770      	bx	lr

000da6ee <__env_unlock>:
   da6ee:	4770      	bx	lr

000da6f0 <dynalib_user>:
   da6f0:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   da700:	0000 0000                                   ....

000da704 <_ZTVN5spark10LogHandlerE>:
	...
   da714:	40a9 000d 4177 000d                         .@..wA..

000da71c <_ZTVN5spark16SerialLogHandlerE>:
	...
   da724:	41bd 000d 41f1 000d 7099 000d 4179 000d     .A...A...p..yA..

000da734 <_ZL13releaseNumber>:
   da734:	2e30 0033 0000 6554 706d 7320 6565 736d     0.3...Temp seems
   da744:	7720 6168 6b63 203a 3325 312e 0066 6554      whack: %3.1f.Te
   da754:	706d 7265 7461 7275 2065 7369 203a 3325     mperature is: %3
   da764:	312e 0066 5452 2043 6c43 636f 206b 6554     .1f.RTC Clock Te
   da774:	7473 4620 6961 656c 0064 5452 2043 6c43     st Failed.RTC Cl
   da784:	636f 206b 6150 7373 7365 2d20 5420 6d69     ock Passes - Tim
   da794:	2065 7369 2520 0073 6552 6573 7474 6e69     e is %s.Resettin
   da7a4:	2067 6e69 7020 6f72 7267 7365 0073 7246     g in progress.Fr
   da7b4:	6d61 5220 7365 7465 3120 342f 6420 6e6f     am Reset 1/4 don
   da7c4:	0065 7645 6e65 0074 7246 6d61 5220 7365     e.Event.Fram Res
   da7d4:	7465 3120 322f 6420 6e6f 0065 7246 6d61     et 1/2 done.Fram
   da7e4:	5220 7365 7465 3320 342f 6420 6e6f 0065      Reset 3/4 done.
   da7f4:	7246 6d61 5220 7365 7465 6420 6e6f 0065     Fram Reset done.
   da804:	5246 4d41 5420 7365 2074 6146 6c69 6465     FRAM Test Failed
   da814:	2d20 4d20 7369 6973 676e 4620 4152 004d      - Missing FRAM.
   da824:	5246 4d41 5420 7365 2074 6146 6c69 6465     FRAM Test Failed
   da834:	2d20 4620 4152 204d 6552 6461 4520 7272      - FRAM Read Err
   da844:	726f 4600 4152 204d 6554 7473 5020 7361     or.FRAM Test Pas
   da854:	6573 0064 6552 656c 7361 0065 6542 6967     sed.Release.Begi
   da864:	6e6e 6e69 2067 6554 7473 5220 6e75 5400     nning Test Run.T
   da874:	7365 2074 7453 7261 0074 6552 7573 746c     est Start.Result
   da884:	5000 656c 7361 2065 7270 7365 2073 7375     .Please press us
   da894:	7265 7320 6977 6374 0068 7753 7469 6863     er switch.Switch
   da8a4:	5420 7365 0074 6150 7373 6465 2d20 5020      Test.Passed - P
   da8b4:	6572 7373 6420 7465 6365 6574 0064 6554     ress detected.Te
   da8c4:	7473 6e69 2067 6168 746c 6465 5400 7365     sting halted.Tes
   da8d4:	2074 6146 6c69 6465 6552 6573 2074 6544     t FailedReset De
   da8e4:	6976 6563 7420 206f 6f43 746e 6e69 6575     vice to Continue
   da8f4:	0000 0000                                   ....

000da8f8 <_ZTV14MCP79410EEPROM>:
	...
   da900:	491f 000d 4941 000d 4915 000d 4919 000d     .I..AI...I...I..
   da910:	495d 000d 4dc7 000d 5089 000d               ]I...M...P..

000da91c <_ZTV12MCP79410SRAM>:
	...
   da924:	491d 000d 4933 000d 490d 000d 4911 000d     .I..3I...I...I..
   da934:	495d 000d 4dff 000d 4fcd 000d 6579 7261     ]I...M...O..year
   da944:	253d 3230 2078 6f6d 746e 3d68 3025 7832     =%02x month=%02x
   da954:	6420 7961 664f 6f4d 746e 3d68 3025 7832      dayOfMonth=%02x
   da964:	6420 7961 664f 6557 6b65 253d 3230 2078      dayOfWeek=%02x 
   da974:	6f68 7275 253d 3230 2078 696d 756e 6574     hour=%02x minute
   da984:	253d 3230 2078 6573 6f63 646e 253d 3230     =%02x second=%02
   da994:	2078 6f6d 6564 253d 0064 6564 6976 6563     x mode=%d.device
   da9a4:	6552 6461 6620 6961 656c 2064 7473 7461     Read failed stat
   da9b4:	253d 0064 6573 2074 6954 656d 6620 6f72     =%d.set Time fro
   da9c4:	206d 5452 2043 7325 6400 7665 6369 5765     m RTC %s.deviceW
   da9d4:	6972 6574 6620 6961 656c 2064 7473 7461     rite failed stat
   da9e4:	253d 0064 6573 2074 5452 2043 7266 6d6f     =%d.set RTC from
   da9f4:	6320 6f6c 6475 2520 0073 6c63 756f 2064      cloud %s.cloud 
   daa04:	6974 656d 6e20 746f 7620 6c61 6469 6400     time not valid.d
   daa14:	7665 6369 5765 6972 6574 4545 5250 4d4f     eviceWriteEEPROM
   daa24:	6620 6961 656c 2064 7473 7461 253d 0064      failed stat=%d.
   daa34:	7061 2e70 7472 0063                         app.rtc.

000daa3c <_ZTV12MCP79410Time>:
	...
   daa44:	4921 000d 4925 000d                         !I..%I..

000daa4c <_ZTV8MCP79410>:
	...
   daa54:	4923 000d 494f 000d                         #I..OI..

000daa5c <_ZTVN5spark13CellularClassE>:
	...
   daa64:	57ff 000d 57f5 000d 57eb 000d 57a1 000d     .W...W...W...W..
   daa74:	57df 000d 57d3 000d 57c7 000d 57bf 000d     .W...W...W...W..
   daa84:	57b5 000d 57ab 000d 7591 000d               .W...W...u..

000daa90 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   daa98:	5839 000d 583f 000d 5895 000d 584d 000d     9X..?X...X..MX..
   daaa8:	583b 000d                                   ;X..

000daaac <_ZTVN5spark13EthernetClassE>:
	...
   daab4:	5e4f 000d 5e45 000d 5e3b 000d 5e31 000d     O^..E^..;^..1^..
   daac4:	5e25 000d 5e19 000d 5e0d 000d 5e05 000d     %^...^...^...^..
   daad4:	5dfb 000d 5df1 000d 7591 000d               .]...]...u..

000daae0 <_ZTV7TwoWire>:
	...
   daae8:	5eb3 000d 5efd 000d 5ed5 000d 5eb5 000d     .^...^...^...^..
   daaf8:	5edd 000d 5ee5 000d 5eed 000d 5ef5 000d     .^...^...^...^..

000dab08 <_ZTV9IPAddress>:
	...
   dab10:	5ff9 000d 5fe9 000d 5feb 000d 2e30 0030     ._..._..._..0.0.
   dab20:	6166 736c 0065 7274 6575 2500 0075 6725     false.true.%u.%g
   dab30:	6e00 6c75 006c 2575 3430 0078               .null.u%04x.

000dab3c <_ZTVN5spark16JSONStreamWriterE>:
	...
   dab44:	647d 000d 64a3 000d 6457 000d 60fb 000d     }d...d..Wd...`..

000dab54 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dab5c:	68f9 000d 690d 000d 724d 000d 645f 000d     .h...i..Mr.._d..

000dab6c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dab74:	6479 000d 64bf 000d 6811 000d 64cd 000d     yd...d...h...d..
   dab84:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   dab94:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   daba4:	646d 6800 646e 7300 7274 006d 6966 746c     md.hnd.strm.filt
   dabb4:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
   dabc4:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
   dabd4:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
   dabe4:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
   dabf4:	7061 0070 3025 3031 2075 5d00 0020 202c     app.%010u .] ., 
   dac04:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   dac14:	2500 0069 6564 6174 6c69 2073 203d 0d00     .%i.details = ..
   dac24:	000a 6e6c 6600 006e 6f63 6564 6400 7465     ..ln.fn.code.det
   dac34:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   dac44:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   dac54:	6e61 6369 6100 6c6c 0000 0000               anic.all....

000dac60 <_ZTVN5spark16StreamLogHandlerE>:
	...
   dac68:	68cd 000d 68e5 000d 7099 000d 4179 000d     .h...h...p..yA..

000dac78 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dac80:	647b 000d 64b1 000d 6fc1 000d 6461 000d     {d...d...o..ad..

000dac90 <_ZTVN5spark9MeshClassE>:
	...
   dac98:	7423 000d 7419 000d 740f 000d 7405 000d     #t...t...t...t..
   daca8:	73f9 000d 73ed 000d 73e1 000d 73d9 000d     .s...s...s...s..
   dacb8:	73cf 000d 73c5 000d 7591 000d               .s...s...u..

000dacc4 <_ZTVN5spark12NetworkClassE>:
	...
   daccc:	7529 000d 7533 000d 753d 000d 7547 000d     )u..3u..=u..Gu..
   dacdc:	7551 000d 755d 000d 7569 000d 7575 000d     Qu..]u..iu..uu..
   dacec:	757d 000d 7587 000d 7591 000d               }u...u...u..

000dacf8 <_ZTV8SPIClass>:
	...
   dad00:	77d5 000d 77d7 000d 2b25 3330 3a64 3025     .w...w..%+03d:%0
   dad10:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   dad20:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000dad30 <_ZTV11USARTSerial>:
	...
   dad38:	7ba5 000d 7bf5 000d 7c03 000d 7671 000d     .{...{...|..qv..
   dad48:	7bb9 000d 7bdb 000d 7bc7 000d 7bef 000d     .{...{...{...{..
   dad58:	7ba7 000d 7bab 000d                         .{...{..

000dad60 <_ZTV9USBSerial>:
	...
   dad68:	7cc1 000d 7d11 000d 7d1f 000d 7671 000d     .|...}...}..qv..
   dad78:	7cfd 000d 7cc3 000d 7cd9 000d 7d0b 000d     .|...|...|...}..
   dad88:	7cef 000d 7cbd 000d                         .|...|..

000dad90 <_ZSt7nothrow>:
	...

000dad91 <day_name.4725>:
   dad91:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dada1:	6972 6153 4a74                                   riSat

000dada6 <mon_name.4726>:
   dada6:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dadb6:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dadc6:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dadd6:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dade6:	6425 000a                                   %d..

000dadea <_ctype_>:
   dadea:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dadfa:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dae0a:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dae1a:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dae2a:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dae3a:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dae4a:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dae5a:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dae6a:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000daeec <__sf_fake_stdin>:
	...

000daf0c <__sf_fake_stdout>:
	...

000daf2c <__sf_fake_stderr>:
	...
   daf4c:	0043 0000                                   C...

000daf50 <_DAYS_BEFORE_MONTH>:
   daf50:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   daf60:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   daf70:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000daf80 <DAYS_IN_MONTH>:
   daf80:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   daf90:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dafa0:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000dafb0 <__month_lengths>:
   dafb0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dafc0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dafd0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dafe0:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   daff0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   db000:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   db010:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   db020:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   db030:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   db040:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   db050:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   db060:	302b 6c33 2564 322e 646c 4c00 5f43 4954     +03ld%.2ld.LC_TI
   db070:	454d 4a00 6e61 4600 6265 4d00 7261 4100     ME.Jan.Feb.Mar.A
   db080:	7270 4d00 7961 4a00 6e75 4a00 6c75 4100     pr.May.Jun.Jul.A
   db090:	6775 5300 7065 4f00 7463 4e00 766f 4400     ug.Sep.Oct.Nov.D
   db0a0:	6365 4a00 6e61 6175 7972 4600 6265 7572     ec.January.Febru
   db0b0:	7261 0079 614d 6372 0068 7041 6972 006c     ary.March.April.
   db0c0:	754a 656e 4a00 6c75 0079 7541 7567 7473     June.July.August
   db0d0:	5300 7065 6574 626d 7265 4f00 7463 626f     .September.Octob
   db0e0:	7265 4e00 766f 6d65 6562 0072 6544 6563     er.November.Dece
   db0f0:	626d 7265 5300 6e75 4d00 6e6f 5400 6575     mber.Sun.Mon.Tue
   db100:	5700 6465 5400 7568 4600 6972 5300 7461     .Wed.Thu.Fri.Sat
   db110:	5300 6e75 6164 0079 6f4d 646e 7961 5400     .Sunday.Monday.T
   db120:	6575 6473 7961 5700 6465 656e 6473 7961     uesday.Wednesday
   db130:	5400 7568 7372 6164 0079 7246 6469 7961     .Thursday.Friday
   db140:	5300 7461 7275 6164 0079 4825 253a 3a4d     .Saturday.%H:%M:
   db150:	5325 2500 2f6d 6425 252f 0079 6125 2520     %S.%m/%d/%y.%a %
   db160:	2062 6525 2520 3a48 4d25 253a 2053 5925     b %e %H:%M:%S %Y
   db170:	5000 004d 6125 2520 2062 6525 2520 3a48     .PM.%a %b %e %H:
   db180:	4d25 253a 2053 5a25 2520 0059 4925 253a     %M:%S %Z %Y.%I:%
   db190:	3a4d 5325 2520 0070                         M:%S %p.

000db198 <_C_time_locale>:
   db198:	b073 000d b077 000d b07b 000d b07f 000d     s...w...{.......
   db1a8:	b083 000d b087 000d b08b 000d b08f 000d     ................
   db1b8:	b093 000d b097 000d b09b 000d b09f 000d     ................
   db1c8:	b0a3 000d b0ab 000d b0b4 000d b0ba 000d     ................
   db1d8:	b083 000d b0c0 000d b0c5 000d b0ca 000d     ................
   db1e8:	b0d1 000d b0db 000d b0e3 000d b0ec 000d     ................
   db1f8:	b0f5 000d b0f9 000d b0fd 000d b101 000d     ................
   db208:	b105 000d b109 000d b10d 000d b111 000d     ................
   db218:	b118 000d b11f 000d b127 000d b131 000d     ........'...1...
   db228:	b13a 000d b141 000d b14a 000d b153 000d     :...A...J...S...
   db238:	b15c 000d a821 000d b171 000d b174 000d     \...!...q...t...
   db248:	b0a3 000d b0ab 000d b0b4 000d b0ba 000d     ................
   db258:	b083 000d b0c0 000d b0c5 000d b0ca 000d     ................
   db268:	b0d1 000d b0db 000d b0e3 000d b0ec 000d     ................
   db278:	aba4 000d b18c 000d ac25 000d ac25 000d     ........%...%...
   db288:	ac25 000d ac25 000d ac25 000d 5a54 4700     %...%...%...TZ.G
   db298:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   db2a8:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   db2b8:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   db2c8:	3a6e 6825 2575 006e                         n:%hu%n.

000db2d0 <link_const_variable_data_end>:
   db2d0:	000d4173 	.word	0x000d4173
   db2d4:	000d480d 	.word	0x000d480d
   db2d8:	000d50c1 	.word	0x000d50c1
   db2dc:	000d5791 	.word	0x000d5791
   db2e0:	000d5809 	.word	0x000d5809
   db2e4:	000d5e59 	.word	0x000d5e59
   db2e8:	000d7089 	.word	0x000d7089
   db2ec:	000d74d9 	.word	0x000d74d9
   db2f0:	000d765d 	.word	0x000d765d
   db2f4:	000d77b9 	.word	0x000d77b9
   db2f8:	000d791d 	.word	0x000d791d
   db2fc:	000d7b91 	.word	0x000d7b91
   db300:	000d7ff5 	.word	0x000d7ff5
   db304:	000d807d 	.word	0x000d807d
   db308:	000d8141 	.word	0x000d8141
   db30c:	000d81c5 	.word	0x000d81c5
   db310:	000d8249 	.word	0x000d8249

000db314 <link_constructors_end>:
	...
