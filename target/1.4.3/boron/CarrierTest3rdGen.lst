
/Users/chipmc/Documents/Maker/Particle/Projects/CarrierTest3rdGen/target/1.4.3/boron/CarrierTest3rdGen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007550  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  0001b65c  2**0
                  CONTENTS
  4 .data         000000c0  2003e098  000db570  0000e098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000698  2003e158  2003e158  0001e158  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000db630  000db630  0001b630  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000db658  000db658  0001b658  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00107c18  00000000  00000000  0001b65c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014d5a  00000000  00000000  00123274  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000256a1  00000000  00000000  00137fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002d38  00000000  00000000  0015d66f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000051e0  00000000  00000000  001603a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00039d7b  00000000  00000000  00165587  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00031f42  00000000  00000000  0019f302  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00107249  00000000  00000000  001d1244  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ebf4  00000000  00000000  002d8490  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f86d 	bl	d9110 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f88d 	bl	d915c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e098 	.word	0x2003e098
   d404c:	000db570 	.word	0x000db570
   d4050:	2003e158 	.word	0x2003e158
   d4054:	2003e158 	.word	0x2003e158
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f004 f805 	bl	d806c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000db568 	.word	0x000db568
   d4084:	000db524 	.word	0x000db524

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 ba40 	b.w	d450c <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fafb 	bl	d4688 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 bfb7 	b.w	d8008 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bbe1 	b.w	d5860 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bbe7 	b.w	d5870 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bbe5 	b.w	d5870 <free>
	...

000d40a8 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f001 fad2 	bl	d5658 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d5339 	.word	0x000d5339

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	b2c9      	uxtb	r1, r1
   d40d0:	689b      	ldr	r3, [r3, #8]
   d40d2:	4718      	bx	r3

000d40d4 <_ZN17Adafruit_FRAM_I2CC1Ev>:
    Constructor
*/
/**************************************************************************/
Adafruit_FRAM_I2C::Adafruit_FRAM_I2C(void)
{
  _framInitialised = false;
   d40d4:	2200      	movs	r2, #0
   d40d6:	7042      	strb	r2, [r0, #1]
}
   d40d8:	4770      	bx	lr

000d40da <_ZN17Adafruit_FRAM_I2C5beginEh>:
    Initializes I2C and configures the chip (call this function before
    doing anything else)
*/
/**************************************************************************/
boolean Adafruit_FRAM_I2C::begin(uint8_t addr)
{
   d40da:	b510      	push	{r4, lr}
  i2c_addr = addr;
   d40dc:	7001      	strb	r1, [r0, #0]
    Initializes I2C and configures the chip (call this function before
    doing anything else)
*/
/**************************************************************************/
boolean Adafruit_FRAM_I2C::begin(uint8_t addr)
{
   d40de:	4604      	mov	r4, r0
  i2c_addr = addr;
  Wire.begin();
   d40e0:	f004 f844 	bl	d816c <_Z19__fetch_global_Wirev>
   d40e4:	f002 f820 	bl	d6128 <_ZN7TwoWire5beginEv>
    //Serial.println(prodID, HEX);
    return false;
  }
  */
  /* Everything seems to be properly initialised and connected */
  _framInitialised = true;
   d40e8:	2001      	movs	r0, #1
   d40ea:	7060      	strb	r0, [r4, #1]

  return true;
}
   d40ec:	bd10      	pop	{r4, pc}

000d40ee <_ZN17Adafruit_FRAM_I2C6write8Eth>:
    @params[in] i2cAddr
                The 8-bit value to write at framAddr
*/
/**************************************************************************/
void Adafruit_FRAM_I2C::write8 (uint16_t framAddr, uint8_t value)
{
   d40ee:	b570      	push	{r4, r5, r6, lr}
   d40f0:	4606      	mov	r6, r0
   d40f2:	4615      	mov	r5, r2
   d40f4:	460c      	mov	r4, r1
  Wire.beginTransmission(i2c_addr);
   d40f6:	f004 f839 	bl	d816c <_Z19__fetch_global_Wirev>
   d40fa:	7831      	ldrb	r1, [r6, #0]
   d40fc:	f002 f826 	bl	d614c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
   d4100:	f004 f834 	bl	d816c <_Z19__fetch_global_Wirev>
   d4104:	0a21      	lsrs	r1, r4, #8
   d4106:	f7ff ffe1 	bl	d40cc <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
   d410a:	f004 f82f 	bl	d816c <_Z19__fetch_global_Wirev>
   d410e:	b2e1      	uxtb	r1, r4
   d4110:	f7ff ffdc 	bl	d40cc <_ZN7TwoWire5writeEi>
  Wire.write(value);
   d4114:	f004 f82a 	bl	d816c <_Z19__fetch_global_Wirev>
   d4118:	6803      	ldr	r3, [r0, #0]
   d411a:	4629      	mov	r1, r5
   d411c:	689b      	ldr	r3, [r3, #8]
   d411e:	4798      	blx	r3
  Wire.endTransmission();
   d4120:	f004 f824 	bl	d816c <_Z19__fetch_global_Wirev>
}
   d4124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
  Wire.beginTransmission(i2c_addr);
  Wire.write(framAddr >> 8);
  Wire.write(framAddr & 0xFF);
  Wire.write(value);
  Wire.endTransmission();
   d4128:	f002 b818 	b.w	d615c <_ZN7TwoWire15endTransmissionEv>

000d412c <_ZN17Adafruit_FRAM_I2C5read8Et>:

    @returns    The 8-bit value retrieved at framAddr
*/
/**************************************************************************/
uint8_t Adafruit_FRAM_I2C::read8 (uint16_t framAddr)
{
   d412c:	b538      	push	{r3, r4, r5, lr}
   d412e:	4604      	mov	r4, r0
   d4130:	460d      	mov	r5, r1
  Wire.beginTransmission(i2c_addr);
   d4132:	f004 f81b 	bl	d816c <_Z19__fetch_global_Wirev>
   d4136:	7821      	ldrb	r1, [r4, #0]
   d4138:	f002 f808 	bl	d614c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
   d413c:	f004 f816 	bl	d816c <_Z19__fetch_global_Wirev>
   d4140:	0a29      	lsrs	r1, r5, #8
   d4142:	f7ff ffc3 	bl	d40cc <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
   d4146:	f004 f811 	bl	d816c <_Z19__fetch_global_Wirev>
   d414a:	b2e9      	uxtb	r1, r5
   d414c:	f7ff ffbe 	bl	d40cc <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d4150:	f004 f80c 	bl	d816c <_Z19__fetch_global_Wirev>
   d4154:	f002 f802 	bl	d615c <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(i2c_addr, (uint8_t)1);
   d4158:	f004 f808 	bl	d816c <_Z19__fetch_global_Wirev>
   d415c:	2201      	movs	r2, #1
   d415e:	7821      	ldrb	r1, [r4, #0]
   d4160:	f001 fff1 	bl	d6146 <_ZN7TwoWire11requestFromEhh>

  return Wire.read();
   d4164:	f004 f802 	bl	d816c <_Z19__fetch_global_Wirev>
   d4168:	6803      	ldr	r3, [r0, #0]
   d416a:	695b      	ldr	r3, [r3, #20]
   d416c:	4798      	blx	r3
}
   d416e:	b2c0      	uxtb	r0, r0
   d4170:	bd38      	pop	{r3, r4, r5, pc}

000d4172 <_GLOBAL__sub_I__ZN17Adafruit_FRAM_I2CC2Ev>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4172:	f001 b911 	b.w	d5398 <HAL_Pin_Map>

000d4176 <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d4176:	4770      	bx	lr

000d4178 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d4178:	6a00      	ldr	r0, [r0, #32]
   d417a:	6803      	ldr	r3, [r0, #0]
   d417c:	68db      	ldr	r3, [r3, #12]
   d417e:	4718      	bx	r3

000d4180 <_Z11watchdogISRv>:


// Utility Functions Area

void watchdogISR()
{
   d4180:	b508      	push	{r3, lr}
  watchdogInterrupt = true;
   d4182:	4b06      	ldr	r3, [pc, #24]	; (d419c <_Z11watchdogISRv+0x1c>)
   d4184:	2101      	movs	r1, #1
  digitalWrite(donePin, HIGH);                              // Pet the watchdog
   d4186:	2010      	movs	r0, #16

// Utility Functions Area

void watchdogISR()
{
  watchdogInterrupt = true;
   d4188:	7019      	strb	r1, [r3, #0]
  digitalWrite(donePin, HIGH);                              // Pet the watchdog
   d418a:	f003 ffbe 	bl	d810a <digitalWrite>
  digitalWrite(donePin, LOW);
   d418e:	2100      	movs	r1, #0
   d4190:	2010      	movs	r0, #16
}
   d4192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void watchdogISR()
{
  watchdogInterrupt = true;
  digitalWrite(donePin, HIGH);                              // Pet the watchdog
  digitalWrite(donePin, LOW);
   d4196:	f003 bfb8 	b.w	d810a <digitalWrite>
   d419a:	bf00      	nop
   d419c:	2003e160 	.word	0x2003e160

000d41a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.42.constprop.50>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d41a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d41a2:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d41a6:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41a8:	f88d 3000 	strb.w	r3, [sp]
   d41ac:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d41ae:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41b0:	f001 fd98 	bl	d5ce4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d41b4:	4628      	mov	r0, r5
   d41b6:	b003      	add	sp, #12
   d41b8:	bd30      	pop	{r4, r5, pc}
	...

000d41bc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d41bc:	4b0a      	ldr	r3, [pc, #40]	; (d41e8 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d41be:	b510      	push	{r4, lr}
   d41c0:	4604      	mov	r4, r0
   d41c2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d41c4:	f002 fb7e 	bl	d68c4 <_ZN5spark10LogManager8instanceEv>
   d41c8:	4621      	mov	r1, r4
   d41ca:	f002 fd6b 	bl	d6ca4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d41ce:	f003 fed7 	bl	d7f80 <_Z16_fetch_usbserialv>
   d41d2:	f003 fec9 	bl	d7f68 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d41d6:	4620      	mov	r0, r4
   d41d8:	4b04      	ldr	r3, [pc, #16]	; (d41ec <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d41da:	f840 3b04 	str.w	r3, [r0], #4
   d41de:	f002 fc67 	bl	d6ab0 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d41e2:	4620      	mov	r0, r4
   d41e4:	bd10      	pop	{r4, pc}
   d41e6:	bf00      	nop
   d41e8:	000da91c 	.word	0x000da91c
   d41ec:	000da904 	.word	0x000da904

000d41f0 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d41f0:	b510      	push	{r4, lr}
   d41f2:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d41f4:	f7ff ffe2 	bl	d41bc <_ZN5spark16SerialLogHandlerD1Ev>
   d41f8:	4620      	mov	r0, r4
   d41fa:	2124      	movs	r1, #36	; 0x24
   d41fc:	f004 f81d 	bl	d823a <_ZdlPvj>
   d4200:	4620      	mov	r0, r4
   d4202:	bd10      	pop	{r4, pc}

000d4204 <_Z9FRAMread8j>:

// Begin section
uint8_t FRAMread8(unsigned int address)  // Read 8 bits from FRAM
{
    uint8_t result;
    result = fram.read8(address);
   d4204:	b281      	uxth	r1, r0
   d4206:	4801      	ldr	r0, [pc, #4]	; (d420c <_Z9FRAMread8j+0x8>)
   d4208:	f7ff bf90 	b.w	d412c <_ZN17Adafruit_FRAM_I2C5read8Et>
   d420c:	2003e162 	.word	0x2003e162

000d4210 <_Z10FRAMwrite8jh>:
    return result;
}

void FRAMwrite8(unsigned int address, uint8_t value)    // Write 8 bits to FRAM
{
    fram.write8(address,value);
   d4210:	460a      	mov	r2, r1
   d4212:	b281      	uxth	r1, r0
   d4214:	4801      	ldr	r0, [pc, #4]	; (d421c <_Z10FRAMwrite8jh+0xc>)
   d4216:	f7ff bf6a 	b.w	d40ee <_ZN17Adafruit_FRAM_I2C6write8Eth>
   d421a:	bf00      	nop
   d421c:	2003e162 	.word	0x2003e162

000d4220 <_Z14getTemperaturev>:
    snprintf(resultStr, sizeof(resultStr),"FRAM Test Passed");
    return 1;
  }
}

bool getTemperature() {
   d4220:	b507      	push	{r0, r1, r2, lr}
  int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
   d4222:	200f      	movs	r0, #15
   d4224:	f003 ff8a 	bl	d813c <analogRead>
  float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
   d4228:	f004 fabe 	bl	d87a8 <__aeabi_i2d>
   d422c:	a335      	add	r3, pc, #212	; (adr r3, d4304 <_Z14getTemperaturev+0xe4>)
   d422e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4232:	f004 fb1f 	bl	d8874 <__aeabi_dmul>
   d4236:	f004 fd2f 	bl	d8c98 <__aeabi_d2f>
  voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
  float temperatureC = (voltage - 0.5) * 100.0;  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  float temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;  // now convert to Fahrenheit
   d423a:	eddf 7a27 	vldr	s15, [pc, #156]	; d42d8 <_Z14getTemperaturev+0xb8>
   d423e:	ee07 0a10 	vmov	s14, r0
   d4242:	ee67 7a27 	vmul.f32	s15, s14, s15
   d4246:	ee17 0a90 	vmov	r0, s15
   d424a:	f004 fabf 	bl	d87cc <__aeabi_f2d>
   d424e:	2200      	movs	r2, #0
   d4250:	4b22      	ldr	r3, [pc, #136]	; (d42dc <_Z14getTemperaturev+0xbc>)
   d4252:	f004 f95b 	bl	d850c <__aeabi_dsub>
   d4256:	2200      	movs	r2, #0
   d4258:	4b21      	ldr	r3, [pc, #132]	; (d42e0 <_Z14getTemperaturev+0xc0>)
   d425a:	f004 fb0b 	bl	d8874 <__aeabi_dmul>
   d425e:	f004 fd1b 	bl	d8c98 <__aeabi_d2f>
   d4262:	f004 fab3 	bl	d87cc <__aeabi_f2d>
   d4266:	2200      	movs	r2, #0
   d4268:	4b1e      	ldr	r3, [pc, #120]	; (d42e4 <_Z14getTemperaturev+0xc4>)
   d426a:	f004 fb03 	bl	d8874 <__aeabi_dmul>
   d426e:	2200      	movs	r2, #0
   d4270:	4b1d      	ldr	r3, [pc, #116]	; (d42e8 <_Z14getTemperaturev+0xc8>)
   d4272:	f004 fc29 	bl	d8ac8 <__aeabi_ddiv>
   d4276:	2200      	movs	r2, #0
   d4278:	4b1c      	ldr	r3, [pc, #112]	; (d42ec <_Z14getTemperaturev+0xcc>)
   d427a:	f004 f949 	bl	d8510 <__adddf3>
   d427e:	f004 fd0b 	bl	d8c98 <__aeabi_d2f>
  if (temperatureF < 60.0 || temperatureF > 75.0) {             // Reasonable range for room temperature
   d4282:	ed9f 7a1b 	vldr	s14, [pc, #108]	; d42f0 <_Z14getTemperaturev+0xd0>
bool getTemperature() {
  int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
  float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
  voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
  float temperatureC = (voltage - 0.5) * 100.0;  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  float temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;  // now convert to Fahrenheit
   d4286:	ee07 0a90 	vmov	s15, r0
  if (temperatureF < 60.0 || temperatureF > 75.0) {             // Reasonable range for room temperature
   d428a:	eef4 7ac7 	vcmpe.f32	s15, s14
   d428e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4292:	d406      	bmi.n	d42a2 <_Z14getTemperaturev+0x82>
   d4294:	ed9f 7a17 	vldr	s14, [pc, #92]	; d42f4 <_Z14getTemperaturev+0xd4>
   d4298:	eef4 7ac7 	vcmpe.f32	s15, s14
   d429c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d42a0:	dd0c      	ble.n	d42bc <_Z14getTemperaturev+0x9c>
    snprintf(resultStr, sizeof(resultStr),"Temp seems whack: %3.1f", temperatureF);
   d42a2:	ee17 0a90 	vmov	r0, s15
   d42a6:	f004 fa91 	bl	d87cc <__aeabi_f2d>
   d42aa:	4a13      	ldr	r2, [pc, #76]	; (d42f8 <_Z14getTemperaturev+0xd8>)
   d42ac:	e9cd 0100 	strd	r0, r1, [sp]
   d42b0:	2140      	movs	r1, #64	; 0x40
   d42b2:	4812      	ldr	r0, [pc, #72]	; (d42fc <_Z14getTemperaturev+0xdc>)
   d42b4:	f001 fafc 	bl	d58b0 <snprintf>
    return 0;
   d42b8:	2000      	movs	r0, #0
   d42ba:	e009      	b.n	d42d0 <_Z14getTemperaturev+0xb0>
  }
  else {
    snprintf(resultStr, sizeof(resultStr),"Temperature is: %3.1f", temperatureF);
   d42bc:	f004 fa86 	bl	d87cc <__aeabi_f2d>
   d42c0:	4a0f      	ldr	r2, [pc, #60]	; (d4300 <_Z14getTemperaturev+0xe0>)
   d42c2:	e9cd 0100 	strd	r0, r1, [sp]
   d42c6:	2140      	movs	r1, #64	; 0x40
   d42c8:	480c      	ldr	r0, [pc, #48]	; (d42fc <_Z14getTemperaturev+0xdc>)
   d42ca:	f001 faf1 	bl	d58b0 <snprintf>
    return 1;
   d42ce:	2001      	movs	r0, #1
  }
}
   d42d0:	b003      	add	sp, #12
   d42d2:	f85d fb04 	ldr.w	pc, [sp], #4
   d42d6:	bf00      	nop
   d42d8:	39800000 	.word	0x39800000
   d42dc:	3fe00000 	.word	0x3fe00000
   d42e0:	40590000 	.word	0x40590000
   d42e4:	40220000 	.word	0x40220000
   d42e8:	40140000 	.word	0x40140000
   d42ec:	40400000 	.word	0x40400000
   d42f0:	42700000 	.word	0x42700000
   d42f4:	42960000 	.word	0x42960000
   d42f8:	000da932 	.word	0x000da932
   d42fc:	2003e194 	.word	0x2003e194
   d4300:	000da94a 	.word	0x000da94a
   d4304:	66666666 	.word	0x66666666
   d4308:	400a6666 	.word	0x400a6666

000d430c <_Z12rtcClockTestv>:

bool rtcClockTest() {
   d430c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (!rtc.isRTCValid()) {
   d430e:	480e      	ldr	r0, [pc, #56]	; (d4348 <_Z12rtcClockTestv+0x3c>)
   d4310:	f000 fda6 	bl	d4e60 <_ZNK8MCP7941010isRTCValidEv>
   d4314:	4604      	mov	r4, r0
   d4316:	b920      	cbnz	r0, d4322 <_Z12rtcClockTestv+0x16>
    snprintf(resultStr, sizeof(resultStr),"RTC Clock Test Failed");
   d4318:	490c      	ldr	r1, [pc, #48]	; (d434c <_Z12rtcClockTestv+0x40>)
   d431a:	480d      	ldr	r0, [pc, #52]	; (d4350 <_Z12rtcClockTestv+0x44>)
   d431c:	f005 f9be 	bl	d969c <strcpy>
   d4320:	e00f      	b.n	d4342 <_Z12rtcClockTestv+0x36>
    return 0;
  }
  else {
    snprintf(resultStr, sizeof(resultStr),"RTC Clock Passes - Time is %s GMT",(const char*)Time.timeStr(rtc.getRTCTime()));
   d4322:	4809      	ldr	r0, [pc, #36]	; (d4348 <_Z12rtcClockTestv+0x3c>)
   d4324:	f000 fd5e 	bl	d4de4 <_ZNK8MCP7941010getRTCTimeEv>
   d4328:	4601      	mov	r1, r0
   d432a:	4668      	mov	r0, sp
   d432c:	f003 fc48 	bl	d7bc0 <_ZN9TimeClass7timeStrEl>
   d4330:	9b00      	ldr	r3, [sp, #0]
   d4332:	4a08      	ldr	r2, [pc, #32]	; (d4354 <_Z12rtcClockTestv+0x48>)
   d4334:	4806      	ldr	r0, [pc, #24]	; (d4350 <_Z12rtcClockTestv+0x44>)
   d4336:	2140      	movs	r1, #64	; 0x40
   d4338:	f001 faba 	bl	d58b0 <snprintf>
   d433c:	4668      	mov	r0, sp
   d433e:	f003 fb74 	bl	d7a2a <_ZN6StringD1Ev>
    return 1;
  }
}
   d4342:	4620      	mov	r0, r4
   d4344:	b004      	add	sp, #16
   d4346:	bd10      	pop	{r4, pc}
   d4348:	2003e1d4 	.word	0x2003e1d4
   d434c:	000da960 	.word	0x000da960
   d4350:	2003e194 	.word	0x2003e194
   d4354:	000da976 	.word	0x000da976

000d4358 <_Z20meterParticlePublishv>:
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}

bool meterParticlePublish(void) {                                       // Enforces Particle's limit on 1 publish a second
   d4358:	b510      	push	{r4, lr}
  static unsigned long lastPublish=0;                                   // Initialize and store value here
  if(millis() - lastPublish >= 1000) {                                  // Particle rate limits at 1 publish per second
   d435a:	4c07      	ldr	r4, [pc, #28]	; (d4378 <_Z20meterParticlePublishv+0x20>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d435c:	f000 fff4 	bl	d5348 <HAL_Timer_Get_Milli_Seconds>
   d4360:	6823      	ldr	r3, [r4, #0]
   d4362:	1ac0      	subs	r0, r0, r3
   d4364:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4368:	d304      	bcc.n	d4374 <_Z20meterParticlePublishv+0x1c>
   d436a:	f000 ffed 	bl	d5348 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d436e:	6020      	str	r0, [r4, #0]
   d4370:	2001      	movs	r0, #1
   d4372:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
   d4374:	2000      	movs	r0, #0
}
   d4376:	bd10      	pop	{r4, pc}
   d4378:	2003e15c 	.word	0x2003e15c

000d437c <_ZN11SystemClass13waitConditionIZ12rtcAlarmTestvEUlvE_EEbT_.isra.39>:
            spark_process();
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d437c:	b508      	push	{r3, lr}
    return 1;
  }
}

bool rtcAlarmTest() {                                 // This is a miss need to connect to a pin
  waitUntil(meterParticlePublish);
   d437e:	f7ff ffeb 	bl	d4358 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4382:	b118      	cbz	r0, d438c <_ZN11SystemClass13waitConditionIZ12rtcAlarmTestvEUlvE_EEbT_.isra.39+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d4384:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4388:	f7ff bfe6 	b.w	d4358 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d438c:	f001 f9e0 	bl	d5750 <spark_process>
   d4390:	e7f5      	b.n	d437e <_ZN11SystemClass13waitConditionIZ12rtcAlarmTestvEUlvE_EEbT_.isra.39+0x2>

000d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4392:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4394:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4396:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4398:	b17c      	cbz	r4, d43ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d439a:	6863      	ldr	r3, [r4, #4]
   d439c:	3b01      	subs	r3, #1
   d439e:	6063      	str	r3, [r4, #4]
   d43a0:	b95b      	cbnz	r3, d43ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d43a2:	6823      	ldr	r3, [r4, #0]
   d43a4:	4620      	mov	r0, r4
   d43a6:	689b      	ldr	r3, [r3, #8]
   d43a8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d43aa:	68a3      	ldr	r3, [r4, #8]
   d43ac:	3b01      	subs	r3, #1
   d43ae:	60a3      	str	r3, [r4, #8]
   d43b0:	b91b      	cbnz	r3, d43ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d43b2:	6823      	ldr	r3, [r4, #0]
   d43b4:	4620      	mov	r0, r4
   d43b6:	68db      	ldr	r3, [r3, #12]
   d43b8:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d43ba:	4628      	mov	r0, r5
   d43bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d43c0 <_Z9ResetFRAMv>:
    fram.write8(address + 3, one);
}


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
   d43c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(FRAM::controlRegisterAddr);
   d43c2:	2001      	movs	r0, #1
   d43c4:	f7ff ff1e 	bl	d4204 <_Z9FRAMread8j>
   d43c8:	4606      	mov	r6, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d43ca:	f001 f9d1 	bl	d5770 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("FRAM","Resetting in progress", PRIVATE);
   d43ce:	b160      	cbz	r0, d43ea <_Z9ResetFRAMv+0x2a>
   d43d0:	4b30      	ldr	r3, [pc, #192]	; (d4494 <_Z9ResetFRAMv+0xd4>)
   d43d2:	4931      	ldr	r1, [pc, #196]	; (d4498 <_Z9ResetFRAMv+0xd8>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d43d4:	781b      	ldrb	r3, [r3, #0]
   d43d6:	2200      	movs	r2, #0
   d43d8:	f88d 2000 	strb.w	r2, [sp]
   d43dc:	a802      	add	r0, sp, #8
   d43de:	4a2f      	ldr	r2, [pc, #188]	; (d449c <_Z9ResetFRAMv+0xdc>)
   d43e0:	f7ff fede 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.42.constprop.50>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d43e4:	a803      	add	r0, sp, #12
   d43e6:	f7ff ffd4 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43ea:	4d2a      	ldr	r5, [pc, #168]	; (d4494 <_Z9ResetFRAMv+0xd4>)
    fram.write8(address + 3, one);
}


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
   d43ec:	2408      	movs	r4, #8
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(FRAM::controlRegisterAddr);
    if (Particle.connected()) Particle.publish("FRAM","Resetting in progress", PRIVATE);
    for (unsigned long i=8; i < 32768; i++) {  // Start at 4 to not overwrite debounce and sensitivity
        FRAMwrite8(i,0x0);
   d43ee:	2100      	movs	r1, #0
   d43f0:	4620      	mov	r0, r4
   d43f2:	f7ff ff0d 	bl	d4210 <_Z10FRAMwrite8jh>
        if (i==8192) if (Particle.connected()) Particle.publish("Event", "Fram Reset 1/4 done", PRIVATE);
   d43f6:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
   d43fa:	d109      	bne.n	d4410 <_Z9ResetFRAMv+0x50>
   d43fc:	f001 f9b8 	bl	d5770 <spark_cloud_flag_connected>
   d4400:	2800      	cmp	r0, #0
   d4402:	d038      	beq.n	d4476 <_Z9ResetFRAMv+0xb6>
   d4404:	2200      	movs	r2, #0
   d4406:	f88d 2000 	strb.w	r2, [sp]
   d440a:	782b      	ldrb	r3, [r5, #0]
   d440c:	4a24      	ldr	r2, [pc, #144]	; (d44a0 <_Z9ResetFRAMv+0xe0>)
   d440e:	e02b      	b.n	d4468 <_Z9ResetFRAMv+0xa8>
        if (i==16384) if (Particle.connected()) Particle.publish("Event", "Fram Reset 1/2 done", PRIVATE);
   d4410:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
   d4414:	d108      	bne.n	d4428 <_Z9ResetFRAMv+0x68>
   d4416:	f001 f9ab 	bl	d5770 <spark_cloud_flag_connected>
   d441a:	b360      	cbz	r0, d4476 <_Z9ResetFRAMv+0xb6>
   d441c:	2200      	movs	r2, #0
   d441e:	f88d 2000 	strb.w	r2, [sp]
   d4422:	782b      	ldrb	r3, [r5, #0]
   d4424:	4a1f      	ldr	r2, [pc, #124]	; (d44a4 <_Z9ResetFRAMv+0xe4>)
   d4426:	e00a      	b.n	d443e <_Z9ResetFRAMv+0x7e>
        if (i==(24576)) if (Particle.connected()) Particle.publish("Event", "Fram Reset 3/4 done", PRIVATE);
   d4428:	f5b4 4fc0 	cmp.w	r4, #24576	; 0x6000
   d442c:	d110      	bne.n	d4450 <_Z9ResetFRAMv+0x90>
   d442e:	f001 f99f 	bl	d5770 <spark_cloud_flag_connected>
   d4432:	b300      	cbz	r0, d4476 <_Z9ResetFRAMv+0xb6>
   d4434:	2200      	movs	r2, #0
   d4436:	f88d 2000 	strb.w	r2, [sp]
   d443a:	782b      	ldrb	r3, [r5, #0]
   d443c:	4a1a      	ldr	r2, [pc, #104]	; (d44a8 <_Z9ResetFRAMv+0xe8>)
   d443e:	491b      	ldr	r1, [pc, #108]	; (d44ac <_Z9ResetFRAMv+0xec>)
   d4440:	a802      	add	r0, sp, #8
   d4442:	f7ff fead 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.42.constprop.50>
   d4446:	a803      	add	r0, sp, #12
   d4448:	f7ff ffa3 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(FRAM::controlRegisterAddr);
    if (Particle.connected()) Particle.publish("FRAM","Resetting in progress", PRIVATE);
    for (unsigned long i=8; i < 32768; i++) {  // Start at 4 to not overwrite debounce and sensitivity
   d444c:	3401      	adds	r4, #1
   d444e:	e7ce      	b.n	d43ee <_Z9ResetFRAMv+0x2e>
        FRAMwrite8(i,0x0);
        if (i==8192) if (Particle.connected()) Particle.publish("Event", "Fram Reset 1/4 done", PRIVATE);
        if (i==16384) if (Particle.connected()) Particle.publish("Event", "Fram Reset 1/2 done", PRIVATE);
        if (i==(24576)) if (Particle.connected()) Particle.publish("Event", "Fram Reset 3/4 done", PRIVATE);
        if (i==32767) if (Particle.connected()) Particle.publish("Event", "Fram Reset done", PRIVATE);
   d4450:	f647 73ff 	movw	r3, #32767	; 0x7fff
   d4454:	429c      	cmp	r4, r3
   d4456:	d10e      	bne.n	d4476 <_Z9ResetFRAMv+0xb6>
   d4458:	f001 f98a 	bl	d5770 <spark_cloud_flag_connected>
   d445c:	b178      	cbz	r0, d447e <_Z9ResetFRAMv+0xbe>
   d445e:	2200      	movs	r2, #0
   d4460:	f88d 2000 	strb.w	r2, [sp]
   d4464:	782b      	ldrb	r3, [r5, #0]
   d4466:	4a12      	ldr	r2, [pc, #72]	; (d44b0 <_Z9ResetFRAMv+0xf0>)
   d4468:	4910      	ldr	r1, [pc, #64]	; (d44ac <_Z9ResetFRAMv+0xec>)
   d446a:	a802      	add	r0, sp, #8
   d446c:	f7ff fe98 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.42.constprop.50>
   d4470:	a803      	add	r0, sp, #12
   d4472:	f7ff ff8e 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(FRAM::controlRegisterAddr);
    if (Particle.connected()) Particle.publish("FRAM","Resetting in progress", PRIVATE);
    for (unsigned long i=8; i < 32768; i++) {  // Start at 4 to not overwrite debounce and sensitivity
   d4476:	3401      	adds	r4, #1
   d4478:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   d447c:	d1b7      	bne.n	d43ee <_Z9ResetFRAMv+0x2e>
        if (i==8192) if (Particle.connected()) Particle.publish("Event", "Fram Reset 1/4 done", PRIVATE);
        if (i==16384) if (Particle.connected()) Particle.publish("Event", "Fram Reset 1/2 done", PRIVATE);
        if (i==(24576)) if (Particle.connected()) Particle.publish("Event", "Fram Reset 3/4 done", PRIVATE);
        if (i==32767) if (Particle.connected()) Particle.publish("Event", "Fram Reset done", PRIVATE);
    }
    FRAMwrite8(FRAM::controlRegisterAddr,tempControlReg);                   // Preserce the control register values
   d447e:	4631      	mov	r1, r6
   d4480:	2001      	movs	r0, #1
   d4482:	f7ff fec5 	bl	d4210 <_Z10FRAMwrite8jh>
    FRAMwrite8(FRAM::versionAddr,FRAMversionNumber);                        // Reset version to match #define value for sketch
   d4486:	2101      	movs	r1, #1
   d4488:	2000      	movs	r0, #0
   d448a:	f7ff fec1 	bl	d4210 <_Z10FRAMwrite8jh>
}
   d448e:	b004      	add	sp, #16
   d4490:	bd70      	pop	{r4, r5, r6, pc}
   d4492:	bf00      	nop
   d4494:	2003e164 	.word	0x2003e164
   d4498:	000daa1b 	.word	0x000daa1b
   d449c:	000da998 	.word	0x000da998
   d44a0:	000da9ae 	.word	0x000da9ae
   d44a4:	000da9c8 	.word	0x000da9c8
   d44a8:	000da9dc 	.word	0x000da9dc
   d44ac:	000da9c2 	.word	0x000da9c2
   d44b0:	000da9f0 	.word	0x000da9f0

000d44b4 <_Z8framTestv>:
  Particle.publish("Test #8", "If you see this message - hard reset test failed", PRIVATE);
  BlinkForever();
}
*/

bool framTest() {
   d44b4:	b510      	push	{r4, lr}
  if (!fram.begin()) {                                                // You can stick the new i2c addr in here, e.g. begin(0x51);
   d44b6:	2150      	movs	r1, #80	; 0x50
   d44b8:	480f      	ldr	r0, [pc, #60]	; (d44f8 <_Z8framTestv+0x44>)
   d44ba:	f7ff fe0e 	bl	d40da <_ZN17Adafruit_FRAM_I2C5beginEh>
   d44be:	4604      	mov	r4, r0
   d44c0:	b908      	cbnz	r0, d44c6 <_Z8framTestv+0x12>
    snprintf(resultStr, sizeof(resultStr),"FRAM Test Failed - Missing FRAM");
   d44c2:	490e      	ldr	r1, [pc, #56]	; (d44fc <_Z8framTestv+0x48>)
   d44c4:	e012      	b.n	d44ec <_Z8framTestv+0x38>
    return 0;
  }
  else if (FRAMread8(FRAM::versionAddr) != FRAMversionNumber) {                 // Check to see if the memory map in the sketch matches the data on the chip
   d44c6:	2000      	movs	r0, #0
   d44c8:	f7ff fe9c 	bl	d4204 <_Z9FRAMread8j>
   d44cc:	2801      	cmp	r0, #1
   d44ce:	d001      	beq.n	d44d4 <_Z8framTestv+0x20>
    ResetFRAM();                                                      // Reset the FRAM to correct the issue
   d44d0:	f7ff ff76 	bl	d43c0 <_Z9ResetFRAMv>
  }

  if (FRAMread8(FRAM::versionAddr) != FRAMversionNumber) {
   d44d4:	2000      	movs	r0, #0
   d44d6:	f7ff fe95 	bl	d4204 <_Z9FRAMread8j>
   d44da:	2801      	cmp	r0, #1
   d44dc:	d005      	beq.n	d44ea <_Z8framTestv+0x36>
    snprintf(resultStr, sizeof(resultStr),"FRAM Test Failed - FRAM Read Error");
   d44de:	4908      	ldr	r1, [pc, #32]	; (d4500 <_Z8framTestv+0x4c>)
   d44e0:	4808      	ldr	r0, [pc, #32]	; (d4504 <_Z8framTestv+0x50>)
   d44e2:	f005 f8db 	bl	d969c <strcpy>
    return 0;
   d44e6:	2400      	movs	r4, #0
   d44e8:	e003      	b.n	d44f2 <_Z8framTestv+0x3e>
  } 
  else  {
    snprintf(resultStr, sizeof(resultStr),"FRAM Test Passed");
   d44ea:	4907      	ldr	r1, [pc, #28]	; (d4508 <_Z8framTestv+0x54>)
   d44ec:	4805      	ldr	r0, [pc, #20]	; (d4504 <_Z8framTestv+0x50>)
   d44ee:	f005 f8d5 	bl	d969c <strcpy>
    return 1;
  }
}
   d44f2:	4620      	mov	r0, r4
   d44f4:	bd10      	pop	{r4, pc}
   d44f6:	bf00      	nop
   d44f8:	2003e162 	.word	0x2003e162
   d44fc:	000daa00 	.word	0x000daa00
   d4500:	000daa20 	.word	0x000daa20
   d4504:	2003e194 	.word	0x2003e194
   d4508:	000daa43 	.word	0x000daa43

000d450c <setup>:
 volatile bool watchdogInterrupt = false;                         // variable used to see if the watchdogInterrupt had fired
 char resultStr[64];


// setup() runs once, when the device is first turned on.
void setup() {
   d450c:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinMode(userSwitch,INPUT);                                      // Button for user input
   d450e:	2100      	movs	r1, #0
 volatile bool watchdogInterrupt = false;                         // variable used to see if the watchdogInterrupt had fired
 char resultStr[64];


// setup() runs once, when the device is first turned on.
void setup() {
   d4510:	b085      	sub	sp, #20
  pinMode(userSwitch,INPUT);                                      // Button for user input
   d4512:	2004      	movs	r0, #4
   d4514:	f003 fde8 	bl	d80e8 <pinMode>
  pinMode(wakeUpPin,INPUT);                                       // This pin is active HIGH
   d4518:	2100      	movs	r1, #0
   d451a:	2008      	movs	r0, #8
   d451c:	f003 fde4 	bl	d80e8 <pinMode>
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
   d4520:	2101      	movs	r1, #1
   d4522:	2007      	movs	r0, #7
   d4524:	f003 fde0 	bl	d80e8 <pinMode>
  pinMode(donePin,OUTPUT);                                        // Allows us to pet the watchdog
   d4528:	2101      	movs	r1, #1
   d452a:	2010      	movs	r0, #16
   d452c:	f003 fddc 	bl	d80e8 <pinMode>
  digitalWrite(donePin,HIGH);
   d4530:	2101      	movs	r1, #1
   d4532:	2010      	movs	r0, #16
   d4534:	f003 fde9 	bl	d810a <digitalWrite>
  digitalWrite(donePin,LOW);                                      // Pet the watchdog
   d4538:	2100      	movs	r1, #0
   d453a:	2010      	movs	r0, #16
   d453c:	f003 fde5 	bl	d810a <digitalWrite>
  pinMode(DeepSleepPin ,OUTPUT);                                  // For a hard reset active HIGH
   d4540:	2101      	movs	r1, #1
   d4542:	2006      	movs	r0, #6
   d4544:	f003 fdd0 	bl	d80e8 <pinMode>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4548:	2300      	movs	r3, #0
   d454a:	2204      	movs	r2, #4
   d454c:	4922      	ldr	r1, [pc, #136]	; (d45d8 <setup+0xcc>)
   d454e:	4823      	ldr	r0, [pc, #140]	; (d45dc <setup+0xd0>)
   d4550:	f001 f8f6 	bl	d5740 <spark_variable>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4554:	f001 f90c 	bl	d5770 <spark_cloud_flag_connected>
  //Particle.variable("stateOfChg", stateOfCharge);
  //Particle.function("HardReset",hardResetNow);
  //Particle.function("Set-Timezone",setTimeZone);
  //Particle.function("Set-DSTOffset",setDSTOffset);

  if (!Particle.connected()) {                                     // Only going to connect if we are in connectionMode
   d4558:	4604      	mov	r4, r0
   d455a:	bb00      	cbnz	r0, d459e <setup+0x92>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d455c:	f001 f900 	bl	d5760 <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4560:	4620      	mov	r0, r4
   d4562:	f000 ff11 	bl	d5388 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4566:	4e1e      	ldr	r6, [pc, #120]	; (d45e0 <setup+0xd4>)
   d4568:	4604      	mov	r4, r0
   d456a:	2500      	movs	r5, #0
   d456c:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d456e:	2000      	movs	r0, #0
   d4570:	f000 ff0a 	bl	d5388 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4574:	1b00      	subs	r0, r0, r4
   d4576:	eb61 0105 	sbc.w	r1, r1, r5
   d457a:	428f      	cmp	r7, r1
   d457c:	bf08      	it	eq
   d457e:	4286      	cmpeq	r6, r0
   d4580:	d305      	bcc.n	d458e <setup+0x82>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4582:	f001 f8f5 	bl	d5770 <spark_cloud_flag_connected>
   d4586:	b910      	cbnz	r0, d458e <setup+0x82>
            spark_process();
   d4588:	f001 f8e2 	bl	d5750 <spark_process>
   d458c:	e7ef      	b.n	d456e <setup+0x62>
   d458e:	f001 f8ef 	bl	d5770 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4592:	f000 fed9 	bl	d5348 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4596:	4b13      	ldr	r3, [pc, #76]	; (d45e4 <setup+0xd8>)
   d4598:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d459a:	f001 f8d9 	bl	d5750 <spark_process>
    Particle.process();
  }

  rtc.setup();                                                     // Start the RTC code

  attachInterrupt(wakeUpPin, watchdogISR, RISING);                 // Need to pet the watchdog when needed
   d459e:	2400      	movs	r4, #0
    Particle.connect();
    waitFor(Particle.connected,90000);                             // 60 seconds then we timeout  -- *** need to add disconnected option and test
    Particle.process();
  }

  rtc.setup();                                                     // Start the RTC code
   d45a0:	4811      	ldr	r0, [pc, #68]	; (d45e8 <setup+0xdc>)
   d45a2:	f000 fc2f 	bl	d4e04 <_ZN8MCP794105setupEv>

  attachInterrupt(wakeUpPin, watchdogISR, RISING);                 // Need to pet the watchdog when needed
   d45a6:	9400      	str	r4, [sp, #0]
   d45a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d45ac:	2201      	movs	r2, #1
   d45ae:	490f      	ldr	r1, [pc, #60]	; (d45ec <setup+0xe0>)
   d45b0:	2008      	movs	r0, #8
   d45b2:	f001 fded 	bl	d6190 <_Z15attachInterrupttPFvvE13InterruptModeah>

  state = FRAM_TEST;                                               // Start the tests
   d45b6:	4b0e      	ldr	r3, [pc, #56]	; (d45f0 <setup+0xe4>)
  Particle.publish("Test Start", "Beginning Test Run",PRIVATE);
   d45b8:	490e      	ldr	r1, [pc, #56]	; (d45f4 <setup+0xe8>)

  rtc.setup();                                                     // Start the RTC code

  attachInterrupt(wakeUpPin, watchdogISR, RISING);                 // Need to pet the watchdog when needed

  state = FRAM_TEST;                                               // Start the tests
   d45ba:	2201      	movs	r2, #1
   d45bc:	701a      	strb	r2, [r3, #0]
   d45be:	4b0e      	ldr	r3, [pc, #56]	; (d45f8 <setup+0xec>)
  Particle.publish("Test Start", "Beginning Test Run",PRIVATE);
   d45c0:	4a0e      	ldr	r2, [pc, #56]	; (d45fc <setup+0xf0>)
   d45c2:	781b      	ldrb	r3, [r3, #0]
   d45c4:	f88d 4000 	strb.w	r4, [sp]
   d45c8:	a802      	add	r0, sp, #8
   d45ca:	f7ff fde9 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.42.constprop.50>
   d45ce:	a803      	add	r0, sp, #12
   d45d0:	f7ff fedf 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d45d4:	b005      	add	sp, #20
   d45d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d45d8:	000da92c 	.word	0x000da92c
   d45dc:	000daa54 	.word	0x000daa54
   d45e0:	00015f8f 	.word	0x00015f8f
   d45e4:	2003e5d0 	.word	0x2003e5d0
   d45e8:	2003e1d4 	.word	0x2003e1d4
   d45ec:	000d4181 	.word	0x000d4181
   d45f0:	2003e161 	.word	0x2003e161
   d45f4:	000daa6f 	.word	0x000daa6f
   d45f8:	2003e164 	.word	0x2003e164
   d45fc:	000daa5c 	.word	0x000daa5c

000d4600 <_Z12rtcAlarmTestv>:
    snprintf(resultStr, sizeof(resultStr),"RTC Clock Passes - Time is %s GMT",(const char*)Time.timeStr(rtc.getRTCTime()));
    return 1;
  }
}

bool rtcAlarmTest() {                                 // This is a miss need to connect to a pin
   d4600:	b530      	push	{r4, r5, lr}
   d4602:	b085      	sub	sp, #20
  waitUntil(meterParticlePublish);
   d4604:	f7ff feba 	bl	d437c <_ZN11SystemClass13waitConditionIZ12rtcAlarmTestvEUlvE_EEbT_.isra.39>
   d4608:	4b18      	ldr	r3, [pc, #96]	; (d466c <_Z12rtcAlarmTestv+0x6c>)
  Particle.publish("Information", "Setting an alarm for 10 seconds", PRIVATE);
   d460a:	4a19      	ldr	r2, [pc, #100]	; (d4670 <_Z12rtcAlarmTestv+0x70>)
   d460c:	781b      	ldrb	r3, [r3, #0]
   d460e:	4919      	ldr	r1, [pc, #100]	; (d4674 <_Z12rtcAlarmTestv+0x74>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4610:	2400      	movs	r4, #0
   d4612:	a802      	add	r0, sp, #8
   d4614:	f88d 4000 	strb.w	r4, [sp]
   d4618:	f7ff fdc2 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.42.constprop.50>
   d461c:	a803      	add	r0, sp, #12
   d461e:	f7ff feb8 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  // Need to connect the MFP pin from the RTC to the Boron and set an interrupt here
  // Will make this connection and add the code here.

  time_t RTCtime = rtc.getRTCTime();
   d4622:	4815      	ldr	r0, [pc, #84]	; (d4678 <_Z12rtcAlarmTestv+0x78>)
   d4624:	f000 fbde 	bl	d4de4 <_ZNK8MCP7941010getRTCTimeEv>
  rtc.setAlarm(RTCtime +10);
   d4628:	4623      	mov	r3, r4
   d462a:	f100 010a 	add.w	r1, r0, #10
   d462e:	2201      	movs	r2, #1
   d4630:	4811      	ldr	r0, [pc, #68]	; (d4678 <_Z12rtcAlarmTestv+0x78>)
   d4632:	f000 fdbc 	bl	d51ae <_ZN8MCP794108setAlarmEibi>

  delay(11000);
   d4636:	f642 20f8 	movw	r0, #11000	; 0x2af8
   d463a:	f001 f961 	bl	d5900 <delay>
  //waitFor(rtc.getInterrupt,15);

  if (!rtc.getInterrupt()) {
   d463e:	4621      	mov	r1, r4
   d4640:	480d      	ldr	r0, [pc, #52]	; (d4678 <_Z12rtcAlarmTestv+0x78>)
   d4642:	f000 fb86 	bl	d4d52 <_ZN8MCP7941012getInterruptEi>
   d4646:	4605      	mov	r5, r0
   d4648:	b920      	cbnz	r0, d4654 <_Z12rtcAlarmTestv+0x54>
    snprintf(resultStr, sizeof(resultStr),"RTC Alarm Test Failed");
   d464a:	490c      	ldr	r1, [pc, #48]	; (d467c <_Z12rtcAlarmTestv+0x7c>)
   d464c:	480c      	ldr	r0, [pc, #48]	; (d4680 <_Z12rtcAlarmTestv+0x80>)
   d464e:	f005 f825 	bl	d969c <strcpy>
   d4652:	e007      	b.n	d4664 <_Z12rtcAlarmTestv+0x64>
    return 0;
  }
  else {
    snprintf(resultStr, sizeof(resultStr),"RTC Alarm Test Passed");
   d4654:	490b      	ldr	r1, [pc, #44]	; (d4684 <_Z12rtcAlarmTestv+0x84>)
   d4656:	480a      	ldr	r0, [pc, #40]	; (d4680 <_Z12rtcAlarmTestv+0x80>)
   d4658:	f005 f820 	bl	d969c <strcpy>
    rtc.clearInterrupt();
   d465c:	4621      	mov	r1, r4
   d465e:	4806      	ldr	r0, [pc, #24]	; (d4678 <_Z12rtcAlarmTestv+0x78>)
   d4660:	f000 fd2d 	bl	d50be <_ZN8MCP7941014clearInterruptEi>
    return 1;
  }
}
   d4664:	4628      	mov	r0, r5
   d4666:	b005      	add	sp, #20
   d4668:	bd30      	pop	{r4, r5, pc}
   d466a:	bf00      	nop
   d466c:	2003e164 	.word	0x2003e164
   d4670:	000daa7a 	.word	0x000daa7a
   d4674:	000daa9a 	.word	0x000daa9a
   d4678:	2003e1d4 	.word	0x2003e1d4
   d467c:	000daaa6 	.word	0x000daaa6
   d4680:	2003e194 	.word	0x2003e194
   d4684:	000daabc 	.word	0x000daabc

000d4688 <loop>:
  state = FRAM_TEST;                                               // Start the tests
  Particle.publish("Test Start", "Beginning Test Run",PRIVATE);
}


void loop() {
   d4688:	b5f0      	push	{r4, r5, r6, r7, lr}
  rtc.loop();                                                           // Need to run this in the main loop
  switch (state) {
   d468a:	4c3d      	ldr	r4, [pc, #244]	; (d4780 <loop+0xf8>)
  Particle.publish("Test Start", "Beginning Test Run",PRIVATE);
}


void loop() {
  rtc.loop();                                                           // Need to run this in the main loop
   d468c:	483d      	ldr	r0, [pc, #244]	; (d4784 <loop+0xfc>)
  state = FRAM_TEST;                                               // Start the tests
  Particle.publish("Test Start", "Beginning Test Run",PRIVATE);
}


void loop() {
   d468e:	b085      	sub	sp, #20
  rtc.loop();                                                           // Need to run this in the main loop
   d4690:	f000 fcd8 	bl	d5044 <_ZN8MCP794104loopEv>
  switch (state) {
   d4694:	7823      	ldrb	r3, [r4, #0]
   d4696:	3b01      	subs	r3, #1
   d4698:	2b09      	cmp	r3, #9
   d469a:	d86d      	bhi.n	d4778 <loop+0xf0>
   d469c:	e8df f003 	tbb	[pc, r3]
   d46a0:	3c190f05 	.word	0x3c190f05
   d46a4:	6c6c6e46 	.word	0x6c6c6e46
   d46a8:	6e5d      	.short	0x6e5d
    case IDLE_STATE:
    break;
    case FRAM_TEST:
      framTest() ? state = TMP36_TEST : state=ERROR_STATE;
   d46aa:	f7ff ff03 	bl	d44b4 <_Z8framTestv>
   d46ae:	b108      	cbz	r0, d46b4 <loop+0x2c>
   d46b0:	2302      	movs	r3, #2
   d46b2:	e000      	b.n	d46b6 <loop+0x2e>
   d46b4:	2309      	movs	r3, #9
   d46b6:	7023      	strb	r3, [r4, #0]
      waitUntil(meterParticlePublish);
   d46b8:	f7ff fe60 	bl	d437c <_ZN11SystemClass13waitConditionIZ12rtcAlarmTestvEUlvE_EEbT_.isra.39>
   d46bc:	e03f      	b.n	d473e <loop+0xb6>
      Particle.publish("Result",resultStr,PRIVATE);
    break;
    case TMP36_TEST:
      getTemperature() ? state = USERSW_TEST : state = ERROR_STATE;
   d46be:	f7ff fdaf 	bl	d4220 <_Z14getTemperaturev>
   d46c2:	b108      	cbz	r0, d46c8 <loop+0x40>
   d46c4:	2303      	movs	r3, #3
   d46c6:	e000      	b.n	d46ca <loop+0x42>
   d46c8:	2309      	movs	r3, #9
   d46ca:	7023      	strb	r3, [r4, #0]
      waitUntil(meterParticlePublish);
   d46cc:	f7ff fe56 	bl	d437c <_ZN11SystemClass13waitConditionIZ12rtcAlarmTestvEUlvE_EEbT_.isra.39>
   d46d0:	e035      	b.n	d473e <loop+0xb6>
      Particle.publish("Result",resultStr,PRIVATE);
    break;
    case USERSW_TEST: {                                                             // Test the user switch
      static bool firstPublish = false;
      if (!firstPublish) {
   d46d2:	4e2d      	ldr	r6, [pc, #180]	; (d4788 <loop+0x100>)
   d46d4:	4d2d      	ldr	r5, [pc, #180]	; (d478c <loop+0x104>)
   d46d6:	7837      	ldrb	r7, [r6, #0]
   d46d8:	b977      	cbnz	r7, d46f8 <loop+0x70>
        waitUntil(meterParticlePublish);
   d46da:	f7ff fe4f 	bl	d437c <_ZN11SystemClass13waitConditionIZ12rtcAlarmTestvEUlvE_EEbT_.isra.39>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d46de:	782b      	ldrb	r3, [r5, #0]
        Particle.publish("Prompt","Please press user switch", PRIVATE);
   d46e0:	4a2b      	ldr	r2, [pc, #172]	; (d4790 <loop+0x108>)
   d46e2:	492c      	ldr	r1, [pc, #176]	; (d4794 <loop+0x10c>)
   d46e4:	f88d 7000 	strb.w	r7, [sp]
   d46e8:	a802      	add	r0, sp, #8
   d46ea:	f7ff fd59 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.42.constprop.50>
   d46ee:	a803      	add	r0, sp, #12
   d46f0:	f7ff fe4f 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        firstPublish = true;
   d46f4:	2301      	movs	r3, #1
   d46f6:	7033      	strb	r3, [r6, #0]
      }
      //if (digitalRead(userSwitch)) {
        waitUntil(meterParticlePublish);
   d46f8:	f7ff fe40 	bl	d437c <_ZN11SystemClass13waitConditionIZ12rtcAlarmTestvEUlvE_EEbT_.isra.39>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d46fc:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d46fe:	782b      	ldrb	r3, [r5, #0]
        Particle.publish("Result","Switch Test Passed - Press detected", PRIVATE);
   d4700:	f88d 2000 	strb.w	r2, [sp]
   d4704:	4924      	ldr	r1, [pc, #144]	; (d4798 <loop+0x110>)
   d4706:	4a25      	ldr	r2, [pc, #148]	; (d479c <loop+0x114>)
   d4708:	a802      	add	r0, sp, #8
   d470a:	f7ff fd49 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.42.constprop.50>
   d470e:	a803      	add	r0, sp, #12
   d4710:	f7ff fe3f 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        state = RTCTIME_TEST;
   d4714:	2304      	movs	r3, #4
   d4716:	e030      	b.n	d477a <loop+0xf2>
      //}
    } break;
    case RTCTIME_TEST:
      rtcClockTest() ? state = RTCALARM_TEST : state = ERROR_STATE;
   d4718:	f7ff fdf8 	bl	d430c <_Z12rtcClockTestv>
   d471c:	b108      	cbz	r0, d4722 <loop+0x9a>
   d471e:	2305      	movs	r3, #5
   d4720:	e000      	b.n	d4724 <loop+0x9c>
   d4722:	2309      	movs	r3, #9
   d4724:	7023      	strb	r3, [r4, #0]
      waitUntil(meterParticlePublish);
   d4726:	f7ff fe29 	bl	d437c <_ZN11SystemClass13waitConditionIZ12rtcAlarmTestvEUlvE_EEbT_.isra.39>
   d472a:	e008      	b.n	d473e <loop+0xb6>
      Particle.publish("Result",resultStr, PRIVATE);
    break;
    case RTCALARM_TEST: 
      rtcAlarmTest() ? state = CHARGING_TEST : state = ERROR_STATE;
   d472c:	f7ff ff68 	bl	d4600 <_Z12rtcAlarmTestv>
   d4730:	b108      	cbz	r0, d4736 <loop+0xae>
   d4732:	2306      	movs	r3, #6
   d4734:	e000      	b.n	d4738 <loop+0xb0>
   d4736:	2309      	movs	r3, #9
   d4738:	7023      	strb	r3, [r4, #0]
      waitUntil(meterParticlePublish);
   d473a:	f7ff fe1f 	bl	d437c <_ZN11SystemClass13waitConditionIZ12rtcAlarmTestvEUlvE_EEbT_.isra.39>
   d473e:	4b13      	ldr	r3, [pc, #76]	; (d478c <loop+0x104>)
      Particle.publish("Result",resultStr, PRIVATE);
   d4740:	4915      	ldr	r1, [pc, #84]	; (d4798 <loop+0x110>)
   d4742:	781b      	ldrb	r3, [r3, #0]
   d4744:	2200      	movs	r2, #0
   d4746:	f88d 2000 	strb.w	r2, [sp]
   d474a:	a802      	add	r0, sp, #8
   d474c:	4a14      	ldr	r2, [pc, #80]	; (d47a0 <loop+0x118>)
   d474e:	f7ff fd27 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.42.constprop.50>
   d4752:	a803      	add	r0, sp, #12
   d4754:	f7ff fe1d 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    break;
   d4758:	e010      	b.n	d477c <loop+0xf4>
    case CHARGING_TEST:
    

    break;
    case ERROR_STATE: 
      waitUntil(meterParticlePublish);
   d475a:	f7ff fe0f 	bl	d437c <_ZN11SystemClass13waitConditionIZ12rtcAlarmTestvEUlvE_EEbT_.isra.39>
   d475e:	4b0b      	ldr	r3, [pc, #44]	; (d478c <loop+0x104>)
      Particle.publish("Error","Testing halted",PRIVATE);
   d4760:	4910      	ldr	r1, [pc, #64]	; (d47a4 <loop+0x11c>)
   d4762:	781b      	ldrb	r3, [r3, #0]
   d4764:	2200      	movs	r2, #0
   d4766:	f88d 2000 	strb.w	r2, [sp]
   d476a:	a802      	add	r0, sp, #8
   d476c:	4a0e      	ldr	r2, [pc, #56]	; (d47a8 <loop+0x120>)
   d476e:	f7ff fd17 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.42.constprop.50>
   d4772:	a803      	add	r0, sp, #12
   d4774:	f7ff fe0d 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = IDLE_STATE;
    break;
    default:
      state = IDLE_STATE;
   d4778:	230a      	movs	r3, #10
   d477a:	7023      	strb	r3, [r4, #0]
    break;
  }
}
   d477c:	b005      	add	sp, #20
   d477e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4780:	2003e161 	.word	0x2003e161
   d4784:	2003e1d4 	.word	0x2003e1d4
   d4788:	2003e165 	.word	0x2003e165
   d478c:	2003e164 	.word	0x2003e164
   d4790:	000daad9 	.word	0x000daad9
   d4794:	000daaf2 	.word	0x000daaf2
   d4798:	000daad2 	.word	0x000daad2
   d479c:	000daaf9 	.word	0x000daaf9
   d47a0:	2003e194 	.word	0x2003e194
   d47a4:	000daa3d 	.word	0x000daa3d
   d47a8:	000dab1d 	.word	0x000dab1d

000d47ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d47ac:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d47ae:	6804      	ldr	r4, [r0, #0]
   d47b0:	6843      	ldr	r3, [r0, #4]
   d47b2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d47b4:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d47b6:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d47ba:	42a6      	cmp	r6, r4
   d47bc:	d004      	beq.n	d47c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d47be:	4620      	mov	r0, r4
   d47c0:	f003 f933 	bl	d7a2a <_ZN6StringD1Ev>
   d47c4:	3414      	adds	r4, #20
   d47c6:	e7f8      	b.n	d47ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d47c8:	6828      	ldr	r0, [r5, #0]
   d47ca:	f001 f851 	bl	d5870 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d47ce:	4628      	mov	r0, r5
   d47d0:	bd70      	pop	{r4, r5, r6, pc}

000d47d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d47d2:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d47d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d47d6:	4606      	mov	r6, r0
   d47d8:	460c      	mov	r4, r1
   d47da:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d47dc:	d916      	bls.n	d480c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d47de:	4290      	cmp	r0, r2
   d47e0:	d215      	bcs.n	d480e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d47e2:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d47e6:	1a6c      	subs	r4, r5, r1
   d47e8:	f1a1 0714 	sub.w	r7, r1, #20
   d47ec:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d47ee:	42af      	cmp	r7, r5
   d47f0:	d01c      	beq.n	d482c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d47f2:	b12c      	cbz	r4, d4800 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d47f4:	4629      	mov	r1, r5
   d47f6:	4620      	mov	r0, r4
   d47f8:	f003 f907 	bl	d7a0a <_ZN6StringC1EOS_>
   d47fc:	7c2b      	ldrb	r3, [r5, #16]
   d47fe:	7423      	strb	r3, [r4, #16]
   d4800:	4628      	mov	r0, r5
   d4802:	f003 f912 	bl	d7a2a <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d4806:	3d14      	subs	r5, #20
   d4808:	3c14      	subs	r4, #20
   d480a:	e7f0      	b.n	d47ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d480c:	d00e      	beq.n	d482c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d480e:	42ac      	cmp	r4, r5
   d4810:	d00c      	beq.n	d482c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4812:	b12e      	cbz	r6, d4820 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4814:	4621      	mov	r1, r4
   d4816:	4630      	mov	r0, r6
   d4818:	f003 f8f7 	bl	d7a0a <_ZN6StringC1EOS_>
   d481c:	7c23      	ldrb	r3, [r4, #16]
   d481e:	7433      	strb	r3, [r6, #16]
   d4820:	4620      	mov	r0, r4
   d4822:	f003 f902 	bl	d7a2a <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4826:	3414      	adds	r4, #20
   d4828:	3614      	adds	r6, #20
   d482a:	e7f0      	b.n	d480e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d482c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d482e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d482e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4832:	2300      	movs	r3, #0
   d4834:	6003      	str	r3, [r0, #0]
   d4836:	6043      	str	r3, [r0, #4]
   d4838:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d483a:	684e      	ldr	r6, [r1, #4]
   d483c:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d483e:	4604      	mov	r4, r0
   d4840:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4842:	dd24      	ble.n	d488e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4844:	f04f 0814 	mov.w	r8, #20
   d4848:	fb08 f006 	mul.w	r0, r8, r6
   d484c:	f001 f808 	bl	d5860 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4850:	4605      	mov	r5, r0
   d4852:	b1e0      	cbz	r0, d488e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d4854:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4858:	fb08 1202 	mla	r2, r8, r2, r1
   d485c:	f7ff ffb9 	bl	d47d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4860:	6820      	ldr	r0, [r4, #0]
   d4862:	f001 f805 	bl	d5870 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4866:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4868:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d486a:	683e      	ldr	r6, [r7, #0]
   d486c:	687b      	ldr	r3, [r7, #4]
   d486e:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4872:	4546      	cmp	r6, r8
   d4874:	d009      	beq.n	d488a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d4876:	b12d      	cbz	r5, d4884 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d4878:	4631      	mov	r1, r6
   d487a:	4628      	mov	r0, r5
   d487c:	f003 f93e 	bl	d7afc <_ZN6StringC1ERKS_>
   d4880:	7c33      	ldrb	r3, [r6, #16]
   d4882:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4884:	3614      	adds	r6, #20
   d4886:	3514      	adds	r5, #20
   d4888:	e7f3      	b.n	d4872 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d488a:	687b      	ldr	r3, [r7, #4]
   d488c:	6063      	str	r3, [r4, #4]
    }
}
   d488e:	4620      	mov	r0, r4
   d4890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4894 <_GLOBAL__sub_I_fram>:
  if(millis() - lastPublish >= 1000) {                                  // Particle rate limits at 1 publish per second
    lastPublish = millis();
    return 1;
  }
  else return 0;
}
   d4894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4898:	4b32      	ldr	r3, [pc, #200]	; (d4964 <_GLOBAL__sub_I_fram+0xd0>)
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d489a:	4c33      	ldr	r4, [pc, #204]	; (d4968 <_GLOBAL__sub_I_fram+0xd4>)
   d489c:	b08c      	sub	sp, #48	; 0x30
   d489e:	2701      	movs	r7, #1
   d48a0:	701f      	strb	r7, [r3, #0]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d48a2:	2500      	movs	r5, #0
   d48a4:	f000 fd78 	bl	d5398 <HAL_Pin_Map>
// FRAM Library Extensions Header File

Adafruit_FRAM_I2C fram = Adafruit_FRAM_I2C(); // Init the FRAM
   d48a8:	4830      	ldr	r0, [pc, #192]	; (d496c <_GLOBAL__sub_I_fram+0xd8>)
   d48aa:	f7ff fc13 	bl	d40d4 <_ZN17Adafruit_FRAM_I2CC1Ev>
   d48ae:	9500      	str	r5, [sp, #0]
   d48b0:	9501      	str	r5, [sp, #4]
   d48b2:	9502      	str	r5, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d48b4:	f003 fb64 	bl	d7f80 <_Z16_fetch_usbserialv>
   d48b8:	4669      	mov	r1, sp
   d48ba:	4680      	mov	r8, r0
   d48bc:	a803      	add	r0, sp, #12
   d48be:	f7ff ffb6 	bl	d482e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d48c2:	4626      	mov	r6, r4
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d48c4:	a903      	add	r1, sp, #12
   d48c6:	a806      	add	r0, sp, #24
   d48c8:	f7ff ffb1 	bl	d482e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d48cc:	4b28      	ldr	r3, [pc, #160]	; (d4970 <_GLOBAL__sub_I_fram+0xdc>)
   d48ce:	f846 3b04 	str.w	r3, [r6], #4
   d48d2:	a906      	add	r1, sp, #24
   d48d4:	a809      	add	r0, sp, #36	; 0x24
   d48d6:	f7ff ffaa 	bl	d482e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d48da:	aa09      	add	r2, sp, #36	; 0x24
   d48dc:	211e      	movs	r1, #30
   d48de:	4630      	mov	r0, r6
   d48e0:	f002 fb43 	bl	d6f6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d48e4:	a809      	add	r0, sp, #36	; 0x24
   d48e6:	f7ff ff61 	bl	d47ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d48ea:	a806      	add	r0, sp, #24
   d48ec:	f7ff ff5e 	bl	d47ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d48f0:	4b20      	ldr	r3, [pc, #128]	; (d4974 <_GLOBAL__sub_I_fram+0xe0>)
   d48f2:	6023      	str	r3, [r4, #0]
   d48f4:	f8c4 8020 	str.w	r8, [r4, #32]
   d48f8:	a803      	add	r0, sp, #12
   d48fa:	f7ff ff57 	bl	d47ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d48fe:	4b1e      	ldr	r3, [pc, #120]	; (d4978 <_GLOBAL__sub_I_fram+0xe4>)
   d4900:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d4902:	f003 fb3d 	bl	d7f80 <_Z16_fetch_usbserialv>
   d4906:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d490a:	f003 fb29 	bl	d7f60 <_ZN9USBSerial5beginEl>
 #include "Adafruit_FRAM_I2C.h"                     // Library for FRAM functions
 #include "FRAM-Library-Extensions.h"               // Extends the FRAM Library
 #include "3rdGenDevicePinoutdoc.h"                 // Documents pinout
 #include "MCP79410RK.h"

SerialLogHandler logHandler;                        // For RTC alerts and events
   d490e:	4e1b      	ldr	r6, [pc, #108]	; (d497c <_GLOBAL__sub_I_fram+0xe8>)
        LogManager::instance()->addHandler(this);
   d4910:	f001 ffd8 	bl	d68c4 <_ZN5spark10LogManager8instanceEv>
   d4914:	4621      	mov	r1, r4
   d4916:	f002 fabb 	bl	d6e90 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
   d491a:	4668      	mov	r0, sp
   d491c:	f7ff ff46 	bl	d47ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4920:	4632      	mov	r2, r6
   d4922:	4917      	ldr	r1, [pc, #92]	; (d4980 <_GLOBAL__sub_I_fram+0xec>)
   d4924:	4620      	mov	r0, r4

 // Prototypes and System Mode calls
 SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
   d4926:	4c17      	ldr	r4, [pc, #92]	; (d4984 <_GLOBAL__sub_I_fram+0xf0>)
 #include "Adafruit_FRAM_I2C.h"                     // Library for FRAM functions
 #include "FRAM-Library-Extensions.h"               // Extends the FRAM Library
 #include "3rdGenDevicePinoutdoc.h"                 // Documents pinout
 #include "MCP79410RK.h"

SerialLogHandler logHandler;                        // For RTC alerts and events
   d4928:	f003 fc82 	bl	d8230 <__aeabi_atexit>

 // Prototypes and System Mode calls
 SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
   d492c:	4629      	mov	r1, r5
   d492e:	4638      	mov	r0, r7
   d4930:	f000 feca 	bl	d56c8 <system_thread_set_state>
 FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
   d4934:	4629      	mov	r1, r5
   d4936:	4620      	mov	r0, r4
   d4938:	f001 fba0 	bl	d607c <_ZN9FuelGaugeC1Eb>
   d493c:	4632      	mov	r2, r6
   d493e:	4912      	ldr	r1, [pc, #72]	; (d4988 <_GLOBAL__sub_I_fram+0xf4>)
   d4940:	4620      	mov	r0, r4
   d4942:	f003 fc75 	bl	d8230 <__aeabi_atexit>
	/**
	 * @brief Constructor for MCP79410 objects.
	 *
	 * @param wire The I2C interface to use. Optional, default is Wire. On some devices you can use Wire1.
	 */
	MCP79410(TwoWire &wire = Wire);
   d4946:	f003 fc11 	bl	d816c <_Z19__fetch_global_Wirev>
 MCP79410 rtc;                   // Rickkas MCP79410 libarary
   d494a:	4c10      	ldr	r4, [pc, #64]	; (d498c <_GLOBAL__sub_I_fram+0xf8>)
   d494c:	4601      	mov	r1, r0
   d494e:	4620      	mov	r0, r4
   d4950:	f000 f98c 	bl	d4c6c <_ZN8MCP79410C1ER7TwoWire>
   d4954:	4632      	mov	r2, r6
   d4956:	490e      	ldr	r1, [pc, #56]	; (d4990 <_GLOBAL__sub_I_fram+0xfc>)
   d4958:	4620      	mov	r0, r4
   d495a:	f003 fc69 	bl	d8230 <__aeabi_atexit>
  if(millis() - lastPublish >= 1000) {                                  // Particle rate limits at 1 publish per second
    lastPublish = millis();
    return 1;
  }
  else return 0;
}
   d495e:	b00c      	add	sp, #48	; 0x30
   d4960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4964:	2003e164 	.word	0x2003e164
   d4968:	2003e170 	.word	0x2003e170
   d496c:	2003e162 	.word	0x2003e162
   d4970:	000da904 	.word	0x000da904
   d4974:	000daec0 	.word	0x000daec0
   d4978:	000da91c 	.word	0x000da91c
   d497c:	2003e158 	.word	0x2003e158
   d4980:	000d41bd 	.word	0x000d41bd
   d4984:	2003e168 	.word	0x2003e168
   d4988:	000d609b 	.word	0x000d609b
   d498c:	2003e1d4 	.word	0x2003e1d4
   d4990:	000d49ab 	.word	0x000d49ab

000d4994 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d4994:	2040      	movs	r0, #64	; 0x40
   d4996:	4770      	bx	lr

000d4998 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d4998:	2000      	movs	r0, #0
   d499a:	4770      	bx	lr

000d499c <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d499c:	2080      	movs	r0, #128	; 0x80
   d499e:	4770      	bx	lr

000d49a0 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d49a0:	20ff      	movs	r0, #255	; 0xff
   d49a2:	4770      	bx	lr

000d49a4 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d49a4:	4770      	bx	lr

000d49a6 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d49a6:	4770      	bx	lr

000d49a8 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d49a8:	4770      	bx	lr

000d49aa <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d49aa:	4770      	bx	lr

000d49ac <_ZN12MCP79410TimeD0Ev>:

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d49ac:	b510      	push	{r4, lr}

}
   d49ae:	2114      	movs	r1, #20

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d49b0:	4604      	mov	r4, r0

}
   d49b2:	f003 fc42 	bl	d823a <_ZdlPvj>
   d49b6:	4620      	mov	r0, r4
   d49b8:	bd10      	pop	{r4, pc}

000d49ba <_ZN12MCP79410SRAMD0Ev>:

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d49ba:	b510      	push	{r4, lr}

}
   d49bc:	2108      	movs	r1, #8

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d49be:	4604      	mov	r4, r0

}
   d49c0:	f003 fc3b 	bl	d823a <_ZdlPvj>
   d49c4:	4620      	mov	r0, r4
   d49c6:	bd10      	pop	{r4, pc}

000d49c8 <_ZN14MCP79410EEPROMD0Ev>:
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d49c8:	b510      	push	{r4, lr}

}
   d49ca:	2108      	movs	r1, #8
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d49cc:	4604      	mov	r4, r0

}
   d49ce:	f003 fc34 	bl	d823a <_ZdlPvj>
   d49d2:	4620      	mov	r0, r4
   d49d4:	bd10      	pop	{r4, pc}

000d49d6 <_ZN8MCP79410D0Ev>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d49d6:	b510      	push	{r4, lr}

}
   d49d8:	211c      	movs	r1, #28
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d49da:	4604      	mov	r4, r0

}
   d49dc:	f003 fc2d 	bl	d823a <_ZdlPvj>
   d49e0:	4620      	mov	r0, r4
   d49e2:	bd10      	pop	{r4, pc}

000d49e4 <_ZN18MCP79410MemoryBase5eraseEv>:

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d49e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d49e8:	6803      	ldr	r3, [r0, #0]
   d49ea:	68db      	ldr	r3, [r3, #12]

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d49ec:	4605      	mov	r5, r0
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d49ee:	4798      	blx	r3
   d49f0:	2210      	movs	r2, #16
   d49f2:	4601      	mov	r1, r0
   d49f4:	4668      	mov	r0, sp
   d49f6:	f004 fbb1 	bl	d915c <memset>

	size_t len = length();
   d49fa:	682b      	ldr	r3, [r5, #0]
   d49fc:	4628      	mov	r0, r5
   d49fe:	689b      	ldr	r3, [r3, #8]
   d4a00:	4798      	blx	r3
	size_t offset = 0;
   d4a02:	2400      	movs	r4, #0
bool MCP79410MemoryBase::erase() {
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
   d4a04:	4607      	mov	r7, r0
MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
	bool bResult = false;
   d4a06:	4620      	mov	r0, r4
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d4a08:	42bc      	cmp	r4, r7
   d4a0a:	d20e      	bcs.n	d4a2a <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		size_t count = sizeof(buf);
		if (count > (len - offset)) {
   d4a0c:	1b3e      	subs	r6, r7, r4

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d4a0e:	2e10      	cmp	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d4a10:	682b      	ldr	r3, [r5, #0]

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d4a12:	bf28      	it	cs
   d4a14:	2610      	movcs	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d4a16:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d4a1a:	466a      	mov	r2, sp
   d4a1c:	4633      	mov	r3, r6
   d4a1e:	4621      	mov	r1, r4
   d4a20:	4628      	mov	r0, r5
   d4a22:	47c0      	blx	r8
		if (!bResult) {
   d4a24:	b108      	cbz	r0, d4a2a <_ZN18MCP79410MemoryBase5eraseEv+0x46>
			break;
		}

		offset += count;
   d4a26:	4434      	add	r4, r6
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d4a28:	e7ee      	b.n	d4a08 <_ZN18MCP79410MemoryBase5eraseEv+0x24>

		offset += count;
	}

	return bResult;
}
   d4a2a:	b004      	add	sp, #16
   d4a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4a30 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d4a30:	6803      	ldr	r3, [r0, #0]
   d4a32:	b2c9      	uxtb	r1, r1
   d4a34:	689b      	ldr	r3, [r3, #8]
   d4a36:	4718      	bx	r3

000d4a38 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4a38:	b40e      	push	{r1, r2, r3}
   d4a3a:	b500      	push	{lr}
   d4a3c:	b08c      	sub	sp, #48	; 0x30
   d4a3e:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4a40:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4a42:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d4a46:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4a48:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4a4c:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4a4e:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4a50:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4a52:	aa04      	add	r2, sp, #16
   d4a54:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4a56:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4a58:	f000 fe06 	bl	d5668 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d4a5c:	b00c      	add	sp, #48	; 0x30
   d4a5e:	f85d eb04 	ldr.w	lr, [sp], #4
   d4a62:	b003      	add	sp, #12
   d4a64:	4770      	bx	lr

000d4a66 <_ZN12MCP79410Time5clearEv>:

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d4a66:	2300      	movs	r3, #0
	rawMonth = 1;
   d4a68:	2201      	movs	r2, #1

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d4a6a:	7283      	strb	r3, [r0, #10]
	rawMonth = 1;
   d4a6c:	72c2      	strb	r2, [r0, #11]
	rawDayOfMonth = 1;
   d4a6e:	7302      	strb	r2, [r0, #12]
	rawDayOfWeek = 1;
   d4a70:	7342      	strb	r2, [r0, #13]
	rawHour = 0;
   d4a72:	7383      	strb	r3, [r0, #14]
	rawMinute = 0;
   d4a74:	73c3      	strb	r3, [r0, #15]
	rawSecond = 0;
   d4a76:	7403      	strb	r3, [r0, #16]
	alarmMode = 0;
   d4a78:	7443      	strb	r3, [r0, #17]
   d4a7a:	4770      	bx	lr

000d4a7c <_ZN12MCP79410TimeC1Ev>:
	return (stat == 0);
}



MCP79410Time::MCP79410Time() {
   d4a7c:	2201      	movs	r2, #1
   d4a7e:	b508      	push	{r3, lr}
   d4a80:	7142      	strb	r2, [r0, #5]
   d4a82:	2202      	movs	r2, #2
   d4a84:	7182      	strb	r2, [r0, #6]
   d4a86:	2203      	movs	r2, #3
   d4a88:	4b06      	ldr	r3, [pc, #24]	; (d4aa4 <_ZN12MCP79410TimeC1Ev+0x28>)
   d4a8a:	71c2      	strb	r2, [r0, #7]
   d4a8c:	2204      	movs	r2, #4
   d4a8e:	6003      	str	r3, [r0, #0]
   d4a90:	7202      	strb	r2, [r0, #8]
   d4a92:	2300      	movs	r3, #0
   d4a94:	2207      	movs	r2, #7
   d4a96:	7103      	strb	r3, [r0, #4]
   d4a98:	7242      	strb	r2, [r0, #9]
   d4a9a:	7443      	strb	r3, [r0, #17]
	clear();
   d4a9c:	f7ff ffe3 	bl	d4a66 <_ZN12MCP79410Time5clearEv>
}
   d4aa0:	bd08      	pop	{r3, pc}
   d4aa2:	bf00      	nop
   d4aa4:	000dac9c 	.word	0x000dac9c

000d4aa8 <_ZN12MCP79410Time8bcdToIntEh>:
	return String(buf);
}

// [static]
int MCP79410Time::bcdToInt(uint8_t value) {
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d4aa8:	0903      	lsrs	r3, r0, #4
}
   d4aaa:	220a      	movs	r2, #10
   d4aac:	f000 000f 	and.w	r0, r0, #15
   d4ab0:	fb02 0003 	mla	r0, r2, r3, r0
   d4ab4:	4770      	bx	lr

000d4ab6 <_ZNK12MCP79410Time7getYearEv>:
	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
}

int MCP79410Time::getYear() const {
   d4ab6:	b508      	push	{r3, lr}
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
   d4ab8:	7a80      	ldrb	r0, [r0, #10]
   d4aba:	f7ff fff5 	bl	d4aa8 <_ZN12MCP79410Time8bcdToIntEh>
}
   d4abe:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d4ac2:	bd08      	pop	{r3, pc}

000d4ac4 <_ZNK12MCP79410Time8getMonthEv>:
void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
}

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
   d4ac4:	7ac0      	ldrb	r0, [r0, #11]
   d4ac6:	f000 001f 	and.w	r0, r0, #31
   d4aca:	f7ff bfed 	b.w	d4aa8 <_ZN12MCP79410Time8bcdToIntEh>

000d4ace <_ZNK12MCP79410Time13getDayOfMonthEv>:
	rawMonth = intToBcd(value);
}


int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
   d4ace:	7b00      	ldrb	r0, [r0, #12]
   d4ad0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d4ad4:	f7ff bfe8 	b.w	d4aa8 <_ZN12MCP79410Time8bcdToIntEh>

000d4ad8 <_ZNK12MCP79410Time7getHourEv>:
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
}


int MCP79410Time::getHour() const {
   d4ad8:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d4ada:	7b81      	ldrb	r1, [r0, #14]
   d4adc:	064a      	lsls	r2, r1, #25
   d4ade:	d50d      	bpl.n	d4afc <_ZNK12MCP79410Time7getHourEv+0x24>
		// Bit 6 = 1 (12 hour format)
		int hour12 = bcdToInt(rawHour & 0x1f);
   d4ae0:	f001 001f 	and.w	r0, r1, #31
   d4ae4:	f7ff ffe0 	bl	d4aa8 <_ZN12MCP79410Time8bcdToIntEh>

		if (rawHour & 0x20) {
   d4ae8:	068b      	lsls	r3, r1, #26
   d4aea:	d503      	bpl.n	d4af4 <_ZNK12MCP79410Time7getHourEv+0x1c>
			// Bit 5 = 1 (PM)
			if (hour12 == 12) {
   d4aec:	280c      	cmp	r0, #12
   d4aee:	d00b      	beq.n	d4b08 <_ZNK12MCP79410Time7getHourEv+0x30>
				// 12 PM = 12
				return 12;
			}
			else {
				return hour12 + 12;
   d4af0:	300c      	adds	r0, #12
   d4af2:	bd08      	pop	{r3, pc}
			}
		}
		else {
			// Bit 5 = 0 (AM)
			if (hour12 == 12) {
   d4af4:	280c      	cmp	r0, #12
   d4af6:	bf08      	it	eq
   d4af8:	2000      	moveq	r0, #0
   d4afa:	bd08      	pop	{r3, pc}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d4afc:	f001 003f 	and.w	r0, r1, #63	; 0x3f
	}
}
   d4b00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d4b04:	f7ff bfd0 	b.w	d4aa8 <_ZN12MCP79410Time8bcdToIntEh>
	}
}
   d4b08:	bd08      	pop	{r3, pc}

000d4b0a <_ZNK12MCP79410Time9getMinuteEv>:
}



int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
   d4b0a:	7bc0      	ldrb	r0, [r0, #15]
   d4b0c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d4b10:	f7ff bfca 	b.w	d4aa8 <_ZN12MCP79410Time8bcdToIntEh>

000d4b14 <_ZNK12MCP79410Time9getSecondEv>:
}


int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
   d4b14:	7c00      	ldrb	r0, [r0, #16]
   d4b16:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d4b1a:	f7ff bfc5 	b.w	d4aa8 <_ZN12MCP79410Time8bcdToIntEh>

000d4b1e <_ZNK12MCP79410Time10toUnixTimeEv>:
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d4b1e:	b510      	push	{r4, lr}
   d4b20:	b08a      	sub	sp, #40	; 0x28
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d4b22:	2224      	movs	r2, #36	; 0x24
   d4b24:	2100      	movs	r1, #0
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d4b26:	4604      	mov	r4, r0
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d4b28:	a801      	add	r0, sp, #4
   d4b2a:	f004 fb17 	bl	d915c <memset>

	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d4b2e:	4620      	mov	r0, r4
   d4b30:	f7ff ffc1 	bl	d4ab6 <_ZNK12MCP79410Time7getYearEv>
   d4b34:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d4b38:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d4b3a:	4620      	mov	r0, r4
   d4b3c:	f7ff ffc2 	bl	d4ac4 <_ZNK12MCP79410Time8getMonthEv>
   d4b40:	3801      	subs	r0, #1
   d4b42:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d4b44:	4620      	mov	r0, r4
   d4b46:	f7ff ffc2 	bl	d4ace <_ZNK12MCP79410Time13getDayOfMonthEv>
   d4b4a:	9004      	str	r0, [sp, #16]

	tm.tm_hour = getHour();
   d4b4c:	4620      	mov	r0, r4
   d4b4e:	f7ff ffc3 	bl	d4ad8 <_ZNK12MCP79410Time7getHourEv>
   d4b52:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d4b54:	4620      	mov	r0, r4
   d4b56:	f7ff ffd8 	bl	d4b0a <_ZNK12MCP79410Time9getMinuteEv>
   d4b5a:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d4b5c:	4620      	mov	r0, r4
   d4b5e:	f7ff ffd9 	bl	d4b14 <_ZNK12MCP79410Time9getSecondEv>
   d4b62:	9001      	str	r0, [sp, #4]

	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
   d4b64:	a801      	add	r0, sp, #4
   d4b66:	f004 fbdd 	bl	d9324 <mktime>
}
   d4b6a:	b00a      	add	sp, #40	; 0x28
   d4b6c:	bd10      	pop	{r4, pc}

000d4b6e <_ZN12MCP79410Time8intToBcdEi>:
uint8_t MCP79410Time::intToBcd(int value) {
	uint8_t result;

	result = (uint8_t) (((value / 10) % 10) << 4);

	result |= (uint8_t) (value % 10);
   d4b6e:	220a      	movs	r2, #10
   d4b70:	fb90 f3f2 	sdiv	r3, r0, r2
   d4b74:	fb93 f1f2 	sdiv	r1, r3, r2
   d4b78:	fb02 3111 	mls	r1, r2, r1, r3
   d4b7c:	fb02 0313 	mls	r3, r2, r3, r0
   d4b80:	ea43 1001 	orr.w	r0, r3, r1, lsl #4

	return result;
}
   d4b84:	b2c0      	uxtb	r0, r0
   d4b86:	4770      	bx	lr

000d4b88 <_ZN12MCP79410Time7setYearEi>:
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
   d4b88:	2364      	movs	r3, #100	; 0x64
int MCP79410Time::getYear() const {
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
   d4b8a:	b510      	push	{r4, lr}
   d4b8c:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d4b8e:	fb91 f0f3 	sdiv	r0, r1, r3
   d4b92:	fb00 1013 	mls	r0, r0, r3, r1
   d4b96:	f7ff ffea 	bl	d4b6e <_ZN12MCP79410Time8intToBcdEi>
   d4b9a:	72a0      	strb	r0, [r4, #10]
   d4b9c:	bd10      	pop	{r4, pc}

000d4b9e <_ZN12MCP79410Time8setMonthEi>:

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
}

void MCP79410Time::setMonth(int value) {
   d4b9e:	b510      	push	{r4, lr}
   d4ba0:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d4ba2:	4608      	mov	r0, r1
   d4ba4:	f7ff ffe3 	bl	d4b6e <_ZN12MCP79410Time8intToBcdEi>
   d4ba8:	72e0      	strb	r0, [r4, #11]
   d4baa:	bd10      	pop	{r4, pc}

000d4bac <_ZN12MCP79410Time13setDayOfMonthEi>:

int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
}

void MCP79410Time::setDayOfMonth(int value) {
   d4bac:	b510      	push	{r4, lr}
   d4bae:	4604      	mov	r4, r0
	rawDayOfMonth &= ~0x3f;
	rawDayOfMonth |= intToBcd(value);
   d4bb0:	4608      	mov	r0, r1
   d4bb2:	f7ff ffdc 	bl	d4b6e <_ZN12MCP79410Time8intToBcdEi>
   d4bb6:	7b23      	ldrb	r3, [r4, #12]
   d4bb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d4bbc:	4318      	orrs	r0, r3
   d4bbe:	7320      	strb	r0, [r4, #12]
   d4bc0:	bd10      	pop	{r4, pc}

000d4bc2 <_ZN12MCP79410Time12setDayOfWeekEi>:
	// rawDayOfWeek has the day of week 1 - 7 in the low bits. However, it does not enforce a particular day of week scheme;
	// it just keeps rolling it as time increments.
	return bcdToInt(rawDayOfWeek & 0x7) - 1;
}

void MCP79410Time::setDayOfWeek(int value) {
   d4bc2:	b510      	push	{r4, lr}
   d4bc4:	4604      	mov	r4, r0
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
   d4bc6:	1c48      	adds	r0, r1, #1
   d4bc8:	f7ff ffd1 	bl	d4b6e <_ZN12MCP79410Time8intToBcdEi>
   d4bcc:	7b63      	ldrb	r3, [r4, #13]
   d4bce:	f023 0307 	bic.w	r3, r3, #7
   d4bd2:	4318      	orrs	r0, r3
   d4bd4:	7360      	strb	r0, [r4, #13]
   d4bd6:	bd10      	pop	{r4, pc}

000d4bd8 <_ZN12MCP79410Time7setHourEi>:
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
	}
}

void MCP79410Time::setHour(int value) {
   d4bd8:	b510      	push	{r4, lr}
   d4bda:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d4bdc:	4608      	mov	r0, r1
   d4bde:	f7ff ffc6 	bl	d4b6e <_ZN12MCP79410Time8intToBcdEi>
   d4be2:	73a0      	strb	r0, [r4, #14]
   d4be4:	bd10      	pop	{r4, pc}

000d4be6 <_ZN12MCP79410Time9setMinuteEi>:

int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
}

void MCP79410Time::setMinute(int value) {
   d4be6:	b510      	push	{r4, lr}
   d4be8:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d4bea:	4608      	mov	r0, r1
   d4bec:	f7ff ffbf 	bl	d4b6e <_ZN12MCP79410Time8intToBcdEi>
   d4bf0:	73e0      	strb	r0, [r4, #15]
   d4bf2:	bd10      	pop	{r4, pc}

000d4bf4 <_ZN12MCP79410Time9setSecondEi>:
int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
}

void MCP79410Time::setSecond(int value) {
   d4bf4:	b510      	push	{r4, lr}
   d4bf6:	4604      	mov	r4, r0
	rawSecond &= ~0x7f;
	rawSecond |= intToBcd(value);
   d4bf8:	4608      	mov	r0, r1
   d4bfa:	f7ff ffb8 	bl	d4b6e <_ZN12MCP79410Time8intToBcdEi>
   d4bfe:	7c23      	ldrb	r3, [r4, #16]
   d4c00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d4c04:	4318      	orrs	r0, r3
   d4c06:	7420      	strb	r0, [r4, #16]
   d4c08:	bd10      	pop	{r4, pc}

000d4c0a <_ZN12MCP79410Time12fromUnixTimeEl>:
	rawSecond = 0;
	alarmMode = 0;
}


void MCP79410Time::fromUnixTime(time_t time) {
   d4c0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4c0c:	4604      	mov	r4, r0
   d4c0e:	a802      	add	r0, sp, #8
   d4c10:	f840 1d04 	str.w	r1, [r0, #-4]!
	struct tm *tm = gmtime(&time);
   d4c14:	f004 f8da 	bl	d8dcc <gmtime>
   d4c18:	4605      	mov	r5, r0

	// Technically tm_year is years since 1900 but we can't represent dates not in 2000 - 2099
	setYear(tm->tm_year);
   d4c1a:	6941      	ldr	r1, [r0, #20]
   d4c1c:	4620      	mov	r0, r4
   d4c1e:	f7ff ffb3 	bl	d4b88 <_ZN12MCP79410Time7setYearEi>

	// 0 <= tm_mon <= 11! We use the more conventional 1-12 for getMonth/setMonth
	setMonth(tm->tm_mon + 1);
   d4c22:	6929      	ldr	r1, [r5, #16]
   d4c24:	4620      	mov	r0, r4
   d4c26:	3101      	adds	r1, #1
   d4c28:	f7ff ffb9 	bl	d4b9e <_ZN12MCP79410Time8setMonthEi>

	setDayOfMonth(tm->tm_mday);
   d4c2c:	68e9      	ldr	r1, [r5, #12]
   d4c2e:	4620      	mov	r0, r4
   d4c30:	f7ff ffbc 	bl	d4bac <_ZN12MCP79410Time13setDayOfMonthEi>

	setDayOfWeek(tm->tm_wday);
   d4c34:	69a9      	ldr	r1, [r5, #24]
   d4c36:	4620      	mov	r0, r4
   d4c38:	f7ff ffc3 	bl	d4bc2 <_ZN12MCP79410Time12setDayOfWeekEi>


	// days since Sunday – [0, 6]

	setHour(tm->tm_hour); // tm_hour is 0-23
   d4c3c:	68a9      	ldr	r1, [r5, #8]
   d4c3e:	4620      	mov	r0, r4
   d4c40:	f7ff ffca 	bl	d4bd8 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d4c44:	6869      	ldr	r1, [r5, #4]
   d4c46:	4620      	mov	r0, r4
   d4c48:	f7ff ffcd 	bl	d4be6 <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d4c4c:	6829      	ldr	r1, [r5, #0]
   d4c4e:	293b      	cmp	r1, #59	; 0x3b
   d4c50:	bfa8      	it	ge
   d4c52:	213b      	movge	r1, #59	; 0x3b
   d4c54:	4620      	mov	r0, r4
   d4c56:	f7ff ffcd 	bl	d4bf4 <_ZN12MCP79410Time9setSecondEi>
}
   d4c5a:	b003      	add	sp, #12
   d4c5c:	bd30      	pop	{r4, r5, pc}

000d4c5e <_ZN12MCP79410Time12setAlarmTimeEl>:
	clear();
	alarmMode = ALARM_DAY_OF_MONTH;
	setDayOfMonth(dayOfMonth);
}

void MCP79410Time::setAlarmTime(time_t unixTime) {
   d4c5e:	b510      	push	{r4, lr}
   d4c60:	4604      	mov	r4, r0
	fromUnixTime(unixTime);
   d4c62:	f7ff ffd2 	bl	d4c0a <_ZN12MCP79410Time12fromUnixTimeEl>
	alarmMode = ALARM_MONTH_DAY_DOW_HMS;
   d4c66:	7a63      	ldrb	r3, [r4, #9]
   d4c68:	7463      	strb	r3, [r4, #17]
   d4c6a:	bd10      	pop	{r4, pc}

000d4c6c <_ZN8MCP79410C1ER7TwoWire>:

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d4c6c:	4a08      	ldr	r2, [pc, #32]	; (d4c90 <_ZN8MCP79410C1ER7TwoWire+0x24>)
   d4c6e:	6002      	str	r2, [r0, #0]
   d4c70:	2200      	movs	r2, #0
   d4c72:	7202      	strb	r2, [r0, #8]
   d4c74:	7242      	strb	r2, [r0, #9]
   d4c76:	2201      	movs	r2, #1
   d4c78:	7282      	strb	r2, [r0, #10]
   d4c7a:	4603      	mov	r3, r0
   d4c7c:	2203      	movs	r2, #3
   d4c7e:	72c2      	strb	r2, [r0, #11]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d4c80:	4a04      	ldr	r2, [pc, #16]	; (d4c94 <_ZN8MCP79410C1ER7TwoWire+0x28>)

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d4c82:	6041      	str	r1, [r0, #4]
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d4c84:	6118      	str	r0, [r3, #16]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d4c86:	60c2      	str	r2, [r0, #12]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d4c88:	4a03      	ldr	r2, [pc, #12]	; (d4c98 <_ZN8MCP79410C1ER7TwoWire+0x2c>)
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d4c8a:	6198      	str	r0, [r3, #24]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d4c8c:	6142      	str	r2, [r0, #20]
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}
   d4c8e:	4770      	bx	lr
   d4c90:	000dacac 	.word	0x000dacac
   d4c94:	000dab7c 	.word	0x000dab7c
   d4c98:	000dab58 	.word	0x000dab58

000d4c9c <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d4c9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ca0:	4605      	mov	r5, r0
   d4ca2:	460f      	mov	r7, r1
   d4ca4:	4691      	mov	r9, r2
   d4ca6:	469a      	mov	sl, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d4ca8:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d4caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4cac:	429c      	cmp	r4, r3
   d4cae:	d230      	bcs.n	d4d12 <_ZNK8MCP7941010deviceReadEhhPhj+0x76>
		wire.beginTransmission(i2cAddr);
   d4cb0:	4639      	mov	r1, r7
   d4cb2:	6868      	ldr	r0, [r5, #4]
   d4cb4:	f001 fa4a 	bl	d614c <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d4cb8:	eb09 0104 	add.w	r1, r9, r4
   d4cbc:	6868      	ldr	r0, [r5, #4]
   d4cbe:	f7ff feb7 	bl	d4a30 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d4cc2:	2100      	movs	r1, #0
   d4cc4:	6868      	ldr	r0, [r5, #4]
   d4cc6:	f001 fa45 	bl	d6154 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d4cca:	4606      	mov	r6, r0
   d4ccc:	b9d8      	cbnz	r0, d4d06 <_ZNK8MCP7941010deviceReadEhhPhj+0x6a>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d4cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d4cd0:	6868      	ldr	r0, [r5, #4]
		wire.beginTransmission(i2cAddr);
		wire.write(addr + offset);
		stat = wire.endTransmission(false);
		if (stat == 0) {
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d4cd2:	1b1a      	subs	r2, r3, r4
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d4cd4:	2a20      	cmp	r2, #32
   d4cd6:	bf28      	it	cs
   d4cd8:	2220      	movcs	r2, #32
   d4cda:	2301      	movs	r3, #1
   d4cdc:	b2d2      	uxtb	r2, r2
   d4cde:	4639      	mov	r1, r7
   d4ce0:	f001 fa28 	bl	d6134 <_ZN7TwoWire11requestFromEhhh>
   d4ce4:	eb0a 0804 	add.w	r8, sl, r4
   d4ce8:	4683      	mov	fp, r0
   d4cea:	4646      	mov	r6, r8
			for(size_t ii = 0; ii < count; ii++) {
   d4cec:	ebc8 0306 	rsb	r3, r8, r6
   d4cf0:	459b      	cmp	fp, r3
   d4cf2:	d906      	bls.n	d4d02 <_ZNK8MCP7941010deviceReadEhhPhj+0x66>
				buf[ii + offset] = wire.read();
   d4cf4:	6868      	ldr	r0, [r5, #4]
   d4cf6:	6803      	ldr	r3, [r0, #0]
   d4cf8:	695b      	ldr	r3, [r3, #20]
   d4cfa:	4798      	blx	r3
   d4cfc:	f806 0b01 	strb.w	r0, [r6], #1
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
			for(size_t ii = 0; ii < count; ii++) {
   d4d00:	e7f4      	b.n	d4cec <_ZNK8MCP7941010deviceReadEhhPhj+0x50>
				buf[ii + offset] = wire.read();
			}
			offset += count;
   d4d02:	445c      	add	r4, fp
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d4d04:	e7d1      	b.n	d4caa <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
				buf[ii + offset] = wire.read();
			}
			offset += count;
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d4d06:	4602      	mov	r2, r0
   d4d08:	4904      	ldr	r1, [pc, #16]	; (d4d1c <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d4d0a:	4805      	ldr	r0, [pc, #20]	; (d4d20 <_ZNK8MCP7941010deviceReadEhhPhj+0x84>)
   d4d0c:	f7ff fe94 	bl	d4a38 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d4d10:	e000      	b.n	d4d14 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
   d4d12:	2600      	movs	r6, #0
		}
	}
	return stat;
}
   d4d14:	4630      	mov	r0, r6
   d4d16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4d1a:	bf00      	nop
   d4d1c:	000dabf6 	.word	0x000dabf6
   d4d20:	2003e1f0 	.word	0x2003e1f0

000d4d24 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
	buf[6] = time.rawYear;

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
}

uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d4d24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d4d26:	2301      	movs	r3, #1
   d4d28:	9300      	str	r3, [sp, #0]
   d4d2a:	460a      	mov	r2, r1
   d4d2c:	ab03      	add	r3, sp, #12
   d4d2e:	216f      	movs	r1, #111	; 0x6f
   d4d30:	f7ff ffb4 	bl	d4c9c <_ZNK8MCP7941010deviceReadEhhPhj>
   d4d34:	b910      	cbnz	r0, d4d3c <_ZNK8MCP7941022deviceReadRegisterByteEh+0x18>
		// log.trace("deviceReadRegisterByte addr=%02x value=%02x", addr, buf[0]);
		return buf[0];
   d4d36:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d4d3a:	e000      	b.n	d4d3e <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1a>
	}
	else {
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
   d4d3c:	2000      	movs	r0, #0
	}
}
   d4d3e:	b005      	add	sp, #20
   d4d40:	f85d fb04 	ldr.w	pc, [sp], #4

000d4d44 <_ZNK8MCP7941020getOscillatorRunningEv>:

bool MCP79410::getPowerFail() const {
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_PWRFAIL) != 0;
}

bool MCP79410::getOscillatorRunning() const {
   d4d44:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d4d46:	2103      	movs	r1, #3
   d4d48:	f7ff ffec 	bl	d4d24 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d4d4c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d4d50:	bd08      	pop	{r3, pc}

000d4d52 <_ZN8MCP7941012getInterruptEi>:
	 *
	 * @param offset 0 to get the base, or a constant like MCP79410::REG_ALARM_WKDAY_OFFSET (3).
	 *
	 * @return Returns either MCP79410::REG_ALARM0 or MCP79410::REG_ALARM1 plus the given offset
	 */
	uint8_t getAlarmRegister(int alarmNum, int offset = 0) { return ((alarmNum == 0) ? REG_ALARM0 : REG_ALARM1) + offset; };
   d4d52:	2900      	cmp	r1, #0
		// RTC is not set or not running, cannot set an alarm
		return false;
	}
}

bool MCP79410::getInterrupt(int alarmNum) {
   d4d54:	b508      	push	{r3, lr}
	uint8_t wkday = deviceReadRegisterByte(getAlarmRegister(alarmNum, REG_ALARM_WKDAY_OFFSET));
   d4d56:	bf14      	ite	ne
   d4d58:	2114      	movne	r1, #20
   d4d5a:	210d      	moveq	r1, #13
   d4d5c:	f7ff ffe2 	bl	d4d24 <_ZNK8MCP7941022deviceReadRegisterByteEh>

	// REG_ALARM_WKDAY_ALMIF: 1 = alarm triggered, 0 = alarm did not trigger

	return (wkday & REG_ALARM_WKDAY_ALMIF) != 0;
}
   d4d60:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d4d64:	bd08      	pop	{r3, pc}

000d4d66 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>:
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d4d66:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d4d68:	461e      	mov	r6, r3
   d4d6a:	2b00      	cmp	r3, #0
   d4d6c:	bf0c      	ite	eq
   d4d6e:	2307      	moveq	r3, #7
   d4d70:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d4d72:	9300      	str	r3, [sp, #0]
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d4d74:	4614      	mov	r4, r2
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d4d76:	ab02      	add	r3, sp, #8
   d4d78:	460a      	mov	r2, r1
   d4d7a:	216f      	movs	r1, #111	; 0x6f
   d4d7c:	f7ff ff8e 	bl	d4c9c <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d4d80:	4605      	mov	r5, r0
   d4d82:	b9d8      	cbnz	r0, d4dbc <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			time.rawSecond = buf[0];
   d4d84:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d4d88:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d4d8a:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d4d8e:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d4d90:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d4d94:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d4d96:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d4d9a:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d4d9c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d4da0:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d4da2:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d4da6:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d4da8:	b91e      	cbnz	r6, d4db2 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x4c>
				time.rawYear = buf[6];
   d4daa:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d4dae:	72a3      	strb	r3, [r4, #10]
   d4db0:	e004      	b.n	d4dbc <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			}
			else {
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d4db2:	f002 ffdf 	bl	d7d74 <_ZN9TimeClass4yearEv>
   d4db6:	f7ff feda 	bl	d4b6e <_ZN12MCP79410Time8intToBcdEi>
   d4dba:	72a0      	strb	r0, [r4, #10]
			time.rawYear = MCP79410Time::intToBcd(Time.year());
		}
	}

	return stat;
}
   d4dbc:	4628      	mov	r0, r5
   d4dbe:	b004      	add	sp, #16
   d4dc0:	bd70      	pop	{r4, r5, r6, pc}

000d4dc2 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
	else {
		return 0;
	}
}

bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d4dc2:	b538      	push	{r3, r4, r5, lr}
   d4dc4:	2300      	movs	r3, #0
   d4dc6:	460c      	mov	r4, r1
   d4dc8:	460a      	mov	r2, r1
   d4dca:	4619      	mov	r1, r3
   d4dcc:	4605      	mov	r5, r0
   d4dce:	f7ff ffca 	bl	d4d66 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
	if (stat == 0) {
   d4dd2:	b928      	cbnz	r0, d4de0 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d4dd4:	7aa3      	ldrb	r3, [r4, #10]
   d4dd6:	b11b      	cbz	r3, d4de0 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
   d4dd8:	4628      	mov	r0, r5
   d4dda:	f7ff ffb3 	bl	d4d44 <_ZNK8MCP7941020getOscillatorRunningEv>
   d4dde:	b900      	cbnz	r0, d4de2 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
			return true;
		}
		else {
			return false;
   d4de0:	2000      	movs	r0, #0
		}
	}
	else {
		return false;
	}
}
   d4de2:	bd38      	pop	{r3, r4, r5, pc}

000d4de4 <_ZNK8MCP7941010getRTCTimeEv>:

bool MCP79410::isRTCValid() const {
	return getRTCTime() != 0;
}

time_t MCP79410::getRTCTime() const {
   d4de4:	b510      	push	{r4, lr}
   d4de6:	b086      	sub	sp, #24
   d4de8:	4604      	mov	r4, r0
	MCP79410Time time;
   d4dea:	a801      	add	r0, sp, #4
   d4dec:	f7ff fe46 	bl	d4a7c <_ZN12MCP79410TimeC1Ev>

	bool bResult = getRTCTime(time);
   d4df0:	a901      	add	r1, sp, #4
   d4df2:	4620      	mov	r0, r4
   d4df4:	f7ff ffe5 	bl	d4dc2 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d4df8:	b110      	cbz	r0, d4e00 <_ZNK8MCP7941010getRTCTimeEv+0x1c>
		return time.toUnixTime();
   d4dfa:	a801      	add	r0, sp, #4
   d4dfc:	f7ff fe8f 	bl	d4b1e <_ZNK12MCP79410Time10toUnixTimeEv>
	}
	else {
		return 0;
	}
}
   d4e00:	b006      	add	sp, #24
   d4e02:	bd10      	pop	{r4, pc}

000d4e04 <_ZN8MCP794105setupEv>:

MCP79410::~MCP79410() {

}

void MCP79410::setup() {
   d4e04:	b530      	push	{r4, r5, lr}
   d4e06:	4604      	mov	r4, r0
   d4e08:	b085      	sub	sp, #20
	wire.begin();
   d4e0a:	6840      	ldr	r0, [r0, #4]
   d4e0c:	f001 f98c 	bl	d6128 <_ZN7TwoWire5beginEv>

	if (!Time.isValid()) {
   d4e10:	f002 ff88 	bl	d7d24 <_ZN9TimeClass7isValidEv>
   d4e14:	b9c0      	cbnz	r0, d4e48 <_ZN8MCP794105setupEv+0x44>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d4e16:	7ae3      	ldrb	r3, [r4, #11]
   d4e18:	079b      	lsls	r3, r3, #30
   d4e1a:	d515      	bpl.n	d4e48 <_ZN8MCP794105setupEv+0x44>
			time_t rtcTime = getRTCTime();
   d4e1c:	4620      	mov	r0, r4
   d4e1e:	f7ff ffe1 	bl	d4de4 <_ZNK8MCP7941010getRTCTimeEv>
			if (rtcTime != 0) {
   d4e22:	4605      	mov	r5, r0
   d4e24:	b180      	cbz	r0, d4e48 <_ZN8MCP794105setupEv+0x44>
				Time.setTime(rtcTime);
   d4e26:	f002 fec0 	bl	d7baa <_ZN9TimeClass7setTimeEl>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d4e2a:	4b09      	ldr	r3, [pc, #36]	; (d4e50 <_ZN8MCP794105setupEv+0x4c>)
   d4e2c:	4909      	ldr	r1, [pc, #36]	; (d4e54 <_ZN8MCP794105setupEv+0x50>)
   d4e2e:	681b      	ldr	r3, [r3, #0]
   d4e30:	462a      	mov	r2, r5
   d4e32:	4668      	mov	r0, sp
   d4e34:	f002 ff44 	bl	d7cc0 <_ZN9TimeClass6formatElPKc>
   d4e38:	4807      	ldr	r0, [pc, #28]	; (d4e58 <_ZN8MCP794105setupEv+0x54>)
   d4e3a:	9a00      	ldr	r2, [sp, #0]
   d4e3c:	4907      	ldr	r1, [pc, #28]	; (d4e5c <_ZN8MCP794105setupEv+0x58>)
   d4e3e:	f7ff fdfb 	bl	d4a38 <_ZNK5spark6Logger4infoEPKcz>
   d4e42:	4668      	mov	r0, sp
   d4e44:	f002 fdf1 	bl	d7a2a <_ZN6StringD1Ev>
			}
		}
	}

	setupDone = true;
   d4e48:	2301      	movs	r3, #1
   d4e4a:	7223      	strb	r3, [r4, #8]
}
   d4e4c:	b005      	add	sp, #20
   d4e4e:	bd30      	pop	{r4, r5, pc}
   d4e50:	2003e0a0 	.word	0x2003e0a0
   d4e54:	2003e480 	.word	0x2003e480
   d4e58:	2003e1f0 	.word	0x2003e1f0
   d4e5c:	000dac10 	.word	0x000dac10

000d4e60 <_ZNK8MCP7941010isRTCValidEv>:
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
}

bool MCP79410::isRTCValid() const {
   d4e60:	b508      	push	{r3, lr}
	return getRTCTime() != 0;
   d4e62:	f7ff ffbf 	bl	d4de4 <_ZNK8MCP7941010getRTCTimeEv>
}
   d4e66:	3000      	adds	r0, #0
   d4e68:	bf18      	it	ne
   d4e6a:	2001      	movne	r0, #1
   d4e6c:	bd08      	pop	{r3, pc}

000d4e6e <_ZN14MCP79410EEPROM8readDataEjPhj>:

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d4e6e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d4e72:	eb01 0803 	add.w	r8, r1, r3

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d4e76:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d4e78:	6803      	ldr	r3, [r0, #0]
   d4e7a:	689b      	ldr	r3, [r3, #8]

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d4e7c:	4604      	mov	r4, r0
   d4e7e:	460d      	mov	r5, r1
   d4e80:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d4e82:	4798      	blx	r3
   d4e84:	4580      	cmp	r8, r0
   d4e86:	d80a      	bhi.n	d4e9e <_ZN14MCP79410EEPROM8readDataEjPhj+0x30>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d4e88:	9600      	str	r6, [sp, #0]
   d4e8a:	463b      	mov	r3, r7
   d4e8c:	b2ea      	uxtb	r2, r5
   d4e8e:	2157      	movs	r1, #87	; 0x57
   d4e90:	6860      	ldr	r0, [r4, #4]
   d4e92:	f7ff ff03 	bl	d4c9c <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d4e96:	fab0 f080 	clz	r0, r0
   d4e9a:	0940      	lsrs	r0, r0, #5
   d4e9c:	e000      	b.n	d4ea0 <_ZN14MCP79410EEPROM8readDataEjPhj+0x32>

bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d4e9e:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}
   d4ea0:	b002      	add	sp, #8
   d4ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4ea6 <_ZN12MCP79410SRAM8readDataEjPhj>:

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d4ea6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d4eaa:	eb01 0803 	add.w	r8, r1, r3

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d4eae:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d4eb0:	6803      	ldr	r3, [r0, #0]
   d4eb2:	689b      	ldr	r3, [r3, #8]

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d4eb4:	4605      	mov	r5, r0
   d4eb6:	460c      	mov	r4, r1
   d4eb8:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d4eba:	4798      	blx	r3
   d4ebc:	4580      	cmp	r8, r0
   d4ebe:	d80c      	bhi.n	d4eda <_ZN12MCP79410SRAM8readDataEjPhj+0x34>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d4ec0:	f104 0220 	add.w	r2, r4, #32
   d4ec4:	9600      	str	r6, [sp, #0]
   d4ec6:	463b      	mov	r3, r7
   d4ec8:	b2d2      	uxtb	r2, r2
   d4eca:	216f      	movs	r1, #111	; 0x6f
   d4ecc:	6868      	ldr	r0, [r5, #4]
   d4ece:	f7ff fee5 	bl	d4c9c <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d4ed2:	fab0 f080 	clz	r0, r0
   d4ed6:	0940      	lsrs	r0, r0, #5
   d4ed8:	e000      	b.n	d4edc <_ZN12MCP79410SRAM8readDataEjPhj+0x36>

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d4eda:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d4edc:	b002      	add	sp, #8
   d4ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4ee4 <_ZN8MCP7941011deviceWriteEhhPKhj>:
		}
	}
	return stat;
}

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d4ee4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ee8:	4607      	mov	r7, r0
   d4eea:	4689      	mov	r9, r1
   d4eec:	4692      	mov	sl, r2
   d4eee:	469b      	mov	fp, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d4ef0:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d4ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4ef4:	429c      	cmp	r4, r3
   d4ef6:	d228      	bcs.n	d4f4a <_ZN8MCP7941011deviceWriteEhhPKhj+0x66>
		wire.beginTransmission(i2cAddr);
   d4ef8:	4649      	mov	r1, r9
   d4efa:	6878      	ldr	r0, [r7, #4]
   d4efc:	f001 f926 	bl	d614c <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d4f00:	eb0a 0104 	add.w	r1, sl, r4
   d4f04:	6878      	ldr	r0, [r7, #4]
   d4f06:	f7ff fd93 	bl	d4a30 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d4f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4f0c:	1b1e      	subs	r6, r3, r4
   d4f0e:	2e1f      	cmp	r6, #31
   d4f10:	eb0b 0804 	add.w	r8, fp, r4
   d4f14:	bf28      	it	cs
   d4f16:	261f      	movcs	r6, #31
   d4f18:	4645      	mov	r5, r8
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d4f1a:	6878      	ldr	r0, [r7, #4]
   d4f1c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4f20:	6802      	ldr	r2, [r0, #0]
   d4f22:	6892      	ldr	r2, [r2, #8]
   d4f24:	4790      	blx	r2
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d4f26:	ebc8 0205 	rsb	r2, r8, r5
   d4f2a:	42b2      	cmp	r2, r6
   d4f2c:	d3f5      	bcc.n	d4f1a <_ZN8MCP7941011deviceWriteEhhPKhj+0x36>
			wire.write(buf[ii + offset]);
		}

		stat = wire.endTransmission(true);
   d4f2e:	2101      	movs	r1, #1
   d4f30:	6878      	ldr	r0, [r7, #4]
   d4f32:	f001 f90f 	bl	d6154 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d4f36:	4605      	mov	r5, r0
   d4f38:	b128      	cbz	r0, d4f46 <_ZN8MCP7941011deviceWriteEhhPKhj+0x62>
			log.info("deviceWrite failed stat=%d", stat);
   d4f3a:	4602      	mov	r2, r0
   d4f3c:	4905      	ldr	r1, [pc, #20]	; (d4f54 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d4f3e:	4806      	ldr	r0, [pc, #24]	; (d4f58 <_ZN8MCP7941011deviceWriteEhhPKhj+0x74>)
   d4f40:	f7ff fd7a 	bl	d4a38 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d4f44:	e002      	b.n	d4f4c <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		}

		offset += count;
   d4f46:	4434      	add	r4, r6
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d4f48:	e7d3      	b.n	d4ef2 <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d4f4a:	2500      	movs	r5, #0

		offset += count;
	}

	return stat;
}
   d4f4c:	4628      	mov	r0, r5
   d4f4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4f52:	bf00      	nop
   d4f54:	000dac25 	.word	0x000dac25
   d4f58:	2003e1f0 	.word	0x2003e1f0

000d4f5c <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
	}

	return stat;
}

int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d4f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[7];

	buf[0] = time.rawSecond;
   d4f5e:	7c13      	ldrb	r3, [r2, #16]
   d4f60:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d4f64:	7bd3      	ldrb	r3, [r2, #15]
   d4f66:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d4f6a:	7b93      	ldrb	r3, [r2, #14]
   d4f6c:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d4f70:	7b53      	ldrb	r3, [r2, #13]
   d4f72:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d4f76:	7b13      	ldrb	r3, [r2, #12]
   d4f78:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d4f7c:	7ad3      	ldrb	r3, [r2, #11]
   d4f7e:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d4f82:	7a93      	ldrb	r3, [r2, #10]
   d4f84:	f88d 300e 	strb.w	r3, [sp, #14]

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d4f88:	2307      	movs	r3, #7
   d4f8a:	9300      	str	r3, [sp, #0]
   d4f8c:	460a      	mov	r2, r1
   d4f8e:	ab02      	add	r3, sp, #8
   d4f90:	216f      	movs	r1, #111	; 0x6f
   d4f92:	f7ff ffa7 	bl	d4ee4 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d4f96:	b005      	add	sp, #20
   d4f98:	f85d fb04 	ldr.w	pc, [sp], #4

000d4f9c <_ZN8MCP7941010setRTCTimeEl>:
		log.info("cloud time not valid");
	}
	return bResult;
}

bool MCP79410::setRTCTime(time_t unixTime) {
   d4f9c:	b510      	push	{r4, lr}
   d4f9e:	b086      	sub	sp, #24
   d4fa0:	4604      	mov	r4, r0
	MCP79410Time time;
   d4fa2:	a801      	add	r0, sp, #4
   d4fa4:	f7ff fd6a 	bl	d4a7c <_ZN12MCP79410TimeC1Ev>

	time.fromUnixTime(unixTime);
   d4fa8:	a801      	add	r0, sp, #4
   d4faa:	f7ff fe2e 	bl	d4c0a <_ZN12MCP79410Time12fromUnixTimeEl>

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d4fae:	f89d 3014 	ldrb.w	r3, [sp, #20]

	// Default is to enable the battery
	if (batteryEnable) {
   d4fb2:	7aa2      	ldrb	r2, [r4, #10]
	MCP79410Time time;

	time.fromUnixTime(unixTime);

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d4fb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d4fb8:	f88d 3014 	strb.w	r3, [sp, #20]
   d4fbc:	f89d 3011 	ldrb.w	r3, [sp, #17]

	// Default is to enable the battery
	if (batteryEnable) {
   d4fc0:	b112      	cbz	r2, d4fc8 <_ZN8MCP7941010setRTCTimeEl+0x2c>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d4fc2:	f043 0308 	orr.w	r3, r3, #8
   d4fc6:	e001      	b.n	d4fcc <_ZN8MCP7941010setRTCTimeEl+0x30>
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d4fc8:	f023 0308 	bic.w	r3, r3, #8
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d4fcc:	aa01      	add	r2, sp, #4
   d4fce:	2100      	movs	r1, #0
   d4fd0:	4620      	mov	r0, r4
	// Default is to enable the battery
	if (batteryEnable) {
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d4fd2:	f88d 3011 	strb.w	r3, [sp, #17]
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d4fd6:	f7ff ffc1 	bl	d4f5c <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d4fda:	fab0 f080 	clz	r0, r0
   d4fde:	0940      	lsrs	r0, r0, #5
   d4fe0:	b006      	add	sp, #24
   d4fe2:	bd10      	pop	{r4, pc}

000d4fe4 <_ZN8MCP7941015setRTCFromCloudEv>:
			}
		}
	}
}

bool MCP79410::setRTCFromCloud() {
   d4fe4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4fe6:	4606      	mov	r6, r0
	bool bResult = false;

	if (Time.isValid()) {
   d4fe8:	f002 fe9c 	bl	d7d24 <_ZN9TimeClass7isValidEv>
   d4fec:	4604      	mov	r4, r0
   d4fee:	b1b8      	cbz	r0, d5020 <_ZN8MCP7941015setRTCFromCloudEv+0x3c>
		time_t now = Time.now();
   d4ff0:	f002 feb9 	bl	d7d66 <_ZN9TimeClass3nowEv>
   d4ff4:	4605      	mov	r5, r0
		bResult = setRTCTime(now);
   d4ff6:	4601      	mov	r1, r0
   d4ff8:	4630      	mov	r0, r6
   d4ffa:	f7ff ffcf 	bl	d4f9c <_ZN8MCP7941010setRTCTimeEl>

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d4ffe:	4b0c      	ldr	r3, [pc, #48]	; (d5030 <_ZN8MCP7941015setRTCFromCloudEv+0x4c>)
   d5000:	490c      	ldr	r1, [pc, #48]	; (d5034 <_ZN8MCP7941015setRTCFromCloudEv+0x50>)
   d5002:	681b      	ldr	r3, [r3, #0]
   d5004:	462a      	mov	r2, r5
bool MCP79410::setRTCFromCloud() {
	bool bResult = false;

	if (Time.isValid()) {
		time_t now = Time.now();
		bResult = setRTCTime(now);
   d5006:	4604      	mov	r4, r0

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d5008:	4668      	mov	r0, sp
   d500a:	f002 fe59 	bl	d7cc0 <_ZN9TimeClass6formatElPKc>
   d500e:	9a00      	ldr	r2, [sp, #0]
   d5010:	4909      	ldr	r1, [pc, #36]	; (d5038 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d5012:	480a      	ldr	r0, [pc, #40]	; (d503c <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d5014:	f7ff fd10 	bl	d4a38 <_ZNK5spark6Logger4infoEPKcz>
   d5018:	4668      	mov	r0, sp
   d501a:	f002 fd06 	bl	d7a2a <_ZN6StringD1Ev>
   d501e:	e003      	b.n	d5028 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
	}
	else {
		log.info("cloud time not valid");
   d5020:	4907      	ldr	r1, [pc, #28]	; (d5040 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d5022:	4806      	ldr	r0, [pc, #24]	; (d503c <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d5024:	f7ff fd08 	bl	d4a38 <_ZNK5spark6Logger4infoEPKcz>
	}
	return bResult;
}
   d5028:	4620      	mov	r0, r4
   d502a:	b004      	add	sp, #16
   d502c:	bd70      	pop	{r4, r5, r6, pc}
   d502e:	bf00      	nop
   d5030:	2003e0a0 	.word	0x2003e0a0
   d5034:	2003e480 	.word	0x2003e480
   d5038:	000dac40 	.word	0x000dac40
   d503c:	2003e1f0 	.word	0x2003e1f0
   d5040:	000dac56 	.word	0x000dac56

000d5044 <_ZN8MCP794104loopEv>:
	}

	setupDone = true;
}

void MCP79410::loop() {
   d5044:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d5046:	7a45      	ldrb	r5, [r0, #9]
	}

	setupDone = true;
}

void MCP79410::loop() {
   d5048:	4604      	mov	r4, r0
	if (!timeSet) {
   d504a:	b98d      	cbnz	r5, d5070 <_ZN8MCP794104loopEv+0x2c>
		// Time has not been synchronized from the cloud
		if (Time.isValid()) {
   d504c:	f002 fe6a 	bl	d7d24 <_ZN9TimeClass7isValidEv>
   d5050:	b170      	cbz	r0, d5070 <_ZN8MCP794104loopEv+0x2c>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d5052:	a802      	add	r0, sp, #8
        return CLOUD_FN(spark_sync_time_last(&tm, nullptr), 0);
   d5054:	4629      	mov	r1, r5
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d5056:	f840 5d04 	str.w	r5, [r0, #-4]!
        return CLOUD_FN(spark_sync_time_last(&tm, nullptr), 0);
   d505a:	f000 fba1 	bl	d57a0 <spark_sync_time_last>
			// Also check timeSyncedLast, because if we set Time from RTC, then Time will
			// be valid, but not synchronized yet
			unsigned long lastSync = Particle.timeSyncedLast();
			if (lastSync != 0) {
   d505e:	b138      	cbz	r0, d5070 <_ZN8MCP794104loopEv+0x2c>
				// Time is valid and synchronized
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d5060:	7ae3      	ldrb	r3, [r4, #11]
   d5062:	07db      	lsls	r3, r3, #31
   d5064:	d502      	bpl.n	d506c <_ZN8MCP794104loopEv+0x28>
					setRTCFromCloud();
   d5066:	4620      	mov	r0, r4
   d5068:	f7ff ffbc 	bl	d4fe4 <_ZN8MCP7941015setRTCFromCloudEv>
				}
				timeSet = true;
   d506c:	2301      	movs	r3, #1
   d506e:	7263      	strb	r3, [r4, #9]
			}
		}
	}
}
   d5070:	b003      	add	sp, #12
   d5072:	bd30      	pop	{r4, r5, pc}

000d5074 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
	}
}

int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d5074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	// log.trace("deviceWriteRegisterByte addr=%02x value=%02x", addr, value);

	buf[0] = value;
   d5076:	ab04      	add	r3, sp, #16
   d5078:	f803 2d04 	strb.w	r2, [r3, #-4]!

	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d507c:	2201      	movs	r2, #1
   d507e:	9200      	str	r2, [sp, #0]
   d5080:	460a      	mov	r2, r1
   d5082:	216f      	movs	r1, #111	; 0x6f
   d5084:	f7ff ff2e 	bl	d4ee4 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d5088:	b005      	add	sp, #20
   d508a:	f85d fb04 	ldr.w	pc, [sp], #4

000d508e <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
		return deviceWriteRegisterByteMask(addr, ~value, 0);
	}
}


int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d508e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5090:	4614      	mov	r4, r2
   d5092:	4605      	mov	r5, r0
   d5094:	460e      	mov	r6, r1
   d5096:	461f      	mov	r7, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d5098:	f7ff fe44 	bl	d4d24 <_ZNK8MCP7941022deviceReadRegisterByteEh>

	value &= andMask;
   d509c:	4020      	ands	r0, r4
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d509e:	ea40 0207 	orr.w	r2, r0, r7
   d50a2:	4631      	mov	r1, r6
   d50a4:	4628      	mov	r0, r5
}
   d50a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	value &= andMask;
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d50aa:	f7ff bfe3 	b.w	d5074 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d50ae <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>:

int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
   d50ae:	b113      	cbz	r3, d50b6 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0x8>
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d50b0:	4613      	mov	r3, r2
   d50b2:	22ff      	movs	r2, #255	; 0xff
   d50b4:	e001      	b.n	d50ba <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0xc>
	}
	else {
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d50b6:	43d2      	mvns	r2, r2
   d50b8:	b2d2      	uxtb	r2, r2
   d50ba:	f7ff bfe8 	b.w	d508e <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>

000d50be <_ZN8MCP7941014clearInterruptEi>:
   d50be:	2900      	cmp	r1, #0

	return (wkday & REG_ALARM_WKDAY_ALMIF) != 0;
}

void MCP79410::clearInterrupt(int alarmNum) {
	deviceWriteRegisterFlag(getAlarmRegister(alarmNum, REG_ALARM_WKDAY_OFFSET), REG_ALARM_WKDAY_ALMIF, false);
   d50c0:	f04f 0300 	mov.w	r3, #0
   d50c4:	f04f 0208 	mov.w	r2, #8
   d50c8:	bf14      	ite	ne
   d50ca:	2114      	movne	r1, #20
   d50cc:	210d      	moveq	r1, #13
   d50ce:	f7ff bfee 	b.w	d50ae <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>

000d50d2 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d50d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d50d6:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d50da:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d50dc:	6803      	ldr	r3, [r0, #0]
   d50de:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d50e0:	4605      	mov	r5, r0
   d50e2:	460c      	mov	r4, r1
   d50e4:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d50e6:	4798      	blx	r3
   d50e8:	4580      	cmp	r8, r0
   d50ea:	d80c      	bhi.n	d5106 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x34>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d50ec:	f104 0220 	add.w	r2, r4, #32
   d50f0:	9600      	str	r6, [sp, #0]
   d50f2:	463b      	mov	r3, r7
   d50f4:	b2d2      	uxtb	r2, r2
   d50f6:	216f      	movs	r1, #111	; 0x6f
   d50f8:	6868      	ldr	r0, [r5, #4]
   d50fa:	f7ff fef3 	bl	d4ee4 <_ZN8MCP7941011deviceWriteEhhPKhj>

	return (stat == 0);
   d50fe:	fab0 f080 	clz	r0, r0
   d5102:	0940      	lsrs	r0, r0, #5
   d5104:	e000      	b.n	d5108 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d5106:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d5108:	b002      	add	sp, #8
   d510a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d510e <_ZN8MCP794108setAlarmERK12MCP79410Timebi>:
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d510e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d5110:	2b01      	cmp	r3, #1
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d5112:	b085      	sub	sp, #20
   d5114:	4606      	mov	r6, r0
   d5116:	460c      	mov	r4, r1
   d5118:	4617      	mov	r7, r2
   d511a:	461d      	mov	r5, r3
	if (alarmNum < 0 || alarmNum > 1) {
   d511c:	d901      	bls.n	d5122 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d511e:	2000      	movs	r0, #0
   d5120:	e043      	b.n	d51aa <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x9c>
	}

	if (getOscillatorRunning()) {
   d5122:	f7ff fe0f 	bl	d4d44 <_ZNK8MCP7941020getOscillatorRunningEv>
   d5126:	2800      	cmp	r0, #0
   d5128:	d0f9      	beq.n	d511e <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x10>
		uint8_t buf[6];

		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);
   d512a:	4629      	mov	r1, r5
   d512c:	4630      	mov	r0, r6
   d512e:	f7ff ffc6 	bl	d50be <_ZN8MCP7941014clearInterruptEi>

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d5132:	7c23      	ldrb	r3, [r4, #16]
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d5134:	7b22      	ldrb	r2, [r4, #12]
		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d5136:	f88d 3008 	strb.w	r3, [sp, #8]
		buf[1] = time.rawMinute;
   d513a:	7be3      	ldrb	r3, [r4, #15]
   d513c:	f88d 3009 	strb.w	r3, [sp, #9]
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d5140:	f88d 200c 	strb.w	r2, [sp, #12]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d5144:	7ba3      	ldrb	r3, [r4, #14]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d5146:	7ae2      	ldrb	r2, [r4, #11]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d5148:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d514c:	f88d 200d 	strb.w	r2, [sp, #13]
		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
   d5150:	7b63      	ldrb	r3, [r4, #13]
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;

		if (polarity) {
   d5152:	b117      	cbz	r7, d515a <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x4c>
			// REG_ALARM_WKDAY_ALMPOL: 1 = alarm triggered, 0 = alarm did not trigger
			buf[3] |= REG_ALARM_WKDAY_ALMPOL;
   d5154:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d5158:	e001      	b.n	d515e <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x50>
		}
		else {
			buf[3] &= ~REG_ALARM_WKDAY_ALMPOL;
   d515a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d515e:	f88d 300b 	strb.w	r3, [sp, #11]
		}
		buf[3] |= (time.alarmMode & 0x7) << 4;
   d5162:	7c63      	ldrb	r3, [r4, #17]
   d5164:	f89d 200b 	ldrb.w	r2, [sp, #11]
   d5168:	011b      	lsls	r3, r3, #4
   d516a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   d516e:	4313      	orrs	r3, r2
   d5170:	2d00      	cmp	r5, #0
   d5172:	f88d 300b 	strb.w	r3, [sp, #11]

		uint8_t reg = getAlarmRegister(alarmNum);

		// log.trace("setAlarm %02x%02x%02x%02x%02x%02x starting at reg=%02x", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], reg);

		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
   d5176:	f04f 0306 	mov.w	r3, #6
   d517a:	9300      	str	r3, [sp, #0]
   d517c:	bf08      	it	eq
   d517e:	220a      	moveq	r2, #10
   d5180:	ab02      	add	r3, sp, #8
   d5182:	bf18      	it	ne
   d5184:	2211      	movne	r2, #17
   d5186:	216f      	movs	r1, #111	; 0x6f
   d5188:	4630      	mov	r0, r6
   d518a:	f7ff feab 	bl	d4ee4 <_ZN8MCP7941011deviceWriteEhhPKhj>
		if (stat == 0) {
   d518e:	4604      	mov	r4, r0
   d5190:	b940      	cbnz	r0, d51a4 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x96>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d5192:	2d00      	cmp	r5, #0
int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d5194:	bf0c      	ite	eq
   d5196:	2310      	moveq	r3, #16
   d5198:	2320      	movne	r3, #32
   d519a:	22ff      	movs	r2, #255	; 0xff
   d519c:	2107      	movs	r1, #7
   d519e:	4630      	mov	r0, r6
   d51a0:	f7ff ff75 	bl	d508e <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
		if (stat == 0) {
			deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), true);
		}

		return (stat == 0);
   d51a4:	fab4 f084 	clz	r0, r4
   d51a8:	0940      	lsrs	r0, r0, #5
	}
	else {
		return false;
	}
}
   d51aa:	b005      	add	sp, #20
   d51ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d51ae <_ZN8MCP794108setAlarmEibi>:

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d51ae:	b5f0      	push	{r4, r5, r6, r7, lr}
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d51b0:	2b01      	cmp	r3, #1
	else {
		return false;
	}
}

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d51b2:	b087      	sub	sp, #28
   d51b4:	4606      	mov	r6, r0
   d51b6:	460c      	mov	r4, r1
   d51b8:	4617      	mov	r7, r2
   d51ba:	461d      	mov	r5, r3
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d51bc:	d901      	bls.n	d51c2 <_ZN8MCP794108setAlarmEibi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d51be:	2000      	movs	r0, #0
   d51c0:	e010      	b.n	d51e4 <_ZN8MCP794108setAlarmEibi+0x36>
	}

	time_t unixTime = getRTCTime();
   d51c2:	f7ff fe0f 	bl	d4de4 <_ZNK8MCP7941010getRTCTimeEv>
	if (unixTime != 0) {
   d51c6:	2800      	cmp	r0, #0
   d51c8:	d0f9      	beq.n	d51be <_ZN8MCP794108setAlarmEibi+0x10>
		unixTime += secondsFromNow;
   d51ca:	1901      	adds	r1, r0, r4

		// Set an alarm for month, dayOfMonth, dayOfWeek, hour, minute, second
		MCP79410Time time;
   d51cc:	a801      	add	r0, sp, #4
   d51ce:	f7ff fc55 	bl	d4a7c <_ZN12MCP79410TimeC1Ev>
		time.setAlarmTime(unixTime);
   d51d2:	a801      	add	r0, sp, #4
   d51d4:	f7ff fd43 	bl	d4c5e <_ZN12MCP79410Time12setAlarmTimeEl>

		return setAlarm(time, polarity, alarmNum);
   d51d8:	462b      	mov	r3, r5
   d51da:	463a      	mov	r2, r7
   d51dc:	a901      	add	r1, sp, #4
   d51de:	4630      	mov	r0, r6
   d51e0:	f7ff ff95 	bl	d510e <_ZN8MCP794108setAlarmERK12MCP79410Timebi>
	}
	else {
		// RTC is not set or not running, cannot set an alarm
		return false;
	}
}
   d51e4:	b007      	add	sp, #28
   d51e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d51e8 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d51e8:	b538      	push	{r3, r4, r5, lr}
   d51ea:	4605      	mov	r5, r0
   d51ec:	2432      	movs	r4, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d51ee:	2157      	movs	r1, #87	; 0x57
   d51f0:	6868      	ldr	r0, [r5, #4]
   d51f2:	f000 ffab 	bl	d614c <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d51f6:	2101      	movs	r1, #1
   d51f8:	6868      	ldr	r0, [r5, #4]
   d51fa:	f000 ffab 	bl	d6154 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d51fe:	b108      	cbz	r0, d5204 <_ZN8MCP7941013waitForEEPROMEv+0x1c>

	return stat;
}

void MCP79410::waitForEEPROM() {
	for(size_t tries = 0; tries < 50; tries++) {
   d5200:	3c01      	subs	r4, #1
   d5202:	d1f4      	bne.n	d51ee <_ZN8MCP7941013waitForEEPROMEv+0x6>
   d5204:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5208 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
	}

	return stat;
}

int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d5208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d520c:	4605      	mov	r5, r0
   d520e:	18d7      	adds	r7, r2, r3
   d5210:	4614      	mov	r4, r2
	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
		wire.write(addr + offset);
   d5212:	ebc2 0801 	rsb	r8, r2, r1
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d5216:	42bc      	cmp	r4, r7
   d5218:	d01e      	beq.n	d5258 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x50>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d521a:	2157      	movs	r1, #87	; 0x57
   d521c:	6868      	ldr	r0, [r5, #4]
   d521e:	f000 ff95 	bl	d614c <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d5222:	eb08 0104 	add.w	r1, r8, r4
   d5226:	6868      	ldr	r0, [r5, #4]
   d5228:	f7ff fc02 	bl	d4a30 <_ZN7TwoWire5writeEj>
		// if (bufLen != 1) {
		//	log.trace("deviceWriteEEPROM addr=%02x count=%u", addr + offset, count);
		// }

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d522c:	6868      	ldr	r0, [r5, #4]
   d522e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5232:	6803      	ldr	r3, [r0, #0]
   d5234:	689b      	ldr	r3, [r3, #8]
   d5236:	4798      	blx	r3
		}

		stat = wire.endTransmission(true);
   d5238:	2101      	movs	r1, #1
   d523a:	6868      	ldr	r0, [r5, #4]
   d523c:	f000 ff8a 	bl	d6154 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d5240:	4606      	mov	r6, r0
   d5242:	b128      	cbz	r0, d5250 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x48>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d5244:	4602      	mov	r2, r0
   d5246:	4906      	ldr	r1, [pc, #24]	; (d5260 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d5248:	4806      	ldr	r0, [pc, #24]	; (d5264 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d524a:	f7ff fbf5 	bl	d4a38 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d524e:	e004      	b.n	d525a <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x52>
		}

		waitForEEPROM();
   d5250:	4628      	mov	r0, r5
   d5252:	f7ff ffc9 	bl	d51e8 <_ZN8MCP7941013waitForEEPROMEv>
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d5256:	e7de      	b.n	d5216 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d5258:	2600      	movs	r6, #0

		offset += count;
	}

	return stat;
}
   d525a:	4630      	mov	r0, r6
   d525c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5260:	000dac6b 	.word	0x000dac6b
   d5264:	2003e1f0 	.word	0x2003e1f0

000d5268 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d526c:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5270:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d5272:	6803      	ldr	r3, [r0, #0]
   d5274:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5276:	4604      	mov	r4, r0
   d5278:	460d      	mov	r5, r1
   d527a:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d527c:	4798      	blx	r3
   d527e:	4580      	cmp	r8, r0
   d5280:	d80a      	bhi.n	d5298 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x30>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d5282:	4633      	mov	r3, r6
   d5284:	463a      	mov	r2, r7
   d5286:	b2e9      	uxtb	r1, r5
   d5288:	6860      	ldr	r0, [r4, #4]
   d528a:	f7ff ffbd 	bl	d5208 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>

	return (stat == 0);
   d528e:	fab0 f080 	clz	r0, r0
   d5292:	0940      	lsrs	r0, r0, #5
   d5294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d5298:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);

	return (stat == 0);
}
   d529a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d52a0 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
		if (stat == 0) {
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d52a0:	b508      	push	{r3, lr}
   d52a2:	f000 f879 	bl	d5398 <HAL_Pin_Map>
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d52a6:	4b02      	ldr	r3, [pc, #8]	; (d52b0 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x10>)
   d52a8:	4a02      	ldr	r2, [pc, #8]	; (d52b4 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x14>)
   d52aa:	601a      	str	r2, [r3, #0]
   d52ac:	bd08      	pop	{r3, pc}
   d52ae:	bf00      	nop
   d52b0:	2003e1f0 	.word	0x2003e1f0
   d52b4:	000dac8c 	.word	0x000dac8c

000d52b8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d52b8:	b508      	push	{r3, lr}
   d52ba:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <os_thread_is_current+0xc>)
   d52bc:	681b      	ldr	r3, [r3, #0]
   d52be:	689b      	ldr	r3, [r3, #8]
   d52c0:	9301      	str	r3, [sp, #4]
   d52c2:	bd08      	pop	{r3, pc}
   d52c4:	00030248 	.word	0x00030248

000d52c8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d52c8:	b508      	push	{r3, lr}
   d52ca:	4b02      	ldr	r3, [pc, #8]	; (d52d4 <os_thread_join+0xc>)
   d52cc:	681b      	ldr	r3, [r3, #0]
   d52ce:	691b      	ldr	r3, [r3, #16]
   d52d0:	9301      	str	r3, [sp, #4]
   d52d2:	bd08      	pop	{r3, pc}
   d52d4:	00030248 	.word	0x00030248

000d52d8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d52d8:	b508      	push	{r3, lr}
   d52da:	4b02      	ldr	r3, [pc, #8]	; (d52e4 <os_thread_cleanup+0xc>)
   d52dc:	681b      	ldr	r3, [r3, #0]
   d52de:	695b      	ldr	r3, [r3, #20]
   d52e0:	9301      	str	r3, [sp, #4]
   d52e2:	bd08      	pop	{r3, pc}
   d52e4:	00030248 	.word	0x00030248

000d52e8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d52e8:	b508      	push	{r3, lr}
   d52ea:	4b02      	ldr	r3, [pc, #8]	; (d52f4 <os_mutex_create+0xc>)
   d52ec:	681b      	ldr	r3, [r3, #0]
   d52ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52f0:	9301      	str	r3, [sp, #4]
   d52f2:	bd08      	pop	{r3, pc}
   d52f4:	00030248 	.word	0x00030248

000d52f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d52f8:	b508      	push	{r3, lr}
   d52fa:	4b02      	ldr	r3, [pc, #8]	; (d5304 <os_mutex_recursive_create+0xc>)
   d52fc:	681b      	ldr	r3, [r3, #0]
   d52fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5300:	9301      	str	r3, [sp, #4]
   d5302:	bd08      	pop	{r3, pc}
   d5304:	00030248 	.word	0x00030248

000d5308 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5308:	b508      	push	{r3, lr}
   d530a:	4b02      	ldr	r3, [pc, #8]	; (d5314 <os_mutex_recursive_lock+0xc>)
   d530c:	681b      	ldr	r3, [r3, #0]
   d530e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5310:	9301      	str	r3, [sp, #4]
   d5312:	bd08      	pop	{r3, pc}
   d5314:	00030248 	.word	0x00030248

000d5318 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5318:	b508      	push	{r3, lr}
   d531a:	4b02      	ldr	r3, [pc, #8]	; (d5324 <os_mutex_recursive_unlock+0xc>)
   d531c:	681b      	ldr	r3, [r3, #0]
   d531e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5320:	9301      	str	r3, [sp, #4]
   d5322:	bd08      	pop	{r3, pc}
   d5324:	00030248 	.word	0x00030248

000d5328 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5328:	b508      	push	{r3, lr}
   d532a:	4b02      	ldr	r3, [pc, #8]	; (d5334 <HAL_RNG_GetRandomNumber+0xc>)
   d532c:	681b      	ldr	r3, [r3, #0]
   d532e:	685b      	ldr	r3, [r3, #4]
   d5330:	9301      	str	r3, [sp, #4]
   d5332:	bd08      	pop	{r3, pc}
   d5334:	00030218 	.word	0x00030218

000d5338 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5338:	b508      	push	{r3, lr}
   d533a:	4b02      	ldr	r3, [pc, #8]	; (d5344 <HAL_Delay_Microseconds+0xc>)
   d533c:	681b      	ldr	r3, [r3, #0]
   d533e:	68db      	ldr	r3, [r3, #12]
   d5340:	9301      	str	r3, [sp, #4]
   d5342:	bd08      	pop	{r3, pc}
   d5344:	00030218 	.word	0x00030218

000d5348 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5348:	b508      	push	{r3, lr}
   d534a:	4b02      	ldr	r3, [pc, #8]	; (d5354 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d534c:	681b      	ldr	r3, [r3, #0]
   d534e:	695b      	ldr	r3, [r3, #20]
   d5350:	9301      	str	r3, [sp, #4]
   d5352:	bd08      	pop	{r3, pc}
   d5354:	00030218 	.word	0x00030218

000d5358 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5358:	b508      	push	{r3, lr}
   d535a:	4b02      	ldr	r3, [pc, #8]	; (d5364 <HAL_RTC_Get_UnixTime+0xc>)
   d535c:	681b      	ldr	r3, [r3, #0]
   d535e:	69db      	ldr	r3, [r3, #28]
   d5360:	9301      	str	r3, [sp, #4]
   d5362:	bd08      	pop	{r3, pc}
   d5364:	00030218 	.word	0x00030218

000d5368 <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
   d5368:	b508      	push	{r3, lr}
   d536a:	4b02      	ldr	r3, [pc, #8]	; (d5374 <HAL_RTC_Set_UnixTime+0xc>)
   d536c:	681b      	ldr	r3, [r3, #0]
   d536e:	6a1b      	ldr	r3, [r3, #32]
   d5370:	9301      	str	r3, [sp, #4]
   d5372:	bd08      	pop	{r3, pc}
   d5374:	00030218 	.word	0x00030218

000d5378 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5378:	b508      	push	{r3, lr}
   d537a:	4b02      	ldr	r3, [pc, #8]	; (d5384 <HAL_RTC_Time_Is_Valid+0xc>)
   d537c:	681b      	ldr	r3, [r3, #0]
   d537e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5380:	9301      	str	r3, [sp, #4]
   d5382:	bd08      	pop	{r3, pc}
   d5384:	00030218 	.word	0x00030218

000d5388 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d5388:	b508      	push	{r3, lr}
   d538a:	4b02      	ldr	r3, [pc, #8]	; (d5394 <hal_timer_millis+0xc>)
   d538c:	681b      	ldr	r3, [r3, #0]
   d538e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5390:	9301      	str	r3, [sp, #4]
   d5392:	bd08      	pop	{r3, pc}
   d5394:	00030218 	.word	0x00030218

000d5398 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5398:	b508      	push	{r3, lr}
   d539a:	4b02      	ldr	r3, [pc, #8]	; (d53a4 <HAL_Pin_Map+0xc>)
   d539c:	681b      	ldr	r3, [r3, #0]
   d539e:	681b      	ldr	r3, [r3, #0]
   d53a0:	9301      	str	r3, [sp, #4]
   d53a2:	bd08      	pop	{r3, pc}
   d53a4:	0003022c 	.word	0x0003022c

000d53a8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d53a8:	b508      	push	{r3, lr}
   d53aa:	4b02      	ldr	r3, [pc, #8]	; (d53b4 <HAL_Validate_Pin_Function+0xc>)
   d53ac:	681b      	ldr	r3, [r3, #0]
   d53ae:	685b      	ldr	r3, [r3, #4]
   d53b0:	9301      	str	r3, [sp, #4]
   d53b2:	bd08      	pop	{r3, pc}
   d53b4:	0003022c 	.word	0x0003022c

000d53b8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d53b8:	b508      	push	{r3, lr}
   d53ba:	4b02      	ldr	r3, [pc, #8]	; (d53c4 <HAL_Pin_Mode+0xc>)
   d53bc:	681b      	ldr	r3, [r3, #0]
   d53be:	689b      	ldr	r3, [r3, #8]
   d53c0:	9301      	str	r3, [sp, #4]
   d53c2:	bd08      	pop	{r3, pc}
   d53c4:	0003022c 	.word	0x0003022c

000d53c8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d53c8:	b508      	push	{r3, lr}
   d53ca:	4b02      	ldr	r3, [pc, #8]	; (d53d4 <HAL_Get_Pin_Mode+0xc>)
   d53cc:	681b      	ldr	r3, [r3, #0]
   d53ce:	68db      	ldr	r3, [r3, #12]
   d53d0:	9301      	str	r3, [sp, #4]
   d53d2:	bd08      	pop	{r3, pc}
   d53d4:	0003022c 	.word	0x0003022c

000d53d8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d53d8:	b508      	push	{r3, lr}
   d53da:	4b02      	ldr	r3, [pc, #8]	; (d53e4 <HAL_GPIO_Write+0xc>)
   d53dc:	681b      	ldr	r3, [r3, #0]
   d53de:	691b      	ldr	r3, [r3, #16]
   d53e0:	9301      	str	r3, [sp, #4]
   d53e2:	bd08      	pop	{r3, pc}
   d53e4:	0003022c 	.word	0x0003022c

000d53e8 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d53e8:	b508      	push	{r3, lr}
   d53ea:	4b02      	ldr	r3, [pc, #8]	; (d53f4 <HAL_Interrupts_Attach+0xc>)
   d53ec:	681b      	ldr	r3, [r3, #0]
   d53ee:	699b      	ldr	r3, [r3, #24]
   d53f0:	9301      	str	r3, [sp, #4]
   d53f2:	bd08      	pop	{r3, pc}
   d53f4:	0003022c 	.word	0x0003022c

000d53f8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d53f8:	b508      	push	{r3, lr}
   d53fa:	4b02      	ldr	r3, [pc, #8]	; (d5404 <HAL_Interrupts_Detach+0xc>)
   d53fc:	681b      	ldr	r3, [r3, #0]
   d53fe:	69db      	ldr	r3, [r3, #28]
   d5400:	9301      	str	r3, [sp, #4]
   d5402:	bd08      	pop	{r3, pc}
   d5404:	0003022c 	.word	0x0003022c

000d5408 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5408:	b508      	push	{r3, lr}
   d540a:	4b02      	ldr	r3, [pc, #8]	; (d5414 <HAL_ADC_Read+0xc>)
   d540c:	681b      	ldr	r3, [r3, #0]
   d540e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5410:	9301      	str	r3, [sp, #4]
   d5412:	bd08      	pop	{r3, pc}
   d5414:	0003022c 	.word	0x0003022c

000d5418 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5418:	b508      	push	{r3, lr}
   d541a:	4b02      	ldr	r3, [pc, #8]	; (d5424 <HAL_I2C_Begin+0xc>)
   d541c:	681b      	ldr	r3, [r3, #0]
   d541e:	68db      	ldr	r3, [r3, #12]
   d5420:	9301      	str	r3, [sp, #4]
   d5422:	bd08      	pop	{r3, pc}
   d5424:	00030228 	.word	0x00030228

000d5428 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d5428:	b508      	push	{r3, lr}
   d542a:	4b02      	ldr	r3, [pc, #8]	; (d5434 <HAL_I2C_Request_Data+0xc>)
   d542c:	681b      	ldr	r3, [r3, #0]
   d542e:	695b      	ldr	r3, [r3, #20]
   d5430:	9301      	str	r3, [sp, #4]
   d5432:	bd08      	pop	{r3, pc}
   d5434:	00030228 	.word	0x00030228

000d5438 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d5438:	b508      	push	{r3, lr}
   d543a:	4b02      	ldr	r3, [pc, #8]	; (d5444 <HAL_I2C_Begin_Transmission+0xc>)
   d543c:	681b      	ldr	r3, [r3, #0]
   d543e:	699b      	ldr	r3, [r3, #24]
   d5440:	9301      	str	r3, [sp, #4]
   d5442:	bd08      	pop	{r3, pc}
   d5444:	00030228 	.word	0x00030228

000d5448 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5448:	b508      	push	{r3, lr}
   d544a:	4b02      	ldr	r3, [pc, #8]	; (d5454 <HAL_I2C_End_Transmission+0xc>)
   d544c:	681b      	ldr	r3, [r3, #0]
   d544e:	69db      	ldr	r3, [r3, #28]
   d5450:	9301      	str	r3, [sp, #4]
   d5452:	bd08      	pop	{r3, pc}
   d5454:	00030228 	.word	0x00030228

000d5458 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5458:	b508      	push	{r3, lr}
   d545a:	4b02      	ldr	r3, [pc, #8]	; (d5464 <HAL_I2C_Write_Data+0xc>)
   d545c:	681b      	ldr	r3, [r3, #0]
   d545e:	6a1b      	ldr	r3, [r3, #32]
   d5460:	9301      	str	r3, [sp, #4]
   d5462:	bd08      	pop	{r3, pc}
   d5464:	00030228 	.word	0x00030228

000d5468 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5468:	b508      	push	{r3, lr}
   d546a:	4b02      	ldr	r3, [pc, #8]	; (d5474 <HAL_I2C_Available_Data+0xc>)
   d546c:	681b      	ldr	r3, [r3, #0]
   d546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5470:	9301      	str	r3, [sp, #4]
   d5472:	bd08      	pop	{r3, pc}
   d5474:	00030228 	.word	0x00030228

000d5478 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5478:	b508      	push	{r3, lr}
   d547a:	4b02      	ldr	r3, [pc, #8]	; (d5484 <HAL_I2C_Read_Data+0xc>)
   d547c:	681b      	ldr	r3, [r3, #0]
   d547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5480:	9301      	str	r3, [sp, #4]
   d5482:	bd08      	pop	{r3, pc}
   d5484:	00030228 	.word	0x00030228

000d5488 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5488:	b508      	push	{r3, lr}
   d548a:	4b02      	ldr	r3, [pc, #8]	; (d5494 <HAL_I2C_Peek_Data+0xc>)
   d548c:	681b      	ldr	r3, [r3, #0]
   d548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5490:	9301      	str	r3, [sp, #4]
   d5492:	bd08      	pop	{r3, pc}
   d5494:	00030228 	.word	0x00030228

000d5498 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5498:	b508      	push	{r3, lr}
   d549a:	4b02      	ldr	r3, [pc, #8]	; (d54a4 <HAL_I2C_Flush_Data+0xc>)
   d549c:	681b      	ldr	r3, [r3, #0]
   d549e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d54a0:	9301      	str	r3, [sp, #4]
   d54a2:	bd08      	pop	{r3, pc}
   d54a4:	00030228 	.word	0x00030228

000d54a8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d54a8:	b508      	push	{r3, lr}
   d54aa:	4b02      	ldr	r3, [pc, #8]	; (d54b4 <HAL_I2C_Is_Enabled+0xc>)
   d54ac:	681b      	ldr	r3, [r3, #0]
   d54ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d54b0:	9301      	str	r3, [sp, #4]
   d54b2:	bd08      	pop	{r3, pc}
   d54b4:	00030228 	.word	0x00030228

000d54b8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d54b8:	b508      	push	{r3, lr}
   d54ba:	4b02      	ldr	r3, [pc, #8]	; (d54c4 <HAL_I2C_Init+0xc>)
   d54bc:	681b      	ldr	r3, [r3, #0]
   d54be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d54c0:	9301      	str	r3, [sp, #4]
   d54c2:	bd08      	pop	{r3, pc}
   d54c4:	00030228 	.word	0x00030228

000d54c8 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d54c8:	b508      	push	{r3, lr}
   d54ca:	4b02      	ldr	r3, [pc, #8]	; (d54d4 <HAL_I2C_Acquire+0xc>)
   d54cc:	681b      	ldr	r3, [r3, #0]
   d54ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d54d0:	9301      	str	r3, [sp, #4]
   d54d2:	bd08      	pop	{r3, pc}
   d54d4:	00030228 	.word	0x00030228

000d54d8 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d54d8:	b508      	push	{r3, lr}
   d54da:	4b02      	ldr	r3, [pc, #8]	; (d54e4 <HAL_I2C_Release+0xc>)
   d54dc:	681b      	ldr	r3, [r3, #0]
   d54de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d54e0:	9301      	str	r3, [sp, #4]
   d54e2:	bd08      	pop	{r3, pc}
   d54e4:	00030228 	.word	0x00030228

000d54e8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d54e8:	b508      	push	{r3, lr}
   d54ea:	4b02      	ldr	r3, [pc, #8]	; (d54f4 <inet_inet_ntop+0xc>)
   d54ec:	681b      	ldr	r3, [r3, #0]
   d54ee:	695b      	ldr	r3, [r3, #20]
   d54f0:	9301      	str	r3, [sp, #4]
   d54f2:	bd08      	pop	{r3, pc}
   d54f4:	00030264 	.word	0x00030264

000d54f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d54f8:	b508      	push	{r3, lr}
   d54fa:	4b02      	ldr	r3, [pc, #8]	; (d5504 <netdb_freeaddrinfo+0xc>)
   d54fc:	681b      	ldr	r3, [r3, #0]
   d54fe:	689b      	ldr	r3, [r3, #8]
   d5500:	9301      	str	r3, [sp, #4]
   d5502:	bd08      	pop	{r3, pc}
   d5504:	00030268 	.word	0x00030268

000d5508 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5508:	b508      	push	{r3, lr}
   d550a:	4b02      	ldr	r3, [pc, #8]	; (d5514 <netdb_getaddrinfo+0xc>)
   d550c:	681b      	ldr	r3, [r3, #0]
   d550e:	68db      	ldr	r3, [r3, #12]
   d5510:	9301      	str	r3, [sp, #4]
   d5512:	bd08      	pop	{r3, pc}
   d5514:	00030268 	.word	0x00030268

000d5518 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5518:	b508      	push	{r3, lr}
   d551a:	4b02      	ldr	r3, [pc, #8]	; (d5524 <HAL_SPI_Init+0xc>)
   d551c:	681b      	ldr	r3, [r3, #0]
   d551e:	69db      	ldr	r3, [r3, #28]
   d5520:	9301      	str	r3, [sp, #4]
   d5522:	bd08      	pop	{r3, pc}
   d5524:	00030230 	.word	0x00030230

000d5528 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5528:	b508      	push	{r3, lr}
   d552a:	4b02      	ldr	r3, [pc, #8]	; (d5534 <HAL_SPI_Is_Enabled+0xc>)
   d552c:	681b      	ldr	r3, [r3, #0]
   d552e:	6a1b      	ldr	r3, [r3, #32]
   d5530:	9301      	str	r3, [sp, #4]
   d5532:	bd08      	pop	{r3, pc}
   d5534:	00030230 	.word	0x00030230

000d5538 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5538:	b508      	push	{r3, lr}
   d553a:	4b02      	ldr	r3, [pc, #8]	; (d5544 <HAL_USART_Init+0xc>)
   d553c:	681b      	ldr	r3, [r3, #0]
   d553e:	681b      	ldr	r3, [r3, #0]
   d5540:	9301      	str	r3, [sp, #4]
   d5542:	bd08      	pop	{r3, pc}
   d5544:	0003023c 	.word	0x0003023c

000d5548 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d5548:	b508      	push	{r3, lr}
   d554a:	4b02      	ldr	r3, [pc, #8]	; (d5554 <HAL_USART_End+0xc>)
   d554c:	681b      	ldr	r3, [r3, #0]
   d554e:	689b      	ldr	r3, [r3, #8]
   d5550:	9301      	str	r3, [sp, #4]
   d5552:	bd08      	pop	{r3, pc}
   d5554:	0003023c 	.word	0x0003023c

000d5558 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5558:	b508      	push	{r3, lr}
   d555a:	4b02      	ldr	r3, [pc, #8]	; (d5564 <HAL_USART_Write_Data+0xc>)
   d555c:	681b      	ldr	r3, [r3, #0]
   d555e:	68db      	ldr	r3, [r3, #12]
   d5560:	9301      	str	r3, [sp, #4]
   d5562:	bd08      	pop	{r3, pc}
   d5564:	0003023c 	.word	0x0003023c

000d5568 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5568:	b508      	push	{r3, lr}
   d556a:	4b02      	ldr	r3, [pc, #8]	; (d5574 <HAL_USART_Available_Data+0xc>)
   d556c:	681b      	ldr	r3, [r3, #0]
   d556e:	691b      	ldr	r3, [r3, #16]
   d5570:	9301      	str	r3, [sp, #4]
   d5572:	bd08      	pop	{r3, pc}
   d5574:	0003023c 	.word	0x0003023c

000d5578 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5578:	b508      	push	{r3, lr}
   d557a:	4b02      	ldr	r3, [pc, #8]	; (d5584 <HAL_USART_Read_Data+0xc>)
   d557c:	681b      	ldr	r3, [r3, #0]
   d557e:	695b      	ldr	r3, [r3, #20]
   d5580:	9301      	str	r3, [sp, #4]
   d5582:	bd08      	pop	{r3, pc}
   d5584:	0003023c 	.word	0x0003023c

000d5588 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5588:	b508      	push	{r3, lr}
   d558a:	4b02      	ldr	r3, [pc, #8]	; (d5594 <HAL_USART_Peek_Data+0xc>)
   d558c:	681b      	ldr	r3, [r3, #0]
   d558e:	699b      	ldr	r3, [r3, #24]
   d5590:	9301      	str	r3, [sp, #4]
   d5592:	bd08      	pop	{r3, pc}
   d5594:	0003023c 	.word	0x0003023c

000d5598 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5598:	b508      	push	{r3, lr}
   d559a:	4b02      	ldr	r3, [pc, #8]	; (d55a4 <HAL_USART_Flush_Data+0xc>)
   d559c:	681b      	ldr	r3, [r3, #0]
   d559e:	69db      	ldr	r3, [r3, #28]
   d55a0:	9301      	str	r3, [sp, #4]
   d55a2:	bd08      	pop	{r3, pc}
   d55a4:	0003023c 	.word	0x0003023c

000d55a8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d55a8:	b508      	push	{r3, lr}
   d55aa:	4b02      	ldr	r3, [pc, #8]	; (d55b4 <HAL_USART_Is_Enabled+0xc>)
   d55ac:	681b      	ldr	r3, [r3, #0]
   d55ae:	6a1b      	ldr	r3, [r3, #32]
   d55b0:	9301      	str	r3, [sp, #4]
   d55b2:	bd08      	pop	{r3, pc}
   d55b4:	0003023c 	.word	0x0003023c

000d55b8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d55b8:	b508      	push	{r3, lr}
   d55ba:	4b02      	ldr	r3, [pc, #8]	; (d55c4 <HAL_USART_Available_Data_For_Write+0xc>)
   d55bc:	681b      	ldr	r3, [r3, #0]
   d55be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d55c0:	9301      	str	r3, [sp, #4]
   d55c2:	bd08      	pop	{r3, pc}
   d55c4:	0003023c 	.word	0x0003023c

000d55c8 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d55c8:	b508      	push	{r3, lr}
   d55ca:	4b02      	ldr	r3, [pc, #8]	; (d55d4 <HAL_USART_BeginConfig+0xc>)
   d55cc:	681b      	ldr	r3, [r3, #0]
   d55ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d55d0:	9301      	str	r3, [sp, #4]
   d55d2:	bd08      	pop	{r3, pc}
   d55d4:	0003023c 	.word	0x0003023c

000d55d8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d55d8:	b508      	push	{r3, lr}
   d55da:	4b02      	ldr	r3, [pc, #8]	; (d55e4 <HAL_USB_USART_Init+0xc>)
   d55dc:	681b      	ldr	r3, [r3, #0]
   d55de:	681b      	ldr	r3, [r3, #0]
   d55e0:	9301      	str	r3, [sp, #4]
   d55e2:	bd08      	pop	{r3, pc}
   d55e4:	0003024c 	.word	0x0003024c

000d55e8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d55e8:	b508      	push	{r3, lr}
   d55ea:	4b02      	ldr	r3, [pc, #8]	; (d55f4 <HAL_USB_USART_Begin+0xc>)
   d55ec:	681b      	ldr	r3, [r3, #0]
   d55ee:	685b      	ldr	r3, [r3, #4]
   d55f0:	9301      	str	r3, [sp, #4]
   d55f2:	bd08      	pop	{r3, pc}
   d55f4:	0003024c 	.word	0x0003024c

000d55f8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d55f8:	b508      	push	{r3, lr}
   d55fa:	4b02      	ldr	r3, [pc, #8]	; (d5604 <HAL_USB_USART_End+0xc>)
   d55fc:	681b      	ldr	r3, [r3, #0]
   d55fe:	689b      	ldr	r3, [r3, #8]
   d5600:	9301      	str	r3, [sp, #4]
   d5602:	bd08      	pop	{r3, pc}
   d5604:	0003024c 	.word	0x0003024c

000d5608 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5608:	b508      	push	{r3, lr}
   d560a:	4b02      	ldr	r3, [pc, #8]	; (d5614 <HAL_USB_USART_Available_Data+0xc>)
   d560c:	681b      	ldr	r3, [r3, #0]
   d560e:	691b      	ldr	r3, [r3, #16]
   d5610:	9301      	str	r3, [sp, #4]
   d5612:	bd08      	pop	{r3, pc}
   d5614:	0003024c 	.word	0x0003024c

000d5618 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5618:	b508      	push	{r3, lr}
   d561a:	4b02      	ldr	r3, [pc, #8]	; (d5624 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d561c:	681b      	ldr	r3, [r3, #0]
   d561e:	695b      	ldr	r3, [r3, #20]
   d5620:	9301      	str	r3, [sp, #4]
   d5622:	bd08      	pop	{r3, pc}
   d5624:	0003024c 	.word	0x0003024c

000d5628 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5628:	b508      	push	{r3, lr}
   d562a:	4b02      	ldr	r3, [pc, #8]	; (d5634 <HAL_USB_USART_Receive_Data+0xc>)
   d562c:	681b      	ldr	r3, [r3, #0]
   d562e:	699b      	ldr	r3, [r3, #24]
   d5630:	9301      	str	r3, [sp, #4]
   d5632:	bd08      	pop	{r3, pc}
   d5634:	0003024c 	.word	0x0003024c

000d5638 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5638:	b508      	push	{r3, lr}
   d563a:	4b02      	ldr	r3, [pc, #8]	; (d5644 <HAL_USB_USART_Send_Data+0xc>)
   d563c:	681b      	ldr	r3, [r3, #0]
   d563e:	69db      	ldr	r3, [r3, #28]
   d5640:	9301      	str	r3, [sp, #4]
   d5642:	bd08      	pop	{r3, pc}
   d5644:	0003024c 	.word	0x0003024c

000d5648 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5648:	b508      	push	{r3, lr}
   d564a:	4b02      	ldr	r3, [pc, #8]	; (d5654 <HAL_USB_USART_Flush_Data+0xc>)
   d564c:	681b      	ldr	r3, [r3, #0]
   d564e:	6a1b      	ldr	r3, [r3, #32]
   d5650:	9301      	str	r3, [sp, #4]
   d5652:	bd08      	pop	{r3, pc}
   d5654:	0003024c 	.word	0x0003024c

000d5658 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5658:	b508      	push	{r3, lr}
   d565a:	4b02      	ldr	r3, [pc, #8]	; (d5664 <panic_+0xc>)
   d565c:	681b      	ldr	r3, [r3, #0]
   d565e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5660:	9301      	str	r3, [sp, #4]
   d5662:	bd08      	pop	{r3, pc}
   d5664:	00030260 	.word	0x00030260

000d5668 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d5668:	b508      	push	{r3, lr}
   d566a:	4b02      	ldr	r3, [pc, #8]	; (d5674 <log_message_v+0xc>)
   d566c:	681b      	ldr	r3, [r3, #0]
   d566e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5670:	9301      	str	r3, [sp, #4]
   d5672:	bd08      	pop	{r3, pc}
   d5674:	00030260 	.word	0x00030260

000d5678 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d5678:	b508      	push	{r3, lr}
   d567a:	4b02      	ldr	r3, [pc, #8]	; (d5684 <log_level_name+0xc>)
   d567c:	681b      	ldr	r3, [r3, #0]
   d567e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5680:	9301      	str	r3, [sp, #4]
   d5682:	bd08      	pop	{r3, pc}
   d5684:	00030260 	.word	0x00030260

000d5688 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d5688:	b508      	push	{r3, lr}
   d568a:	4b02      	ldr	r3, [pc, #8]	; (d5694 <log_set_callbacks+0xc>)
   d568c:	681b      	ldr	r3, [r3, #0]
   d568e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d5690:	9301      	str	r3, [sp, #4]
   d5692:	bd08      	pop	{r3, pc}
   d5694:	00030260 	.word	0x00030260

000d5698 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5698:	b508      	push	{r3, lr}
   d569a:	4b02      	ldr	r3, [pc, #8]	; (d56a4 <system_mode+0xc>)
   d569c:	681b      	ldr	r3, [r3, #0]
   d569e:	681b      	ldr	r3, [r3, #0]
   d56a0:	9301      	str	r3, [sp, #4]
   d56a2:	bd08      	pop	{r3, pc}
   d56a4:	00030220 	.word	0x00030220

000d56a8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d56a8:	b508      	push	{r3, lr}
   d56aa:	4b02      	ldr	r3, [pc, #8]	; (d56b4 <set_system_mode+0xc>)
   d56ac:	681b      	ldr	r3, [r3, #0]
   d56ae:	685b      	ldr	r3, [r3, #4]
   d56b0:	9301      	str	r3, [sp, #4]
   d56b2:	bd08      	pop	{r3, pc}
   d56b4:	00030220 	.word	0x00030220

000d56b8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d56b8:	b508      	push	{r3, lr}
   d56ba:	4b02      	ldr	r3, [pc, #8]	; (d56c4 <system_delay_ms+0xc>)
   d56bc:	681b      	ldr	r3, [r3, #0]
   d56be:	695b      	ldr	r3, [r3, #20]
   d56c0:	9301      	str	r3, [sp, #4]
   d56c2:	bd08      	pop	{r3, pc}
   d56c4:	00030220 	.word	0x00030220

000d56c8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d56c8:	b508      	push	{r3, lr}
   d56ca:	4b02      	ldr	r3, [pc, #8]	; (d56d4 <system_thread_set_state+0xc>)
   d56cc:	681b      	ldr	r3, [r3, #0]
   d56ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d56d0:	9301      	str	r3, [sp, #4]
   d56d2:	bd08      	pop	{r3, pc}
   d56d4:	00030220 	.word	0x00030220

000d56d8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d56d8:	b508      	push	{r3, lr}
   d56da:	4b02      	ldr	r3, [pc, #8]	; (d56e4 <application_thread_current+0xc>)
   d56dc:	681b      	ldr	r3, [r3, #0]
   d56de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d56e0:	9301      	str	r3, [sp, #4]
   d56e2:	bd08      	pop	{r3, pc}
   d56e4:	00030220 	.word	0x00030220

000d56e8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d56e8:	b508      	push	{r3, lr}
   d56ea:	4b02      	ldr	r3, [pc, #8]	; (d56f4 <application_thread_invoke+0xc>)
   d56ec:	681b      	ldr	r3, [r3, #0]
   d56ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d56f0:	9301      	str	r3, [sp, #4]
   d56f2:	bd08      	pop	{r3, pc}
   d56f4:	00030220 	.word	0x00030220

000d56f8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d56f8:	b508      	push	{r3, lr}
   d56fa:	4b02      	ldr	r3, [pc, #8]	; (d5704 <system_thread_get_state+0xc>)
   d56fc:	681b      	ldr	r3, [r3, #0]
   d56fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5700:	9301      	str	r3, [sp, #4]
   d5702:	bd08      	pop	{r3, pc}
   d5704:	00030220 	.word	0x00030220

000d5708 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d5708:	b508      	push	{r3, lr}
   d570a:	4b02      	ldr	r3, [pc, #8]	; (d5714 <system_notify_time_changed+0xc>)
   d570c:	681b      	ldr	r3, [r3, #0]
   d570e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5710:	9301      	str	r3, [sp, #4]
   d5712:	bd08      	pop	{r3, pc}
   d5714:	00030220 	.word	0x00030220

000d5718 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5718:	b508      	push	{r3, lr}
   d571a:	4b03      	ldr	r3, [pc, #12]	; (d5728 <system_ctrl_set_app_request_handler+0x10>)
   d571c:	681b      	ldr	r3, [r3, #0]
   d571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5722:	9301      	str	r3, [sp, #4]
   d5724:	bd08      	pop	{r3, pc}
   d5726:	0000      	.short	0x0000
   d5728:	00030220 	.word	0x00030220

000d572c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d572c:	b508      	push	{r3, lr}
   d572e:	4b03      	ldr	r3, [pc, #12]	; (d573c <system_ctrl_set_result+0x10>)
   d5730:	681b      	ldr	r3, [r3, #0]
   d5732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5736:	9301      	str	r3, [sp, #4]
   d5738:	bd08      	pop	{r3, pc}
   d573a:	0000      	.short	0x0000
   d573c:	00030220 	.word	0x00030220

000d5740 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5740:	b508      	push	{r3, lr}
   d5742:	4b02      	ldr	r3, [pc, #8]	; (d574c <spark_variable+0xc>)
   d5744:	681b      	ldr	r3, [r3, #0]
   d5746:	681b      	ldr	r3, [r3, #0]
   d5748:	9301      	str	r3, [sp, #4]
   d574a:	bd08      	pop	{r3, pc}
   d574c:	00030244 	.word	0x00030244

000d5750 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5750:	b508      	push	{r3, lr}
   d5752:	4b02      	ldr	r3, [pc, #8]	; (d575c <spark_process+0xc>)
   d5754:	681b      	ldr	r3, [r3, #0]
   d5756:	689b      	ldr	r3, [r3, #8]
   d5758:	9301      	str	r3, [sp, #4]
   d575a:	bd08      	pop	{r3, pc}
   d575c:	00030244 	.word	0x00030244

000d5760 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d5760:	b508      	push	{r3, lr}
   d5762:	4b02      	ldr	r3, [pc, #8]	; (d576c <spark_cloud_flag_connect+0xc>)
   d5764:	681b      	ldr	r3, [r3, #0]
   d5766:	68db      	ldr	r3, [r3, #12]
   d5768:	9301      	str	r3, [sp, #4]
   d576a:	bd08      	pop	{r3, pc}
   d576c:	00030244 	.word	0x00030244

000d5770 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5770:	b508      	push	{r3, lr}
   d5772:	4b02      	ldr	r3, [pc, #8]	; (d577c <spark_cloud_flag_connected+0xc>)
   d5774:	681b      	ldr	r3, [r3, #0]
   d5776:	695b      	ldr	r3, [r3, #20]
   d5778:	9301      	str	r3, [sp, #4]
   d577a:	bd08      	pop	{r3, pc}
   d577c:	00030244 	.word	0x00030244

000d5780 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5780:	b508      	push	{r3, lr}
   d5782:	4b02      	ldr	r3, [pc, #8]	; (d578c <spark_send_event+0xc>)
   d5784:	681b      	ldr	r3, [r3, #0]
   d5786:	6a1b      	ldr	r3, [r3, #32]
   d5788:	9301      	str	r3, [sp, #4]
   d578a:	bd08      	pop	{r3, pc}
   d578c:	00030244 	.word	0x00030244

000d5790 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5790:	b508      	push	{r3, lr}
   d5792:	4b02      	ldr	r3, [pc, #8]	; (d579c <spark_sync_time_pending+0xc>)
   d5794:	681b      	ldr	r3, [r3, #0]
   d5796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5798:	9301      	str	r3, [sp, #4]
   d579a:	bd08      	pop	{r3, pc}
   d579c:	00030244 	.word	0x00030244

000d57a0 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
   d57a0:	b508      	push	{r3, lr}
   d57a2:	4b02      	ldr	r3, [pc, #8]	; (d57ac <spark_sync_time_last+0xc>)
   d57a4:	681b      	ldr	r3, [r3, #0]
   d57a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d57a8:	9301      	str	r3, [sp, #4]
   d57aa:	bd08      	pop	{r3, pc}
   d57ac:	00030244 	.word	0x00030244

000d57b0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d57b0:	b508      	push	{r3, lr}
   d57b2:	4b02      	ldr	r3, [pc, #8]	; (d57bc <spark_set_random_seed_from_cloud_handler+0xc>)
   d57b4:	681b      	ldr	r3, [r3, #0]
   d57b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d57b8:	9301      	str	r3, [sp, #4]
   d57ba:	bd08      	pop	{r3, pc}
   d57bc:	00030244 	.word	0x00030244

000d57c0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d57c0:	b508      	push	{r3, lr}
   d57c2:	4b02      	ldr	r3, [pc, #8]	; (d57cc <network_connect+0xc>)
   d57c4:	681b      	ldr	r3, [r3, #0]
   d57c6:	685b      	ldr	r3, [r3, #4]
   d57c8:	9301      	str	r3, [sp, #4]
   d57ca:	bd08      	pop	{r3, pc}
   d57cc:	00030240 	.word	0x00030240

000d57d0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d57d0:	b508      	push	{r3, lr}
   d57d2:	4b02      	ldr	r3, [pc, #8]	; (d57dc <network_connecting+0xc>)
   d57d4:	681b      	ldr	r3, [r3, #0]
   d57d6:	689b      	ldr	r3, [r3, #8]
   d57d8:	9301      	str	r3, [sp, #4]
   d57da:	bd08      	pop	{r3, pc}
   d57dc:	00030240 	.word	0x00030240

000d57e0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d57e0:	b508      	push	{r3, lr}
   d57e2:	4b02      	ldr	r3, [pc, #8]	; (d57ec <network_disconnect+0xc>)
   d57e4:	681b      	ldr	r3, [r3, #0]
   d57e6:	68db      	ldr	r3, [r3, #12]
   d57e8:	9301      	str	r3, [sp, #4]
   d57ea:	bd08      	pop	{r3, pc}
   d57ec:	00030240 	.word	0x00030240

000d57f0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d57f0:	b508      	push	{r3, lr}
   d57f2:	4b02      	ldr	r3, [pc, #8]	; (d57fc <network_ready+0xc>)
   d57f4:	681b      	ldr	r3, [r3, #0]
   d57f6:	691b      	ldr	r3, [r3, #16]
   d57f8:	9301      	str	r3, [sp, #4]
   d57fa:	bd08      	pop	{r3, pc}
   d57fc:	00030240 	.word	0x00030240

000d5800 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5800:	b508      	push	{r3, lr}
   d5802:	4b02      	ldr	r3, [pc, #8]	; (d580c <network_on+0xc>)
   d5804:	681b      	ldr	r3, [r3, #0]
   d5806:	695b      	ldr	r3, [r3, #20]
   d5808:	9301      	str	r3, [sp, #4]
   d580a:	bd08      	pop	{r3, pc}
   d580c:	00030240 	.word	0x00030240

000d5810 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5810:	b508      	push	{r3, lr}
   d5812:	4b02      	ldr	r3, [pc, #8]	; (d581c <network_off+0xc>)
   d5814:	681b      	ldr	r3, [r3, #0]
   d5816:	699b      	ldr	r3, [r3, #24]
   d5818:	9301      	str	r3, [sp, #4]
   d581a:	bd08      	pop	{r3, pc}
   d581c:	00030240 	.word	0x00030240

000d5820 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5820:	b508      	push	{r3, lr}
   d5822:	4b02      	ldr	r3, [pc, #8]	; (d582c <network_listen+0xc>)
   d5824:	681b      	ldr	r3, [r3, #0]
   d5826:	69db      	ldr	r3, [r3, #28]
   d5828:	9301      	str	r3, [sp, #4]
   d582a:	bd08      	pop	{r3, pc}
   d582c:	00030240 	.word	0x00030240

000d5830 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5830:	b508      	push	{r3, lr}
   d5832:	4b02      	ldr	r3, [pc, #8]	; (d583c <network_listening+0xc>)
   d5834:	681b      	ldr	r3, [r3, #0]
   d5836:	6a1b      	ldr	r3, [r3, #32]
   d5838:	9301      	str	r3, [sp, #4]
   d583a:	bd08      	pop	{r3, pc}
   d583c:	00030240 	.word	0x00030240

000d5840 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5840:	b508      	push	{r3, lr}
   d5842:	4b02      	ldr	r3, [pc, #8]	; (d584c <network_set_listen_timeout+0xc>)
   d5844:	681b      	ldr	r3, [r3, #0]
   d5846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5848:	9301      	str	r3, [sp, #4]
   d584a:	bd08      	pop	{r3, pc}
   d584c:	00030240 	.word	0x00030240

000d5850 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5850:	b508      	push	{r3, lr}
   d5852:	4b02      	ldr	r3, [pc, #8]	; (d585c <network_get_listen_timeout+0xc>)
   d5854:	681b      	ldr	r3, [r3, #0]
   d5856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5858:	9301      	str	r3, [sp, #4]
   d585a:	bd08      	pop	{r3, pc}
   d585c:	00030240 	.word	0x00030240

000d5860 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5860:	b508      	push	{r3, lr}
   d5862:	4b02      	ldr	r3, [pc, #8]	; (d586c <malloc+0xc>)
   d5864:	681b      	ldr	r3, [r3, #0]
   d5866:	681b      	ldr	r3, [r3, #0]
   d5868:	9301      	str	r3, [sp, #4]
   d586a:	bd08      	pop	{r3, pc}
   d586c:	0003021c 	.word	0x0003021c

000d5870 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5870:	b508      	push	{r3, lr}
   d5872:	4b02      	ldr	r3, [pc, #8]	; (d587c <free+0xc>)
   d5874:	681b      	ldr	r3, [r3, #0]
   d5876:	685b      	ldr	r3, [r3, #4]
   d5878:	9301      	str	r3, [sp, #4]
   d587a:	bd08      	pop	{r3, pc}
   d587c:	0003021c 	.word	0x0003021c

000d5880 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5880:	b508      	push	{r3, lr}
   d5882:	4b02      	ldr	r3, [pc, #8]	; (d588c <realloc+0xc>)
   d5884:	681b      	ldr	r3, [r3, #0]
   d5886:	689b      	ldr	r3, [r3, #8]
   d5888:	9301      	str	r3, [sp, #4]
   d588a:	bd08      	pop	{r3, pc}
   d588c:	0003021c 	.word	0x0003021c

000d5890 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d5890:	b508      	push	{r3, lr}
   d5892:	4b02      	ldr	r3, [pc, #8]	; (d589c <siprintf+0xc>)
   d5894:	681b      	ldr	r3, [r3, #0]
   d5896:	691b      	ldr	r3, [r3, #16]
   d5898:	9301      	str	r3, [sp, #4]
   d589a:	bd08      	pop	{r3, pc}
   d589c:	0003021c 	.word	0x0003021c

000d58a0 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d58a0:	b508      	push	{r3, lr}
   d58a2:	4b02      	ldr	r3, [pc, #8]	; (d58ac <siscanf+0xc>)
   d58a4:	681b      	ldr	r3, [r3, #0]
   d58a6:	699b      	ldr	r3, [r3, #24]
   d58a8:	9301      	str	r3, [sp, #4]
   d58aa:	bd08      	pop	{r3, pc}
   d58ac:	0003021c 	.word	0x0003021c

000d58b0 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d58b0:	b508      	push	{r3, lr}
   d58b2:	4b02      	ldr	r3, [pc, #8]	; (d58bc <snprintf+0xc>)
   d58b4:	681b      	ldr	r3, [r3, #0]
   d58b6:	69db      	ldr	r3, [r3, #28]
   d58b8:	9301      	str	r3, [sp, #4]
   d58ba:	bd08      	pop	{r3, pc}
   d58bc:	0003021c 	.word	0x0003021c

000d58c0 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d58c0:	b508      	push	{r3, lr}
   d58c2:	4b02      	ldr	r3, [pc, #8]	; (d58cc <sniprintf+0xc>)
   d58c4:	681b      	ldr	r3, [r3, #0]
   d58c6:	6a1b      	ldr	r3, [r3, #32]
   d58c8:	9301      	str	r3, [sp, #4]
   d58ca:	bd08      	pop	{r3, pc}
   d58cc:	0003021c 	.word	0x0003021c

000d58d0 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d58d0:	b508      	push	{r3, lr}
   d58d2:	4b02      	ldr	r3, [pc, #8]	; (d58dc <vsnprintf+0xc>)
   d58d4:	681b      	ldr	r3, [r3, #0]
   d58d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d58d8:	9301      	str	r3, [sp, #4]
   d58da:	bd08      	pop	{r3, pc}
   d58dc:	0003021c 	.word	0x0003021c

000d58e0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d58e0:	b508      	push	{r3, lr}
   d58e2:	4b02      	ldr	r3, [pc, #8]	; (d58ec <abort+0xc>)
   d58e4:	681b      	ldr	r3, [r3, #0]
   d58e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d58e8:	9301      	str	r3, [sp, #4]
   d58ea:	bd08      	pop	{r3, pc}
   d58ec:	0003021c 	.word	0x0003021c

000d58f0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d58f0:	b508      	push	{r3, lr}
   d58f2:	4b02      	ldr	r3, [pc, #8]	; (d58fc <_malloc_r+0xc>)
   d58f4:	681b      	ldr	r3, [r3, #0]
   d58f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d58f8:	9301      	str	r3, [sp, #4]
   d58fa:	bd08      	pop	{r3, pc}
   d58fc:	0003021c 	.word	0x0003021c

000d5900 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5900:	2100      	movs	r1, #0
   d5902:	f7ff bed9 	b.w	d56b8 <system_delay_ms>

000d5906 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5906:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5908:	6883      	ldr	r3, [r0, #8]
   d590a:	4604      	mov	r4, r0
   d590c:	b90b      	cbnz	r3, d5912 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d590e:	f002 fcae 	bl	d826e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5912:	68c3      	ldr	r3, [r0, #12]
   d5914:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5916:	68a3      	ldr	r3, [r4, #8]
   d5918:	b11b      	cbz	r3, d5922 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d591a:	2203      	movs	r2, #3
   d591c:	4621      	mov	r1, r4
   d591e:	4620      	mov	r0, r4
   d5920:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5922:	4620      	mov	r0, r4
   d5924:	2110      	movs	r1, #16
}
   d5926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d592a:	f002 bc86 	b.w	d823a <_ZdlPvj>

000d592e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d592e:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5930:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5932:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5934:	689b      	ldr	r3, [r3, #8]
   d5936:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5938:	68a3      	ldr	r3, [r4, #8]
   d593a:	3b01      	subs	r3, #1
   d593c:	60a3      	str	r3, [r4, #8]
   d593e:	b92b      	cbnz	r3, d594c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d5940:	6823      	ldr	r3, [r4, #0]
   d5942:	4620      	mov	r0, r4
   d5944:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d594a:	4718      	bx	r3
   d594c:	bd10      	pop	{r4, pc}

000d594e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d594e:	680b      	ldr	r3, [r1, #0]
   d5950:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5952:	b113      	cbz	r3, d595a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5954:	685a      	ldr	r2, [r3, #4]
   d5956:	3201      	adds	r2, #1
   d5958:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d595a:	4770      	bx	lr

000d595c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d595c:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d595e:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d5960:	6803      	ldr	r3, [r0, #0]
   d5962:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5964:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d5966:	d00c      	beq.n	d5982 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d5968:	b114      	cbz	r4, d5970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d596a:	6863      	ldr	r3, [r4, #4]
   d596c:	3301      	adds	r3, #1
   d596e:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d5970:	6828      	ldr	r0, [r5, #0]
   d5972:	b128      	cbz	r0, d5980 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5974:	6843      	ldr	r3, [r0, #4]
   d5976:	3b01      	subs	r3, #1
   d5978:	6043      	str	r3, [r0, #4]
   d597a:	b90b      	cbnz	r3, d5980 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d597c:	f7ff ffd7 	bl	d592e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d5980:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d5982:	4628      	mov	r0, r5
   d5984:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5988 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5988:	4802      	ldr	r0, [pc, #8]	; (d5994 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d598a:	2300      	movs	r3, #0
   d598c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d598e:	f7ff bcb3 	b.w	d52f8 <os_mutex_recursive_create>
   d5992:	bf00      	nop
   d5994:	2003e1f4 	.word	0x2003e1f4

000d5998 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5998:	2200      	movs	r2, #0
   d599a:	4611      	mov	r1, r2
   d599c:	6840      	ldr	r0, [r0, #4]
   d599e:	f7ff bf27 	b.w	d57f0 <network_ready>

000d59a2 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d59a2:	2200      	movs	r2, #0
   d59a4:	4611      	mov	r1, r2
   d59a6:	6840      	ldr	r0, [r0, #4]
   d59a8:	f7ff bf42 	b.w	d5830 <network_listening>

000d59ac <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d59ac:	2200      	movs	r2, #0
   d59ae:	4611      	mov	r1, r2
   d59b0:	6840      	ldr	r0, [r0, #4]
   d59b2:	f7ff bf4d 	b.w	d5850 <network_get_listen_timeout>

000d59b6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d59b6:	2200      	movs	r2, #0
   d59b8:	6840      	ldr	r0, [r0, #4]
   d59ba:	f7ff bf41 	b.w	d5840 <network_set_listen_timeout>

000d59be <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d59be:	2200      	movs	r2, #0
   d59c0:	f081 0101 	eor.w	r1, r1, #1
   d59c4:	6840      	ldr	r0, [r0, #4]
   d59c6:	f7ff bf2b 	b.w	d5820 <network_listen>

000d59ca <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d59ca:	2300      	movs	r3, #0
   d59cc:	461a      	mov	r2, r3
   d59ce:	4619      	mov	r1, r3
   d59d0:	6840      	ldr	r0, [r0, #4]
   d59d2:	f7ff bf1d 	b.w	d5810 <network_off>

000d59d6 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d59d6:	2300      	movs	r3, #0
   d59d8:	461a      	mov	r2, r3
   d59da:	4619      	mov	r1, r3
   d59dc:	6840      	ldr	r0, [r0, #4]
   d59de:	f7ff bf0f 	b.w	d5800 <network_on>

000d59e2 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d59e2:	2200      	movs	r2, #0
   d59e4:	4611      	mov	r1, r2
   d59e6:	6840      	ldr	r0, [r0, #4]
   d59e8:	f7ff bef2 	b.w	d57d0 <network_connecting>

000d59ec <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d59ec:	2200      	movs	r2, #0
   d59ee:	2102      	movs	r1, #2
   d59f0:	6840      	ldr	r0, [r0, #4]
   d59f2:	f7ff bef5 	b.w	d57e0 <network_disconnect>

000d59f6 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d59f6:	2300      	movs	r3, #0
   d59f8:	461a      	mov	r2, r3
   d59fa:	6840      	ldr	r0, [r0, #4]
   d59fc:	f7ff bee0 	b.w	d57c0 <network_connect>

000d5a00 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5a00:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5a02:	4c08      	ldr	r4, [pc, #32]	; (d5a24 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5a04:	2528      	movs	r5, #40	; 0x28
   d5a06:	462a      	mov	r2, r5
   d5a08:	2100      	movs	r1, #0
   d5a0a:	4620      	mov	r0, r4
   d5a0c:	f003 fba6 	bl	d915c <memset>
        cid = -1;
   d5a10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5a14:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5a16:	4b04      	ldr	r3, [pc, #16]	; (d5a28 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5a18:	8025      	strh	r5, [r4, #0]
   d5a1a:	2204      	movs	r2, #4
   d5a1c:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5a1e:	4a03      	ldr	r2, [pc, #12]	; (d5a2c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5a20:	601a      	str	r2, [r3, #0]
   d5a22:	bd38      	pop	{r3, r4, r5, pc}
   d5a24:	2003e200 	.word	0x2003e200
   d5a28:	2003e1f8 	.word	0x2003e1f8
   d5a2c:	000dacbc 	.word	0x000dacbc

000d5a30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5a30:	4770      	bx	lr

000d5a32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5a32:	2000      	movs	r0, #0
   d5a34:	4770      	bx	lr

000d5a36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5a36:	b510      	push	{r4, lr}
   d5a38:	2110      	movs	r1, #16
   d5a3a:	4604      	mov	r4, r0
   d5a3c:	f002 fbfd 	bl	d823a <_ZdlPvj>
   d5a40:	4620      	mov	r0, r4
   d5a42:	bd10      	pop	{r4, pc}

000d5a44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5a44:	b508      	push	{r3, lr}
      { delete this; }
   d5a46:	b108      	cbz	r0, d5a4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5a48:	f7ff fff5 	bl	d5a36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5a4c:	bd08      	pop	{r3, pc}

000d5a4e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5a4e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5a50:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5a52:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5a54:	b113      	cbz	r3, d5a5c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5a56:	2203      	movs	r2, #3
   d5a58:	4601      	mov	r1, r0
   d5a5a:	4798      	blx	r3
    }
   d5a5c:	4620      	mov	r0, r4
   d5a5e:	bd10      	pop	{r4, pc}

000d5a60 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5a60:	2200      	movs	r2, #0
   d5a62:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5a64:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5a66:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5a6a:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5a6c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5a70:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a72:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a74:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5a76:	680c      	ldr	r4, [r1, #0]
   d5a78:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a7a:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5a7c:	bd10      	pop	{r4, pc}

000d5a7e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5a7e:	b510      	push	{r4, lr}
   d5a80:	4604      	mov	r4, r0
    free((void*)msg_);
   d5a82:	6800      	ldr	r0, [r0, #0]
   d5a84:	f7ff fef4 	bl	d5870 <free>
}
   d5a88:	4620      	mov	r0, r4
   d5a8a:	bd10      	pop	{r4, pc}

000d5a8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5a8c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5a8e:	68c4      	ldr	r4, [r0, #12]
   d5a90:	b1f4      	cbz	r4, d5ad0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5a92:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5a94:	2b02      	cmp	r3, #2
   d5a96:	d103      	bne.n	d5aa0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5a98:	f104 000c 	add.w	r0, r4, #12
   d5a9c:	f7ff ffef 	bl	d5a7e <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5aa0:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5aa2:	b135      	cbz	r5, d5ab2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5aa4:	4628      	mov	r0, r5
   d5aa6:	f7ff ffd2 	bl	d5a4e <_ZNSt14_Function_baseD1Ev>
   d5aaa:	2110      	movs	r1, #16
   d5aac:	4628      	mov	r0, r5
   d5aae:	f002 fbc4 	bl	d823a <_ZdlPvj>
   d5ab2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5ab4:	b135      	cbz	r5, d5ac4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5ab6:	4628      	mov	r0, r5
   d5ab8:	f7ff ffc9 	bl	d5a4e <_ZNSt14_Function_baseD1Ev>
   d5abc:	2110      	movs	r1, #16
   d5abe:	4628      	mov	r0, r5
   d5ac0:	f002 fbbb 	bl	d823a <_ZdlPvj>
   d5ac4:	4620      	mov	r0, r4
   d5ac6:	2114      	movs	r1, #20
   d5ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5acc:	f002 bbb5 	b.w	d823a <_ZdlPvj>
   d5ad0:	bd38      	pop	{r3, r4, r5, pc}

000d5ad2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5ad2:	b513      	push	{r0, r1, r4, lr}
   d5ad4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5ad6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5ada:	2300      	movs	r3, #0
   d5adc:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5ade:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5ae0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5ae2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5ae4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5ae6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5ae8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5aea:	f7fe fc52 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5aee:	4620      	mov	r0, r4
   d5af0:	b002      	add	sp, #8
   d5af2:	bd10      	pop	{r4, pc}

000d5af4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5af6:	460c      	mov	r4, r1
   d5af8:	ad02      	add	r5, sp, #8
   d5afa:	f854 3b04 	ldr.w	r3, [r4], #4
   d5afe:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5b02:	4606      	mov	r6, r0
   d5b04:	460f      	mov	r7, r1
   d5b06:	a801      	add	r0, sp, #4
   d5b08:	4621      	mov	r1, r4
   d5b0a:	f7ff ff20 	bl	d594e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5b0e:	4629      	mov	r1, r5
   d5b10:	4630      	mov	r0, r6
   d5b12:	f7ff ffde 	bl	d5ad2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5b16:	a801      	add	r0, sp, #4
   d5b18:	f7fe fc3b 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b1c:	4620      	mov	r0, r4
   d5b1e:	f7fe fc38 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5b22:	4638      	mov	r0, r7
   d5b24:	2108      	movs	r1, #8
   d5b26:	f002 fb88 	bl	d823a <_ZdlPvj>
        return p;
    }
   d5b2a:	4630      	mov	r0, r6
   d5b2c:	b003      	add	sp, #12
   d5b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b30 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5b30:	b513      	push	{r0, r1, r4, lr}
   d5b32:	460b      	mov	r3, r1
   d5b34:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b36:	c803      	ldmia	r0, {r0, r1}
   d5b38:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5b3c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5b40:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5b44:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5b48:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5b4c:	b002      	add	sp, #8
   d5b4e:	bd10      	pop	{r4, pc}

000d5b50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5b50:	b538      	push	{r3, r4, r5, lr}
   d5b52:	2300      	movs	r3, #0
   d5b54:	4604      	mov	r4, r0
   d5b56:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5b58:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5b5a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5b5c:	f7fe fa9d 	bl	d409a <_Znwj>
   d5b60:	b128      	cbz	r0, d5b6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5b62:	2301      	movs	r3, #1
   d5b64:	6043      	str	r3, [r0, #4]
   d5b66:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5b68:	4b02      	ldr	r3, [pc, #8]	; (d5b74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5b6a:	6003      	str	r3, [r0, #0]
   d5b6c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5b6e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5b70:	4620      	mov	r0, r4
   d5b72:	bd38      	pop	{r3, r4, r5, pc}
   d5b74:	000dacf0 	.word	0x000dacf0

000d5b78 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b78:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5b7a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b7c:	b90a      	cbnz	r2, d5b82 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5b7e:	f002 fb76 	bl	d826e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5b82:	68c3      	ldr	r3, [r0, #12]
    }
   d5b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5b88:	4718      	bx	r3

000d5b8a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5b8a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5b8c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5b8e:	f100 0110 	add.w	r1, r0, #16
   d5b92:	f7ff fff1 	bl	d5b78 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5b96:	bd08      	pop	{r3, pc}

000d5b98 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b98:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5b9a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b9c:	b90a      	cbnz	r2, d5ba2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5b9e:	f002 fb66 	bl	d826e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5ba2:	68c3      	ldr	r3, [r0, #12]
    }
   d5ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5ba8:	4718      	bx	r3

000d5baa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5baa:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5bac:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5bae:	f100 0110 	add.w	r1, r0, #16
   d5bb2:	f7ff fff1 	bl	d5b98 <_ZNKSt8functionIFvRKbEEclES1_>
   d5bb6:	bd08      	pop	{r3, pc}

000d5bb8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5bb8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5bba:	2300      	movs	r3, #0
   d5bbc:	6083      	str	r3, [r0, #8]
   d5bbe:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5bc0:	4604      	mov	r4, r0
   d5bc2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5bc4:	b12b      	cbz	r3, d5bd2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5bc6:	2202      	movs	r2, #2
   d5bc8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5bca:	68eb      	ldr	r3, [r5, #12]
   d5bcc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5bce:	68ab      	ldr	r3, [r5, #8]
   d5bd0:	60a3      	str	r3, [r4, #8]
	}
    }
   d5bd2:	4620      	mov	r0, r4
   d5bd4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5bd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5bda:	b089      	sub	sp, #36	; 0x24
   d5bdc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5bde:	4668      	mov	r0, sp
   d5be0:	f7ff ff3e 	bl	d5a60 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5be4:	2300      	movs	r3, #0
   d5be6:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5bea:	f04f 0202 	mov.w	r2, #2
   d5bee:	e8d4 3f4f 	ldrexb	r3, [r4]
   d5bf2:	2b00      	cmp	r3, #0
   d5bf4:	d103      	bne.n	d5bfe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5bf6:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5bfa:	2900      	cmp	r1, #0
   d5bfc:	d1f7      	bne.n	d5bee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d5bfe:	d002      	beq.n	d5c06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5c00:	f88d 3008 	strb.w	r3, [sp, #8]
   d5c04:	e063      	b.n	d5cce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5c06:	f114 050c 	adds.w	r5, r4, #12
   d5c0a:	d003      	beq.n	d5c14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5c0c:	4669      	mov	r1, sp
   d5c0e:	4628      	mov	r0, r5
   d5c10:	f7ff ff26 	bl	d5a60 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5c14:	f3bf 8f5f 	dmb	sy
   d5c18:	2301      	movs	r3, #1
   d5c1a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5c1c:	2000      	movs	r0, #0
   d5c1e:	f104 0308 	add.w	r3, r4, #8
   d5c22:	f3bf 8f5f 	dmb	sy
   d5c26:	e853 6f00 	ldrex	r6, [r3]
   d5c2a:	e843 0200 	strex	r2, r0, [r3]
   d5c2e:	2a00      	cmp	r2, #0
   d5c30:	d1f9      	bne.n	d5c26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5c32:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5c36:	2e00      	cmp	r6, #0
   d5c38:	d049      	beq.n	d5cce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5c3a:	f7ff fd4d 	bl	d56d8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5c3e:	b120      	cbz	r0, d5c4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5c40:	4629      	mov	r1, r5
   d5c42:	4630      	mov	r0, r6
   d5c44:	f7ff ff98 	bl	d5b78 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5c48:	e03a      	b.n	d5cc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5c4a:	4631      	mov	r1, r6
   d5c4c:	a802      	add	r0, sp, #8
   d5c4e:	f7ff ffb3 	bl	d5bb8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5c52:	68e0      	ldr	r0, [r4, #12]
   d5c54:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5c58:	b108      	cbz	r0, d5c5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5c5a:	f003 fd27 	bl	d96ac <strdup>
   d5c5e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5c60:	2010      	movs	r0, #16
   d5c62:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5c66:	f7fe fa18 	bl	d409a <_Znwj>
   d5c6a:	4605      	mov	r5, r0
   d5c6c:	b1e8      	cbz	r0, d5caa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c6e:	2700      	movs	r7, #0
   d5c70:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5c72:	2018      	movs	r0, #24
   d5c74:	f7fe fa11 	bl	d409a <_Znwj>
   d5c78:	4604      	mov	r4, r0
   d5c7a:	b188      	cbz	r0, d5ca0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5c7c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c7e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5c80:	a802      	add	r0, sp, #8
   d5c82:	f7ff ff55 	bl	d5b30 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c86:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5c88:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5c8a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c8c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5c8e:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5c90:	a906      	add	r1, sp, #24
   d5c92:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5c94:	60e3      	str	r3, [r4, #12]
   d5c96:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5c9a:	9205      	str	r2, [sp, #20]
   d5c9c:	f7ff fee0 	bl	d5a60 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5ca0:	4b0d      	ldr	r3, [pc, #52]	; (d5cd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5ca2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5ca4:	4b0d      	ldr	r3, [pc, #52]	; (d5cdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5ca6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5ca8:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5caa:	a806      	add	r0, sp, #24
   d5cac:	f7ff fee7 	bl	d5a7e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5cb0:	a802      	add	r0, sp, #8
   d5cb2:	f7ff fecc 	bl	d5a4e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5cb6:	2200      	movs	r2, #0
   d5cb8:	4629      	mov	r1, r5
   d5cba:	4809      	ldr	r0, [pc, #36]	; (d5ce0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5cbc:	f7ff fd14 	bl	d56e8 <application_thread_invoke>
   d5cc0:	4630      	mov	r0, r6
   d5cc2:	f7ff fec4 	bl	d5a4e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5cc6:	2110      	movs	r1, #16
   d5cc8:	4630      	mov	r0, r6
   d5cca:	f002 fab6 	bl	d823a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d5cce:	4668      	mov	r0, sp
   d5cd0:	f7ff fed5 	bl	d5a7e <_ZN8particle5ErrorD1Ev>
    }
   d5cd4:	b009      	add	sp, #36	; 0x24
   d5cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5cd8:	000d5b8b 	.word	0x000d5b8b
   d5cdc:	000d5e01 	.word	0x000d5e01
   d5ce0:	000d5907 	.word	0x000d5907

000d5ce4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5ce8:	b08b      	sub	sp, #44	; 0x2c
   d5cea:	4606      	mov	r6, r0
   d5cec:	460f      	mov	r7, r1
   d5cee:	4690      	mov	r8, r2
   d5cf0:	4699      	mov	r9, r3
   d5cf2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5cf6:	f7ff fd3b 	bl	d5770 <spark_cloud_flag_connected>
   d5cfa:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d5cfc:	4683      	mov	fp, r0
   d5cfe:	bb30      	cbnz	r0, d5d4e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5d00:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5d04:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5d06:	a905      	add	r1, sp, #20
   d5d08:	4628      	mov	r0, r5
   d5d0a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5d0e:	f7ff fea7 	bl	d5a60 <_ZN8particle5ErrorC1EOS0_>
   d5d12:	2014      	movs	r0, #20
   d5d14:	f7fe f9c1 	bl	d409a <_Znwj>
   d5d18:	4604      	mov	r4, r0
   d5d1a:	b158      	cbz	r0, d5d34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5d1c:	2302      	movs	r3, #2
   d5d1e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5d20:	2301      	movs	r3, #1
   d5d22:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5d24:	f8c0 b004 	str.w	fp, [r0, #4]
   d5d28:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5d2c:	4629      	mov	r1, r5
   d5d2e:	300c      	adds	r0, #12
   d5d30:	f7ff fe96 	bl	d5a60 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5d34:	4630      	mov	r0, r6
   d5d36:	4621      	mov	r1, r4
   d5d38:	f840 4b04 	str.w	r4, [r0], #4
   d5d3c:	f7ff ff08 	bl	d5b50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5d40:	4628      	mov	r0, r5
   d5d42:	f7ff fe9c 	bl	d5a7e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5d46:	a805      	add	r0, sp, #20
   d5d48:	f7ff fe99 	bl	d5a7e <_ZN8particle5ErrorD1Ev>
   d5d4c:	e052      	b.n	d5df4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5d4e:	2400      	movs	r4, #0
   d5d50:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5d52:	2014      	movs	r0, #20
   d5d54:	606c      	str	r4, [r5, #4]
   d5d56:	60ac      	str	r4, [r5, #8]
   d5d58:	9307      	str	r3, [sp, #28]
   d5d5a:	f7fe f99e 	bl	d409a <_Znwj>
   d5d5e:	4601      	mov	r1, r0
   d5d60:	b118      	cbz	r0, d5d6a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5d62:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5d64:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5d66:	6044      	str	r4, [r0, #4]
   d5d68:	6084      	str	r4, [r0, #8]
   d5d6a:	a804      	add	r0, sp, #16
   d5d6c:	9103      	str	r1, [sp, #12]
   d5d6e:	f7ff feef 	bl	d5b50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5d72:	4b22      	ldr	r3, [pc, #136]	; (d5dfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5d74:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5d76:	2008      	movs	r0, #8
   d5d78:	f7fe f98f 	bl	d409a <_Znwj>
   d5d7c:	4604      	mov	r4, r0
   d5d7e:	b128      	cbz	r0, d5d8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d80:	9b03      	ldr	r3, [sp, #12]
   d5d82:	f840 3b04 	str.w	r3, [r0], #4
   d5d86:	a904      	add	r1, sp, #16
   d5d88:	f7ff fde1 	bl	d594e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5d8c:	9500      	str	r5, [sp, #0]
   d5d8e:	fa5f f38a 	uxtb.w	r3, sl
   d5d92:	464a      	mov	r2, r9
   d5d94:	4641      	mov	r1, r8
   d5d96:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5d98:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5d9a:	f7ff fcf1 	bl	d5780 <spark_send_event>
   d5d9e:	b920      	cbnz	r0, d5daa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5da0:	9b03      	ldr	r3, [sp, #12]
   d5da2:	785b      	ldrb	r3, [r3, #1]
   d5da4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5da8:	b183      	cbz	r3, d5dcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5daa:	9b03      	ldr	r3, [sp, #12]
   d5dac:	9305      	str	r3, [sp, #20]
   d5dae:	a904      	add	r1, sp, #16
   d5db0:	a806      	add	r0, sp, #24
   d5db2:	f7ff fdcc 	bl	d594e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5db6:	a905      	add	r1, sp, #20
   d5db8:	4630      	mov	r0, r6
   d5dba:	f7ff fe8a 	bl	d5ad2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5dbe:	a806      	add	r0, sp, #24
   d5dc0:	f7fe fae7 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5dc4:	a804      	add	r0, sp, #16
   d5dc6:	f7fe fae4 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5dca:	e013      	b.n	d5df4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5dcc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5dd0:	a905      	add	r1, sp, #20
   d5dd2:	a803      	add	r0, sp, #12
   d5dd4:	9205      	str	r2, [sp, #20]
   d5dd6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5dda:	f7ff fefd 	bl	d5bd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5dde:	a805      	add	r0, sp, #20
   d5de0:	f7ff fe4d 	bl	d5a7e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5de4:	a805      	add	r0, sp, #20
   d5de6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5de8:	f7ff fe84 	bl	d5af4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5dec:	a806      	add	r0, sp, #24
   d5dee:	f7fe fad0 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5df2:	e7da      	b.n	d5daa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5df4:	4630      	mov	r0, r6
   d5df6:	b00b      	add	sp, #44	; 0x2c
   d5df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5dfc:	000d5f71 	.word	0x000d5f71

000d5e00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5e00:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e04:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5e06:	d006      	beq.n	d5e16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5e08:	2a03      	cmp	r2, #3
   d5e0a:	d017      	beq.n	d5e3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5e0c:	2a01      	cmp	r2, #1
   d5e0e:	d122      	bne.n	d5e56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5e10:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5e12:	6003      	str	r3, [r0, #0]
	      break;
   d5e14:	e01f      	b.n	d5e56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5e16:	2018      	movs	r0, #24
   d5e18:	680e      	ldr	r6, [r1, #0]
   d5e1a:	f7fe f93e 	bl	d409a <_Znwj>
   d5e1e:	4605      	mov	r5, r0
   d5e20:	b150      	cbz	r0, d5e38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5e22:	4631      	mov	r1, r6
   d5e24:	f7ff fec8 	bl	d5bb8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5e28:	6930      	ldr	r0, [r6, #16]
   d5e2a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5e2e:	b108      	cbz	r0, d5e34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5e30:	f003 fc3c 	bl	d96ac <strdup>
   d5e34:	6128      	str	r0, [r5, #16]
   d5e36:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5e38:	6025      	str	r5, [r4, #0]
   d5e3a:	e00c      	b.n	d5e56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5e3c:	6804      	ldr	r4, [r0, #0]
   d5e3e:	b154      	cbz	r4, d5e56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5e40:	f104 0010 	add.w	r0, r4, #16
   d5e44:	f7ff fe1b 	bl	d5a7e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5e48:	4620      	mov	r0, r4
   d5e4a:	f7ff fe00 	bl	d5a4e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5e4e:	2118      	movs	r1, #24
   d5e50:	4620      	mov	r0, r4
   d5e52:	f002 f9f2 	bl	d823a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5e56:	2000      	movs	r0, #0
   d5e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e5a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5e5a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5e5c:	2300      	movs	r3, #0
   d5e5e:	6083      	str	r3, [r0, #8]
   d5e60:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5e62:	4604      	mov	r4, r0
   d5e64:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5e66:	b12b      	cbz	r3, d5e74 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5e68:	2202      	movs	r2, #2
   d5e6a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5e6c:	68eb      	ldr	r3, [r5, #12]
   d5e6e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5e70:	68ab      	ldr	r3, [r5, #8]
   d5e72:	60a3      	str	r3, [r4, #8]
	}
    }
   d5e74:	4620      	mov	r0, r4
   d5e76:	bd38      	pop	{r3, r4, r5, pc}

000d5e78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5e78:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5e7a:	b570      	push	{r4, r5, r6, lr}
   d5e7c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5e7e:	d006      	beq.n	d5e8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5e80:	2a03      	cmp	r2, #3
   d5e82:	d011      	beq.n	d5ea8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5e84:	2a01      	cmp	r2, #1
   d5e86:	d118      	bne.n	d5eba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5e88:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5e8a:	6003      	str	r3, [r0, #0]
	      break;
   d5e8c:	e015      	b.n	d5eba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5e8e:	2014      	movs	r0, #20
   d5e90:	680e      	ldr	r6, [r1, #0]
   d5e92:	f7fe f902 	bl	d409a <_Znwj>
   d5e96:	4605      	mov	r5, r0
   d5e98:	b120      	cbz	r0, d5ea4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5e9a:	4631      	mov	r1, r6
   d5e9c:	f7ff ffdd 	bl	d5e5a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5ea0:	7c33      	ldrb	r3, [r6, #16]
   d5ea2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5ea4:	6025      	str	r5, [r4, #0]
   d5ea6:	e008      	b.n	d5eba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5ea8:	6804      	ldr	r4, [r0, #0]
   d5eaa:	b134      	cbz	r4, d5eba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5eac:	4620      	mov	r0, r4
   d5eae:	f7ff fdce 	bl	d5a4e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5eb2:	2114      	movs	r1, #20
   d5eb4:	4620      	mov	r0, r4
   d5eb6:	f002 f9c0 	bl	d823a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5eba:	2000      	movs	r0, #0
   d5ebc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5ec0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5ec0:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5ec2:	2300      	movs	r3, #0
   d5ec4:	b087      	sub	sp, #28
   d5ec6:	460c      	mov	r4, r1
   d5ec8:	f3bf 8f5f 	dmb	sy
   d5ecc:	e850 6f00 	ldrex	r6, [r0]
   d5ed0:	e840 3200 	strex	r2, r3, [r0]
   d5ed4:	2a00      	cmp	r2, #0
   d5ed6:	d1f9      	bne.n	d5ecc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5ed8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5edc:	2e00      	cmp	r6, #0
   d5ede:	d03f      	beq.n	d5f60 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5ee0:	4618      	mov	r0, r3
   d5ee2:	f7ff fbf9 	bl	d56d8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5ee6:	4607      	mov	r7, r0
   d5ee8:	b120      	cbz	r0, d5ef4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5eea:	4621      	mov	r1, r4
   d5eec:	4630      	mov	r0, r6
   d5eee:	f7ff fe53 	bl	d5b98 <_ZNKSt8functionIFvRKbEEclES1_>
   d5ef2:	e02e      	b.n	d5f52 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5ef4:	4631      	mov	r1, r6
   d5ef6:	a801      	add	r0, sp, #4
   d5ef8:	f7ff ffaf 	bl	d5e5a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5efc:	7823      	ldrb	r3, [r4, #0]
   d5efe:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5f02:	2010      	movs	r0, #16
   d5f04:	f7fe f8c9 	bl	d409a <_Znwj>
   d5f08:	4605      	mov	r5, r0
   d5f0a:	b1d0      	cbz	r0, d5f42 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f0c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5f0e:	2014      	movs	r0, #20
   d5f10:	f7fe f8c3 	bl	d409a <_Znwj>
   d5f14:	4604      	mov	r4, r0
   d5f16:	b178      	cbz	r0, d5f38 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f18:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5f1a:	4601      	mov	r1, r0
   d5f1c:	a801      	add	r0, sp, #4
   d5f1e:	f7ff fe07 	bl	d5b30 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f22:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5f24:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f26:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f28:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5f2a:	9203      	str	r2, [sp, #12]
   d5f2c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f2e:	60e3      	str	r3, [r4, #12]
   d5f30:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5f34:	9204      	str	r2, [sp, #16]
   d5f36:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5f38:	4b0a      	ldr	r3, [pc, #40]	; (d5f64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5f3a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5f3c:	4b0a      	ldr	r3, [pc, #40]	; (d5f68 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5f3e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5f40:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5f42:	a801      	add	r0, sp, #4
   d5f44:	f7ff fd83 	bl	d5a4e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5f48:	2200      	movs	r2, #0
   d5f4a:	4629      	mov	r1, r5
   d5f4c:	4807      	ldr	r0, [pc, #28]	; (d5f6c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5f4e:	f7ff fbcb 	bl	d56e8 <application_thread_invoke>
   d5f52:	4630      	mov	r0, r6
   d5f54:	f7ff fd7b 	bl	d5a4e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5f58:	2110      	movs	r1, #16
   d5f5a:	4630      	mov	r0, r6
   d5f5c:	f002 f96d 	bl	d823a <_ZdlPvj>
        }
    }
   d5f60:	b007      	add	sp, #28
   d5f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5f64:	000d5bab 	.word	0x000d5bab
   d5f68:	000d5e79 	.word	0x000d5e79
   d5f6c:	000d5907 	.word	0x000d5907

000d5f70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5f70:	b530      	push	{r4, r5, lr}
   d5f72:	b085      	sub	sp, #20
   d5f74:	4604      	mov	r4, r0
   d5f76:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5f78:	4668      	mov	r0, sp
   d5f7a:	4611      	mov	r1, r2
   d5f7c:	f7ff fdba 	bl	d5af4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5f80:	b17c      	cbz	r4, d5fa2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5f82:	b224      	sxth	r4, r4
   d5f84:	4628      	mov	r0, r5
   d5f86:	b10d      	cbz	r5, d5f8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5f88:	f003 fb90 	bl	d96ac <strdup>
   d5f8c:	9002      	str	r0, [sp, #8]
   d5f8e:	a902      	add	r1, sp, #8
   d5f90:	4668      	mov	r0, sp
   d5f92:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5f96:	f7ff fe1f 	bl	d5bd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5f9a:	a802      	add	r0, sp, #8
   d5f9c:	f7ff fd6f 	bl	d5a7e <_ZN8particle5ErrorD1Ev>
   d5fa0:	e01d      	b.n	d5fde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5fa2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5fa4:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5fa8:	f04f 0201 	mov.w	r2, #1
   d5fac:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5fb0:	42a3      	cmp	r3, r4
   d5fb2:	d103      	bne.n	d5fbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5fb4:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5fb8:	2900      	cmp	r1, #0
   d5fba:	d1f7      	bne.n	d5fac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5fbc:	d002      	beq.n	d5fc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5fbe:	f88d 3008 	strb.w	r3, [sp, #8]
   d5fc2:	e00c      	b.n	d5fde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5fc4:	f110 010c 	adds.w	r1, r0, #12
   d5fc8:	f04f 0301 	mov.w	r3, #1
   d5fcc:	bf18      	it	ne
   d5fce:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5fd0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5fd4:	3004      	adds	r0, #4
   d5fd6:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5fda:	f7ff ff71 	bl	d5ec0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5fde:	a801      	add	r0, sp, #4
   d5fe0:	f7fe f9d7 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5fe4:	b005      	add	sp, #20
   d5fe6:	bd30      	pop	{r4, r5, pc}

000d5fe8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5fe8:	2200      	movs	r2, #0
   d5fea:	4611      	mov	r1, r2
   d5fec:	6840      	ldr	r0, [r0, #4]
   d5fee:	f7ff bc1f 	b.w	d5830 <network_listening>

000d5ff2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5ff2:	2200      	movs	r2, #0
   d5ff4:	4611      	mov	r1, r2
   d5ff6:	6840      	ldr	r0, [r0, #4]
   d5ff8:	f7ff bc2a 	b.w	d5850 <network_get_listen_timeout>

000d5ffc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5ffc:	2200      	movs	r2, #0
   d5ffe:	6840      	ldr	r0, [r0, #4]
   d6000:	f7ff bc1e 	b.w	d5840 <network_set_listen_timeout>

000d6004 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6004:	2200      	movs	r2, #0
   d6006:	f081 0101 	eor.w	r1, r1, #1
   d600a:	6840      	ldr	r0, [r0, #4]
   d600c:	f7ff bc08 	b.w	d5820 <network_listen>

000d6010 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6010:	2300      	movs	r3, #0
   d6012:	461a      	mov	r2, r3
   d6014:	4619      	mov	r1, r3
   d6016:	6840      	ldr	r0, [r0, #4]
   d6018:	f7ff bbfa 	b.w	d5810 <network_off>

000d601c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d601c:	2300      	movs	r3, #0
   d601e:	461a      	mov	r2, r3
   d6020:	4619      	mov	r1, r3
   d6022:	6840      	ldr	r0, [r0, #4]
   d6024:	f7ff bbec 	b.w	d5800 <network_on>

000d6028 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6028:	2200      	movs	r2, #0
   d602a:	4611      	mov	r1, r2
   d602c:	6840      	ldr	r0, [r0, #4]
   d602e:	f7ff bbdf 	b.w	d57f0 <network_ready>

000d6032 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6032:	2200      	movs	r2, #0
   d6034:	4611      	mov	r1, r2
   d6036:	6840      	ldr	r0, [r0, #4]
   d6038:	f7ff bbca 	b.w	d57d0 <network_connecting>

000d603c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d603c:	2200      	movs	r2, #0
   d603e:	2102      	movs	r1, #2
   d6040:	6840      	ldr	r0, [r0, #4]
   d6042:	f7ff bbcd 	b.w	d57e0 <network_disconnect>

000d6046 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6046:	2300      	movs	r3, #0
   d6048:	461a      	mov	r2, r3
   d604a:	6840      	ldr	r0, [r0, #4]
   d604c:	f7ff bbb8 	b.w	d57c0 <network_connect>

000d6050 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6050:	4b02      	ldr	r3, [pc, #8]	; (d605c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6052:	2203      	movs	r2, #3
   d6054:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6056:	4a02      	ldr	r2, [pc, #8]	; (d6060 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6058:	601a      	str	r2, [r3, #0]
   d605a:	4770      	bx	lr
   d605c:	2003e228 	.word	0x2003e228
   d6060:	000dad0c 	.word	0x000dad0c

000d6064 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d6064:	6800      	ldr	r0, [r0, #0]
   d6066:	f000 b880 	b.w	d616a <_ZN7TwoWire4lockEv>

000d606a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d606a:	b510      	push	{r4, lr}
   d606c:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d606e:	6001      	str	r1, [r0, #0]
   d6070:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d6072:	b10a      	cbz	r2, d6078 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d6074:	f7ff fff6 	bl	d6064 <_ZN9FuelGauge4lockEv>
    }
}
   d6078:	4620      	mov	r0, r4
   d607a:	bd10      	pop	{r4, pc}

000d607c <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d607c:	b538      	push	{r3, r4, r5, lr}
   d607e:	4604      	mov	r4, r0
   d6080:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6082:	f002 f893 	bl	d81ac <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d6086:	462a      	mov	r2, r5
   d6088:	4601      	mov	r1, r0
   d608a:	4620      	mov	r0, r4
   d608c:	f7ff ffed 	bl	d606a <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d6090:	4620      	mov	r0, r4
   d6092:	bd38      	pop	{r3, r4, r5, pc}

000d6094 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d6094:	6800      	ldr	r0, [r0, #0]
   d6096:	f000 b871 	b.w	d617c <_ZN7TwoWire6unlockEv>

000d609a <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d609a:	b510      	push	{r4, lr}
{
    if (lock_) {
   d609c:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d609e:	4604      	mov	r4, r0
{
    if (lock_) {
   d60a0:	b10b      	cbz	r3, d60a6 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d60a2:	f7ff fff7 	bl	d6094 <_ZN9FuelGauge6unlockEv>
    }
}
   d60a6:	4620      	mov	r0, r4
   d60a8:	bd10      	pop	{r4, pc}

000d60aa <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d60aa:	4770      	bx	lr

000d60ac <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d60ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d60ae:	4606      	mov	r6, r0
   d60b0:	4615      	mov	r5, r2
   d60b2:	460c      	mov	r4, r1
   d60b4:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d60b6:	42bc      	cmp	r4, r7
   d60b8:	d006      	beq.n	d60c8 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d60ba:	6833      	ldr	r3, [r6, #0]
   d60bc:	f814 1b01 	ldrb.w	r1, [r4], #1
   d60c0:	689b      	ldr	r3, [r3, #8]
   d60c2:	4630      	mov	r0, r6
   d60c4:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d60c6:	e7f6      	b.n	d60b6 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d60c8:	4628      	mov	r0, r5
   d60ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d60cc <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d60cc:	2200      	movs	r2, #0
   d60ce:	7c00      	ldrb	r0, [r0, #16]
   d60d0:	f7ff b9c2 	b.w	d5458 <HAL_I2C_Write_Data>

000d60d4 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d60d4:	2100      	movs	r1, #0
   d60d6:	7c00      	ldrb	r0, [r0, #16]
   d60d8:	f7ff b9c6 	b.w	d5468 <HAL_I2C_Available_Data>

000d60dc <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d60dc:	2100      	movs	r1, #0
   d60de:	7c00      	ldrb	r0, [r0, #16]
   d60e0:	f7ff b9ca 	b.w	d5478 <HAL_I2C_Read_Data>

000d60e4 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d60e4:	2100      	movs	r1, #0
   d60e6:	7c00      	ldrb	r0, [r0, #16]
   d60e8:	f7ff b9ce 	b.w	d5488 <HAL_I2C_Peek_Data>

000d60ec <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d60ec:	2100      	movs	r1, #0
   d60ee:	7c00      	ldrb	r0, [r0, #16]
   d60f0:	f7ff b9d2 	b.w	d5498 <HAL_I2C_Flush_Data>

000d60f4 <_ZN7TwoWireD0Ev>:
   d60f4:	b510      	push	{r4, lr}
   d60f6:	2114      	movs	r1, #20
   d60f8:	4604      	mov	r4, r0
   d60fa:	f002 f89e 	bl	d823a <_ZdlPvj>
   d60fe:	4620      	mov	r0, r4
   d6100:	bd10      	pop	{r4, pc}
	...

000d6104 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6104:	b510      	push	{r4, lr}
   d6106:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d610c:	4608      	mov	r0, r1
   d610e:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6110:	2100      	movs	r1, #0
   d6112:	4b04      	ldr	r3, [pc, #16]	; (d6124 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6114:	7420      	strb	r0, [r4, #16]
   d6116:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6118:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d611a:	f7ff f9cd 	bl	d54b8 <HAL_I2C_Init>

}
   d611e:	4620      	mov	r0, r4
   d6120:	bd10      	pop	{r4, pc}
   d6122:	bf00      	nop
   d6124:	000dad40 	.word	0x000dad40

000d6128 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6128:	2300      	movs	r3, #0
   d612a:	461a      	mov	r2, r3
   d612c:	4619      	mov	r1, r3
   d612e:	7c00      	ldrb	r0, [r0, #16]
   d6130:	f7ff b972 	b.w	d5418 <HAL_I2C_Begin>

000d6134 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d6134:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d6136:	2400      	movs	r4, #0
   d6138:	7c00      	ldrb	r0, [r0, #16]
   d613a:	9400      	str	r4, [sp, #0]
   d613c:	f7ff f974 	bl	d5428 <HAL_I2C_Request_Data>
  return result;
}
   d6140:	b2c0      	uxtb	r0, r0
   d6142:	b002      	add	sp, #8
   d6144:	bd10      	pop	{r4, pc}

000d6146 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d6146:	2301      	movs	r3, #1
   d6148:	f7ff bff4 	b.w	d6134 <_ZN7TwoWire11requestFromEhhh>

000d614c <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d614c:	2200      	movs	r2, #0
   d614e:	7c00      	ldrb	r0, [r0, #16]
   d6150:	f7ff b972 	b.w	d5438 <HAL_I2C_Begin_Transmission>

000d6154 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6154:	2200      	movs	r2, #0
   d6156:	7c00      	ldrb	r0, [r0, #16]
   d6158:	f7ff b976 	b.w	d5448 <HAL_I2C_End_Transmission>

000d615c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d615c:	2101      	movs	r1, #1
   d615e:	f7ff bff9 	b.w	d6154 <_ZN7TwoWire15endTransmissionEh>

000d6162 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6162:	2100      	movs	r1, #0
   d6164:	7c00      	ldrb	r0, [r0, #16]
   d6166:	f7ff b99f 	b.w	d54a8 <HAL_I2C_Is_Enabled>

000d616a <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d616a:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d616c:	2100      	movs	r1, #0
   d616e:	7c00      	ldrb	r0, [r0, #16]
   d6170:	f7ff f9aa 	bl	d54c8 <HAL_I2C_Acquire>
}
   d6174:	fab0 f080 	clz	r0, r0
   d6178:	0940      	lsrs	r0, r0, #5
   d617a:	bd08      	pop	{r3, pc}

000d617c <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d617c:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d617e:	2100      	movs	r1, #0
   d6180:	7c00      	ldrb	r0, [r0, #16]
   d6182:	f7ff f9a9 	bl	d54d8 <HAL_I2C_Release>
}
   d6186:	fab0 f080 	clz	r0, r0
   d618a:	0940      	lsrs	r0, r0, #5
   d618c:	bd08      	pop	{r3, pc}

000d618e <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d618e:	4700      	bx	r0

000d6190 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d6190:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6192:	b085      	sub	sp, #20
   d6194:	461c      	mov	r4, r3
   d6196:	460e      	mov	r6, r1
   d6198:	4617      	mov	r7, r2
   d619a:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d619c:	f7ff f92c 	bl	d53f8 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d61a0:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d61a2:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d61a4:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d61a8:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d61aa:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d61ae:	bfa5      	ittet	ge
   d61b0:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d61b4:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d61b8:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d61ba:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d61bc:	9300      	str	r3, [sp, #0]
   d61be:	4632      	mov	r2, r6
   d61c0:	463b      	mov	r3, r7
   d61c2:	4906      	ldr	r1, [pc, #24]	; (d61dc <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d61c4:	bfa8      	it	ge
   d61c6:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d61ca:	4628      	mov	r0, r5
   d61cc:	f7ff f90c 	bl	d53e8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d61d0:	fab0 f080 	clz	r0, r0
   d61d4:	0940      	lsrs	r0, r0, #5
   d61d6:	b005      	add	sp, #20
   d61d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d61da:	bf00      	nop
   d61dc:	000d618f 	.word	0x000d618f

000d61e0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d61e0:	4770      	bx	lr

000d61e2 <_ZN9IPAddressD0Ev>:
   d61e2:	b510      	push	{r4, lr}
   d61e4:	2118      	movs	r1, #24
   d61e6:	4604      	mov	r4, r0
   d61e8:	f002 f827 	bl	d823a <_ZdlPvj>
   d61ec:	4620      	mov	r0, r4
   d61ee:	bd10      	pop	{r4, pc}

000d61f0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d61f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d61f2:	7d03      	ldrb	r3, [r0, #20]
   d61f4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d61f6:	b08d      	sub	sp, #52	; 0x34
   d61f8:	460e      	mov	r6, r1
   d61fa:	f100 0704 	add.w	r7, r0, #4
   d61fe:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6202:	d002      	beq.n	d620a <_ZNK9IPAddress7printToER5Print+0x1a>
   d6204:	f100 0508 	add.w	r5, r0, #8
   d6208:	e018      	b.n	d623c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d620a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d620c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d620e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6212:	232f      	movs	r3, #47	; 0x2f
   d6214:	462a      	mov	r2, r5
   d6216:	200a      	movs	r0, #10
   d6218:	f7ff f966 	bl	d54e8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d621c:	4628      	mov	r0, r5
   d621e:	f003 ff75 	bl	da10c <strlen>
   d6222:	6833      	ldr	r3, [r6, #0]
   d6224:	4602      	mov	r2, r0
   d6226:	68db      	ldr	r3, [r3, #12]
   d6228:	4629      	mov	r1, r5
   d622a:	4630      	mov	r0, r6
   d622c:	4798      	blx	r3
   d622e:	e00f      	b.n	d6250 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6230:	b124      	cbz	r4, d623c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6232:	212e      	movs	r1, #46	; 0x2e
   d6234:	4630      	mov	r0, r6
   d6236:	f001 fb3d 	bl	d78b4 <_ZN5Print5printEc>
   d623a:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d623c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6240:	220a      	movs	r2, #10
   d6242:	4630      	mov	r0, r6
   d6244:	f001 fb72 	bl	d792c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6248:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d624a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d624c:	d1f0      	bne.n	d6230 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d624e:	4620      	mov	r0, r4
    }
    return n;
}
   d6250:	b00d      	add	sp, #52	; 0x34
   d6252:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6254 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6254:	b510      	push	{r4, lr}
   d6256:	4b05      	ldr	r3, [pc, #20]	; (d626c <_ZN9IPAddressC1Ev+0x18>)
   d6258:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d625a:	2211      	movs	r2, #17
   d625c:	f840 3b04 	str.w	r3, [r0], #4
   d6260:	2100      	movs	r1, #0
   d6262:	f002 ff7b 	bl	d915c <memset>
{
    clear();
}
   d6266:	4620      	mov	r0, r4
   d6268:	bd10      	pop	{r4, pc}
   d626a:	bf00      	nop
   d626c:	000dad68 	.word	0x000dad68

000d6270 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6270:	4603      	mov	r3, r0
   d6272:	4a07      	ldr	r2, [pc, #28]	; (d6290 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6274:	b510      	push	{r4, lr}
   d6276:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d627a:	f101 0210 	add.w	r2, r1, #16
   d627e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6282:	f843 4b04 	str.w	r4, [r3], #4
   d6286:	4291      	cmp	r1, r2
   d6288:	d1f9      	bne.n	d627e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d628a:	780a      	ldrb	r2, [r1, #0]
   d628c:	701a      	strb	r2, [r3, #0]
}
   d628e:	bd10      	pop	{r4, pc}
   d6290:	000dad68 	.word	0x000dad68

000d6294 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6294:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6296:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d629a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d629e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d62a2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d62a6:	2304      	movs	r3, #4
   d62a8:	6041      	str	r1, [r0, #4]
   d62aa:	7503      	strb	r3, [r0, #20]
   d62ac:	bd10      	pop	{r4, pc}

000d62ae <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d62ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d62b0:	780d      	ldrb	r5, [r1, #0]
   d62b2:	788b      	ldrb	r3, [r1, #2]
   d62b4:	784a      	ldrb	r2, [r1, #1]
   d62b6:	78c9      	ldrb	r1, [r1, #3]
   d62b8:	9100      	str	r1, [sp, #0]
   d62ba:	4629      	mov	r1, r5
   d62bc:	f7ff ffea 	bl	d6294 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d62c0:	b003      	add	sp, #12
   d62c2:	bd30      	pop	{r4, r5, pc}

000d62c4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d62c4:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d62c8:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d62ca:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d62ce:	2901      	cmp	r1, #1
   d62d0:	4610      	mov	r0, r2
   d62d2:	d104      	bne.n	d62de <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d62d4:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d62d8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d62dc:	e004      	b.n	d62e8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d62de:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d62e0:	bf04      	itt	eq
   d62e2:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d62e6:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d62e8:	3b01      	subs	r3, #1
   d62ea:	f102 0210 	add.w	r2, r2, #16
   d62ee:	d1ec      	bne.n	d62ca <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d62f0:	4770      	bx	lr

000d62f2 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d62f2:	b40e      	push	{r1, r2, r3}
   d62f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d62f8:	b087      	sub	sp, #28
   d62fa:	af00      	add	r7, sp, #0
   d62fc:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d6300:	4605      	mov	r5, r0
   d6302:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d6306:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6308:	4623      	mov	r3, r4
   d630a:	4632      	mov	r2, r6
   d630c:	2110      	movs	r1, #16
   d630e:	f107 0008 	add.w	r0, r7, #8
   d6312:	f7ff fadd 	bl	d58d0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d6316:	280f      	cmp	r0, #15
   d6318:	d916      	bls.n	d6348 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d631a:	f100 0308 	add.w	r3, r0, #8
   d631e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d6322:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d6324:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6328:	4632      	mov	r2, r6
   d632a:	1c41      	adds	r1, r0, #1
   d632c:	4623      	mov	r3, r4
   d632e:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d6330:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6332:	f7ff facd 	bl	d58d0 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d6336:	1e02      	subs	r2, r0, #0
   d6338:	dd04      	ble.n	d6344 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d633a:	682b      	ldr	r3, [r5, #0]
   d633c:	4669      	mov	r1, sp
   d633e:	689b      	ldr	r3, [r3, #8]
   d6340:	4628      	mov	r0, r5
   d6342:	4798      	blx	r3
   d6344:	46c5      	mov	sp, r8
   d6346:	e007      	b.n	d6358 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d6348:	b130      	cbz	r0, d6358 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d634a:	682b      	ldr	r3, [r5, #0]
   d634c:	4602      	mov	r2, r0
   d634e:	689b      	ldr	r3, [r3, #8]
   d6350:	f107 0108 	add.w	r1, r7, #8
   d6354:	4628      	mov	r0, r5
   d6356:	4798      	blx	r3
    }
}
   d6358:	371c      	adds	r7, #28
   d635a:	46bd      	mov	sp, r7
   d635c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d6360:	b003      	add	sp, #12
   d6362:	4770      	bx	lr

000d6364 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d6364:	b513      	push	{r0, r1, r4, lr}
   d6366:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d6368:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d636a:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d636e:	6894      	ldr	r4, [r2, #8]
   d6370:	4619      	mov	r1, r3
   d6372:	2201      	movs	r2, #1
   d6374:	47a0      	blx	r4
}
   d6376:	b002      	add	sp, #8
   d6378:	bd10      	pop	{r4, pc}

000d637a <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d637a:	6883      	ldr	r3, [r0, #8]
   d637c:	b1fb      	cbz	r3, d63be <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d637e:	781a      	ldrb	r2, [r3, #0]
   d6380:	2a03      	cmp	r2, #3
   d6382:	d81a      	bhi.n	d63ba <_ZNK5spark9JSONValue4typeEv+0x40>
   d6384:	e8df f002 	tbb	[pc, r2]
   d6388:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d638c:	2005      	movs	r0, #5
   d638e:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d6390:	6802      	ldr	r2, [r0, #0]
   d6392:	685b      	ldr	r3, [r3, #4]
   d6394:	6852      	ldr	r2, [r2, #4]
   d6396:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d6398:	282d      	cmp	r0, #45	; 0x2d
   d639a:	d014      	beq.n	d63c6 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d639c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d63a0:	2b09      	cmp	r3, #9
   d63a2:	d910      	bls.n	d63c6 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d63a4:	2874      	cmp	r0, #116	; 0x74
   d63a6:	d010      	beq.n	d63ca <_ZNK5spark9JSONValue4typeEv+0x50>
   d63a8:	2866      	cmp	r0, #102	; 0x66
   d63aa:	d00e      	beq.n	d63ca <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d63ac:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d63b0:	4258      	negs	r0, r3
   d63b2:	4158      	adcs	r0, r3
   d63b4:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d63b6:	2006      	movs	r0, #6
   d63b8:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d63ba:	2000      	movs	r0, #0
   d63bc:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d63be:	4618      	mov	r0, r3
   d63c0:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d63c2:	2004      	movs	r0, #4
   d63c4:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d63c6:	2003      	movs	r0, #3
   d63c8:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d63ca:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d63cc:	4770      	bx	lr

000d63ce <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d63ce:	b510      	push	{r4, lr}
   d63d0:	4604      	mov	r4, r0
    switch (type()) {
   d63d2:	f7ff ffd2 	bl	d637a <_ZNK5spark9JSONValue4typeEv>
   d63d6:	2802      	cmp	r0, #2
   d63d8:	d00d      	beq.n	d63f6 <_ZNK5spark9JSONValue5toIntEv+0x28>
   d63da:	d316      	bcc.n	d640a <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d63dc:	2804      	cmp	r0, #4
   d63de:	d814      	bhi.n	d640a <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d63e0:	6822      	ldr	r2, [r4, #0]
   d63e2:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d63e4:	6850      	ldr	r0, [r2, #4]
   d63e6:	685b      	ldr	r3, [r3, #4]
   d63e8:	220a      	movs	r2, #10
   d63ea:	2100      	movs	r1, #0
   d63ec:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d63ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d63f2:	f003 bf41 	b.w	da278 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d63f6:	6822      	ldr	r2, [r4, #0]
   d63f8:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d63fa:	6852      	ldr	r2, [r2, #4]
   d63fc:	685b      	ldr	r3, [r3, #4]
   d63fe:	5cd0      	ldrb	r0, [r2, r3]
   d6400:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d6404:	4258      	negs	r0, r3
   d6406:	4158      	adcs	r0, r3
   d6408:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d640a:	2000      	movs	r0, #0
    }
}
   d640c:	bd10      	pop	{r4, pc}

000d640e <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d640e:	b510      	push	{r4, lr}
    if (!n_) {
   d6410:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d6412:	4604      	mov	r4, r0
    if (!n_) {
   d6414:	b15b      	cbz	r3, d642e <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d6416:	6880      	ldr	r0, [r0, #8]
   d6418:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d641a:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d641c:	3010      	adds	r0, #16
   d641e:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6420:	6120      	str	r0, [r4, #16]
    --n_;
   d6422:	6163      	str	r3, [r4, #20]
    if (n_) {
   d6424:	b12b      	cbz	r3, d6432 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d6426:	f7ff ff4d 	bl	d62c4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d642a:	60a0      	str	r0, [r4, #8]
   d642c:	e001      	b.n	d6432 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d642e:	4618      	mov	r0, r3
   d6430:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d6432:	2001      	movs	r0, #1
}
   d6434:	bd10      	pop	{r4, pc}

000d6436 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d6436:	b510      	push	{r4, lr}
    write('}');
   d6438:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d643a:	4604      	mov	r4, r0
    write('}');
   d643c:	f7ff ff92 	bl	d6364 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6440:	2301      	movs	r3, #1
   d6442:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6444:	4620      	mov	r0, r4
   d6446:	bd10      	pop	{r4, pc}

000d6448 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d6448:	b508      	push	{r3, lr}
    switch (state_) {
   d644a:	7903      	ldrb	r3, [r0, #4]
   d644c:	2b01      	cmp	r3, #1
   d644e:	d002      	beq.n	d6456 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d6450:	2b02      	cmp	r3, #2
   d6452:	d002      	beq.n	d645a <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d6454:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d6456:	212c      	movs	r1, #44	; 0x2c
   d6458:	e000      	b.n	d645c <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d645a:	213a      	movs	r1, #58	; 0x3a
   d645c:	f7ff ff82 	bl	d6364 <_ZN5spark10JSONWriter5writeEc>
   d6460:	bd08      	pop	{r3, pc}

000d6462 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d6462:	b510      	push	{r4, lr}
   d6464:	4604      	mov	r4, r0
    writeSeparator();
   d6466:	f7ff ffef 	bl	d6448 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d646a:	4620      	mov	r0, r4
   d646c:	217b      	movs	r1, #123	; 0x7b
   d646e:	f7ff ff79 	bl	d6364 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d6472:	2300      	movs	r3, #0
   d6474:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6476:	4620      	mov	r0, r4
   d6478:	bd10      	pop	{r4, pc}
	...

000d647c <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d647c:	b538      	push	{r3, r4, r5, lr}
   d647e:	4604      	mov	r4, r0
   d6480:	460d      	mov	r5, r1
    writeSeparator();
   d6482:	f7ff ffe1 	bl	d6448 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d6486:	6823      	ldr	r3, [r4, #0]
   d6488:	4904      	ldr	r1, [pc, #16]	; (d649c <_ZN5spark10JSONWriter5valueEi+0x20>)
   d648a:	68db      	ldr	r3, [r3, #12]
   d648c:	4620      	mov	r0, r4
   d648e:	462a      	mov	r2, r5
   d6490:	4798      	blx	r3
    state_ = NEXT;
   d6492:	2301      	movs	r3, #1
   d6494:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6496:	4620      	mov	r0, r4
   d6498:	bd38      	pop	{r3, r4, r5, pc}
   d649a:	bf00      	nop
   d649c:	000db297 	.word	0x000db297

000d64a0 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d64a0:	b538      	push	{r3, r4, r5, lr}
   d64a2:	4604      	mov	r4, r0
   d64a4:	460d      	mov	r5, r1
    writeSeparator();
   d64a6:	f7ff ffcf 	bl	d6448 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d64aa:	6823      	ldr	r3, [r4, #0]
   d64ac:	4904      	ldr	r1, [pc, #16]	; (d64c0 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d64ae:	68db      	ldr	r3, [r3, #12]
   d64b0:	4620      	mov	r0, r4
   d64b2:	462a      	mov	r2, r5
   d64b4:	4798      	blx	r3
    state_ = NEXT;
   d64b6:	2301      	movs	r3, #1
   d64b8:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d64ba:	4620      	mov	r0, r4
   d64bc:	bd38      	pop	{r3, r4, r5, pc}
   d64be:	bf00      	nop
   d64c0:	000dad83 	.word	0x000dad83

000d64c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d64c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d64c6:	460d      	mov	r5, r1
   d64c8:	4617      	mov	r7, r2
    write('"');
   d64ca:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d64cc:	4604      	mov	r4, r0
   d64ce:	442f      	add	r7, r5
    write('"');
   d64d0:	f7ff ff48 	bl	d6364 <_ZN5spark10JSONWriter5writeEc>
   d64d4:	462a      	mov	r2, r5
    const char* const end = str + size;
   d64d6:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d64d8:	42ba      	cmp	r2, r7
   d64da:	d038      	beq.n	d654e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d64dc:	4616      	mov	r6, r2
   d64de:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d64e2:	2d22      	cmp	r5, #34	; 0x22
   d64e4:	d003      	beq.n	d64ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d64e6:	2d5c      	cmp	r5, #92	; 0x5c
   d64e8:	d001      	beq.n	d64ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d64ea:	2d1f      	cmp	r5, #31
   d64ec:	d82d      	bhi.n	d654a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d64ee:	6823      	ldr	r3, [r4, #0]
   d64f0:	1a52      	subs	r2, r2, r1
   d64f2:	689b      	ldr	r3, [r3, #8]
   d64f4:	4620      	mov	r0, r4
   d64f6:	4798      	blx	r3
            write('\\');
   d64f8:	215c      	movs	r1, #92	; 0x5c
   d64fa:	4620      	mov	r0, r4
   d64fc:	f7ff ff32 	bl	d6364 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d6500:	2d0c      	cmp	r5, #12
   d6502:	d019      	beq.n	d6538 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d6504:	d807      	bhi.n	d6516 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d6506:	2d09      	cmp	r5, #9
   d6508:	d00f      	beq.n	d652a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d650a:	2d0a      	cmp	r5, #10
   d650c:	d012      	beq.n	d6534 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d650e:	2d08      	cmp	r5, #8
   d6510:	d114      	bne.n	d653c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d6512:	2162      	movs	r1, #98	; 0x62
   d6514:	e00a      	b.n	d652c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d6516:	2d22      	cmp	r5, #34	; 0x22
   d6518:	d005      	beq.n	d6526 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d651a:	2d5c      	cmp	r5, #92	; 0x5c
   d651c:	d003      	beq.n	d6526 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d651e:	2d0d      	cmp	r5, #13
   d6520:	d10c      	bne.n	d653c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d6522:	2172      	movs	r1, #114	; 0x72
   d6524:	e002      	b.n	d652c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d6526:	4629      	mov	r1, r5
   d6528:	e000      	b.n	d652c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d652a:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d652c:	4620      	mov	r0, r4
   d652e:	f7ff ff19 	bl	d6364 <_ZN5spark10JSONWriter5writeEc>
                break;
   d6532:	e009      	b.n	d6548 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d6534:	216e      	movs	r1, #110	; 0x6e
   d6536:	e7f9      	b.n	d652c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d6538:	2166      	movs	r1, #102	; 0x66
   d653a:	e7f7      	b.n	d652c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d653c:	6823      	ldr	r3, [r4, #0]
   d653e:	490a      	ldr	r1, [pc, #40]	; (d6568 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d6540:	68db      	ldr	r3, [r3, #12]
   d6542:	462a      	mov	r2, r5
   d6544:	4620      	mov	r0, r4
   d6546:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d6548:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d654a:	4632      	mov	r2, r6
   d654c:	e7c4      	b.n	d64d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d654e:	4291      	cmp	r1, r2
   d6550:	d004      	beq.n	d655c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d6552:	6823      	ldr	r3, [r4, #0]
   d6554:	1a52      	subs	r2, r2, r1
   d6556:	689d      	ldr	r5, [r3, #8]
   d6558:	4620      	mov	r0, r4
   d655a:	47a8      	blx	r5
    }
    write('"');
   d655c:	2122      	movs	r1, #34	; 0x22
   d655e:	4620      	mov	r0, r4
   d6560:	f7ff ff00 	bl	d6364 <_ZN5spark10JSONWriter5writeEc>
   d6564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6566:	bf00      	nop
   d6568:	000dad8e 	.word	0x000dad8e

000d656c <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d656c:	b570      	push	{r4, r5, r6, lr}
   d656e:	4604      	mov	r4, r0
   d6570:	460d      	mov	r5, r1
   d6572:	4616      	mov	r6, r2
    writeSeparator();
   d6574:	f7ff ff68 	bl	d6448 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d6578:	4620      	mov	r0, r4
   d657a:	4632      	mov	r2, r6
   d657c:	4629      	mov	r1, r5
   d657e:	f7ff ffa1 	bl	d64c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d6582:	2302      	movs	r3, #2
   d6584:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6586:	4620      	mov	r0, r4
   d6588:	bd70      	pop	{r4, r5, r6, pc}

000d658a <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d658a:	b570      	push	{r4, r5, r6, lr}
   d658c:	4604      	mov	r4, r0
   d658e:	460d      	mov	r5, r1
   d6590:	4616      	mov	r6, r2
    writeSeparator();
   d6592:	f7ff ff59 	bl	d6448 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d6596:	4620      	mov	r0, r4
   d6598:	4632      	mov	r2, r6
   d659a:	4629      	mov	r1, r5
   d659c:	f7ff ff92 	bl	d64c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d65a0:	2301      	movs	r3, #1
   d65a2:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d65a4:	4620      	mov	r0, r4
   d65a6:	bd70      	pop	{r4, r5, r6, pc}

000d65a8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d65a8:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d65aa:	2300      	movs	r3, #0
   d65ac:	4604      	mov	r4, r0
   d65ae:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d65b0:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d65b2:	4810      	ldr	r0, [pc, #64]	; (d65f4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d65b4:	60a0      	str	r0, [r4, #8]
   d65b6:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d65b8:	b1d1      	cbz	r1, d65f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d65ba:	780b      	ldrb	r3, [r1, #0]
   d65bc:	2b03      	cmp	r3, #3
   d65be:	d006      	beq.n	d65ce <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d65c0:	b9b3      	cbnz	r3, d65f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d65c2:	6813      	ldr	r3, [r2, #0]
   d65c4:	6858      	ldr	r0, [r3, #4]
   d65c6:	684b      	ldr	r3, [r1, #4]
   d65c8:	5cc3      	ldrb	r3, [r0, r3]
   d65ca:	2b6e      	cmp	r3, #110	; 0x6e
   d65cc:	d008      	beq.n	d65e0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d65ce:	6813      	ldr	r3, [r2, #0]
   d65d0:	6858      	ldr	r0, [r3, #4]
   d65d2:	684b      	ldr	r3, [r1, #4]
   d65d4:	4403      	add	r3, r0
   d65d6:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d65d8:	688b      	ldr	r3, [r1, #8]
   d65da:	6849      	ldr	r1, [r1, #4]
   d65dc:	1a5b      	subs	r3, r3, r1
   d65de:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d65e0:	4611      	mov	r1, r2
   d65e2:	4620      	mov	r0, r4
   d65e4:	f851 3b04 	ldr.w	r3, [r1], #4
   d65e8:	f840 3b04 	str.w	r3, [r0], #4
   d65ec:	f7ff f9b6 	bl	d595c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d65f0:	4620      	mov	r0, r4
   d65f2:	bd10      	pop	{r4, pc}
   d65f4:	000dae7d 	.word	0x000dae7d

000d65f8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d65f8:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d65fa:	b510      	push	{r4, lr}
   d65fc:	4604      	mov	r4, r0
   d65fe:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6600:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d6602:	6083      	str	r3, [r0, #8]
   d6604:	60c3      	str	r3, [r0, #12]
   d6606:	6103      	str	r3, [r0, #16]
   d6608:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d660a:	b171      	cbz	r1, d662a <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d660c:	780b      	ldrb	r3, [r1, #0]
   d660e:	2b01      	cmp	r3, #1
   d6610:	d10b      	bne.n	d662a <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d6612:	f101 0310 	add.w	r3, r1, #16
   d6616:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d6618:	68cb      	ldr	r3, [r1, #12]
   d661a:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d661c:	4611      	mov	r1, r2
   d661e:	f851 3b04 	ldr.w	r3, [r1], #4
   d6622:	f840 3b04 	str.w	r3, [r0], #4
   d6626:	f7ff f999 	bl	d595c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d662a:	4620      	mov	r0, r4
   d662c:	bd10      	pop	{r4, pc}

000d662e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d662e:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6630:	b510      	push	{r4, lr}
   d6632:	4604      	mov	r4, r0
   d6634:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6636:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d6638:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d663a:	b131      	cbz	r1, d664a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d663c:	4611      	mov	r1, r2
   d663e:	f851 3b04 	ldr.w	r3, [r1], #4
   d6642:	f840 3b04 	str.w	r3, [r0], #4
   d6646:	f7ff f989 	bl	d595c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d664a:	4620      	mov	r0, r4
   d664c:	bd10      	pop	{r4, pc}

000d664e <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d664e:	6880      	ldr	r0, [r0, #8]
   d6650:	6803      	ldr	r3, [r0, #0]
   d6652:	68db      	ldr	r3, [r3, #12]
   d6654:	4718      	bx	r3

000d6656 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d6656:	4770      	bx	lr

000d6658 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d6658:	b119      	cbz	r1, d6662 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d665a:	680b      	ldr	r3, [r1, #0]
   d665c:	4608      	mov	r0, r1
   d665e:	685b      	ldr	r3, [r3, #4]
   d6660:	4718      	bx	r3
   d6662:	4770      	bx	lr

000d6664 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d6664:	b119      	cbz	r1, d666e <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d6666:	680b      	ldr	r3, [r1, #0]
   d6668:	4608      	mov	r0, r1
   d666a:	685b      	ldr	r3, [r3, #4]
   d666c:	4718      	bx	r3
   d666e:	4770      	bx	lr

000d6670 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d6670:	4770      	bx	lr

000d6672 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d6672:	4770      	bx	lr

000d6674 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d6674:	4770      	bx	lr

000d6676 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d6676:	b538      	push	{r3, r4, r5, lr}
   d6678:	4604      	mov	r4, r0
   d667a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d667c:	6800      	ldr	r0, [r0, #0]
   d667e:	212e      	movs	r1, #46	; 0x2e
   d6680:	f002 fff8 	bl	d9674 <strchrnul>
    size = s - category;
   d6684:	6823      	ldr	r3, [r4, #0]
   d6686:	1ac3      	subs	r3, r0, r3
   d6688:	602b      	str	r3, [r5, #0]
    if (size) {
   d668a:	b123      	cbz	r3, d6696 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d668c:	7803      	ldrb	r3, [r0, #0]
   d668e:	b103      	cbz	r3, d6692 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d6690:	3001      	adds	r0, #1
   d6692:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6694:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d6696:	4618      	mov	r0, r3
}
   d6698:	bd38      	pop	{r3, r4, r5, pc}

000d669a <_ZN5spark16JSONStreamWriterD0Ev>:
   d669a:	b510      	push	{r4, lr}
   d669c:	210c      	movs	r1, #12
   d669e:	4604      	mov	r4, r0
   d66a0:	f001 fdcb 	bl	d823a <_ZdlPvj>
   d66a4:	4620      	mov	r0, r4
   d66a6:	bd10      	pop	{r4, pc}

000d66a8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d66a8:	b510      	push	{r4, lr}
   d66aa:	2104      	movs	r1, #4
   d66ac:	4604      	mov	r4, r0
   d66ae:	f001 fdc4 	bl	d823a <_ZdlPvj>
   d66b2:	4620      	mov	r0, r4
   d66b4:	bd10      	pop	{r4, pc}

000d66b6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d66b6:	b510      	push	{r4, lr}
   d66b8:	2104      	movs	r1, #4
   d66ba:	4604      	mov	r4, r0
   d66bc:	f001 fdbd 	bl	d823a <_ZdlPvj>
   d66c0:	4620      	mov	r0, r4
   d66c2:	bd10      	pop	{r4, pc}

000d66c4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d66c4:	b538      	push	{r3, r4, r5, lr}
   d66c6:	460c      	mov	r4, r1
   d66c8:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d66ca:	f001 fc59 	bl	d7f80 <_Z16_fetch_usbserialv>
   d66ce:	4284      	cmp	r4, r0
   d66d0:	d00d      	beq.n	d66ee <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d66d2:	f001 fbc9 	bl	d7e68 <_Z22__fetch_global_Serial1v>
   d66d6:	4284      	cmp	r4, r0
   d66d8:	d105      	bne.n	d66e6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d66da:	f001 fbc5 	bl	d7e68 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d66de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d66e2:	f001 bbba 	b.w	d7e5a <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d66e6:	4621      	mov	r1, r4
   d66e8:	4628      	mov	r0, r5
   d66ea:	f7ff ffbb 	bl	d6664 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d66ee:	bd38      	pop	{r3, r4, r5, pc}

000d66f0 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d66f0:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d66f2:	f002 ffc9 	bl	d9688 <strcmp>
}
   d66f6:	fab0 f080 	clz	r0, r0
   d66fa:	0940      	lsrs	r0, r0, #5
   d66fc:	bd08      	pop	{r3, pc}

000d66fe <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d66fe:	b538      	push	{r3, r4, r5, lr}
   d6700:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d6702:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d6704:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d6706:	f003 fd01 	bl	da10c <strlen>
   d670a:	4621      	mov	r1, r4
   d670c:	4602      	mov	r2, r0
   d670e:	4628      	mov	r0, r5
}
   d6710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d6714:	f7ff bf39 	b.w	d658a <_ZN5spark10JSONWriter5valueEPKcj>

000d6718 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6718:	6800      	ldr	r0, [r0, #0]
   d671a:	f7fe bdf5 	b.w	d5308 <os_mutex_recursive_lock>

000d671e <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d671e:	b570      	push	{r4, r5, r6, lr}
   d6720:	4604      	mov	r4, r0
    write(str, strlen(str));
   d6722:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d6724:	460d      	mov	r5, r1
    write(str, strlen(str));
   d6726:	f003 fcf1 	bl	da10c <strlen>
   d672a:	6823      	ldr	r3, [r4, #0]
   d672c:	4602      	mov	r2, r0
   d672e:	4629      	mov	r1, r5
   d6730:	4620      	mov	r0, r4
   d6732:	68db      	ldr	r3, [r3, #12]
}
   d6734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d6738:	4718      	bx	r3

000d673a <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d673a:	b513      	push	{r0, r1, r4, lr}
   d673c:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d673e:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d6740:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d6744:	68d4      	ldr	r4, [r2, #12]
   d6746:	4619      	mov	r1, r3
   d6748:	2201      	movs	r2, #1
   d674a:	47a0      	blx	r4
}
   d674c:	b002      	add	sp, #8
   d674e:	bd10      	pop	{r4, pc}

000d6750 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6754:	6845      	ldr	r5, [r0, #4]
   d6756:	6807      	ldr	r7, [r0, #0]
   d6758:	b085      	sub	sp, #20
   d675a:	4691      	mov	r9, r2
   d675c:	2214      	movs	r2, #20
   d675e:	4355      	muls	r5, r2
   d6760:	9301      	str	r3, [sp, #4]
   d6762:	10ab      	asrs	r3, r5, #2
   d6764:	4d19      	ldr	r5, [pc, #100]	; (d67cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d6766:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6768:	435d      	muls	r5, r3
   d676a:	468b      	mov	fp, r1
   d676c:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d676e:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d6770:	2d00      	cmp	r5, #0
   d6772:	9303      	str	r3, [sp, #12]
   d6774:	dd23      	ble.n	d67be <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d6776:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d6778:	106e      	asrs	r6, r5, #1
   d677a:	fb03 f006 	mul.w	r0, r3, r6
   d677e:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d6782:	464a      	mov	r2, r9
   d6784:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d6788:	5820      	ldr	r0, [r4, r0]
   d678a:	45d1      	cmp	r9, sl
   d678c:	bf28      	it	cs
   d678e:	4652      	movcs	r2, sl
   d6790:	4659      	mov	r1, fp
   d6792:	f003 fcc3 	bl	da11c <strncmp>
                if (cmp == 0) {
   d6796:	9b03      	ldr	r3, [sp, #12]
   d6798:	b948      	cbnz	r0, d67ae <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d679a:	45d1      	cmp	r9, sl
   d679c:	d103      	bne.n	d67a6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d679e:	9a01      	ldr	r2, [sp, #4]
   d67a0:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d67a2:	4635      	mov	r5, r6
   d67a4:	e7e4      	b.n	d6770 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d67a6:	bf8c      	ite	hi
   d67a8:	2001      	movhi	r0, #1
   d67aa:	2000      	movls	r0, #0
   d67ac:	e000      	b.n	d67b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d67ae:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d67b0:	2800      	cmp	r0, #0
   d67b2:	d0f6      	beq.n	d67a2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d67b4:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d67b6:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d67ba:	3e01      	subs	r6, #1
   d67bc:	e7f1      	b.n	d67a2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d67be:	1be4      	subs	r4, r4, r7
}
   d67c0:	4802      	ldr	r0, [pc, #8]	; (d67cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d67c2:	10a4      	asrs	r4, r4, #2
}
   d67c4:	4360      	muls	r0, r4
   d67c6:	b005      	add	sp, #20
   d67c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d67cc:	cccccccd 	.word	0xcccccccd

000d67d0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d67d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d67d2:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d67d4:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d67d6:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d67d8:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d67da:	b313      	cbz	r3, d6822 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d67dc:	b309      	cbz	r1, d6822 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d67de:	af04      	add	r7, sp, #16
   d67e0:	2300      	movs	r3, #0
   d67e2:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d67e6:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d67ea:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d67ec:	4639      	mov	r1, r7
   d67ee:	a801      	add	r0, sp, #4
   d67f0:	f7ff ff41 	bl	d6676 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d67f4:	4601      	mov	r1, r0
   d67f6:	b1a0      	cbz	r0, d6822 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d67f8:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d67fa:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d67fc:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d6800:	4620      	mov	r0, r4
   d6802:	f7ff ffa5 	bl	d6750 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d6806:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d680a:	b153      	cbz	r3, d6822 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d680c:	6823      	ldr	r3, [r4, #0]
   d680e:	2414      	movs	r4, #20
   d6810:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d6814:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d6816:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d681a:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d681c:	bfa8      	it	ge
   d681e:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6820:	e7e4      	b.n	d67ec <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d6822:	4630      	mov	r0, r6
   d6824:	b005      	add	sp, #20
   d6826:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6828 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d6828:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d682a:	4c09      	ldr	r4, [pc, #36]	; (d6850 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d682c:	6823      	ldr	r3, [r4, #0]
   d682e:	07db      	lsls	r3, r3, #31
   d6830:	d40b      	bmi.n	d684a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6832:	4620      	mov	r0, r4
   d6834:	f7fd fc42 	bl	d40bc <__cxa_guard_acquire>
   d6838:	b138      	cbz	r0, d684a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d683a:	4620      	mov	r0, r4
   d683c:	f7fd fc43 	bl	d40c6 <__cxa_guard_release>
   d6840:	4a04      	ldr	r2, [pc, #16]	; (d6854 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d6842:	4905      	ldr	r1, [pc, #20]	; (d6858 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d6844:	4805      	ldr	r0, [pc, #20]	; (d685c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6846:	f001 fcf3 	bl	d8230 <__aeabi_atexit>
    return &factory;
}
   d684a:	4804      	ldr	r0, [pc, #16]	; (d685c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d684c:	bd10      	pop	{r4, pc}
   d684e:	bf00      	nop
   d6850:	2003e230 	.word	0x2003e230
   d6854:	2003e158 	.word	0x2003e158
   d6858:	000d6673 	.word	0x000d6673
   d685c:	2003e09c 	.word	0x2003e09c

000d6860 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d6860:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d6862:	4c09      	ldr	r4, [pc, #36]	; (d6888 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d6864:	6823      	ldr	r3, [r4, #0]
   d6866:	07db      	lsls	r3, r3, #31
   d6868:	d40b      	bmi.n	d6882 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d686a:	4620      	mov	r0, r4
   d686c:	f7fd fc26 	bl	d40bc <__cxa_guard_acquire>
   d6870:	b138      	cbz	r0, d6882 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d6872:	4620      	mov	r0, r4
   d6874:	f7fd fc27 	bl	d40c6 <__cxa_guard_release>
   d6878:	4a04      	ldr	r2, [pc, #16]	; (d688c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d687a:	4905      	ldr	r1, [pc, #20]	; (d6890 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d687c:	4805      	ldr	r0, [pc, #20]	; (d6894 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d687e:	f001 fcd7 	bl	d8230 <__aeabi_atexit>
    return &factory;
}
   d6882:	4804      	ldr	r0, [pc, #16]	; (d6894 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d6884:	bd10      	pop	{r4, pc}
   d6886:	bf00      	nop
   d6888:	2003e260 	.word	0x2003e260
   d688c:	2003e158 	.word	0x2003e158
   d6890:	000d6671 	.word	0x000d6671
   d6894:	2003e098 	.word	0x2003e098

000d6898 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d6898:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d689a:	2500      	movs	r5, #0
   d689c:	4604      	mov	r4, r0
   d689e:	6005      	str	r5, [r0, #0]
   d68a0:	6045      	str	r5, [r0, #4]
   d68a2:	6085      	str	r5, [r0, #8]
   d68a4:	6105      	str	r5, [r0, #16]
   d68a6:	6145      	str	r5, [r0, #20]
   d68a8:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d68aa:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d68ae:	f7fe fd23 	bl	d52f8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d68b2:	f7ff ffb9 	bl	d6828 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d68b6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d68b8:	f7ff ffd2 	bl	d6860 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d68bc:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d68be:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d68c0:	4620      	mov	r0, r4
   d68c2:	bd38      	pop	{r3, r4, r5, pc}

000d68c4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d68c4:	b510      	push	{r4, lr}
    static LogManager mgr;
   d68c6:	4c0a      	ldr	r4, [pc, #40]	; (d68f0 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d68c8:	6823      	ldr	r3, [r4, #0]
   d68ca:	07db      	lsls	r3, r3, #31
   d68cc:	d40e      	bmi.n	d68ec <_ZN5spark10LogManager8instanceEv+0x28>
   d68ce:	4620      	mov	r0, r4
   d68d0:	f7fd fbf4 	bl	d40bc <__cxa_guard_acquire>
   d68d4:	b150      	cbz	r0, d68ec <_ZN5spark10LogManager8instanceEv+0x28>
   d68d6:	4807      	ldr	r0, [pc, #28]	; (d68f4 <_ZN5spark10LogManager8instanceEv+0x30>)
   d68d8:	f7ff ffde 	bl	d6898 <_ZN5spark10LogManagerC1Ev>
   d68dc:	4620      	mov	r0, r4
   d68de:	f7fd fbf2 	bl	d40c6 <__cxa_guard_release>
   d68e2:	4a05      	ldr	r2, [pc, #20]	; (d68f8 <_ZN5spark10LogManager8instanceEv+0x34>)
   d68e4:	4905      	ldr	r1, [pc, #20]	; (d68fc <_ZN5spark10LogManager8instanceEv+0x38>)
   d68e6:	4803      	ldr	r0, [pc, #12]	; (d68f4 <_ZN5spark10LogManager8instanceEv+0x30>)
   d68e8:	f001 fca2 	bl	d8230 <__aeabi_atexit>
    return &mgr;
}
   d68ec:	4801      	ldr	r0, [pc, #4]	; (d68f4 <_ZN5spark10LogManager8instanceEv+0x30>)
   d68ee:	bd10      	pop	{r4, pc}
   d68f0:	2003e234 	.word	0x2003e234
   d68f4:	2003e238 	.word	0x2003e238
   d68f8:	2003e158 	.word	0x2003e158
   d68fc:	000d6d2f 	.word	0x000d6d2f

000d6900 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d6900:	2300      	movs	r3, #0
   d6902:	4a02      	ldr	r2, [pc, #8]	; (d690c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d6904:	4902      	ldr	r1, [pc, #8]	; (d6910 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d6906:	4803      	ldr	r0, [pc, #12]	; (d6914 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d6908:	f7fe bebe 	b.w	d5688 <log_set_callbacks>
   d690c:	000d6c11 	.word	0x000d6c11
   d6910:	000d6ba1 	.word	0x000d6ba1
   d6914:	000d6b29 	.word	0x000d6b29

000d6918 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d6918:	2300      	movs	r3, #0
   d691a:	461a      	mov	r2, r3
   d691c:	4619      	mov	r1, r3
   d691e:	4618      	mov	r0, r3
   d6920:	f7fe beb2 	b.w	d5688 <log_set_callbacks>

000d6924 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6924:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6926:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d6928:	690e      	ldr	r6, [r1, #16]
   d692a:	f851 3b04 	ldr.w	r3, [r1], #4
   d692e:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6932:	4605      	mov	r5, r0
   d6934:	a801      	add	r0, sp, #4
   d6936:	f7ff f80a 	bl	d594e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d693a:	4622      	mov	r2, r4
   d693c:	4631      	mov	r1, r6
   d693e:	4628      	mov	r0, r5
   d6940:	f7ff fe75 	bl	d662e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6944:	a801      	add	r0, sp, #4
   d6946:	f7fd fd24 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d694a:	4628      	mov	r0, r5
   d694c:	b002      	add	sp, #8
   d694e:	bd70      	pop	{r4, r5, r6, pc}

000d6950 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6950:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6952:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d6954:	688e      	ldr	r6, [r1, #8]
   d6956:	f851 3b04 	ldr.w	r3, [r1], #4
   d695a:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d695e:	4605      	mov	r5, r0
   d6960:	a801      	add	r0, sp, #4
   d6962:	f7fe fff4 	bl	d594e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d6966:	4622      	mov	r2, r4
   d6968:	4631      	mov	r1, r6
   d696a:	4628      	mov	r0, r5
   d696c:	f7ff fe44 	bl	d65f8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6970:	a801      	add	r0, sp, #4
   d6972:	f7fd fd0e 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6976:	4628      	mov	r0, r5
   d6978:	b002      	add	sp, #8
   d697a:	bd70      	pop	{r4, r5, r6, pc}

000d697c <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d697c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d697e:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d6980:	68ce      	ldr	r6, [r1, #12]
   d6982:	f851 3b04 	ldr.w	r3, [r1], #4
   d6986:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d698a:	4605      	mov	r5, r0
   d698c:	a801      	add	r0, sp, #4
   d698e:	f7fe ffde 	bl	d594e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d6992:	4622      	mov	r2, r4
   d6994:	4631      	mov	r1, r6
   d6996:	4628      	mov	r0, r5
   d6998:	f7ff fe06 	bl	d65a8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d699c:	a801      	add	r0, sp, #4
   d699e:	f7fd fcf8 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d69a2:	4628      	mov	r0, r5
   d69a4:	b002      	add	sp, #8
   d69a6:	bd70      	pop	{r4, r5, r6, pc}

000d69a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d69a8:	b530      	push	{r4, r5, lr}
   d69aa:	b08b      	sub	sp, #44	; 0x2c
   d69ac:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d69ae:	4601      	mov	r1, r0
   d69b0:	a804      	add	r0, sp, #16
   d69b2:	f7ff ffcd 	bl	d6950 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d69b6:	a804      	add	r0, sp, #16
   d69b8:	f7ff fd29 	bl	d640e <_ZN5spark18JSONObjectIterator4nextEv>
   d69bc:	b1e8      	cbz	r0, d69fa <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d69be:	a904      	add	r1, sp, #16
   d69c0:	4668      	mov	r0, sp
   d69c2:	f7ff ffdb 	bl	d697c <_ZNK5spark18JSONObjectIterator4nameEv>
   d69c6:	490f      	ldr	r1, [pc, #60]	; (d6a04 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d69c8:	9802      	ldr	r0, [sp, #8]
   d69ca:	f7ff fe91 	bl	d66f0 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d69ce:	4604      	mov	r4, r0
   d69d0:	b110      	cbz	r0, d69d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d69d2:	1c2c      	adds	r4, r5, #0
   d69d4:	bf18      	it	ne
   d69d6:	2401      	movne	r4, #1
   d69d8:	a801      	add	r0, sp, #4
   d69da:	f7fd fcda 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69de:	2c00      	cmp	r4, #0
   d69e0:	d0e9      	beq.n	d69b6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d69e2:	a904      	add	r1, sp, #16
   d69e4:	4668      	mov	r0, sp
   d69e6:	f7ff ff9d 	bl	d6924 <_ZNK5spark18JSONObjectIterator5valueEv>
   d69ea:	4668      	mov	r0, sp
   d69ec:	f7ff fcef 	bl	d63ce <_ZNK5spark9JSONValue5toIntEv>
   d69f0:	6028      	str	r0, [r5, #0]
   d69f2:	a801      	add	r0, sp, #4
   d69f4:	f7fd fccd 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69f8:	e7dd      	b.n	d69b6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d69fa:	a805      	add	r0, sp, #20
   d69fc:	f7fd fcc9 	bl	d4392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d6a00:	b00b      	add	sp, #44	; 0x2c
   d6a02:	bd30      	pop	{r4, r5, pc}
   d6a04:	000daddc 	.word	0x000daddc

000d6a08 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6a0a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d6a0c:	4620      	mov	r0, r4
   d6a0e:	4913      	ldr	r1, [pc, #76]	; (d6a5c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6a10:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d6a12:	f002 fe39 	bl	d9688 <strcmp>
   d6a16:	b940      	cbnz	r0, d6a2a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d6a18:	f001 fab2 	bl	d7f80 <_Z16_fetch_usbserialv>
   d6a1c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d6a20:	f001 fa9e 	bl	d7f60 <_ZN9USBSerial5beginEl>
        return &Serial;
   d6a24:	f001 faac 	bl	d7f80 <_Z16_fetch_usbserialv>
   d6a28:	e015      	b.n	d6a56 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d6a2a:	490d      	ldr	r1, [pc, #52]	; (d6a60 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d6a2c:	4620      	mov	r0, r4
   d6a2e:	f002 fe2b 	bl	d9688 <strcmp>
   d6a32:	b978      	cbnz	r0, d6a54 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d6a34:	a902      	add	r1, sp, #8
   d6a36:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d6a3a:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d6a3e:	4628      	mov	r0, r5
   d6a40:	f7ff ffb2 	bl	d69a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d6a44:	f001 fa10 	bl	d7e68 <_Z22__fetch_global_Serial1v>
   d6a48:	9901      	ldr	r1, [sp, #4]
   d6a4a:	f001 fa03 	bl	d7e54 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d6a4e:	f001 fa0b 	bl	d7e68 <_Z22__fetch_global_Serial1v>
   d6a52:	e000      	b.n	d6a56 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d6a54:	2000      	movs	r0, #0
}
   d6a56:	b003      	add	sp, #12
   d6a58:	bd30      	pop	{r4, r5, pc}
   d6a5a:	bf00      	nop
   d6a5c:	000dade1 	.word	0x000dade1
   d6a60:	000dade8 	.word	0x000dade8

000d6a64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6a64:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6a66:	6804      	ldr	r4, [r0, #0]
   d6a68:	6843      	ldr	r3, [r0, #4]
   d6a6a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6a6c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6a6e:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6a72:	42a6      	cmp	r6, r4
   d6a74:	d005      	beq.n	d6a82 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6a76:	f104 0008 	add.w	r0, r4, #8
   d6a7a:	f7ff fff3 	bl	d6a64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6a7e:	3414      	adds	r4, #20
   d6a80:	e7f7      	b.n	d6a72 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6a82:	6828      	ldr	r0, [r5, #0]
   d6a84:	f7fe fef4 	bl	d5870 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6a88:	4628      	mov	r0, r5
   d6a8a:	bd70      	pop	{r4, r5, r6, pc}

000d6a8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6a8c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6a8e:	6804      	ldr	r4, [r0, #0]
   d6a90:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6a92:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6a94:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6a98:	42a6      	cmp	r6, r4
   d6a9a:	d004      	beq.n	d6aa6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d6a9c:	4620      	mov	r0, r4
   d6a9e:	f000 ffc4 	bl	d7a2a <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6aa2:	3410      	adds	r4, #16
   d6aa4:	e7f8      	b.n	d6a98 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6aa6:	6828      	ldr	r0, [r5, #0]
   d6aa8:	f7fe fee2 	bl	d5870 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6aac:	4628      	mov	r0, r5
   d6aae:	bd70      	pop	{r4, r5, r6, pc}

000d6ab0 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d6ab0:	b510      	push	{r4, lr}
   d6ab2:	4604      	mov	r4, r0
   d6ab4:	300c      	adds	r0, #12
   d6ab6:	f7ff ffd5 	bl	d6a64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6aba:	4620      	mov	r0, r4
   d6abc:	f7ff ffe6 	bl	d6a8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d6ac0:	4620      	mov	r0, r4
   d6ac2:	bd10      	pop	{r4, pc}

000d6ac4 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d6ac4:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d6ac6:	4b04      	ldr	r3, [pc, #16]	; (d6ad8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d6ac8:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d6aca:	f840 3b04 	str.w	r3, [r0], #4
   d6ace:	f7ff ffef 	bl	d6ab0 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d6ad2:	4620      	mov	r0, r4
   d6ad4:	bd10      	pop	{r4, pc}
   d6ad6:	bf00      	nop
   d6ad8:	000da904 	.word	0x000da904

000d6adc <_ZN5spark16StreamLogHandlerD0Ev>:
   d6adc:	b510      	push	{r4, lr}
   d6ade:	4604      	mov	r4, r0
   d6ae0:	f7ff fff0 	bl	d6ac4 <_ZN5spark16StreamLogHandlerD1Ev>
   d6ae4:	4620      	mov	r0, r4
   d6ae6:	2124      	movs	r1, #36	; 0x24
   d6ae8:	f001 fba7 	bl	d823a <_ZdlPvj>
   d6aec:	4620      	mov	r0, r4
   d6aee:	bd10      	pop	{r4, pc}

000d6af0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d6af0:	b510      	push	{r4, lr}
   d6af2:	4b03      	ldr	r3, [pc, #12]	; (d6b00 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d6af4:	6003      	str	r3, [r0, #0]
   d6af6:	4604      	mov	r4, r0
   d6af8:	f7ff ffe4 	bl	d6ac4 <_ZN5spark16StreamLogHandlerD1Ev>
   d6afc:	4620      	mov	r0, r4
   d6afe:	bd10      	pop	{r4, pc}
   d6b00:	000dadb4 	.word	0x000dadb4

000d6b04 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d6b04:	b510      	push	{r4, lr}
   d6b06:	4604      	mov	r4, r0
   d6b08:	f7ff fff2 	bl	d6af0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d6b0c:	4620      	mov	r0, r4
   d6b0e:	2124      	movs	r1, #36	; 0x24
   d6b10:	f001 fb93 	bl	d823a <_ZdlPvj>
   d6b14:	4620      	mov	r0, r4
   d6b16:	bd10      	pop	{r4, pc}

000d6b18 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6b18:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6b1a:	6803      	ldr	r3, [r0, #0]
   d6b1c:	4604      	mov	r4, r0
   d6b1e:	6818      	ldr	r0, [r3, #0]
   d6b20:	f7fe fbfa 	bl	d5318 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d6b24:	4620      	mov	r0, r4
   d6b26:	bd10      	pop	{r4, pc}

000d6b28 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6b2c:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d6b2e:	4b1b      	ldr	r3, [pc, #108]	; (d6b9c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d6b30:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6b32:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6b36:	b085      	sub	sp, #20
   d6b38:	4682      	mov	sl, r0
   d6b3a:	460e      	mov	r6, r1
   d6b3c:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6b3e:	bb53      	cbnz	r3, d6b96 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d6b40:	f7ff fec0 	bl	d68c4 <_ZN5spark10LogManager8instanceEv>
   d6b44:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6b46:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6b48:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6b4a:	f7ff fde5 	bl	d6718 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d6b4e:	7b23      	ldrb	r3, [r4, #12]
   d6b50:	b9f3      	cbnz	r3, d6b90 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6b52:	2301      	movs	r3, #1
   d6b54:	7323      	strb	r3, [r4, #12]
   d6b56:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6b58:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d6b5a:	b2f6      	uxtb	r6, r6
   d6b5c:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6b60:	454d      	cmp	r5, r9
   d6b62:	d013      	beq.n	d6b8c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d6b64:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d6b68:	4641      	mov	r1, r8
   d6b6a:	1d38      	adds	r0, r7, #4
   d6b6c:	f7ff fe30 	bl	d67d0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6b70:	4286      	cmp	r6, r0
   d6b72:	d3f5      	bcc.n	d6b60 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d6b74:	683b      	ldr	r3, [r7, #0]
   d6b76:	f8cd b000 	str.w	fp, [sp]
   d6b7a:	689b      	ldr	r3, [r3, #8]
   d6b7c:	469e      	mov	lr, r3
   d6b7e:	4638      	mov	r0, r7
   d6b80:	4643      	mov	r3, r8
   d6b82:	4632      	mov	r2, r6
   d6b84:	4651      	mov	r1, sl
   d6b86:	4677      	mov	r7, lr
   d6b88:	47b8      	blx	r7
   d6b8a:	e7e9      	b.n	d6b60 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6b8c:	2300      	movs	r3, #0
   d6b8e:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d6b90:	a803      	add	r0, sp, #12
   d6b92:	f7ff ffc1 	bl	d6b18 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d6b96:	b005      	add	sp, #20
   d6b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6b9c:	e000ed00 	.word	0xe000ed00

000d6ba0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d6ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6ba4:	4699      	mov	r9, r3
   d6ba6:	4b19      	ldr	r3, [pc, #100]	; (d6c0c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d6ba8:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d6bae:	4607      	mov	r7, r0
   d6bb0:	4688      	mov	r8, r1
   d6bb2:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6bb4:	bb33      	cbnz	r3, d6c04 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d6bb6:	f7ff fe85 	bl	d68c4 <_ZN5spark10LogManager8instanceEv>
   d6bba:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6bbc:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6bbe:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6bc0:	f7ff fdaa 	bl	d6718 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d6bc4:	7b23      	ldrb	r3, [r4, #12]
   d6bc6:	b9d3      	cbnz	r3, d6bfe <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6bc8:	2301      	movs	r3, #1
   d6bca:	7323      	strb	r3, [r4, #12]
   d6bcc:	6825      	ldr	r5, [r4, #0]
   d6bce:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d6bd0:	fa5f fb86 	uxtb.w	fp, r6
   d6bd4:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6bd8:	4555      	cmp	r5, sl
   d6bda:	d00e      	beq.n	d6bfa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d6bdc:	f855 6b04 	ldr.w	r6, [r5], #4
   d6be0:	4649      	mov	r1, r9
   d6be2:	1d30      	adds	r0, r6, #4
   d6be4:	f7ff fdf4 	bl	d67d0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6be8:	4583      	cmp	fp, r0
   d6bea:	d3f5      	bcc.n	d6bd8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d6bec:	6833      	ldr	r3, [r6, #0]
   d6bee:	4642      	mov	r2, r8
   d6bf0:	68db      	ldr	r3, [r3, #12]
   d6bf2:	4639      	mov	r1, r7
   d6bf4:	4630      	mov	r0, r6
   d6bf6:	4798      	blx	r3
   d6bf8:	e7ee      	b.n	d6bd8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6bfa:	2300      	movs	r3, #0
   d6bfc:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d6bfe:	a801      	add	r0, sp, #4
   d6c00:	f7ff ff8a 	bl	d6b18 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d6c04:	b003      	add	sp, #12
   d6c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6c0a:	bf00      	nop
   d6c0c:	e000ed00 	.word	0xe000ed00

000d6c10 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6c10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6c14:	4b15      	ldr	r3, [pc, #84]	; (d6c6c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d6c16:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6c1c:	4604      	mov	r4, r0
   d6c1e:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6c20:	b9fb      	cbnz	r3, d6c62 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d6c22:	f7ff fe4f 	bl	d68c4 <_ZN5spark10LogManager8instanceEv>
   d6c26:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6c28:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6c2a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6c2c:	f7ff fd74 	bl	d6718 <_ZN14RecursiveMutex4lockEv>
   d6c30:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d6c34:	2646      	movs	r6, #70	; 0x46
   d6c36:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d6c3a:	42af      	cmp	r7, r5
   d6c3c:	d107      	bne.n	d6c4e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6c3e:	a801      	add	r0, sp, #4
   d6c40:	f7ff ff6a 	bl	d6b18 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d6c44:	42b4      	cmp	r4, r6
   d6c46:	bfb4      	ite	lt
   d6c48:	2000      	movlt	r0, #0
   d6c4a:	2001      	movge	r0, #1
   d6c4c:	e00a      	b.n	d6c64 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d6c4e:	f855 0b04 	ldr.w	r0, [r5], #4
   d6c52:	4641      	mov	r1, r8
   d6c54:	3004      	adds	r0, #4
   d6c56:	f7ff fdbb 	bl	d67d0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6c5a:	4286      	cmp	r6, r0
   d6c5c:	bfa8      	it	ge
   d6c5e:	4606      	movge	r6, r0
   d6c60:	e7eb      	b.n	d6c3a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d6c62:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d6c64:	b002      	add	sp, #8
   d6c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6c6a:	bf00      	nop
   d6c6c:	e000ed00 	.word	0xe000ed00

000d6c70 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6c70:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d6c72:	6803      	ldr	r3, [r0, #0]
   d6c74:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6c76:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d6c78:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6c7c:	429a      	cmp	r2, r3
   d6c7e:	4618      	mov	r0, r3
   d6c80:	d00e      	beq.n	d6ca0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d6c82:	6806      	ldr	r6, [r0, #0]
   d6c84:	680d      	ldr	r5, [r1, #0]
   d6c86:	42ae      	cmp	r6, r5
   d6c88:	f103 0304 	add.w	r3, r3, #4
   d6c8c:	d1f6      	bne.n	d6c7c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d6c8e:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6c90:	1a52      	subs	r2, r2, r1
   d6c92:	f002 fa48 	bl	d9126 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d6c96:	6863      	ldr	r3, [r4, #4]
   d6c98:	3b01      	subs	r3, #1
   d6c9a:	6063      	str	r3, [r4, #4]
    return true;
   d6c9c:	2001      	movs	r0, #1
}
   d6c9e:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d6ca0:	2000      	movs	r0, #0
   d6ca2:	bd70      	pop	{r4, r5, r6, pc}

000d6ca4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6ca6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d6ca8:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6caa:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6cac:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6cae:	f7ff fd33 	bl	d6718 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6cb2:	a901      	add	r1, sp, #4
   d6cb4:	4620      	mov	r0, r4
   d6cb6:	f7ff ffdb 	bl	d6c70 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6cba:	b920      	cbnz	r0, d6cc6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d6cbc:	a803      	add	r0, sp, #12
   d6cbe:	f7ff ff2b 	bl	d6b18 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d6cc2:	b004      	add	sp, #16
   d6cc4:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6cc6:	6863      	ldr	r3, [r4, #4]
   d6cc8:	2b00      	cmp	r3, #0
   d6cca:	d1f7      	bne.n	d6cbc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d6ccc:	f7ff fe24 	bl	d6918 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d6cd0:	e7f4      	b.n	d6cbc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d6cd2 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d6cd2:	b570      	push	{r4, r5, r6, lr}
   d6cd4:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6cd6:	6943      	ldr	r3, [r0, #20]
   d6cd8:	2618      	movs	r6, #24
   d6cda:	4604      	mov	r4, r0
   d6cdc:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d6ce0:	42ae      	cmp	r6, r5
   d6ce2:	d015      	beq.n	d6d10 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d6ce4:	f105 0110 	add.w	r1, r5, #16
   d6ce8:	4620      	mov	r0, r4
   d6cea:	f7ff ffc1 	bl	d6c70 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d6cee:	6863      	ldr	r3, [r4, #4]
   d6cf0:	b90b      	cbnz	r3, d6cf6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d6cf2:	f7ff fe11 	bl	d6918 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d6cf6:	69e0      	ldr	r0, [r4, #28]
   d6cf8:	6929      	ldr	r1, [r5, #16]
   d6cfa:	6803      	ldr	r3, [r0, #0]
   d6cfc:	68db      	ldr	r3, [r3, #12]
   d6cfe:	4798      	blx	r3
        if (h.stream) {
   d6d00:	6969      	ldr	r1, [r5, #20]
   d6d02:	b119      	cbz	r1, d6d0c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d6d04:	6a20      	ldr	r0, [r4, #32]
   d6d06:	6803      	ldr	r3, [r0, #0]
   d6d08:	68db      	ldr	r3, [r3, #12]
   d6d0a:	4798      	blx	r3
   d6d0c:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d6d0e:	e7e7      	b.n	d6ce0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6d10:	6925      	ldr	r5, [r4, #16]
   d6d12:	6963      	ldr	r3, [r4, #20]
   d6d14:	2618      	movs	r6, #24
   d6d16:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6d1a:	42b5      	cmp	r5, r6
   d6d1c:	d004      	beq.n	d6d28 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6d1e:	4628      	mov	r0, r5
   d6d20:	f000 fe83 	bl	d7a2a <_ZN6StringD1Ev>
   d6d24:	3518      	adds	r5, #24
   d6d26:	e7f8      	b.n	d6d1a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6d28:	2300      	movs	r3, #0
   d6d2a:	6163      	str	r3, [r4, #20]
   d6d2c:	bd70      	pop	{r4, r5, r6, pc}

000d6d2e <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d6d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6d30:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6d32:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d6d34:	f7ff fdf0 	bl	d6918 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6d38:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6d3c:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d6d40:	f7ff fcea 	bl	d6718 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d6d44:	4620      	mov	r0, r4
   d6d46:	f7ff ffc4 	bl	d6cd2 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6d4a:	4628      	mov	r0, r5
   d6d4c:	f7ff fee4 	bl	d6b18 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6d50:	6925      	ldr	r5, [r4, #16]
   d6d52:	6963      	ldr	r3, [r4, #20]
   d6d54:	2618      	movs	r6, #24
   d6d56:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6d5a:	42b5      	cmp	r5, r6
   d6d5c:	d004      	beq.n	d6d68 <_ZN5spark10LogManagerD1Ev+0x3a>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6d5e:	4628      	mov	r0, r5
   d6d60:	f000 fe63 	bl	d7a2a <_ZN6StringD1Ev>
   d6d64:	3518      	adds	r5, #24
   d6d66:	e7f8      	b.n	d6d5a <_ZN5spark10LogManagerD1Ev+0x2c>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6d68:	6920      	ldr	r0, [r4, #16]
   d6d6a:	f7fe fd81 	bl	d5870 <free>
   d6d6e:	6820      	ldr	r0, [r4, #0]
   d6d70:	f7fe fd7e 	bl	d5870 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d6d74:	4620      	mov	r0, r4
   d6d76:	b002      	add	sp, #8
   d6d78:	bd70      	pop	{r4, r5, r6, pc}

000d6d7a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d7a:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6d7c:	680a      	ldr	r2, [r1, #0]
   d6d7e:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d80:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d82:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6d84:	684a      	ldr	r2, [r1, #4]
   d6d86:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d88:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d8a:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6d8c:	688a      	ldr	r2, [r1, #8]
   d6d8e:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d90:	608b      	str	r3, [r1, #8]
   d6d92:	4770      	bx	lr

000d6d94 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6d94:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6d96:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6d98:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6d9a:	6003      	str	r3, [r0, #0]
   d6d9c:	6043      	str	r3, [r0, #4]
   d6d9e:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6da0:	f7ff ffeb 	bl	d6d7a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d6da4:	4620      	mov	r0, r4
   d6da6:	bd10      	pop	{r4, pc}

000d6da8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6da8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6dac:	4604      	mov	r4, r0
   d6dae:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6db0:	d925      	bls.n	d6dfe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d6db2:	4290      	cmp	r0, r2
   d6db4:	d224      	bcs.n	d6e00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d6db6:	1a55      	subs	r5, r2, r1
   d6db8:	3d14      	subs	r5, #20
   d6dba:	442c      	add	r4, r5
   d6dbc:	f1a1 0714 	sub.w	r7, r1, #20
   d6dc0:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6dc4:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6dc6:	f1a5 0308 	sub.w	r3, r5, #8
   d6dca:	429f      	cmp	r7, r3
   d6dcc:	d037      	beq.n	d6e3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d6dce:	b184      	cbz	r4, d6df2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6dd0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d6dd4:	6023      	str	r3, [r4, #0]
   d6dd6:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6dda:	80a3      	strh	r3, [r4, #4]
   d6ddc:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6de0:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6de2:	60a6      	str	r6, [r4, #8]
   d6de4:	60e6      	str	r6, [r4, #12]
   d6de6:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6de8:	4629      	mov	r1, r5
   d6dea:	f104 0008 	add.w	r0, r4, #8
   d6dee:	f7ff ffc4 	bl	d6d7a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6df2:	4628      	mov	r0, r5
   d6df4:	f7ff fe36 	bl	d6a64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6df8:	3c14      	subs	r4, #20
   d6dfa:	3d14      	subs	r5, #20
   d6dfc:	e7e3      	b.n	d6dc6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6dfe:	d01e      	beq.n	d6e3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d6e00:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6e04:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6e06:	f1a5 0308 	sub.w	r3, r5, #8
   d6e0a:	429e      	cmp	r6, r3
   d6e0c:	d017      	beq.n	d6e3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d6e0e:	b184      	cbz	r4, d6e32 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d6e10:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d6e14:	6023      	str	r3, [r4, #0]
   d6e16:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6e1a:	80a3      	strh	r3, [r4, #4]
   d6e1c:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6e20:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6e22:	60a7      	str	r7, [r4, #8]
   d6e24:	60e7      	str	r7, [r4, #12]
   d6e26:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6e28:	4629      	mov	r1, r5
   d6e2a:	f104 0008 	add.w	r0, r4, #8
   d6e2e:	f7ff ffa4 	bl	d6d7a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6e32:	4628      	mov	r0, r5
   d6e34:	f7ff fe16 	bl	d6a64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6e38:	3414      	adds	r4, #20
   d6e3a:	3514      	adds	r5, #20
   d6e3c:	e7e3      	b.n	d6e06 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d6e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e40 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6e42:	6845      	ldr	r5, [r0, #4]
   d6e44:	6883      	ldr	r3, [r0, #8]
   d6e46:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6e48:	4604      	mov	r4, r0
   d6e4a:	460e      	mov	r6, r1
   d6e4c:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6e4e:	db0e      	blt.n	d6e6e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d6e50:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6e52:	2d00      	cmp	r5, #0
   d6e54:	dd05      	ble.n	d6e62 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d6e56:	00a9      	lsls	r1, r5, #2
   d6e58:	6800      	ldr	r0, [r0, #0]
   d6e5a:	f7fe fd11 	bl	d5880 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d6e5e:	b920      	cbnz	r0, d6e6a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d6e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6e62:	6800      	ldr	r0, [r0, #0]
   d6e64:	f7fe fd04 	bl	d5870 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6e68:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d6e6a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d6e6c:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6e6e:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6e70:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6e72:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6e76:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d6e7a:	1a52      	subs	r2, r2, r1
   d6e7c:	1d08      	adds	r0, r1, #4
   d6e7e:	f002 f952 	bl	d9126 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d6e82:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d6e86:	6863      	ldr	r3, [r4, #4]
   d6e88:	3301      	adds	r3, #1
   d6e8a:	6063      	str	r3, [r4, #4]
   d6e8c:	2001      	movs	r0, #1
    return true;
}
   d6e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e90 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d6e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6e92:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d6e94:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d6e96:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6e98:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6e9a:	f7ff fc3d 	bl	d6718 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d6e9e:	6823      	ldr	r3, [r4, #0]
   d6ea0:	6861      	ldr	r1, [r4, #4]
   d6ea2:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6ea6:	4283      	cmp	r3, r0
   d6ea8:	461a      	mov	r2, r3
   d6eaa:	d009      	beq.n	d6ec0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d6eac:	6812      	ldr	r2, [r2, #0]
   d6eae:	42aa      	cmp	r2, r5
   d6eb0:	f103 0304 	add.w	r3, r3, #4
   d6eb4:	d1f7      	bne.n	d6ea6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d6eb6:	a801      	add	r0, sp, #4
   d6eb8:	f7ff fe2e 	bl	d6b18 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d6ebc:	2500      	movs	r5, #0
   d6ebe:	e00e      	b.n	d6ede <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6ec0:	462a      	mov	r2, r5
   d6ec2:	4620      	mov	r0, r4
   d6ec4:	f7ff ffbc 	bl	d6e40 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d6ec8:	4605      	mov	r5, r0
   d6eca:	2800      	cmp	r0, #0
   d6ecc:	d0f3      	beq.n	d6eb6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d6ece:	6863      	ldr	r3, [r4, #4]
   d6ed0:	2b01      	cmp	r3, #1
   d6ed2:	d101      	bne.n	d6ed8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d6ed4:	f7ff fd14 	bl	d6900 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d6ed8:	a801      	add	r0, sp, #4
   d6eda:	f7ff fe1d 	bl	d6b18 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d6ede:	4628      	mov	r0, r5
   d6ee0:	b003      	add	sp, #12
   d6ee2:	bd30      	pop	{r4, r5, pc}

000d6ee4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6ee4:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ee8:	4606      	mov	r6, r0
   d6eea:	460c      	mov	r4, r1
   d6eec:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6eee:	d914      	bls.n	d6f1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d6ef0:	4290      	cmp	r0, r2
   d6ef2:	d213      	bcs.n	d6f1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6ef4:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d6ef8:	1a6c      	subs	r4, r5, r1
   d6efa:	f1a1 0710 	sub.w	r7, r1, #16
   d6efe:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6f00:	42af      	cmp	r7, r5
   d6f02:	d018      	beq.n	d6f36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d6f04:	b11c      	cbz	r4, d6f0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d6f06:	4629      	mov	r1, r5
   d6f08:	4620      	mov	r0, r4
   d6f0a:	f000 fd7e 	bl	d7a0a <_ZN6StringC1EOS_>
                end->~T();
   d6f0e:	4628      	mov	r0, r5
   d6f10:	f000 fd8b 	bl	d7a2a <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6f14:	3d10      	subs	r5, #16
   d6f16:	3c10      	subs	r4, #16
   d6f18:	e7f2      	b.n	d6f00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6f1a:	d00c      	beq.n	d6f36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d6f1c:	42ac      	cmp	r4, r5
   d6f1e:	d00a      	beq.n	d6f36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d6f20:	b11e      	cbz	r6, d6f2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d6f22:	4621      	mov	r1, r4
   d6f24:	4630      	mov	r0, r6
   d6f26:	f000 fd70 	bl	d7a0a <_ZN6StringC1EOS_>
                p->~T();
   d6f2a:	4620      	mov	r0, r4
   d6f2c:	f000 fd7d 	bl	d7a2a <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6f30:	3410      	adds	r4, #16
   d6f32:	3610      	adds	r6, #16
   d6f34:	e7f2      	b.n	d6f1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d6f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6f38:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6f3a:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6f3c:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6f3e:	dd0b      	ble.n	d6f58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6f40:	0130      	lsls	r0, r6, #4
   d6f42:	f7fe fc8d 	bl	d5860 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6f46:	4604      	mov	r4, r0
   d6f48:	b170      	cbz	r0, d6f68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6f4a:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6f4e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d6f52:	f7ff ffc7 	bl	d6ee4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d6f56:	e000      	b.n	d6f5a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6f58:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6f5a:	6828      	ldr	r0, [r5, #0]
   d6f5c:	f7fe fc88 	bl	d5870 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6f60:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6f62:	60ae      	str	r6, [r5, #8]
        return true;
   d6f64:	2001      	movs	r0, #1
   d6f66:	bd70      	pop	{r4, r5, r6, pc}
    }
   d6f68:	bd70      	pop	{r4, r5, r6, pc}

000d6f6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6f6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6f6e:	2300      	movs	r3, #0
   d6f70:	b095      	sub	sp, #84	; 0x54
   d6f72:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d6f74:	2246      	movs	r2, #70	; 0x46
   d6f76:	6003      	str	r3, [r0, #0]
   d6f78:	6043      	str	r3, [r0, #4]
   d6f7a:	6083      	str	r3, [r0, #8]
   d6f7c:	60c3      	str	r3, [r0, #12]
   d6f7e:	6103      	str	r3, [r0, #16]
   d6f80:	6143      	str	r3, [r0, #20]
   d6f82:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6f84:	9102      	str	r1, [sp, #8]
   d6f86:	f8da 1004 	ldr.w	r1, [sl, #4]
   d6f8a:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6f8c:	4299      	cmp	r1, r3
   d6f8e:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6f90:	9309      	str	r3, [sp, #36]	; 0x24
   d6f92:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6f94:	f340 809d 	ble.w	d70d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d6f98:	a808      	add	r0, sp, #32
   d6f9a:	f7ff ffcd 	bl	d6f38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6f9e:	2800      	cmp	r0, #0
   d6fa0:	f040 8097 	bne.w	d70d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d6fa4:	e08e      	b.n	d70c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d6fa6:	4621      	mov	r1, r4
   d6fa8:	a80b      	add	r0, sp, #44	; 0x2c
   d6faa:	f000 fd2e 	bl	d7a0a <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6fae:	a90b      	add	r1, sp, #44	; 0x2c
   d6fb0:	a80f      	add	r0, sp, #60	; 0x3c
   d6fb2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d6fb4:	f000 fd29 	bl	d7a0a <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6fb8:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6fbc:	4299      	cmp	r1, r3
   d6fbe:	f2c0 80ce 	blt.w	d715e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d6fc2:	3101      	adds	r1, #1
   d6fc4:	a808      	add	r0, sp, #32
   d6fc6:	f7ff ffb7 	bl	d6f38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6fca:	2800      	cmp	r0, #0
   d6fcc:	f040 80c7 	bne.w	d715e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6fd0:	a80f      	add	r0, sp, #60	; 0x3c
   d6fd2:	f000 fd2a 	bl	d7a2a <_ZN6StringD1Ev>
   d6fd6:	a80b      	add	r0, sp, #44	; 0x2c
   d6fd8:	f000 fd27 	bl	d7a2a <_ZN6StringD1Ev>
   d6fdc:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d6fde:	42a7      	cmp	r7, r4
   d6fe0:	d1e1      	bne.n	d6fa6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6fe2:	2600      	movs	r6, #0
   d6fe4:	960b      	str	r6, [sp, #44]	; 0x2c
   d6fe6:	960c      	str	r6, [sp, #48]	; 0x30
   d6fe8:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6fea:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6fee:	429e      	cmp	r6, r3
   d6ff0:	f280 80a8 	bge.w	d7144 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d6ff4:	0133      	lsls	r3, r6, #4
   d6ff6:	9a08      	ldr	r2, [sp, #32]
   d6ff8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d6ffa:	9306      	str	r3, [sp, #24]
        if (!category) {
   d6ffc:	2b00      	cmp	r3, #0
   d6ffe:	f000 809f 	beq.w	d7140 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d7002:	2314      	movs	r3, #20
   d7004:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d7006:	f8cd 901c 	str.w	r9, [sp, #28]
   d700a:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d700c:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d700e:	a907      	add	r1, sp, #28
   d7010:	a806      	add	r0, sp, #24
   d7012:	f7ff fb30 	bl	d6676 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d7016:	4607      	mov	r7, r0
   d7018:	2800      	cmp	r0, #0
   d701a:	f000 8091 	beq.w	d7140 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d701e:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d7020:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d7022:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d7026:	9a07      	ldr	r2, [sp, #28]
   d7028:	4620      	mov	r0, r4
   d702a:	f7ff fb91 	bl	d6750 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d702e:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d7032:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7034:	f1b8 0f00 	cmp.w	r8, #0
   d7038:	d153      	bne.n	d70e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d703a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d703e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d7042:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7046:	970f      	str	r7, [sp, #60]	; 0x3c
   d7048:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d704c:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d7050:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d7054:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7058:	6867      	ldr	r7, [r4, #4]
   d705a:	68a3      	ldr	r3, [r4, #8]
   d705c:	429f      	cmp	r7, r3
   d705e:	da4f      	bge.n	d7100 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d7060:	9b00      	ldr	r3, [sp, #0]
   d7062:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d7066:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7068:	2214      	movs	r2, #20
   d706a:	4353      	muls	r3, r2
   d706c:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d7070:	fb02 b201 	mla	r2, r2, r1, fp
   d7074:	f107 0014 	add.w	r0, r7, #20
   d7078:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d707a:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d707c:	f7ff fe94 	bl	d6da8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d7080:	b1a7      	cbz	r7, d70ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d7082:	9b03      	ldr	r3, [sp, #12]
   d7084:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d7086:	f84b 2003 	str.w	r2, [fp, r3]
   d708a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d708e:	80bb      	strh	r3, [r7, #4]
   d7090:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d7094:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7096:	f8c7 9008 	str.w	r9, [r7, #8]
   d709a:	f8c7 900c 	str.w	r9, [r7, #12]
   d709e:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d70a2:	a911      	add	r1, sp, #68	; 0x44
   d70a4:	f107 0008 	add.w	r0, r7, #8
   d70a8:	f7ff fe67 	bl	d6d7a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d70ac:	6863      	ldr	r3, [r4, #4]
   d70ae:	3301      	adds	r3, #1
   d70b0:	6063      	str	r3, [r4, #4]
   d70b2:	a811      	add	r0, sp, #68	; 0x44
   d70b4:	f7ff fcd6 	bl	d6a64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d70b8:	f1b8 0f00 	cmp.w	r8, #0
   d70bc:	d011      	beq.n	d70e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d70be:	a80b      	add	r0, sp, #44	; 0x2c
   d70c0:	f7ff fcd0 	bl	d6a64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d70c4:	a808      	add	r0, sp, #32
   d70c6:	f7ff fce1 	bl	d6a8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d70ca:	4628      	mov	r0, r5
   d70cc:	b015      	add	sp, #84	; 0x54
   d70ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d70d2:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d70d6:	f8da 3004 	ldr.w	r3, [sl, #4]
   d70da:	2714      	movs	r7, #20
   d70dc:	fb07 4703 	mla	r7, r7, r3, r4
   d70e0:	e77d      	b.n	d6fde <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d70e2:	6823      	ldr	r3, [r4, #0]
   d70e4:	9a00      	ldr	r2, [sp, #0]
   d70e6:	2414      	movs	r4, #20
   d70e8:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d70ec:	9b06      	ldr	r3, [sp, #24]
   d70ee:	781b      	ldrb	r3, [r3, #0]
   d70f0:	bb23      	cbnz	r3, d713c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d70f2:	f8da 3000 	ldr.w	r3, [sl]
   d70f6:	9a01      	ldr	r2, [sp, #4]
   d70f8:	4413      	add	r3, r2
   d70fa:	7c1b      	ldrb	r3, [r3, #16]
   d70fc:	80e3      	strh	r3, [r4, #6]
   d70fe:	e01d      	b.n	d713c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7100:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d7102:	2f00      	cmp	r7, #0
   d7104:	dd0f      	ble.n	d7126 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7106:	2314      	movs	r3, #20
   d7108:	fb03 f007 	mul.w	r0, r3, r7
   d710c:	9303      	str	r3, [sp, #12]
   d710e:	f7fe fba7 	bl	d5860 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7112:	4683      	mov	fp, r0
   d7114:	b178      	cbz	r0, d7136 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d7116:	e894 0006 	ldmia.w	r4, {r1, r2}
   d711a:	9b03      	ldr	r3, [sp, #12]
   d711c:	fb03 1202 	mla	r2, r3, r2, r1
   d7120:	f7ff fe42 	bl	d6da8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d7124:	e000      	b.n	d7128 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7126:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7128:	6820      	ldr	r0, [r4, #0]
   d712a:	f7fe fba1 	bl	d5870 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d712e:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d7132:	60a7      	str	r7, [r4, #8]
   d7134:	e794      	b.n	d7060 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7136:	f04f 0801 	mov.w	r8, #1
   d713a:	e7ba      	b.n	d70b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d713c:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d713e:	e766      	b.n	d700e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d7140:	3601      	adds	r6, #1
   d7142:	e753      	b.n	d6fec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d7144:	a908      	add	r1, sp, #32
   d7146:	4628      	mov	r0, r5
   d7148:	f7ff fe17 	bl	d6d7a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d714c:	a90b      	add	r1, sp, #44	; 0x2c
   d714e:	f105 000c 	add.w	r0, r5, #12
   d7152:	f7ff fe12 	bl	d6d7a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d7156:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d715a:	762b      	strb	r3, [r5, #24]
   d715c:	e7af      	b.n	d70be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d715e:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d7160:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7162:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d7166:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d716a:	4631      	mov	r1, r6
   d716c:	f106 0010 	add.w	r0, r6, #16
   d7170:	f7ff feb8 	bl	d6ee4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d7174:	b11e      	cbz	r6, d717e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d7176:	a90f      	add	r1, sp, #60	; 0x3c
   d7178:	4630      	mov	r0, r6
   d717a:	f000 fc46 	bl	d7a0a <_ZN6StringC1EOS_>
    ++size_;
   d717e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7180:	3301      	adds	r3, #1
   d7182:	9309      	str	r3, [sp, #36]	; 0x24
   d7184:	e724      	b.n	d6fd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d7188 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7188:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d718a:	4604      	mov	r4, r0
   d718c:	4b09      	ldr	r3, [pc, #36]	; (d71b4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d718e:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7192:	4605      	mov	r5, r0
   d7194:	460e      	mov	r6, r1
        filter_(level, filters) {
   d7196:	a801      	add	r0, sp, #4
   d7198:	4611      	mov	r1, r2
   d719a:	f7fd fb48 	bl	d482e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d719e:	aa01      	add	r2, sp, #4
   d71a0:	4631      	mov	r1, r6
   d71a2:	4620      	mov	r0, r4
   d71a4:	f7ff fee1 	bl	d6f6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d71a8:	a801      	add	r0, sp, #4
   d71aa:	f7fd faff 	bl	d47ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d71ae:	4628      	mov	r0, r5
   d71b0:	b004      	add	sp, #16
   d71b2:	bd70      	pop	{r4, r5, r6, pc}
   d71b4:	000da904 	.word	0x000da904

000d71b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d71b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d71ba:	460f      	mov	r7, r1
   d71bc:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d71be:	492b      	ldr	r1, [pc, #172]	; (d726c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d71c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d71c2:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d71c4:	4616      	mov	r6, r2
   d71c6:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d71c8:	f002 fa5e 	bl	d9688 <strcmp>
   d71cc:	bb28      	cbnz	r0, d721a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d71ce:	2c00      	cmp	r4, #0
   d71d0:	d049      	beq.n	d7266 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d71d2:	4629      	mov	r1, r5
   d71d4:	a801      	add	r0, sp, #4
   d71d6:	f7ff fddd 	bl	d6d94 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d71da:	4925      	ldr	r1, [pc, #148]	; (d7270 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d71dc:	2024      	movs	r0, #36	; 0x24
   d71de:	f001 f837 	bl	d8250 <_ZnwjRKSt9nothrow_t>
   d71e2:	4605      	mov	r5, r0
   d71e4:	b1b8      	cbz	r0, d7216 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d71e6:	a901      	add	r1, sp, #4
   d71e8:	a804      	add	r0, sp, #16
   d71ea:	f7ff fdd3 	bl	d6d94 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d71ee:	a904      	add	r1, sp, #16
   d71f0:	a807      	add	r0, sp, #28
   d71f2:	f7fd fb1c 	bl	d482e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d71f6:	aa07      	add	r2, sp, #28
   d71f8:	4631      	mov	r1, r6
   d71fa:	4628      	mov	r0, r5
   d71fc:	f7ff ffc4 	bl	d7188 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7200:	a807      	add	r0, sp, #28
   d7202:	f7fd fad3 	bl	d47ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7206:	4b1b      	ldr	r3, [pc, #108]	; (d7274 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d7208:	602b      	str	r3, [r5, #0]
   d720a:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d720c:	a804      	add	r0, sp, #16
   d720e:	f7fd facd 	bl	d47ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7212:	4b19      	ldr	r3, [pc, #100]	; (d7278 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d7214:	602b      	str	r3, [r5, #0]
   d7216:	a801      	add	r0, sp, #4
   d7218:	e01f      	b.n	d725a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d721a:	4918      	ldr	r1, [pc, #96]	; (d727c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d721c:	4638      	mov	r0, r7
   d721e:	f002 fa33 	bl	d9688 <strcmp>
   d7222:	b9f0      	cbnz	r0, d7262 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d7224:	b1fc      	cbz	r4, d7266 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d7226:	4629      	mov	r1, r5
   d7228:	a804      	add	r0, sp, #16
   d722a:	f7ff fdb3 	bl	d6d94 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d722e:	4910      	ldr	r1, [pc, #64]	; (d7270 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d7230:	2024      	movs	r0, #36	; 0x24
   d7232:	f001 f80d 	bl	d8250 <_ZnwjRKSt9nothrow_t>
   d7236:	4605      	mov	r5, r0
   d7238:	b170      	cbz	r0, d7258 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d723a:	a904      	add	r1, sp, #16
   d723c:	a807      	add	r0, sp, #28
   d723e:	f7fd faf6 	bl	d482e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7242:	aa07      	add	r2, sp, #28
   d7244:	4631      	mov	r1, r6
   d7246:	4628      	mov	r0, r5
   d7248:	f7ff ff9e 	bl	d7188 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d724c:	a807      	add	r0, sp, #28
   d724e:	f7fd faad 	bl	d47ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7252:	4b08      	ldr	r3, [pc, #32]	; (d7274 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d7254:	602b      	str	r3, [r5, #0]
   d7256:	622c      	str	r4, [r5, #32]
   d7258:	a804      	add	r0, sp, #16
   d725a:	f7fd faa7 	bl	d47ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d725e:	4628      	mov	r0, r5
   d7260:	e002      	b.n	d7268 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d7262:	2000      	movs	r0, #0
   d7264:	e000      	b.n	d7268 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d7266:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d7268:	b00b      	add	sp, #44	; 0x2c
   d726a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d726c:	000dae37 	.word	0x000dae37
   d7270:	000dafe8 	.word	0x000dafe8
   d7274:	000daec0 	.word	0x000daec0
   d7278:	000dadb4 	.word	0x000dadb4
   d727c:	000dae3b 	.word	0x000dae3b

000d7280 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7280:	4b01      	ldr	r3, [pc, #4]	; (d7288 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7282:	4a02      	ldr	r2, [pc, #8]	; (d728c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7284:	601a      	str	r2, [r3, #0]
   d7286:	4770      	bx	lr
   d7288:	2003e264 	.word	0x2003e264
   d728c:	000dae4c 	.word	0x000dae4c

000d7290 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7294:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d7296:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d729a:	4604      	mov	r4, r0
   d729c:	460e      	mov	r6, r1
   d729e:	4617      	mov	r7, r2
   d72a0:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d72a2:	f000 fe6d 	bl	d7f80 <_Z16_fetch_usbserialv>
   d72a6:	4581      	cmp	r9, r0
   d72a8:	d105      	bne.n	d72b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d72aa:	485a      	ldr	r0, [pc, #360]	; (d7414 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d72ac:	f000 fa67 	bl	d777e <_ZN5spark12NetworkClass9listeningEv>
   d72b0:	2800      	cmp	r0, #0
   d72b2:	f040 80ac 	bne.w	d740e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d72b6:	792b      	ldrb	r3, [r5, #4]
   d72b8:	071b      	lsls	r3, r3, #28
   d72ba:	d505      	bpl.n	d72c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d72bc:	696b      	ldr	r3, [r5, #20]
   d72be:	4a56      	ldr	r2, [pc, #344]	; (d7418 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d72c0:	6a20      	ldr	r0, [r4, #32]
   d72c2:	2100      	movs	r1, #0
   d72c4:	f000 fb34 	bl	d7930 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d72c8:	f1b8 0f00 	cmp.w	r8, #0
   d72cc:	d00d      	beq.n	d72ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d72ce:	215b      	movs	r1, #91	; 0x5b
   d72d0:	4620      	mov	r0, r4
   d72d2:	f7ff fa32 	bl	d673a <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d72d6:	4641      	mov	r1, r8
   d72d8:	4620      	mov	r0, r4
   d72da:	f7ff fa20 	bl	d671e <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d72de:	6823      	ldr	r3, [r4, #0]
   d72e0:	494e      	ldr	r1, [pc, #312]	; (d741c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d72e2:	68db      	ldr	r3, [r3, #12]
   d72e4:	2202      	movs	r2, #2
   d72e6:	4620      	mov	r0, r4
   d72e8:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d72ea:	792b      	ldrb	r3, [r5, #4]
   d72ec:	07d9      	lsls	r1, r3, #31
   d72ee:	d525      	bpl.n	d733c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d72f0:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d72f4:	212f      	movs	r1, #47	; 0x2f
   d72f6:	4640      	mov	r0, r8
   d72f8:	f002 ff25 	bl	da146 <strrchr>
    if (s1) {
   d72fc:	b108      	cbz	r0, d7302 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d72fe:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d7302:	4641      	mov	r1, r8
   d7304:	4620      	mov	r0, r4
   d7306:	f7ff fa0a 	bl	d671e <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d730a:	792b      	ldrb	r3, [r5, #4]
   d730c:	079a      	lsls	r2, r3, #30
   d730e:	d509      	bpl.n	d7324 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d7310:	213a      	movs	r1, #58	; 0x3a
   d7312:	4620      	mov	r0, r4
   d7314:	f7ff fa11 	bl	d673a <_ZN5spark16StreamLogHandler5writeEc>
   d7318:	68eb      	ldr	r3, [r5, #12]
   d731a:	4a41      	ldr	r2, [pc, #260]	; (d7420 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d731c:	6a20      	ldr	r0, [r4, #32]
   d731e:	2100      	movs	r1, #0
   d7320:	f000 fb06 	bl	d7930 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d7324:	792b      	ldrb	r3, [r5, #4]
   d7326:	f013 0f04 	tst.w	r3, #4
   d732a:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d732c:	bf18      	it	ne
   d732e:	493d      	ldrne	r1, [pc, #244]	; (d7424 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7330:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d7332:	bf08      	it	eq
   d7334:	493c      	ldreq	r1, [pc, #240]	; (d7428 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d7336:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d7338:	4620      	mov	r0, r4
   d733a:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d733c:	792b      	ldrb	r3, [r5, #4]
   d733e:	075b      	lsls	r3, r3, #29
   d7340:	d518      	bpl.n	d7374 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7342:	6929      	ldr	r1, [r5, #16]
   d7344:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d7346:	4613      	mov	r3, r2
   d7348:	f813 0b01 	ldrb.w	r0, [r3], #1
   d734c:	b138      	cbz	r0, d735e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d734e:	2820      	cmp	r0, #32
   d7350:	d101      	bne.n	d7356 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d7352:	4619      	mov	r1, r3
   d7354:	e001      	b.n	d735a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d7356:	2828      	cmp	r0, #40	; 0x28
   d7358:	d001      	beq.n	d735e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d735a:	461a      	mov	r2, r3
   d735c:	e7f3      	b.n	d7346 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d735e:	6823      	ldr	r3, [r4, #0]
   d7360:	1a52      	subs	r2, r2, r1
   d7362:	68db      	ldr	r3, [r3, #12]
   d7364:	4620      	mov	r0, r4
   d7366:	4798      	blx	r3
        write("(): ", 4);
   d7368:	6823      	ldr	r3, [r4, #0]
   d736a:	4930      	ldr	r1, [pc, #192]	; (d742c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d736c:	68db      	ldr	r3, [r3, #12]
   d736e:	2204      	movs	r2, #4
   d7370:	4620      	mov	r0, r4
   d7372:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d7374:	2100      	movs	r1, #0
   d7376:	4638      	mov	r0, r7
   d7378:	f7fe f97e 	bl	d5678 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d737c:	4601      	mov	r1, r0
   d737e:	4620      	mov	r0, r4
   d7380:	f7ff f9cd 	bl	d671e <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d7384:	6823      	ldr	r3, [r4, #0]
   d7386:	4928      	ldr	r1, [pc, #160]	; (d7428 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d7388:	68db      	ldr	r3, [r3, #12]
   d738a:	2202      	movs	r2, #2
   d738c:	4620      	mov	r0, r4
   d738e:	4798      	blx	r3
    // Message
    if (msg) {
   d7390:	b11e      	cbz	r6, d739a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d7392:	4631      	mov	r1, r6
   d7394:	4620      	mov	r0, r4
   d7396:	f7ff f9c2 	bl	d671e <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d739a:	792b      	ldrb	r3, [r5, #4]
   d739c:	f013 0f30 	tst.w	r3, #48	; 0x30
   d73a0:	d02d      	beq.n	d73fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d73a2:	6823      	ldr	r3, [r4, #0]
   d73a4:	4922      	ldr	r1, [pc, #136]	; (d7430 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d73a6:	68db      	ldr	r3, [r3, #12]
   d73a8:	4620      	mov	r0, r4
   d73aa:	2202      	movs	r2, #2
   d73ac:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d73ae:	792b      	ldrb	r3, [r5, #4]
   d73b0:	06d8      	lsls	r0, r3, #27
   d73b2:	d50b      	bpl.n	d73cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d73b4:	6823      	ldr	r3, [r4, #0]
   d73b6:	491f      	ldr	r1, [pc, #124]	; (d7434 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d73b8:	68db      	ldr	r3, [r3, #12]
   d73ba:	2207      	movs	r2, #7
   d73bc:	4620      	mov	r0, r4
   d73be:	4798      	blx	r3
   d73c0:	69ab      	ldr	r3, [r5, #24]
   d73c2:	4a1d      	ldr	r2, [pc, #116]	; (d7438 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d73c4:	6a20      	ldr	r0, [r4, #32]
   d73c6:	2100      	movs	r1, #0
   d73c8:	f000 fab2 	bl	d7930 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d73cc:	792b      	ldrb	r3, [r5, #4]
   d73ce:	0699      	lsls	r1, r3, #26
   d73d0:	d511      	bpl.n	d73f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d73d2:	06da      	lsls	r2, r3, #27
   d73d4:	d505      	bpl.n	d73e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d73d6:	6823      	ldr	r3, [r4, #0]
   d73d8:	4912      	ldr	r1, [pc, #72]	; (d7424 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d73da:	68db      	ldr	r3, [r3, #12]
   d73dc:	2202      	movs	r2, #2
   d73de:	4620      	mov	r0, r4
   d73e0:	4798      	blx	r3
            }
            write("details = ", 10);
   d73e2:	6823      	ldr	r3, [r4, #0]
   d73e4:	4915      	ldr	r1, [pc, #84]	; (d743c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d73e6:	68db      	ldr	r3, [r3, #12]
   d73e8:	4620      	mov	r0, r4
   d73ea:	220a      	movs	r2, #10
   d73ec:	4798      	blx	r3
            write(attr.details);
   d73ee:	69e9      	ldr	r1, [r5, #28]
   d73f0:	4620      	mov	r0, r4
   d73f2:	f7ff f994 	bl	d671e <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d73f6:	215d      	movs	r1, #93	; 0x5d
   d73f8:	4620      	mov	r0, r4
   d73fa:	f7ff f99e 	bl	d673a <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d73fe:	6823      	ldr	r3, [r4, #0]
   d7400:	490f      	ldr	r1, [pc, #60]	; (d7440 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d7402:	68db      	ldr	r3, [r3, #12]
   d7404:	4620      	mov	r0, r4
   d7406:	2202      	movs	r2, #2
}
   d7408:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d740c:	4718      	bx	r3
   d740e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7412:	bf00      	nop
   d7414:	2003e43c 	.word	0x2003e43c
   d7418:	000dae50 	.word	0x000dae50
   d741c:	000dae57 	.word	0x000dae57
   d7420:	000db297 	.word	0x000db297
   d7424:	000dae5a 	.word	0x000dae5a
   d7428:	000dae5f 	.word	0x000dae5f
   d742c:	000dae5d 	.word	0x000dae5d
   d7430:	000dae62 	.word	0x000dae62
   d7434:	000dae65 	.word	0x000dae65
   d7438:	000dae6d 	.word	0x000dae6d
   d743c:	000dae70 	.word	0x000dae70
   d7440:	000dae7b 	.word	0x000dae7b

000d7444 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7448:	b085      	sub	sp, #20
   d744a:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d744e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d7450:	4606      	mov	r6, r0
   d7452:	460f      	mov	r7, r1
   d7454:	4691      	mov	r9, r2
   d7456:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d7458:	f000 fd92 	bl	d7f80 <_Z16_fetch_usbserialv>
   d745c:	4580      	cmp	r8, r0
   d745e:	d105      	bne.n	d746c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d7460:	484a      	ldr	r0, [pc, #296]	; (d758c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d7462:	f000 f98c 	bl	d777e <_ZN5spark12NetworkClass9listeningEv>
   d7466:	2800      	cmp	r0, #0
   d7468:	f040 808c 	bne.w	d7584 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d746c:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d746e:	4a48      	ldr	r2, [pc, #288]	; (d7590 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d7470:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d7472:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d7476:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7478:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d747a:	f88d 8008 	strb.w	r8, [sp, #8]
   d747e:	f7fe fff0 	bl	d6462 <_ZN5spark10JSONWriter11beginObjectEv>
   d7482:	4641      	mov	r1, r8
   d7484:	4648      	mov	r0, r9
   d7486:	f7fe f8f7 	bl	d5678 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d748a:	4942      	ldr	r1, [pc, #264]	; (d7594 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d748c:	4680      	mov	r8, r0
   d748e:	2201      	movs	r2, #1
   d7490:	a801      	add	r0, sp, #4
   d7492:	f7ff f86b 	bl	d656c <_ZN5spark10JSONWriter4nameEPKcj>
   d7496:	4641      	mov	r1, r8
   d7498:	f7ff f931 	bl	d66fe <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d749c:	b13f      	cbz	r7, d74ae <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d749e:	493e      	ldr	r1, [pc, #248]	; (d7598 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d74a0:	2201      	movs	r2, #1
   d74a2:	a801      	add	r0, sp, #4
   d74a4:	f7ff f862 	bl	d656c <_ZN5spark10JSONWriter4nameEPKcj>
   d74a8:	4639      	mov	r1, r7
   d74aa:	f7ff f928 	bl	d66fe <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d74ae:	b13d      	cbz	r5, d74c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d74b0:	493a      	ldr	r1, [pc, #232]	; (d759c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d74b2:	2201      	movs	r2, #1
   d74b4:	a801      	add	r0, sp, #4
   d74b6:	f7ff f859 	bl	d656c <_ZN5spark10JSONWriter4nameEPKcj>
   d74ba:	4629      	mov	r1, r5
   d74bc:	f7ff f91f 	bl	d66fe <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d74c0:	7923      	ldrb	r3, [r4, #4]
   d74c2:	07df      	lsls	r7, r3, #31
   d74c4:	d50e      	bpl.n	d74e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d74c6:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d74c8:	212f      	movs	r1, #47	; 0x2f
   d74ca:	4628      	mov	r0, r5
   d74cc:	f002 fe3b 	bl	da146 <strrchr>
    if (s1) {
   d74d0:	b100      	cbz	r0, d74d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d74d2:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d74d4:	4932      	ldr	r1, [pc, #200]	; (d75a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d74d6:	2201      	movs	r2, #1
   d74d8:	a801      	add	r0, sp, #4
   d74da:	f7ff f847 	bl	d656c <_ZN5spark10JSONWriter4nameEPKcj>
   d74de:	4629      	mov	r1, r5
   d74e0:	f7ff f90d 	bl	d66fe <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d74e4:	7923      	ldrb	r3, [r4, #4]
   d74e6:	079d      	lsls	r5, r3, #30
   d74e8:	d507      	bpl.n	d74fa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d74ea:	492e      	ldr	r1, [pc, #184]	; (d75a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d74ec:	2202      	movs	r2, #2
   d74ee:	a801      	add	r0, sp, #4
   d74f0:	f7ff f83c 	bl	d656c <_ZN5spark10JSONWriter4nameEPKcj>
   d74f4:	68e1      	ldr	r1, [r4, #12]
   d74f6:	f7fe ffc1 	bl	d647c <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d74fa:	7923      	ldrb	r3, [r4, #4]
   d74fc:	0758      	lsls	r0, r3, #29
   d74fe:	d516      	bpl.n	d752e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7500:	6925      	ldr	r5, [r4, #16]
   d7502:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d7504:	463b      	mov	r3, r7
   d7506:	f813 2b01 	ldrb.w	r2, [r3], #1
   d750a:	b13a      	cbz	r2, d751c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d750c:	2a20      	cmp	r2, #32
   d750e:	d101      	bne.n	d7514 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d7510:	461d      	mov	r5, r3
   d7512:	e001      	b.n	d7518 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d7514:	2a28      	cmp	r2, #40	; 0x28
   d7516:	d001      	beq.n	d751c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7518:	461f      	mov	r7, r3
   d751a:	e7f3      	b.n	d7504 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d751c:	2202      	movs	r2, #2
   d751e:	4922      	ldr	r1, [pc, #136]	; (d75a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d7520:	a801      	add	r0, sp, #4
   d7522:	f7ff f823 	bl	d656c <_ZN5spark10JSONWriter4nameEPKcj>
   d7526:	1b7a      	subs	r2, r7, r5
   d7528:	4629      	mov	r1, r5
   d752a:	f7ff f82e 	bl	d658a <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d752e:	7923      	ldrb	r3, [r4, #4]
   d7530:	0719      	lsls	r1, r3, #28
   d7532:	d507      	bpl.n	d7544 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d7534:	491d      	ldr	r1, [pc, #116]	; (d75ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d7536:	2201      	movs	r2, #1
   d7538:	a801      	add	r0, sp, #4
   d753a:	f7ff f817 	bl	d656c <_ZN5spark10JSONWriter4nameEPKcj>
   d753e:	6961      	ldr	r1, [r4, #20]
   d7540:	f7fe ffae 	bl	d64a0 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d7544:	7923      	ldrb	r3, [r4, #4]
   d7546:	06da      	lsls	r2, r3, #27
   d7548:	d508      	bpl.n	d755c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d754a:	2204      	movs	r2, #4
   d754c:	4918      	ldr	r1, [pc, #96]	; (d75b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d754e:	eb0d 0002 	add.w	r0, sp, r2
   d7552:	f7ff f80b 	bl	d656c <_ZN5spark10JSONWriter4nameEPKcj>
   d7556:	69a1      	ldr	r1, [r4, #24]
   d7558:	f7fe ff90 	bl	d647c <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d755c:	7923      	ldrb	r3, [r4, #4]
   d755e:	069b      	lsls	r3, r3, #26
   d7560:	d507      	bpl.n	d7572 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d7562:	4914      	ldr	r1, [pc, #80]	; (d75b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d7564:	2206      	movs	r2, #6
   d7566:	a801      	add	r0, sp, #4
   d7568:	f7ff f800 	bl	d656c <_ZN5spark10JSONWriter4nameEPKcj>
   d756c:	69e1      	ldr	r1, [r4, #28]
   d756e:	f7ff f8c6 	bl	d66fe <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d7572:	a801      	add	r0, sp, #4
   d7574:	f7fe ff5f 	bl	d6436 <_ZN5spark10JSONWriter9endObjectEv>
   d7578:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d757a:	490f      	ldr	r1, [pc, #60]	; (d75b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d757c:	6803      	ldr	r3, [r0, #0]
   d757e:	2202      	movs	r2, #2
   d7580:	68db      	ldr	r3, [r3, #12]
   d7582:	4798      	blx	r3
}
   d7584:	b005      	add	sp, #20
   d7586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d758a:	bf00      	nop
   d758c:	2003e43c 	.word	0x2003e43c
   d7590:	000dad9c 	.word	0x000dad9c
   d7594:	000dade6 	.word	0x000dade6
   d7598:	000dadf9 	.word	0x000dadf9
   d759c:	000db2f9 	.word	0x000db2f9
   d75a0:	000da948 	.word	0x000da948
   d75a4:	000dae7e 	.word	0x000dae7e
   d75a8:	000dae81 	.word	0x000dae81
   d75ac:	000db367 	.word	0x000db367
   d75b0:	000dae84 	.word	0x000dae84
   d75b4:	000dae89 	.word	0x000dae89
   d75b8:	000dae7b 	.word	0x000dae7b

000d75bc <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d75bc:	2200      	movs	r2, #0
   d75be:	4611      	mov	r1, r2
   d75c0:	6840      	ldr	r0, [r0, #4]
   d75c2:	f7fe b935 	b.w	d5830 <network_listening>

000d75c6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d75c6:	2200      	movs	r2, #0
   d75c8:	4611      	mov	r1, r2
   d75ca:	6840      	ldr	r0, [r0, #4]
   d75cc:	f7fe b940 	b.w	d5850 <network_get_listen_timeout>

000d75d0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d75d0:	2200      	movs	r2, #0
   d75d2:	6840      	ldr	r0, [r0, #4]
   d75d4:	f7fe b934 	b.w	d5840 <network_set_listen_timeout>

000d75d8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d75d8:	2200      	movs	r2, #0
   d75da:	f081 0101 	eor.w	r1, r1, #1
   d75de:	6840      	ldr	r0, [r0, #4]
   d75e0:	f7fe b91e 	b.w	d5820 <network_listen>

000d75e4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d75e4:	2300      	movs	r3, #0
   d75e6:	461a      	mov	r2, r3
   d75e8:	2101      	movs	r1, #1
   d75ea:	6840      	ldr	r0, [r0, #4]
   d75ec:	f7fe b910 	b.w	d5810 <network_off>

000d75f0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d75f0:	2300      	movs	r3, #0
   d75f2:	461a      	mov	r2, r3
   d75f4:	4619      	mov	r1, r3
   d75f6:	6840      	ldr	r0, [r0, #4]
   d75f8:	f7fe b902 	b.w	d5800 <network_on>

000d75fc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d75fc:	2200      	movs	r2, #0
   d75fe:	4611      	mov	r1, r2
   d7600:	6840      	ldr	r0, [r0, #4]
   d7602:	f7fe b8f5 	b.w	d57f0 <network_ready>

000d7606 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7606:	2200      	movs	r2, #0
   d7608:	4611      	mov	r1, r2
   d760a:	6840      	ldr	r0, [r0, #4]
   d760c:	f7fe b8e0 	b.w	d57d0 <network_connecting>

000d7610 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7610:	2200      	movs	r2, #0
   d7612:	2102      	movs	r1, #2
   d7614:	6840      	ldr	r0, [r0, #4]
   d7616:	f7fe b8e3 	b.w	d57e0 <network_disconnect>

000d761a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d761a:	2300      	movs	r3, #0
   d761c:	461a      	mov	r2, r3
   d761e:	6840      	ldr	r0, [r0, #4]
   d7620:	f7fe b8ce 	b.w	d57c0 <network_connect>

000d7624 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7624:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7626:	4605      	mov	r5, r0
   d7628:	b188      	cbz	r0, d764e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d762a:	6804      	ldr	r4, [r0, #0]
   d762c:	b14c      	cbz	r4, d7642 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d762e:	68a3      	ldr	r3, [r4, #8]
   d7630:	b11b      	cbz	r3, d763a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7632:	2203      	movs	r2, #3
   d7634:	4621      	mov	r1, r4
   d7636:	4620      	mov	r0, r4
   d7638:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d763a:	2110      	movs	r1, #16
   d763c:	4620      	mov	r0, r4
   d763e:	f000 fdfc 	bl	d823a <_ZdlPvj>
   d7642:	4628      	mov	r0, r5
   d7644:	2114      	movs	r1, #20
      }
   d7646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d764a:	f000 bdf6 	b.w	d823a <_ZdlPvj>
   d764e:	bd38      	pop	{r3, r4, r5, pc}

000d7650 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7650:	b110      	cbz	r0, d7658 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7652:	6803      	ldr	r3, [r0, #0]
   d7654:	685b      	ldr	r3, [r3, #4]
   d7656:	4718      	bx	r3
   d7658:	4770      	bx	lr

000d765a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d765a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d765c:	6803      	ldr	r3, [r0, #0]
   d765e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7660:	b1bb      	cbz	r3, d7692 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7662:	6858      	ldr	r0, [r3, #4]
   d7664:	f7fd fe28 	bl	d52b8 <os_thread_is_current>
   d7668:	b978      	cbnz	r0, d768a <_ZN6ThreadD1Ev+0x30>
   d766a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d766c:	7c5a      	ldrb	r2, [r3, #17]
   d766e:	b912      	cbnz	r2, d7676 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7670:	6858      	ldr	r0, [r3, #4]
   d7672:	f7fd fe29 	bl	d52c8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7676:	6823      	ldr	r3, [r4, #0]
   d7678:	6858      	ldr	r0, [r3, #4]
   d767a:	f7fd fe2d 	bl	d52d8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d767e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7680:	2300      	movs	r3, #0
   d7682:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7684:	b128      	cbz	r0, d7692 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7686:	f7ff ffcd 	bl	d7624 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d768a:	6820      	ldr	r0, [r4, #0]
   d768c:	b108      	cbz	r0, d7692 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d768e:	f7ff ffc9 	bl	d7624 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7692:	4620      	mov	r0, r4
   d7694:	bd10      	pop	{r4, pc}
	...

000d7698 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7698:	b538      	push	{r3, r4, r5, lr}
   d769a:	4b0c      	ldr	r3, [pc, #48]	; (d76cc <_ZN5spark9MeshClassD1Ev+0x34>)
   d769c:	6003      	str	r3, [r0, #0]
   d769e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d76a0:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d76a4:	b108      	cbz	r0, d76aa <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d76a6:	f7fc fcfc 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d76aa:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d76ae:	b135      	cbz	r5, d76be <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d76b0:	4628      	mov	r0, r5
   d76b2:	f7ff ffd2 	bl	d765a <_ZN6ThreadD1Ev>
   d76b6:	2104      	movs	r1, #4
   d76b8:	4628      	mov	r0, r5
   d76ba:	f000 fdbe 	bl	d823a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d76be:	68a0      	ldr	r0, [r4, #8]
   d76c0:	b108      	cbz	r0, d76c6 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d76c2:	f7ff ffc5 	bl	d7650 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d76c6:	4620      	mov	r0, r4
   d76c8:	bd38      	pop	{r3, r4, r5, pc}
   d76ca:	bf00      	nop
   d76cc:	000daef0 	.word	0x000daef0

000d76d0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d76d0:	b538      	push	{r3, r4, r5, lr}
   d76d2:	4c0e      	ldr	r4, [pc, #56]	; (d770c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d76d4:	4b0e      	ldr	r3, [pc, #56]	; (d7710 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d76d6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d76d8:	2500      	movs	r5, #0
   d76da:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d76dc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d76e0:	6063      	str	r3, [r4, #4]
   d76e2:	60a5      	str	r5, [r4, #8]
   d76e4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d76e8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d76ec:	f7fd fe04 	bl	d52f8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d76f0:	4b08      	ldr	r3, [pc, #32]	; (d7714 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d76f2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d76f6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d76fa:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d76fc:	4620      	mov	r0, r4
   d76fe:	4a06      	ldr	r2, [pc, #24]	; (d7718 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7700:	4906      	ldr	r1, [pc, #24]	; (d771c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7706:	f000 bd93 	b.w	d8230 <__aeabi_atexit>
   d770a:	bf00      	nop
   d770c:	2003e268 	.word	0x2003e268
   d7710:	000daf24 	.word	0x000daf24
   d7714:	000daef0 	.word	0x000daef0
   d7718:	2003e158 	.word	0x2003e158
   d771c:	000d7699 	.word	0x000d7699

000d7720 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7720:	2300      	movs	r3, #0
   d7722:	461a      	mov	r2, r3
   d7724:	6840      	ldr	r0, [r0, #4]
   d7726:	f7fe b84b 	b.w	d57c0 <network_connect>

000d772a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d772a:	2200      	movs	r2, #0
   d772c:	2102      	movs	r1, #2
   d772e:	6840      	ldr	r0, [r0, #4]
   d7730:	f7fe b856 	b.w	d57e0 <network_disconnect>

000d7734 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7734:	2200      	movs	r2, #0
   d7736:	4611      	mov	r1, r2
   d7738:	6840      	ldr	r0, [r0, #4]
   d773a:	f7fe b849 	b.w	d57d0 <network_connecting>

000d773e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d773e:	2200      	movs	r2, #0
   d7740:	4611      	mov	r1, r2
   d7742:	6840      	ldr	r0, [r0, #4]
   d7744:	f7fe b854 	b.w	d57f0 <network_ready>

000d7748 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7748:	2300      	movs	r3, #0
   d774a:	461a      	mov	r2, r3
   d774c:	4619      	mov	r1, r3
   d774e:	6840      	ldr	r0, [r0, #4]
   d7750:	f7fe b856 	b.w	d5800 <network_on>

000d7754 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7754:	2300      	movs	r3, #0
   d7756:	461a      	mov	r2, r3
   d7758:	4619      	mov	r1, r3
   d775a:	6840      	ldr	r0, [r0, #4]
   d775c:	f7fe b858 	b.w	d5810 <network_off>

000d7760 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7760:	2200      	movs	r2, #0
   d7762:	f081 0101 	eor.w	r1, r1, #1
   d7766:	6840      	ldr	r0, [r0, #4]
   d7768:	f7fe b85a 	b.w	d5820 <network_listen>

000d776c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d776c:	2200      	movs	r2, #0
   d776e:	6840      	ldr	r0, [r0, #4]
   d7770:	f7fe b866 	b.w	d5840 <network_set_listen_timeout>

000d7774 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7774:	2200      	movs	r2, #0
   d7776:	4611      	mov	r1, r2
   d7778:	6840      	ldr	r0, [r0, #4]
   d777a:	f7fe b869 	b.w	d5850 <network_get_listen_timeout>

000d777e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d777e:	2200      	movs	r2, #0
   d7780:	4611      	mov	r1, r2
   d7782:	6840      	ldr	r0, [r0, #4]
   d7784:	f7fe b854 	b.w	d5830 <network_listening>

000d7788 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d778c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d778e:	b095      	sub	sp, #84	; 0x54
   d7790:	4616      	mov	r6, r2
   d7792:	460d      	mov	r5, r1
   d7794:	4607      	mov	r7, r0
    IPAddress addr;
   d7796:	f7fe fd5d 	bl	d6254 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d779a:	4621      	mov	r1, r4
   d779c:	2220      	movs	r2, #32
   d779e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d77a0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d77a2:	f001 fcdb 	bl	d915c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d77a6:	2340      	movs	r3, #64	; 0x40
   d77a8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d77aa:	4621      	mov	r1, r4
   d77ac:	466b      	mov	r3, sp
   d77ae:	aa0c      	add	r2, sp, #48	; 0x30
   d77b0:	4630      	mov	r0, r6
   d77b2:	f7fd fea9 	bl	d5508 <netdb_getaddrinfo>
    if (!r) {
   d77b6:	4604      	mov	r4, r0
   d77b8:	2800      	cmp	r0, #0
   d77ba:	d144      	bne.n	d7846 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d77bc:	4602      	mov	r2, r0
   d77be:	2101      	movs	r1, #1
   d77c0:	6868      	ldr	r0, [r5, #4]
   d77c2:	f7fe f815 	bl	d57f0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d77c6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d77c8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d77ca:	4622      	mov	r2, r4
   d77cc:	6868      	ldr	r0, [r5, #4]
   d77ce:	f7fe f80f 	bl	d57f0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d77d2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d77d4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d77d6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d77d8:	2e00      	cmp	r6, #0
   d77da:	d034      	beq.n	d7846 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d77dc:	2900      	cmp	r1, #0
   d77de:	d132      	bne.n	d7846 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d77e0:	6873      	ldr	r3, [r6, #4]
   d77e2:	2b02      	cmp	r3, #2
   d77e4:	d002      	beq.n	d77ec <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d77e6:	2b0a      	cmp	r3, #10
   d77e8:	d009      	beq.n	d77fe <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d77ea:	e02a      	b.n	d7842 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d77ec:	f1b8 0f00 	cmp.w	r8, #0
   d77f0:	d027      	beq.n	d7842 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d77f2:	6971      	ldr	r1, [r6, #20]
   d77f4:	4638      	mov	r0, r7
   d77f6:	3104      	adds	r1, #4
   d77f8:	f7fe fd59 	bl	d62ae <_ZN9IPAddressaSEPKh>
   d77fc:	e020      	b.n	d7840 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d77fe:	f1b9 0f00 	cmp.w	r9, #0
   d7802:	d01e      	beq.n	d7842 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7804:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7806:	2211      	movs	r2, #17
   d7808:	a801      	add	r0, sp, #4
   d780a:	f001 fca7 	bl	d915c <memset>
                    a.v = 6;
   d780e:	2306      	movs	r3, #6
   d7810:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7814:	ad01      	add	r5, sp, #4
   d7816:	f104 0308 	add.w	r3, r4, #8
   d781a:	3418      	adds	r4, #24
   d781c:	6818      	ldr	r0, [r3, #0]
   d781e:	6859      	ldr	r1, [r3, #4]
   d7820:	462a      	mov	r2, r5
   d7822:	c203      	stmia	r2!, {r0, r1}
   d7824:	3308      	adds	r3, #8
   d7826:	42a3      	cmp	r3, r4
   d7828:	4615      	mov	r5, r2
   d782a:	d1f7      	bne.n	d781c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d782c:	a901      	add	r1, sp, #4
   d782e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7830:	ad07      	add	r5, sp, #28
   d7832:	f7fe fd1d 	bl	d6270 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7838:	1d3c      	adds	r4, r7, #4
   d783a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d783c:	682b      	ldr	r3, [r5, #0]
   d783e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7840:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7842:	69f6      	ldr	r6, [r6, #28]
   d7844:	e7c8      	b.n	d77d8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7846:	9800      	ldr	r0, [sp, #0]
   d7848:	f7fd fe56 	bl	d54f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d784c:	4638      	mov	r0, r7
   d784e:	b015      	add	sp, #84	; 0x54
   d7850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7854 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7854:	4b02      	ldr	r3, [pc, #8]	; (d7860 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7856:	4a03      	ldr	r2, [pc, #12]	; (d7864 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7858:	601a      	str	r2, [r3, #0]
   d785a:	2200      	movs	r2, #0
   d785c:	605a      	str	r2, [r3, #4]
   d785e:	4770      	bx	lr
   d7860:	2003e43c 	.word	0x2003e43c
   d7864:	000daf24 	.word	0x000daf24

000d7868 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d786a:	4606      	mov	r6, r0
   d786c:	460d      	mov	r5, r1
   d786e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7870:	2400      	movs	r4, #0
  while (size--) {
   d7872:	42bd      	cmp	r5, r7
   d7874:	d00c      	beq.n	d7890 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7876:	6833      	ldr	r3, [r6, #0]
   d7878:	f815 1b01 	ldrb.w	r1, [r5], #1
   d787c:	689b      	ldr	r3, [r3, #8]
   d787e:	4630      	mov	r0, r6
   d7880:	4798      	blx	r3
     if (chunk>=0)
   d7882:	2800      	cmp	r0, #0
   d7884:	db01      	blt.n	d788a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7886:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7888:	e7f3      	b.n	d7872 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d788a:	2c00      	cmp	r4, #0
   d788c:	bf08      	it	eq
   d788e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7890:	4620      	mov	r0, r4
   d7892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7894 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7894:	b570      	push	{r4, r5, r6, lr}
   d7896:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7898:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d789a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d789c:	b149      	cbz	r1, d78b2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d789e:	f002 fc35 	bl	da10c <strlen>
   d78a2:	682b      	ldr	r3, [r5, #0]
   d78a4:	4602      	mov	r2, r0
   d78a6:	4621      	mov	r1, r4
   d78a8:	4628      	mov	r0, r5
   d78aa:	68db      	ldr	r3, [r3, #12]
    }
   d78ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d78b0:	4718      	bx	r3
    }
   d78b2:	bd70      	pop	{r4, r5, r6, pc}

000d78b4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d78b4:	6803      	ldr	r3, [r0, #0]
   d78b6:	689b      	ldr	r3, [r3, #8]
   d78b8:	4718      	bx	r3

000d78ba <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d78ba:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d78bc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d78be:	4605      	mov	r5, r0
  size_t n = print('\r');
   d78c0:	f7ff fff8 	bl	d78b4 <_ZN5Print5printEc>
  n += print('\n');
   d78c4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d78c6:	4604      	mov	r4, r0
  n += print('\n');
   d78c8:	4628      	mov	r0, r5
   d78ca:	f7ff fff3 	bl	d78b4 <_ZN5Print5printEc>
  return n;
}
   d78ce:	4420      	add	r0, r4
   d78d0:	bd38      	pop	{r3, r4, r5, pc}

000d78d2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d78d2:	b530      	push	{r4, r5, lr}
   d78d4:	b08b      	sub	sp, #44	; 0x2c
   d78d6:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d78d8:	2100      	movs	r1, #0
   d78da:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d78de:	2a01      	cmp	r2, #1
   d78e0:	bf98      	it	ls
   d78e2:	220a      	movls	r2, #10
   d78e4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d78e8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d78ec:	fb05 3312 	mls	r3, r5, r2, r3
   d78f0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d78f4:	2b09      	cmp	r3, #9
   d78f6:	bf94      	ite	ls
   d78f8:	3330      	addls	r3, #48	; 0x30
   d78fa:	3337      	addhi	r3, #55	; 0x37
   d78fc:	b2db      	uxtb	r3, r3
   d78fe:	4621      	mov	r1, r4
   d7900:	f804 3901 	strb.w	r3, [r4], #-1
   d7904:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d7906:	2d00      	cmp	r5, #0
   d7908:	d1ee      	bne.n	d78e8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d790a:	f7ff ffc3 	bl	d7894 <_ZN5Print5writeEPKc>
}
   d790e:	b00b      	add	sp, #44	; 0x2c
   d7910:	bd30      	pop	{r4, r5, pc}

000d7912 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d7912:	b410      	push	{r4}
  if (base == 0) return write(n);
   d7914:	b92a      	cbnz	r2, d7922 <_ZN5Print5printEmi+0x10>
   d7916:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d7918:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d791c:	689b      	ldr	r3, [r3, #8]
   d791e:	b2c9      	uxtb	r1, r1
   d7920:	4718      	bx	r3
  else return printNumber(n, base);
   d7922:	b2d2      	uxtb	r2, r2
}
   d7924:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d7928:	f7ff bfd3 	b.w	d78d2 <_ZN5Print11printNumberEmh>

000d792c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d792c:	f7ff bff1 	b.w	d7912 <_ZN5Print5printEmi>

000d7930 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7930:	b40c      	push	{r2, r3}
   d7932:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7936:	b087      	sub	sp, #28
   d7938:	af00      	add	r7, sp, #0
   d793a:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d793e:	4605      	mov	r5, r0
   d7940:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7944:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7946:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d7948:	4623      	mov	r3, r4
   d794a:	464a      	mov	r2, r9
   d794c:	2114      	movs	r1, #20
   d794e:	1d38      	adds	r0, r7, #4
   d7950:	f7fd ffbe 	bl	d58d0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7954:	2813      	cmp	r0, #19
   d7956:	d805      	bhi.n	d7964 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7958:	1d39      	adds	r1, r7, #4
   d795a:	4628      	mov	r0, r5
   d795c:	f7ff ff9a 	bl	d7894 <_ZN5Print5writeEPKc>
   d7960:	4604      	mov	r4, r0
   d7962:	e013      	b.n	d798c <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7964:	f100 0308 	add.w	r3, r0, #8
   d7968:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d796c:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d796e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7972:	1c41      	adds	r1, r0, #1
   d7974:	4623      	mov	r3, r4
   d7976:	464a      	mov	r2, r9
   d7978:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d797a:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d797c:	f7fd ffa8 	bl	d58d0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7980:	4669      	mov	r1, sp
   d7982:	4628      	mov	r0, r5
   d7984:	f7ff ff86 	bl	d7894 <_ZN5Print5writeEPKc>
   d7988:	4604      	mov	r4, r0
   d798a:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d798c:	b11e      	cbz	r6, d7996 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d798e:	4628      	mov	r0, r5
   d7990:	f7ff ff93 	bl	d78ba <_ZN5Print7printlnEv>
   d7994:	4404      	add	r4, r0
    return n;
}
   d7996:	4620      	mov	r0, r4
   d7998:	371c      	adds	r7, #28
   d799a:	46bd      	mov	sp, r7
   d799c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d79a0:	b002      	add	sp, #8
   d79a2:	4770      	bx	lr

000d79a4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d79a4:	b510      	push	{r4, lr}
   d79a6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d79a8:	f7fe f851 	bl	d5a4e <_ZNSt14_Function_baseD1Ev>
   d79ac:	4620      	mov	r0, r4
   d79ae:	bd10      	pop	{r4, pc}

000d79b0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d79b0:	4803      	ldr	r0, [pc, #12]	; (d79c0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d79b2:	4a04      	ldr	r2, [pc, #16]	; (d79c4 <_GLOBAL__sub_I_RGB+0x14>)
   d79b4:	4904      	ldr	r1, [pc, #16]	; (d79c8 <_GLOBAL__sub_I_RGB+0x18>)
   d79b6:	2300      	movs	r3, #0
   d79b8:	6083      	str	r3, [r0, #8]
   d79ba:	f000 bc39 	b.w	d8230 <__aeabi_atexit>
   d79be:	bf00      	nop
   d79c0:	2003e444 	.word	0x2003e444
   d79c4:	2003e158 	.word	0x2003e158
   d79c8:	000d79a5 	.word	0x000d79a5

000d79cc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d79cc:	4770      	bx	lr

000d79ce <_ZN8SPIClassD0Ev>:
   d79ce:	b510      	push	{r4, lr}
   d79d0:	2110      	movs	r1, #16
   d79d2:	4604      	mov	r4, r0
   d79d4:	f000 fc31 	bl	d823a <_ZdlPvj>
   d79d8:	4620      	mov	r0, r4
   d79da:	bd10      	pop	{r4, pc}

000d79dc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d79dc:	b570      	push	{r4, r5, r6, lr}
   d79de:	4b08      	ldr	r3, [pc, #32]	; (d7a00 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d79e0:	6003      	str	r3, [r0, #0]
   d79e2:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d79e4:	2500      	movs	r5, #0
   d79e6:	460e      	mov	r6, r1
   d79e8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d79ec:	f7fd fc7c 	bl	d52e8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d79f0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d79f2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d79f4:	f7fd fd90 	bl	d5518 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d79f8:	60a5      	str	r5, [r4, #8]
}
   d79fa:	4620      	mov	r0, r4
   d79fc:	bd70      	pop	{r4, r5, r6, pc}
   d79fe:	bf00      	nop
   d7a00:	000daf58 	.word	0x000daf58

000d7a04 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d7a04:	7900      	ldrb	r0, [r0, #4]
   d7a06:	f7fd bd8f 	b.w	d5528 <HAL_SPI_Is_Enabled>

000d7a0a <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7a0a:	2300      	movs	r3, #0
   d7a0c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7a0e:	6043      	str	r3, [r0, #4]
	len = 0;
   d7a10:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7a12:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d7a14:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d7a16:	680c      	ldr	r4, [r1, #0]
   d7a18:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d7a1a:	684c      	ldr	r4, [r1, #4]
   d7a1c:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d7a1e:	688c      	ldr	r4, [r1, #8]
   d7a20:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d7a22:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d7a24:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d7a26:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d7a28:	bd10      	pop	{r4, pc}

000d7a2a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7a2a:	b510      	push	{r4, lr}
   d7a2c:	4604      	mov	r4, r0
{
	free(buffer);
   d7a2e:	6800      	ldr	r0, [r0, #0]
   d7a30:	f7fd ff1e 	bl	d5870 <free>
}
   d7a34:	4620      	mov	r0, r4
   d7a36:	bd10      	pop	{r4, pc}

000d7a38 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7a38:	b510      	push	{r4, lr}
   d7a3a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7a3c:	6800      	ldr	r0, [r0, #0]
   d7a3e:	b108      	cbz	r0, d7a44 <_ZN6String10invalidateEv+0xc>
   d7a40:	f7fd ff16 	bl	d5870 <free>
	buffer = NULL;
   d7a44:	2300      	movs	r3, #0
   d7a46:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7a48:	60a3      	str	r3, [r4, #8]
   d7a4a:	6063      	str	r3, [r4, #4]
   d7a4c:	bd10      	pop	{r4, pc}

000d7a4e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7a4e:	b538      	push	{r3, r4, r5, lr}
   d7a50:	4604      	mov	r4, r0
   d7a52:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7a54:	6800      	ldr	r0, [r0, #0]
   d7a56:	3101      	adds	r1, #1
   d7a58:	f7fd ff12 	bl	d5880 <realloc>
	if (newbuffer) {
   d7a5c:	b110      	cbz	r0, d7a64 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7a5e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7a62:	2001      	movs	r0, #1
	}
	return 0;
}
   d7a64:	bd38      	pop	{r3, r4, r5, pc}

000d7a66 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7a66:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7a68:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7a6a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7a6c:	b113      	cbz	r3, d7a74 <_ZN6String7reserveEj+0xe>
   d7a6e:	6843      	ldr	r3, [r0, #4]
   d7a70:	428b      	cmp	r3, r1
   d7a72:	d207      	bcs.n	d7a84 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7a74:	4620      	mov	r0, r4
   d7a76:	f7ff ffea 	bl	d7a4e <_ZN6String12changeBufferEj>
   d7a7a:	b120      	cbz	r0, d7a86 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7a7c:	68a3      	ldr	r3, [r4, #8]
   d7a7e:	b90b      	cbnz	r3, d7a84 <_ZN6String7reserveEj+0x1e>
   d7a80:	6822      	ldr	r2, [r4, #0]
   d7a82:	7013      	strb	r3, [r2, #0]
   d7a84:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7a86:	bd10      	pop	{r4, pc}

000d7a88 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7a88:	b570      	push	{r4, r5, r6, lr}
   d7a8a:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7a8c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7a8e:	4604      	mov	r4, r0
   d7a90:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d7a92:	f7ff ffe8 	bl	d7a66 <_ZN6String7reserveEj>
   d7a96:	b918      	cbnz	r0, d7aa0 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7a98:	4620      	mov	r0, r4
   d7a9a:	f7ff ffcd 	bl	d7a38 <_ZN6String10invalidateEv>
		return *this;
   d7a9e:	e009      	b.n	d7ab4 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d7aa0:	462a      	mov	r2, r5
   d7aa2:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7aa4:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7aa6:	6820      	ldr	r0, [r4, #0]
   d7aa8:	f001 fb32 	bl	d9110 <memcpy>
	buffer[len] = 0;
   d7aac:	6822      	ldr	r2, [r4, #0]
   d7aae:	68a3      	ldr	r3, [r4, #8]
   d7ab0:	2100      	movs	r1, #0
   d7ab2:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7ab4:	4620      	mov	r0, r4
   d7ab6:	bd70      	pop	{r4, r5, r6, pc}

000d7ab8 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7ab8:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7aba:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7abc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7abe:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7ac0:	6043      	str	r3, [r0, #4]
	len = 0;
   d7ac2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7ac4:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7ac6:	460d      	mov	r5, r1
   d7ac8:	b139      	cbz	r1, d7ada <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7aca:	4608      	mov	r0, r1
   d7acc:	f002 fb1e 	bl	da10c <strlen>
   d7ad0:	4629      	mov	r1, r5
   d7ad2:	4602      	mov	r2, r0
   d7ad4:	4620      	mov	r0, r4
   d7ad6:	f7ff ffd7 	bl	d7a88 <_ZN6String4copyEPKcj>
}
   d7ada:	4620      	mov	r0, r4
   d7adc:	bd38      	pop	{r3, r4, r5, pc}

000d7ade <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7ade:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d7ae0:	b510      	push	{r4, lr}
   d7ae2:	460b      	mov	r3, r1
   d7ae4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7ae6:	d007      	beq.n	d7af8 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7ae8:	6809      	ldr	r1, [r1, #0]
   d7aea:	b119      	cbz	r1, d7af4 <_ZN6StringaSERKS_+0x16>
   d7aec:	689a      	ldr	r2, [r3, #8]
   d7aee:	f7ff ffcb 	bl	d7a88 <_ZN6String4copyEPKcj>
   d7af2:	e001      	b.n	d7af8 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d7af4:	f7ff ffa0 	bl	d7a38 <_ZN6String10invalidateEv>

	return *this;
}
   d7af8:	4620      	mov	r0, r4
   d7afa:	bd10      	pop	{r4, pc}

000d7afc <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7afc:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7afe:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7b00:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7b02:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7b04:	6043      	str	r3, [r0, #4]
	len = 0;
   d7b06:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7b08:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d7b0a:	f7ff ffe8 	bl	d7ade <_ZN6StringaSERKS_>
}
   d7b0e:	4620      	mov	r0, r4
   d7b10:	bd10      	pop	{r4, pc}
	...

000d7b14 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d7b14:	4b04      	ldr	r3, [pc, #16]	; (d7b28 <_GLOBAL__sub_I_System+0x14>)
   d7b16:	2000      	movs	r0, #0
   d7b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7b1c:	7018      	strb	r0, [r3, #0]
   d7b1e:	8058      	strh	r0, [r3, #2]
   d7b20:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7b22:	f7fd bdc1 	b.w	d56a8 <set_system_mode>
   d7b26:	bf00      	nop
   d7b28:	2003e454 	.word	0x2003e454

000d7b2c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d7b2e:	4b14      	ldr	r3, [pc, #80]	; (d7b80 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7b30:	4f14      	ldr	r7, [pc, #80]	; (d7b84 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d7b32:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d7b34:	4b14      	ldr	r3, [pc, #80]	; (d7b88 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d7b36:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d7b38:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d7b3a:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d7b3c:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d7b3e:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7b40:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7b42:	d01b      	beq.n	d7b7c <_ZL22Refresh_UnixTime_Cachel+0x50>
   d7b44:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d7b46:	ad01      	add	r5, sp, #4
   d7b48:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d7b4c:	f001 f9e8 	bl	d8f20 <localtime>
	calendar_time->tm_year += 1900;
   d7b50:	6943      	ldr	r3, [r0, #20]
   d7b52:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d7b56:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d7b58:	4604      	mov	r4, r0
   d7b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7b60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7b62:	f8d4 e000 	ldr.w	lr, [r4]
   d7b66:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7b6a:	ad01      	add	r5, sp, #4
   d7b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7b6e:	4c07      	ldr	r4, [pc, #28]	; (d7b8c <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d7b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d7b76:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7b78:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d7b7c:	b00b      	add	sp, #44	; 0x2c
   d7b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7b80:	2003e490 	.word	0x2003e490
   d7b84:	2003e48c 	.word	0x2003e48c
   d7b88:	2003e488 	.word	0x2003e488
   d7b8c:	2003e45c 	.word	0x2003e45c

000d7b90 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d7b90:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d7b92:	2000      	movs	r0, #0
   d7b94:	f7fd fdfc 	bl	d5790 <spark_sync_time_pending>
   d7b98:	b128      	cbz	r0, d7ba6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7b9a:	f7fd fde9 	bl	d5770 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d7b9e:	f080 0001 	eor.w	r0, r0, #1
   d7ba2:	b2c0      	uxtb	r0, r0
   d7ba4:	bd08      	pop	{r3, pc}
   d7ba6:	2001      	movs	r0, #1
    }
   d7ba8:	bd08      	pop	{r3, pc}

000d7baa <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d7baa:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
   d7bac:	f7fd fbdc 	bl	d5368 <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d7bb0:	2200      	movs	r2, #0
   d7bb2:	4611      	mov	r1, r2
   d7bb4:	4610      	mov	r0, r2
}
   d7bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d7bba:	f7fd bda5 	b.w	d5708 <system_notify_time_changed>
	...

000d7bc0 <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d7bc2:	4b0e      	ldr	r3, [pc, #56]	; (d7bfc <_ZN9TimeClass7timeStrEl+0x3c>)
   d7bc4:	681b      	ldr	r3, [r3, #0]
   d7bc6:	4419      	add	r1, r3
   d7bc8:	4b0d      	ldr	r3, [pc, #52]	; (d7c00 <_ZN9TimeClass7timeStrEl+0x40>)
   d7bca:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7bcc:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d7bce:	a802      	add	r0, sp, #8
   d7bd0:	4419      	add	r1, r3
   d7bd2:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d7bd6:	f001 f9a3 	bl	d8f20 <localtime>
        char* ascstr = asctime(calendar_time);
   d7bda:	f001 f8ad 	bl	d8d38 <asctime>
   d7bde:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d7be0:	f002 fa94 	bl	da10c <strlen>
        ascstr[len-1] = 0; // remove final newline
   d7be4:	4428      	add	r0, r5
   d7be6:	2300      	movs	r3, #0
   d7be8:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d7bec:	4629      	mov	r1, r5
   d7bee:	4620      	mov	r0, r4
   d7bf0:	f7ff ff62 	bl	d7ab8 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d7bf4:	4620      	mov	r0, r4
   d7bf6:	b003      	add	sp, #12
   d7bf8:	bd30      	pop	{r4, r5, pc}
   d7bfa:	bf00      	nop
   d7bfc:	2003e490 	.word	0x2003e490
   d7c00:	2003e488 	.word	0x2003e488

000d7c04 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d7c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7c08:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
   d7c0a:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d7c0c:	4607      	mov	r7, r0
   d7c0e:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
   d7c10:	4620      	mov	r0, r4
   d7c12:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d7c14:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
   d7c16:	f001 fd41 	bl	d969c <strcpy>
    size_t len = strlen(format_str);
   d7c1a:	4620      	mov	r0, r4
   d7c1c:	f002 fa76 	bl	da10c <strlen>
   d7c20:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d7c22:	b925      	cbnz	r5, d7c2e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
   d7c24:	4924      	ldr	r1, [pc, #144]	; (d7cb8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
   d7c26:	a803      	add	r0, sp, #12
   d7c28:	f001 fd38 	bl	d969c <strcpy>
   d7c2c:	e013      	b.n	d7c56 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d7c2e:	213c      	movs	r1, #60	; 0x3c
   d7c30:	fb95 f2f1 	sdiv	r2, r5, r1
   d7c34:	2a00      	cmp	r2, #0
   d7c36:	bfb8      	it	lt
   d7c38:	4252      	neglt	r2, r2
   d7c3a:	fb92 f3f1 	sdiv	r3, r2, r1
   d7c3e:	fb01 2213 	mls	r2, r1, r3, r2
   d7c42:	9200      	str	r2, [sp, #0]
   d7c44:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7c48:	4a1c      	ldr	r2, [pc, #112]	; (d7cbc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
   d7c4a:	fb95 f3f3 	sdiv	r3, r5, r3
   d7c4e:	2110      	movs	r1, #16
   d7c50:	a803      	add	r0, sp, #12
   d7c52:	f7fd fe2d 	bl	d58b0 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d7c56:	4625      	mov	r5, r4
   d7c58:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d7c5a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   d7c5e:	45b2      	cmp	sl, r6
   d7c60:	d91b      	bls.n	d7c9a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d7c62:	782b      	ldrb	r3, [r5, #0]
   d7c64:	2b25      	cmp	r3, #37	; 0x25
   d7c66:	d116      	bne.n	d7c96 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
   d7c68:	786b      	ldrb	r3, [r5, #1]
   d7c6a:	2b7a      	cmp	r3, #122	; 0x7a
   d7c6c:	d113      	bne.n	d7c96 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
   d7c6e:	a803      	add	r0, sp, #12
   d7c70:	f002 fa4c 	bl	da10c <strlen>
   d7c74:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d7c76:	4430      	add	r0, r6
   d7c78:	ebc6 020a 	rsb	r2, r6, sl
   d7c7c:	1ca9      	adds	r1, r5, #2
   d7c7e:	4420      	add	r0, r4
   d7c80:	f001 fa46 	bl	d9110 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d7c84:	4642      	mov	r2, r8
   d7c86:	a903      	add	r1, sp, #12
   d7c88:	4628      	mov	r0, r5
   d7c8a:	f001 fa41 	bl	d9110 <memcpy>
            len = strlen(format_str);
   d7c8e:	4620      	mov	r0, r4
   d7c90:	f002 fa3c 	bl	da10c <strlen>
   d7c94:	4680      	mov	r8, r0
   d7c96:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d7c98:	e7de      	b.n	d7c58 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d7c9a:	464b      	mov	r3, r9
   d7c9c:	4622      	mov	r2, r4
   d7c9e:	2132      	movs	r1, #50	; 0x32
   d7ca0:	a807      	add	r0, sp, #28
   d7ca2:	f001 fd7f 	bl	d97a4 <strftime>
    return String(buf);
   d7ca6:	a907      	add	r1, sp, #28
   d7ca8:	4638      	mov	r0, r7
   d7caa:	f7ff ff05 	bl	d7ab8 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d7cae:	4638      	mov	r0, r7
   d7cb0:	b024      	add	sp, #144	; 0x90
   d7cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7cb6:	bf00      	nop
   d7cb8:	000db4ed 	.word	0x000db4ed
   d7cbc:	000daf60 	.word	0x000daf60

000d7cc0 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d7cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7cc2:	4605      	mov	r5, r0
   d7cc4:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d7cc6:	461c      	mov	r4, r3
   d7cc8:	b913      	cbnz	r3, d7cd0 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d7cca:	4b12      	ldr	r3, [pc, #72]	; (d7d14 <_ZN9TimeClass6formatElPKc+0x54>)
   d7ccc:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d7cce:	b12c      	cbz	r4, d7cdc <_ZN9TimeClass6formatElPKc+0x1c>
   d7cd0:	4b11      	ldr	r3, [pc, #68]	; (d7d18 <_ZN9TimeClass6formatElPKc+0x58>)
   d7cd2:	4620      	mov	r0, r4
   d7cd4:	6819      	ldr	r1, [r3, #0]
   d7cd6:	f001 fcd7 	bl	d9688 <strcmp>
   d7cda:	b920      	cbnz	r0, d7ce6 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d7cdc:	9901      	ldr	r1, [sp, #4]
   d7cde:	4628      	mov	r0, r5
   d7ce0:	f7ff ff6e 	bl	d7bc0 <_ZN9TimeClass7timeStrEl>
   d7ce4:	e013      	b.n	d7d0e <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d7ce6:	4f0d      	ldr	r7, [pc, #52]	; (d7d1c <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d7ce8:	9a01      	ldr	r2, [sp, #4]
   d7cea:	683b      	ldr	r3, [r7, #0]
   d7cec:	4e0c      	ldr	r6, [pc, #48]	; (d7d20 <_ZN9TimeClass6formatElPKc+0x60>)
   d7cee:	441a      	add	r2, r3
   d7cf0:	6833      	ldr	r3, [r6, #0]
   d7cf2:	a802      	add	r0, sp, #8
   d7cf4:	4413      	add	r3, r2
   d7cf6:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d7cfa:	f001 f911 	bl	d8f20 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d7cfe:	683a      	ldr	r2, [r7, #0]
   d7d00:	6833      	ldr	r3, [r6, #0]
   d7d02:	4601      	mov	r1, r0
   d7d04:	4413      	add	r3, r2
   d7d06:	4628      	mov	r0, r5
   d7d08:	4622      	mov	r2, r4
   d7d0a:	f7ff ff7b 	bl	d7c04 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d7d0e:	4628      	mov	r0, r5
   d7d10:	b003      	add	sp, #12
   d7d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7d14:	2003e484 	.word	0x2003e484
   d7d18:	2003e0a0 	.word	0x2003e0a0
   d7d1c:	2003e490 	.word	0x2003e490
   d7d20:	2003e488 	.word	0x2003e488

000d7d24 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7d24:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d7d26:	2000      	movs	r0, #0
   d7d28:	f7fd fb26 	bl	d5378 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d7d2c:	4604      	mov	r4, r0
   d7d2e:	b968      	cbnz	r0, d7d4c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7d30:	f7fd fcb2 	bl	d5698 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7d34:	2801      	cmp	r0, #1
   d7d36:	d10b      	bne.n	d7d50 <_ZN9TimeClass7isValidEv+0x2c>
   d7d38:	4620      	mov	r0, r4
   d7d3a:	f7fd fcdd 	bl	d56f8 <system_thread_get_state>
   d7d3e:	b938      	cbnz	r0, d7d50 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d7d40:	f7ff ff26 	bl	d7b90 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7d44:	b930      	cbnz	r0, d7d54 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d7d46:	f7fd fd03 	bl	d5750 <spark_process>
   d7d4a:	e7f9      	b.n	d7d40 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d7d4c:	2001      	movs	r0, #1
   d7d4e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d7d50:	2000      	movs	r0, #0
   d7d52:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d7d54:	f7ff ff1c 	bl	d7b90 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d7d58:	2000      	movs	r0, #0
   d7d5a:	f7fd fb0d 	bl	d5378 <HAL_RTC_Time_Is_Valid>
   d7d5e:	3000      	adds	r0, #0
   d7d60:	bf18      	it	ne
   d7d62:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d7d64:	bd10      	pop	{r4, pc}

000d7d66 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d7d66:	b508      	push	{r3, lr}
    (void)isValid();
   d7d68:	f7ff ffdc 	bl	d7d24 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d7d6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d7d70:	f7fd baf2 	b.w	d5358 <HAL_RTC_Get_UnixTime>

000d7d74 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d7d74:	b508      	push	{r3, lr}
	return year(now());
   d7d76:	f7ff fff6 	bl	d7d66 <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d7d7a:	f7ff fed7 	bl	d7b2c <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d7d7e:	4b01      	ldr	r3, [pc, #4]	; (d7d84 <_ZN9TimeClass4yearEv+0x10>)
   d7d80:	6958      	ldr	r0, [r3, #20]
   d7d82:	bd08      	pop	{r3, pc}
   d7d84:	2003e45c 	.word	0x2003e45c

000d7d88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7d88:	4b02      	ldr	r3, [pc, #8]	; (d7d94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7d8a:	681a      	ldr	r2, [r3, #0]
   d7d8c:	4b02      	ldr	r3, [pc, #8]	; (d7d98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7d8e:	601a      	str	r2, [r3, #0]
   d7d90:	4770      	bx	lr
   d7d92:	bf00      	nop
   d7d94:	2003e0a0 	.word	0x2003e0a0
   d7d98:	2003e484 	.word	0x2003e484

000d7d9c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7d9c:	4770      	bx	lr

000d7d9e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7d9e:	7441      	strb	r1, [r0, #17]
   d7da0:	4770      	bx	lr

000d7da2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7da2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7da4:	7c00      	ldrb	r0, [r0, #16]
   d7da6:	f7fd fc07 	bl	d55b8 <HAL_USART_Available_Data_For_Write>
}
   d7daa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7dae:	bd08      	pop	{r3, pc}

000d7db0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7db0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7db2:	7c00      	ldrb	r0, [r0, #16]
   d7db4:	f7fd fbd8 	bl	d5568 <HAL_USART_Available_Data>
}
   d7db8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7dbc:	bd08      	pop	{r3, pc}

000d7dbe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7dbe:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7dc0:	7c00      	ldrb	r0, [r0, #16]
   d7dc2:	f7fd fbe1 	bl	d5588 <HAL_USART_Peek_Data>
}
   d7dc6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7dca:	bf28      	it	cs
   d7dcc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7dd0:	bd08      	pop	{r3, pc}

000d7dd2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7dd2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7dd4:	7c00      	ldrb	r0, [r0, #16]
   d7dd6:	f7fd fbcf 	bl	d5578 <HAL_USART_Read_Data>
}
   d7dda:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7dde:	bf28      	it	cs
   d7de0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7de4:	bd08      	pop	{r3, pc}

000d7de6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7de6:	7c00      	ldrb	r0, [r0, #16]
   d7de8:	f7fd bbd6 	b.w	d5598 <HAL_USART_Flush_Data>

000d7dec <_ZN11USARTSerialD0Ev>:
   d7dec:	b510      	push	{r4, lr}
   d7dee:	2114      	movs	r1, #20
   d7df0:	4604      	mov	r4, r0
   d7df2:	f000 fa22 	bl	d823a <_ZdlPvj>
   d7df6:	4620      	mov	r0, r4
   d7df8:	bd10      	pop	{r4, pc}

000d7dfa <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7dfa:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7dfc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7dfe:	4604      	mov	r4, r0
   d7e00:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7e02:	b925      	cbnz	r5, d7e0e <_ZN11USARTSerial5writeEh+0x14>
   d7e04:	7c00      	ldrb	r0, [r0, #16]
   d7e06:	f7fd fbd7 	bl	d55b8 <HAL_USART_Available_Data_For_Write>
   d7e0a:	2800      	cmp	r0, #0
   d7e0c:	dd05      	ble.n	d7e1a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7e0e:	4631      	mov	r1, r6
   d7e10:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7e16:	f7fd bb9f 	b.w	d5558 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7e1a:	4628      	mov	r0, r5
   d7e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7e20 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7e20:	b510      	push	{r4, lr}
   d7e22:	4604      	mov	r4, r0
   d7e24:	4608      	mov	r0, r1
   d7e26:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7e28:	2200      	movs	r2, #0
   d7e2a:	6062      	str	r2, [r4, #4]
   d7e2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7e30:	60a2      	str	r2, [r4, #8]
   d7e32:	4a05      	ldr	r2, [pc, #20]	; (d7e48 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7e34:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7e36:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7e38:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7e3a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7e3c:	461a      	mov	r2, r3
   d7e3e:	f7fd fb7b 	bl	d5538 <HAL_USART_Init>
}
   d7e42:	4620      	mov	r0, r4
   d7e44:	bd10      	pop	{r4, pc}
   d7e46:	bf00      	nop
   d7e48:	000daf90 	.word	0x000daf90

000d7e4c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7e4c:	2300      	movs	r3, #0
   d7e4e:	7c00      	ldrb	r0, [r0, #16]
   d7e50:	f7fd bbba 	b.w	d55c8 <HAL_USART_BeginConfig>

000d7e54 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d7e54:	2200      	movs	r2, #0
   d7e56:	f7ff bff9 	b.w	d7e4c <_ZN11USARTSerial5beginEmm>

000d7e5a <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d7e5a:	7c00      	ldrb	r0, [r0, #16]
   d7e5c:	f7fd bb74 	b.w	d5548 <HAL_USART_End>

000d7e60 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7e60:	7c00      	ldrb	r0, [r0, #16]
   d7e62:	f7fd bba1 	b.w	d55a8 <HAL_USART_Is_Enabled>
	...

000d7e68 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7e68:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7e6a:	4d0c      	ldr	r5, [pc, #48]	; (d7e9c <_Z22__fetch_global_Serial1v+0x34>)
   d7e6c:	6829      	ldr	r1, [r5, #0]
   d7e6e:	f011 0401 	ands.w	r4, r1, #1
   d7e72:	d111      	bne.n	d7e98 <_Z22__fetch_global_Serial1v+0x30>
   d7e74:	4628      	mov	r0, r5
   d7e76:	f7fc f921 	bl	d40bc <__cxa_guard_acquire>
   d7e7a:	b168      	cbz	r0, d7e98 <_Z22__fetch_global_Serial1v+0x30>
   d7e7c:	4a08      	ldr	r2, [pc, #32]	; (d7ea0 <_Z22__fetch_global_Serial1v+0x38>)
   d7e7e:	4b09      	ldr	r3, [pc, #36]	; (d7ea4 <_Z22__fetch_global_Serial1v+0x3c>)
   d7e80:	4809      	ldr	r0, [pc, #36]	; (d7ea8 <_Z22__fetch_global_Serial1v+0x40>)
   d7e82:	4621      	mov	r1, r4
   d7e84:	f7ff ffcc 	bl	d7e20 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7e88:	4628      	mov	r0, r5
   d7e8a:	f7fc f91c 	bl	d40c6 <__cxa_guard_release>
   d7e8e:	4a07      	ldr	r2, [pc, #28]	; (d7eac <_Z22__fetch_global_Serial1v+0x44>)
   d7e90:	4907      	ldr	r1, [pc, #28]	; (d7eb0 <_Z22__fetch_global_Serial1v+0x48>)
   d7e92:	4805      	ldr	r0, [pc, #20]	; (d7ea8 <_Z22__fetch_global_Serial1v+0x40>)
   d7e94:	f000 f9cc 	bl	d8230 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7e98:	4803      	ldr	r0, [pc, #12]	; (d7ea8 <_Z22__fetch_global_Serial1v+0x40>)
   d7e9a:	bd38      	pop	{r3, r4, r5, pc}
   d7e9c:	2003e52c 	.word	0x2003e52c
   d7ea0:	2003e530 	.word	0x2003e530
   d7ea4:	2003e4a8 	.word	0x2003e4a8
   d7ea8:	2003e494 	.word	0x2003e494
   d7eac:	2003e158 	.word	0x2003e158
   d7eb0:	000d7d9d 	.word	0x000d7d9d

000d7eb4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7eb4:	7441      	strb	r1, [r0, #17]
   d7eb6:	4770      	bx	lr

000d7eb8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7eb8:	4770      	bx	lr

000d7eba <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7eba:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7ebc:	2100      	movs	r1, #0
   d7ebe:	7c00      	ldrb	r0, [r0, #16]
   d7ec0:	f7fd fbb2 	bl	d5628 <HAL_USB_USART_Receive_Data>
}
   d7ec4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7ec8:	bf28      	it	cs
   d7eca:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7ece:	bd08      	pop	{r3, pc}

000d7ed0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7ed0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7ed2:	2101      	movs	r1, #1
   d7ed4:	7c00      	ldrb	r0, [r0, #16]
   d7ed6:	f7fd fba7 	bl	d5628 <HAL_USB_USART_Receive_Data>
}
   d7eda:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7ede:	bf28      	it	cs
   d7ee0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7ee4:	bd08      	pop	{r3, pc}

000d7ee6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7ee6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7ee8:	7c00      	ldrb	r0, [r0, #16]
   d7eea:	f7fd fb95 	bl	d5618 <HAL_USB_USART_Available_Data_For_Write>
}
   d7eee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7ef2:	bd08      	pop	{r3, pc}

000d7ef4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7ef4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7ef6:	7c00      	ldrb	r0, [r0, #16]
   d7ef8:	f7fd fb86 	bl	d5608 <HAL_USB_USART_Available_Data>
}
   d7efc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7f00:	bd08      	pop	{r3, pc}

000d7f02 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7f02:	7c00      	ldrb	r0, [r0, #16]
   d7f04:	f7fd bba0 	b.w	d5648 <HAL_USB_USART_Flush_Data>

000d7f08 <_ZN9USBSerialD0Ev>:
   d7f08:	b510      	push	{r4, lr}
   d7f0a:	2114      	movs	r1, #20
   d7f0c:	4604      	mov	r4, r0
   d7f0e:	f000 f994 	bl	d823a <_ZdlPvj>
   d7f12:	4620      	mov	r0, r4
   d7f14:	bd10      	pop	{r4, pc}

000d7f16 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7f16:	b538      	push	{r3, r4, r5, lr}
   d7f18:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7f1a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7f1c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7f1e:	f7fd fb7b 	bl	d5618 <HAL_USB_USART_Available_Data_For_Write>
   d7f22:	2800      	cmp	r0, #0
   d7f24:	dc01      	bgt.n	d7f2a <_ZN9USBSerial5writeEh+0x14>
   d7f26:	7c60      	ldrb	r0, [r4, #17]
   d7f28:	b128      	cbz	r0, d7f36 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7f2a:	4629      	mov	r1, r5
   d7f2c:	7c20      	ldrb	r0, [r4, #16]
   d7f2e:	f7fd fb83 	bl	d5638 <HAL_USB_USART_Send_Data>
   d7f32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7f36:	bd38      	pop	{r3, r4, r5, pc}

000d7f38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7f38:	b510      	push	{r4, lr}
   d7f3a:	4604      	mov	r4, r0
   d7f3c:	2300      	movs	r3, #0
   d7f3e:	6063      	str	r3, [r4, #4]
   d7f40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7f44:	60a3      	str	r3, [r4, #8]
   d7f46:	4b05      	ldr	r3, [pc, #20]	; (d7f5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7f48:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7f4a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7f4c:	4608      	mov	r0, r1
{
  _serial = serial;
   d7f4e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7f50:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7f52:	4611      	mov	r1, r2
   d7f54:	f7fd fb40 	bl	d55d8 <HAL_USB_USART_Init>
}
   d7f58:	4620      	mov	r0, r4
   d7f5a:	bd10      	pop	{r4, pc}
   d7f5c:	000dafc0 	.word	0x000dafc0

000d7f60 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7f60:	2200      	movs	r2, #0
   d7f62:	7c00      	ldrb	r0, [r0, #16]
   d7f64:	f7fd bb40 	b.w	d55e8 <HAL_USB_USART_Begin>

000d7f68 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d7f68:	7c00      	ldrb	r0, [r0, #16]
   d7f6a:	f7fd bb45 	b.w	d55f8 <HAL_USB_USART_End>

000d7f6e <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7f6e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7f70:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7f72:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7f74:	2100      	movs	r1, #0
   d7f76:	f001 f8f1 	bl	d915c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7f7a:	4620      	mov	r0, r4
   d7f7c:	bd10      	pop	{r4, pc}
	...

000d7f80 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7f80:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7f82:	4d0e      	ldr	r5, [pc, #56]	; (d7fbc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7f84:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7f86:	a801      	add	r0, sp, #4
   d7f88:	f7ff fff1 	bl	d7f6e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7f8c:	6829      	ldr	r1, [r5, #0]
   d7f8e:	f011 0401 	ands.w	r4, r1, #1
   d7f92:	d110      	bne.n	d7fb6 <_Z16_fetch_usbserialv+0x36>
   d7f94:	4628      	mov	r0, r5
   d7f96:	f7fc f891 	bl	d40bc <__cxa_guard_acquire>
   d7f9a:	b160      	cbz	r0, d7fb6 <_Z16_fetch_usbserialv+0x36>
   d7f9c:	aa01      	add	r2, sp, #4
   d7f9e:	4621      	mov	r1, r4
   d7fa0:	4807      	ldr	r0, [pc, #28]	; (d7fc0 <_Z16_fetch_usbserialv+0x40>)
   d7fa2:	f7ff ffc9 	bl	d7f38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7fa6:	4628      	mov	r0, r5
   d7fa8:	f7fc f88d 	bl	d40c6 <__cxa_guard_release>
   d7fac:	4a05      	ldr	r2, [pc, #20]	; (d7fc4 <_Z16_fetch_usbserialv+0x44>)
   d7fae:	4906      	ldr	r1, [pc, #24]	; (d7fc8 <_Z16_fetch_usbserialv+0x48>)
   d7fb0:	4803      	ldr	r0, [pc, #12]	; (d7fc0 <_Z16_fetch_usbserialv+0x40>)
   d7fb2:	f000 f93d 	bl	d8230 <__aeabi_atexit>
	return _usbserial;
}
   d7fb6:	4802      	ldr	r0, [pc, #8]	; (d7fc0 <_Z16_fetch_usbserialv+0x40>)
   d7fb8:	b007      	add	sp, #28
   d7fba:	bd30      	pop	{r4, r5, pc}
   d7fbc:	2003e5b4 	.word	0x2003e5b4
   d7fc0:	2003e5b8 	.word	0x2003e5b8
   d7fc4:	2003e158 	.word	0x2003e158
   d7fc8:	000d7eb9 	.word	0x000d7eb9

000d7fcc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7fcc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7fce:	4b0c      	ldr	r3, [pc, #48]	; (d8000 <serialEventRun+0x34>)
   d7fd0:	b133      	cbz	r3, d7fe0 <serialEventRun+0x14>
   d7fd2:	f7ff ffd5 	bl	d7f80 <_Z16_fetch_usbserialv>
   d7fd6:	6803      	ldr	r3, [r0, #0]
   d7fd8:	691b      	ldr	r3, [r3, #16]
   d7fda:	4798      	blx	r3
   d7fdc:	2800      	cmp	r0, #0
   d7fde:	dc09      	bgt.n	d7ff4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7fe0:	4b08      	ldr	r3, [pc, #32]	; (d8004 <serialEventRun+0x38>)
   d7fe2:	b163      	cbz	r3, d7ffe <serialEventRun+0x32>
   d7fe4:	f7ff ff40 	bl	d7e68 <_Z22__fetch_global_Serial1v>
   d7fe8:	6803      	ldr	r3, [r0, #0]
   d7fea:	691b      	ldr	r3, [r3, #16]
   d7fec:	4798      	blx	r3
   d7fee:	2800      	cmp	r0, #0
   d7ff0:	dc03      	bgt.n	d7ffa <serialEventRun+0x2e>
   d7ff2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7ff4:	f3af 8000 	nop.w
   d7ff8:	e7f2      	b.n	d7fe0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7ffa:	f3af 8000 	nop.w
   d7ffe:	bd08      	pop	{r3, pc}
	...

000d8008 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d8008:	b508      	push	{r3, lr}
	serialEventRun();
   d800a:	f7ff ffdf 	bl	d7fcc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d800e:	f7fd f99b 	bl	d5348 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8012:	4b01      	ldr	r3, [pc, #4]	; (d8018 <_post_loop+0x10>)
   d8014:	6018      	str	r0, [r3, #0]
   d8016:	bd08      	pop	{r3, pc}
   d8018:	2003e5d0 	.word	0x2003e5d0

000d801c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d801c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d801e:	2300      	movs	r3, #0
   d8020:	9300      	str	r3, [sp, #0]
   d8022:	461a      	mov	r2, r3
   d8024:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8028:	f7fd fb80 	bl	d572c <system_ctrl_set_result>
}
   d802c:	b003      	add	sp, #12
   d802e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8034 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d8034:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8036:	8843      	ldrh	r3, [r0, #2]
   d8038:	2b0a      	cmp	r3, #10
   d803a:	d008      	beq.n	d804e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d803c:	2b50      	cmp	r3, #80	; 0x50
   d803e:	d109      	bne.n	d8054 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d8040:	4b09      	ldr	r3, [pc, #36]	; (d8068 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8042:	681b      	ldr	r3, [r3, #0]
   d8044:	b13b      	cbz	r3, d8056 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d8046:	b003      	add	sp, #12
   d8048:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d804c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d804e:	f7ff ffe5 	bl	d801c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d8052:	e006      	b.n	d8062 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8054:	2300      	movs	r3, #0
   d8056:	9300      	str	r3, [sp, #0]
   d8058:	461a      	mov	r2, r3
   d805a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d805e:	f7fd fb65 	bl	d572c <system_ctrl_set_result>
        break;
    }
}
   d8062:	b003      	add	sp, #12
   d8064:	f85d fb04 	ldr.w	pc, [sp], #4
   d8068:	2003e5cc 	.word	0x2003e5cc

000d806c <module_user_init_hook>:

void module_user_init_hook()
{
   d806c:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d806e:	f7fd f95b 	bl	d5328 <HAL_RNG_GetRandomNumber>
   d8072:	4604      	mov	r4, r0
    srand(seed);
   d8074:	f001 fac8 	bl	d9608 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8078:	4b07      	ldr	r3, [pc, #28]	; (d8098 <module_user_init_hook+0x2c>)
   d807a:	b113      	cbz	r3, d8082 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d807c:	4620      	mov	r0, r4
   d807e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8082:	2100      	movs	r1, #0
   d8084:	4804      	ldr	r0, [pc, #16]	; (d8098 <module_user_init_hook+0x2c>)
   d8086:	f7fd fb93 	bl	d57b0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d808a:	2100      	movs	r1, #0
   d808c:	4803      	ldr	r0, [pc, #12]	; (d809c <module_user_init_hook+0x30>)
}
   d808e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8092:	f7fd bb41 	b.w	d5718 <system_ctrl_set_app_request_handler>
   d8096:	bf00      	nop
   d8098:	00000000 	.word	0x00000000
   d809c:	000d8035 	.word	0x000d8035

000d80a0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d80a0:	b510      	push	{r4, lr}
   d80a2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d80a4:	480f      	ldr	r0, [pc, #60]	; (d80e4 <pinAvailable+0x44>)
   d80a6:	f7ff fcad 	bl	d7a04 <_ZN8SPIClass9isEnabledEv>
   d80aa:	b128      	cbz	r0, d80b8 <pinAvailable+0x18>
   d80ac:	f1a4 030b 	sub.w	r3, r4, #11
   d80b0:	2b02      	cmp	r3, #2
   d80b2:	d801      	bhi.n	d80b8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d80b4:	2000      	movs	r0, #0
   d80b6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d80b8:	f000 f858 	bl	d816c <_Z19__fetch_global_Wirev>
   d80bc:	f7fe f851 	bl	d6162 <_ZN7TwoWire9isEnabledEv>
   d80c0:	b108      	cbz	r0, d80c6 <pinAvailable+0x26>
   d80c2:	2c01      	cmp	r4, #1
   d80c4:	d9f6      	bls.n	d80b4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d80c6:	f7ff fecf 	bl	d7e68 <_Z22__fetch_global_Serial1v>
   d80ca:	f7ff fec9 	bl	d7e60 <_ZN11USARTSerial9isEnabledEv>
   d80ce:	b118      	cbz	r0, d80d8 <pinAvailable+0x38>
   d80d0:	f1a4 0309 	sub.w	r3, r4, #9
   d80d4:	2b01      	cmp	r3, #1
   d80d6:	d9ed      	bls.n	d80b4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d80d8:	2c23      	cmp	r4, #35	; 0x23
   d80da:	bf8c      	ite	hi
   d80dc:	2000      	movhi	r0, #0
   d80de:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d80e0:	bd10      	pop	{r4, pc}
   d80e2:	bf00      	nop
   d80e4:	2003e604 	.word	0x2003e604

000d80e8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d80e8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d80ea:	b538      	push	{r3, r4, r5, lr}
   d80ec:	4604      	mov	r4, r0
   d80ee:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d80f0:	d80a      	bhi.n	d8108 <pinMode+0x20>
   d80f2:	29ff      	cmp	r1, #255	; 0xff
   d80f4:	d008      	beq.n	d8108 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d80f6:	f7ff ffd3 	bl	d80a0 <pinAvailable>
   d80fa:	b128      	cbz	r0, d8108 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d80fc:	4629      	mov	r1, r5
   d80fe:	4620      	mov	r0, r4
}
   d8100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8104:	f7fd b958 	b.w	d53b8 <HAL_Pin_Mode>
   d8108:	bd38      	pop	{r3, r4, r5, pc}

000d810a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d810a:	b538      	push	{r3, r4, r5, lr}
   d810c:	4604      	mov	r4, r0
   d810e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8110:	f7fd f95a 	bl	d53c8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8114:	28ff      	cmp	r0, #255	; 0xff
   d8116:	d010      	beq.n	d813a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8118:	2806      	cmp	r0, #6
   d811a:	d804      	bhi.n	d8126 <digitalWrite+0x1c>
   d811c:	234d      	movs	r3, #77	; 0x4d
   d811e:	fa23 f000 	lsr.w	r0, r3, r0
   d8122:	07c3      	lsls	r3, r0, #31
   d8124:	d409      	bmi.n	d813a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8126:	4620      	mov	r0, r4
   d8128:	f7ff ffba 	bl	d80a0 <pinAvailable>
   d812c:	b128      	cbz	r0, d813a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d812e:	4629      	mov	r1, r5
   d8130:	4620      	mov	r0, r4
}
   d8132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8136:	f7fd b94f 	b.w	d53d8 <HAL_GPIO_Write>
   d813a:	bd38      	pop	{r3, r4, r5, pc}

000d813c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d813c:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d813e:	b510      	push	{r4, lr}
   d8140:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8142:	bf9c      	itt	ls
   d8144:	340e      	addls	r4, #14
   d8146:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8148:	4620      	mov	r0, r4
   d814a:	f7ff ffa9 	bl	d80a0 <pinAvailable>
   d814e:	b150      	cbz	r0, d8166 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8150:	2103      	movs	r1, #3
   d8152:	4620      	mov	r0, r4
   d8154:	f7fd f928 	bl	d53a8 <HAL_Validate_Pin_Function>
   d8158:	2803      	cmp	r0, #3
   d815a:	d104      	bne.n	d8166 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d815c:	4620      	mov	r0, r4
}
   d815e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8162:	f7fd b951 	b.w	d5408 <HAL_ADC_Read>
}
   d8166:	2000      	movs	r0, #0
   d8168:	bd10      	pop	{r4, pc}
	...

000d816c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d816c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d816e:	4d0b      	ldr	r5, [pc, #44]	; (d819c <_Z19__fetch_global_Wirev+0x30>)
   d8170:	6829      	ldr	r1, [r5, #0]
   d8172:	f011 0401 	ands.w	r4, r1, #1
   d8176:	d10f      	bne.n	d8198 <_Z19__fetch_global_Wirev+0x2c>
   d8178:	4628      	mov	r0, r5
   d817a:	f7fb ff9f 	bl	d40bc <__cxa_guard_acquire>
   d817e:	b158      	cbz	r0, d8198 <_Z19__fetch_global_Wirev+0x2c>
   d8180:	4621      	mov	r1, r4
   d8182:	4807      	ldr	r0, [pc, #28]	; (d81a0 <_Z19__fetch_global_Wirev+0x34>)
   d8184:	f7fd ffbe 	bl	d6104 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d8188:	4628      	mov	r0, r5
   d818a:	f7fb ff9c 	bl	d40c6 <__cxa_guard_release>
   d818e:	4a05      	ldr	r2, [pc, #20]	; (d81a4 <_Z19__fetch_global_Wirev+0x38>)
   d8190:	4905      	ldr	r1, [pc, #20]	; (d81a8 <_Z19__fetch_global_Wirev+0x3c>)
   d8192:	4803      	ldr	r0, [pc, #12]	; (d81a0 <_Z19__fetch_global_Wirev+0x34>)
   d8194:	f000 f84c 	bl	d8230 <__aeabi_atexit>
	return wire;
}
   d8198:	4801      	ldr	r0, [pc, #4]	; (d81a0 <_Z19__fetch_global_Wirev+0x34>)
   d819a:	bd38      	pop	{r3, r4, r5, pc}
   d819c:	2003e5d4 	.word	0x2003e5d4
   d81a0:	2003e5ec 	.word	0x2003e5ec
   d81a4:	2003e158 	.word	0x2003e158
   d81a8:	000d60ab 	.word	0x000d60ab

000d81ac <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d81ac:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   d81ae:	4c0b      	ldr	r4, [pc, #44]	; (d81dc <_Z20__fetch_global_Wire1v+0x30>)
   d81b0:	6823      	ldr	r3, [r4, #0]
   d81b2:	07db      	lsls	r3, r3, #31
   d81b4:	d40f      	bmi.n	d81d6 <_Z20__fetch_global_Wire1v+0x2a>
   d81b6:	4620      	mov	r0, r4
   d81b8:	f7fb ff80 	bl	d40bc <__cxa_guard_acquire>
   d81bc:	b158      	cbz	r0, d81d6 <_Z20__fetch_global_Wire1v+0x2a>
   d81be:	2101      	movs	r1, #1
   d81c0:	4807      	ldr	r0, [pc, #28]	; (d81e0 <_Z20__fetch_global_Wire1v+0x34>)
   d81c2:	f7fd ff9f 	bl	d6104 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d81c6:	4620      	mov	r0, r4
   d81c8:	f7fb ff7d 	bl	d40c6 <__cxa_guard_release>
   d81cc:	4a05      	ldr	r2, [pc, #20]	; (d81e4 <_Z20__fetch_global_Wire1v+0x38>)
   d81ce:	4906      	ldr	r1, [pc, #24]	; (d81e8 <_Z20__fetch_global_Wire1v+0x3c>)
   d81d0:	4803      	ldr	r0, [pc, #12]	; (d81e0 <_Z20__fetch_global_Wire1v+0x34>)
   d81d2:	f000 f82d 	bl	d8230 <__aeabi_atexit>
	return wire;
}
   d81d6:	4802      	ldr	r0, [pc, #8]	; (d81e0 <_Z20__fetch_global_Wire1v+0x34>)
   d81d8:	bd10      	pop	{r4, pc}
   d81da:	bf00      	nop
   d81dc:	2003e600 	.word	0x2003e600
   d81e0:	2003e5d8 	.word	0x2003e5d8
   d81e4:	2003e158 	.word	0x2003e158
   d81e8:	000d60ab 	.word	0x000d60ab

000d81ec <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d81ec:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d81ee:	4c0c      	ldr	r4, [pc, #48]	; (d8220 <_GLOBAL__sub_I_SPI+0x34>)
   d81f0:	4e0c      	ldr	r6, [pc, #48]	; (d8224 <_GLOBAL__sub_I_SPI+0x38>)
   d81f2:	4d0d      	ldr	r5, [pc, #52]	; (d8228 <_GLOBAL__sub_I_SPI+0x3c>)
   d81f4:	2100      	movs	r1, #0
   d81f6:	4620      	mov	r0, r4
   d81f8:	f7ff fbf0 	bl	d79dc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d81fc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d81fe:	4c0b      	ldr	r4, [pc, #44]	; (d822c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d8200:	4632      	mov	r2, r6
   d8202:	4629      	mov	r1, r5
   d8204:	f000 f814 	bl	d8230 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8208:	2101      	movs	r1, #1
   d820a:	4620      	mov	r0, r4
   d820c:	f7ff fbe6 	bl	d79dc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8210:	4632      	mov	r2, r6
   d8212:	4629      	mov	r1, r5
   d8214:	4620      	mov	r0, r4
   d8216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d821a:	f000 b809 	b.w	d8230 <__aeabi_atexit>
   d821e:	bf00      	nop
   d8220:	2003e604 	.word	0x2003e604
   d8224:	2003e158 	.word	0x2003e158
   d8228:	000d79cd 	.word	0x000d79cd
   d822c:	2003e614 	.word	0x2003e614

000d8230 <__aeabi_atexit>:
   d8230:	460b      	mov	r3, r1
   d8232:	4601      	mov	r1, r0
   d8234:	4618      	mov	r0, r3
   d8236:	f000 bdbb 	b.w	d8db0 <__cxa_atexit>

000d823a <_ZdlPvj>:
   d823a:	f7fb bf30 	b.w	d409e <_ZdlPv>
	...

000d8240 <_ZSt15get_new_handlerv>:
   d8240:	4b02      	ldr	r3, [pc, #8]	; (d824c <_ZSt15get_new_handlerv+0xc>)
   d8242:	6818      	ldr	r0, [r3, #0]
   d8244:	f3bf 8f5f 	dmb	sy
   d8248:	4770      	bx	lr
   d824a:	bf00      	nop
   d824c:	2003e624 	.word	0x2003e624

000d8250 <_ZnwjRKSt9nothrow_t>:
   d8250:	b510      	push	{r4, lr}
   d8252:	2800      	cmp	r0, #0
   d8254:	bf14      	ite	ne
   d8256:	4604      	movne	r4, r0
   d8258:	2401      	moveq	r4, #1
   d825a:	4620      	mov	r0, r4
   d825c:	f7fd fb00 	bl	d5860 <malloc>
   d8260:	b920      	cbnz	r0, d826c <_ZnwjRKSt9nothrow_t+0x1c>
   d8262:	f7ff ffed 	bl	d8240 <_ZSt15get_new_handlerv>
   d8266:	b108      	cbz	r0, d826c <_ZnwjRKSt9nothrow_t+0x1c>
   d8268:	4780      	blx	r0
   d826a:	e7f6      	b.n	d825a <_ZnwjRKSt9nothrow_t+0xa>
   d826c:	bd10      	pop	{r4, pc}

000d826e <_ZSt25__throw_bad_function_callv>:
   d826e:	b508      	push	{r3, lr}
   d8270:	f7fd fb36 	bl	d58e0 <abort>

000d8274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8274:	4b24      	ldr	r3, [pc, #144]	; (d8308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8276:	681a      	ldr	r2, [r3, #0]
   d8278:	07d0      	lsls	r0, r2, #31
   d827a:	bf5c      	itt	pl
   d827c:	2201      	movpl	r2, #1
   d827e:	601a      	strpl	r2, [r3, #0]
   d8280:	4b22      	ldr	r3, [pc, #136]	; (d830c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8282:	681a      	ldr	r2, [r3, #0]
   d8284:	07d1      	lsls	r1, r2, #31
   d8286:	bf5c      	itt	pl
   d8288:	2201      	movpl	r2, #1
   d828a:	601a      	strpl	r2, [r3, #0]
   d828c:	4b20      	ldr	r3, [pc, #128]	; (d8310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d828e:	681a      	ldr	r2, [r3, #0]
   d8290:	07d2      	lsls	r2, r2, #31
   d8292:	bf5c      	itt	pl
   d8294:	2201      	movpl	r2, #1
   d8296:	601a      	strpl	r2, [r3, #0]
   d8298:	4b1e      	ldr	r3, [pc, #120]	; (d8314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d829a:	681a      	ldr	r2, [r3, #0]
   d829c:	07d0      	lsls	r0, r2, #31
   d829e:	bf5c      	itt	pl
   d82a0:	2201      	movpl	r2, #1
   d82a2:	601a      	strpl	r2, [r3, #0]
   d82a4:	4b1c      	ldr	r3, [pc, #112]	; (d8318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d82a6:	681a      	ldr	r2, [r3, #0]
   d82a8:	07d1      	lsls	r1, r2, #31
   d82aa:	bf5c      	itt	pl
   d82ac:	2201      	movpl	r2, #1
   d82ae:	601a      	strpl	r2, [r3, #0]
   d82b0:	4b1a      	ldr	r3, [pc, #104]	; (d831c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d82b2:	681a      	ldr	r2, [r3, #0]
   d82b4:	07d2      	lsls	r2, r2, #31
   d82b6:	bf5c      	itt	pl
   d82b8:	2201      	movpl	r2, #1
   d82ba:	601a      	strpl	r2, [r3, #0]
   d82bc:	4b18      	ldr	r3, [pc, #96]	; (d8320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d82be:	681a      	ldr	r2, [r3, #0]
   d82c0:	07d0      	lsls	r0, r2, #31
   d82c2:	bf5c      	itt	pl
   d82c4:	2201      	movpl	r2, #1
   d82c6:	601a      	strpl	r2, [r3, #0]
   d82c8:	4b16      	ldr	r3, [pc, #88]	; (d8324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d82ca:	681a      	ldr	r2, [r3, #0]
   d82cc:	07d1      	lsls	r1, r2, #31
   d82ce:	bf5c      	itt	pl
   d82d0:	2201      	movpl	r2, #1
   d82d2:	601a      	strpl	r2, [r3, #0]
   d82d4:	4b14      	ldr	r3, [pc, #80]	; (d8328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d82d6:	681a      	ldr	r2, [r3, #0]
   d82d8:	07d2      	lsls	r2, r2, #31
   d82da:	bf5c      	itt	pl
   d82dc:	2201      	movpl	r2, #1
   d82de:	601a      	strpl	r2, [r3, #0]
   d82e0:	4b12      	ldr	r3, [pc, #72]	; (d832c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d82e2:	681a      	ldr	r2, [r3, #0]
   d82e4:	07d0      	lsls	r0, r2, #31
   d82e6:	bf5c      	itt	pl
   d82e8:	2201      	movpl	r2, #1
   d82ea:	601a      	strpl	r2, [r3, #0]
   d82ec:	4b10      	ldr	r3, [pc, #64]	; (d8330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d82ee:	681a      	ldr	r2, [r3, #0]
   d82f0:	07d1      	lsls	r1, r2, #31
   d82f2:	bf5c      	itt	pl
   d82f4:	2201      	movpl	r2, #1
   d82f6:	601a      	strpl	r2, [r3, #0]
   d82f8:	4b0e      	ldr	r3, [pc, #56]	; (d8334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d82fa:	681a      	ldr	r2, [r3, #0]
   d82fc:	07d2      	lsls	r2, r2, #31
   d82fe:	bf5c      	itt	pl
   d8300:	2201      	movpl	r2, #1
   d8302:	601a      	strpl	r2, [r3, #0]
   d8304:	4770      	bx	lr
   d8306:	bf00      	nop
   d8308:	2003e654 	.word	0x2003e654
   d830c:	2003e650 	.word	0x2003e650
   d8310:	2003e64c 	.word	0x2003e64c
   d8314:	2003e648 	.word	0x2003e648
   d8318:	2003e644 	.word	0x2003e644
   d831c:	2003e640 	.word	0x2003e640
   d8320:	2003e63c 	.word	0x2003e63c
   d8324:	2003e638 	.word	0x2003e638
   d8328:	2003e634 	.word	0x2003e634
   d832c:	2003e630 	.word	0x2003e630
   d8330:	2003e62c 	.word	0x2003e62c
   d8334:	2003e628 	.word	0x2003e628

000d8338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8338:	4b18      	ldr	r3, [pc, #96]	; (d839c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d833a:	681a      	ldr	r2, [r3, #0]
   d833c:	07d1      	lsls	r1, r2, #31
   d833e:	bf5c      	itt	pl
   d8340:	2201      	movpl	r2, #1
   d8342:	601a      	strpl	r2, [r3, #0]
   d8344:	4b16      	ldr	r3, [pc, #88]	; (d83a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8346:	681a      	ldr	r2, [r3, #0]
   d8348:	07d2      	lsls	r2, r2, #31
   d834a:	bf5c      	itt	pl
   d834c:	2201      	movpl	r2, #1
   d834e:	601a      	strpl	r2, [r3, #0]
   d8350:	4b14      	ldr	r3, [pc, #80]	; (d83a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8352:	681a      	ldr	r2, [r3, #0]
   d8354:	07d0      	lsls	r0, r2, #31
   d8356:	bf5c      	itt	pl
   d8358:	2201      	movpl	r2, #1
   d835a:	601a      	strpl	r2, [r3, #0]
   d835c:	4b12      	ldr	r3, [pc, #72]	; (d83a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d835e:	681a      	ldr	r2, [r3, #0]
   d8360:	07d1      	lsls	r1, r2, #31
   d8362:	bf5c      	itt	pl
   d8364:	2201      	movpl	r2, #1
   d8366:	601a      	strpl	r2, [r3, #0]
   d8368:	4b10      	ldr	r3, [pc, #64]	; (d83ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d836a:	681a      	ldr	r2, [r3, #0]
   d836c:	07d2      	lsls	r2, r2, #31
   d836e:	bf5c      	itt	pl
   d8370:	2201      	movpl	r2, #1
   d8372:	601a      	strpl	r2, [r3, #0]
   d8374:	4b0e      	ldr	r3, [pc, #56]	; (d83b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8376:	681a      	ldr	r2, [r3, #0]
   d8378:	07d0      	lsls	r0, r2, #31
   d837a:	bf5c      	itt	pl
   d837c:	2201      	movpl	r2, #1
   d837e:	601a      	strpl	r2, [r3, #0]
   d8380:	4b0c      	ldr	r3, [pc, #48]	; (d83b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8382:	681a      	ldr	r2, [r3, #0]
   d8384:	07d1      	lsls	r1, r2, #31
   d8386:	bf5c      	itt	pl
   d8388:	2201      	movpl	r2, #1
   d838a:	601a      	strpl	r2, [r3, #0]
   d838c:	4b0a      	ldr	r3, [pc, #40]	; (d83b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d838e:	681a      	ldr	r2, [r3, #0]
   d8390:	07d2      	lsls	r2, r2, #31
   d8392:	bf5c      	itt	pl
   d8394:	2201      	movpl	r2, #1
   d8396:	601a      	strpl	r2, [r3, #0]
   d8398:	4770      	bx	lr
   d839a:	bf00      	nop
   d839c:	2003e674 	.word	0x2003e674
   d83a0:	2003e670 	.word	0x2003e670
   d83a4:	2003e66c 	.word	0x2003e66c
   d83a8:	2003e668 	.word	0x2003e668
   d83ac:	2003e664 	.word	0x2003e664
   d83b0:	2003e660 	.word	0x2003e660
   d83b4:	2003e65c 	.word	0x2003e65c
   d83b8:	2003e658 	.word	0x2003e658

000d83bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d83bc:	4b18      	ldr	r3, [pc, #96]	; (d8420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d83be:	681a      	ldr	r2, [r3, #0]
   d83c0:	07d1      	lsls	r1, r2, #31
   d83c2:	bf5c      	itt	pl
   d83c4:	2201      	movpl	r2, #1
   d83c6:	601a      	strpl	r2, [r3, #0]
   d83c8:	4b16      	ldr	r3, [pc, #88]	; (d8424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d83ca:	681a      	ldr	r2, [r3, #0]
   d83cc:	07d2      	lsls	r2, r2, #31
   d83ce:	bf5c      	itt	pl
   d83d0:	2201      	movpl	r2, #1
   d83d2:	601a      	strpl	r2, [r3, #0]
   d83d4:	4b14      	ldr	r3, [pc, #80]	; (d8428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d83d6:	681a      	ldr	r2, [r3, #0]
   d83d8:	07d0      	lsls	r0, r2, #31
   d83da:	bf5c      	itt	pl
   d83dc:	2201      	movpl	r2, #1
   d83de:	601a      	strpl	r2, [r3, #0]
   d83e0:	4b12      	ldr	r3, [pc, #72]	; (d842c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d83e2:	681a      	ldr	r2, [r3, #0]
   d83e4:	07d1      	lsls	r1, r2, #31
   d83e6:	bf5c      	itt	pl
   d83e8:	2201      	movpl	r2, #1
   d83ea:	601a      	strpl	r2, [r3, #0]
   d83ec:	4b10      	ldr	r3, [pc, #64]	; (d8430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d83ee:	681a      	ldr	r2, [r3, #0]
   d83f0:	07d2      	lsls	r2, r2, #31
   d83f2:	bf5c      	itt	pl
   d83f4:	2201      	movpl	r2, #1
   d83f6:	601a      	strpl	r2, [r3, #0]
   d83f8:	4b0e      	ldr	r3, [pc, #56]	; (d8434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d83fa:	681a      	ldr	r2, [r3, #0]
   d83fc:	07d0      	lsls	r0, r2, #31
   d83fe:	bf5c      	itt	pl
   d8400:	2201      	movpl	r2, #1
   d8402:	601a      	strpl	r2, [r3, #0]
   d8404:	4b0c      	ldr	r3, [pc, #48]	; (d8438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8406:	681a      	ldr	r2, [r3, #0]
   d8408:	07d1      	lsls	r1, r2, #31
   d840a:	bf5c      	itt	pl
   d840c:	2201      	movpl	r2, #1
   d840e:	601a      	strpl	r2, [r3, #0]
   d8410:	4b0a      	ldr	r3, [pc, #40]	; (d843c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8412:	681a      	ldr	r2, [r3, #0]
   d8414:	07d2      	lsls	r2, r2, #31
   d8416:	bf5c      	itt	pl
   d8418:	2201      	movpl	r2, #1
   d841a:	601a      	strpl	r2, [r3, #0]
   d841c:	4770      	bx	lr
   d841e:	bf00      	nop
   d8420:	2003e694 	.word	0x2003e694
   d8424:	2003e690 	.word	0x2003e690
   d8428:	2003e68c 	.word	0x2003e68c
   d842c:	2003e688 	.word	0x2003e688
   d8430:	2003e684 	.word	0x2003e684
   d8434:	2003e680 	.word	0x2003e680
   d8438:	2003e67c 	.word	0x2003e67c
   d843c:	2003e678 	.word	0x2003e678

000d8440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8440:	4b24      	ldr	r3, [pc, #144]	; (d84d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8442:	681a      	ldr	r2, [r3, #0]
   d8444:	07d0      	lsls	r0, r2, #31
   d8446:	bf5c      	itt	pl
   d8448:	2201      	movpl	r2, #1
   d844a:	601a      	strpl	r2, [r3, #0]
   d844c:	4b22      	ldr	r3, [pc, #136]	; (d84d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d844e:	681a      	ldr	r2, [r3, #0]
   d8450:	07d1      	lsls	r1, r2, #31
   d8452:	bf5c      	itt	pl
   d8454:	2201      	movpl	r2, #1
   d8456:	601a      	strpl	r2, [r3, #0]
   d8458:	4b20      	ldr	r3, [pc, #128]	; (d84dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d845a:	681a      	ldr	r2, [r3, #0]
   d845c:	07d2      	lsls	r2, r2, #31
   d845e:	bf5c      	itt	pl
   d8460:	2201      	movpl	r2, #1
   d8462:	601a      	strpl	r2, [r3, #0]
   d8464:	4b1e      	ldr	r3, [pc, #120]	; (d84e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8466:	681a      	ldr	r2, [r3, #0]
   d8468:	07d0      	lsls	r0, r2, #31
   d846a:	bf5c      	itt	pl
   d846c:	2201      	movpl	r2, #1
   d846e:	601a      	strpl	r2, [r3, #0]
   d8470:	4b1c      	ldr	r3, [pc, #112]	; (d84e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8472:	681a      	ldr	r2, [r3, #0]
   d8474:	07d1      	lsls	r1, r2, #31
   d8476:	bf5c      	itt	pl
   d8478:	2201      	movpl	r2, #1
   d847a:	601a      	strpl	r2, [r3, #0]
   d847c:	4b1a      	ldr	r3, [pc, #104]	; (d84e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d847e:	681a      	ldr	r2, [r3, #0]
   d8480:	07d2      	lsls	r2, r2, #31
   d8482:	bf5c      	itt	pl
   d8484:	2201      	movpl	r2, #1
   d8486:	601a      	strpl	r2, [r3, #0]
   d8488:	4b18      	ldr	r3, [pc, #96]	; (d84ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d848a:	681a      	ldr	r2, [r3, #0]
   d848c:	07d0      	lsls	r0, r2, #31
   d848e:	bf5c      	itt	pl
   d8490:	2201      	movpl	r2, #1
   d8492:	601a      	strpl	r2, [r3, #0]
   d8494:	4b16      	ldr	r3, [pc, #88]	; (d84f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8496:	681a      	ldr	r2, [r3, #0]
   d8498:	07d1      	lsls	r1, r2, #31
   d849a:	bf5c      	itt	pl
   d849c:	2201      	movpl	r2, #1
   d849e:	601a      	strpl	r2, [r3, #0]
   d84a0:	4b14      	ldr	r3, [pc, #80]	; (d84f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d84a2:	681a      	ldr	r2, [r3, #0]
   d84a4:	07d2      	lsls	r2, r2, #31
   d84a6:	bf5c      	itt	pl
   d84a8:	2201      	movpl	r2, #1
   d84aa:	601a      	strpl	r2, [r3, #0]
   d84ac:	4b12      	ldr	r3, [pc, #72]	; (d84f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d84ae:	681a      	ldr	r2, [r3, #0]
   d84b0:	07d0      	lsls	r0, r2, #31
   d84b2:	bf5c      	itt	pl
   d84b4:	2201      	movpl	r2, #1
   d84b6:	601a      	strpl	r2, [r3, #0]
   d84b8:	4b10      	ldr	r3, [pc, #64]	; (d84fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d84ba:	681a      	ldr	r2, [r3, #0]
   d84bc:	07d1      	lsls	r1, r2, #31
   d84be:	bf5c      	itt	pl
   d84c0:	2201      	movpl	r2, #1
   d84c2:	601a      	strpl	r2, [r3, #0]
   d84c4:	4b0e      	ldr	r3, [pc, #56]	; (d8500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d84c6:	681a      	ldr	r2, [r3, #0]
   d84c8:	07d2      	lsls	r2, r2, #31
   d84ca:	bf5c      	itt	pl
   d84cc:	2201      	movpl	r2, #1
   d84ce:	601a      	strpl	r2, [r3, #0]
   d84d0:	4770      	bx	lr
   d84d2:	bf00      	nop
   d84d4:	2003e6c4 	.word	0x2003e6c4
   d84d8:	2003e6c0 	.word	0x2003e6c0
   d84dc:	2003e6bc 	.word	0x2003e6bc
   d84e0:	2003e6b8 	.word	0x2003e6b8
   d84e4:	2003e6b4 	.word	0x2003e6b4
   d84e8:	2003e6b0 	.word	0x2003e6b0
   d84ec:	2003e6ac 	.word	0x2003e6ac
   d84f0:	2003e6a8 	.word	0x2003e6a8
   d84f4:	2003e6a4 	.word	0x2003e6a4
   d84f8:	2003e6a0 	.word	0x2003e6a0
   d84fc:	2003e69c 	.word	0x2003e69c
   d8500:	2003e698 	.word	0x2003e698

000d8504 <__aeabi_drsub>:
   d8504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8508:	e002      	b.n	d8510 <__adddf3>
   d850a:	bf00      	nop

000d850c <__aeabi_dsub>:
   d850c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8510 <__adddf3>:
   d8510:	b530      	push	{r4, r5, lr}
   d8512:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8516:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d851a:	ea94 0f05 	teq	r4, r5
   d851e:	bf08      	it	eq
   d8520:	ea90 0f02 	teqeq	r0, r2
   d8524:	bf1f      	itttt	ne
   d8526:	ea54 0c00 	orrsne.w	ip, r4, r0
   d852a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d852e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8536:	f000 80e2 	beq.w	d86fe <__adddf3+0x1ee>
   d853a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d853e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8542:	bfb8      	it	lt
   d8544:	426d      	neglt	r5, r5
   d8546:	dd0c      	ble.n	d8562 <__adddf3+0x52>
   d8548:	442c      	add	r4, r5
   d854a:	ea80 0202 	eor.w	r2, r0, r2
   d854e:	ea81 0303 	eor.w	r3, r1, r3
   d8552:	ea82 0000 	eor.w	r0, r2, r0
   d8556:	ea83 0101 	eor.w	r1, r3, r1
   d855a:	ea80 0202 	eor.w	r2, r0, r2
   d855e:	ea81 0303 	eor.w	r3, r1, r3
   d8562:	2d36      	cmp	r5, #54	; 0x36
   d8564:	bf88      	it	hi
   d8566:	bd30      	pophi	{r4, r5, pc}
   d8568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d856c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8578:	d002      	beq.n	d8580 <__adddf3+0x70>
   d857a:	4240      	negs	r0, r0
   d857c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8584:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d858c:	d002      	beq.n	d8594 <__adddf3+0x84>
   d858e:	4252      	negs	r2, r2
   d8590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8594:	ea94 0f05 	teq	r4, r5
   d8598:	f000 80a7 	beq.w	d86ea <__adddf3+0x1da>
   d859c:	f1a4 0401 	sub.w	r4, r4, #1
   d85a0:	f1d5 0e20 	rsbs	lr, r5, #32
   d85a4:	db0d      	blt.n	d85c2 <__adddf3+0xb2>
   d85a6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d85aa:	fa22 f205 	lsr.w	r2, r2, r5
   d85ae:	1880      	adds	r0, r0, r2
   d85b0:	f141 0100 	adc.w	r1, r1, #0
   d85b4:	fa03 f20e 	lsl.w	r2, r3, lr
   d85b8:	1880      	adds	r0, r0, r2
   d85ba:	fa43 f305 	asr.w	r3, r3, r5
   d85be:	4159      	adcs	r1, r3
   d85c0:	e00e      	b.n	d85e0 <__adddf3+0xd0>
   d85c2:	f1a5 0520 	sub.w	r5, r5, #32
   d85c6:	f10e 0e20 	add.w	lr, lr, #32
   d85ca:	2a01      	cmp	r2, #1
   d85cc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d85d0:	bf28      	it	cs
   d85d2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d85d6:	fa43 f305 	asr.w	r3, r3, r5
   d85da:	18c0      	adds	r0, r0, r3
   d85dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d85e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d85e4:	d507      	bpl.n	d85f6 <__adddf3+0xe6>
   d85e6:	f04f 0e00 	mov.w	lr, #0
   d85ea:	f1dc 0c00 	rsbs	ip, ip, #0
   d85ee:	eb7e 0000 	sbcs.w	r0, lr, r0
   d85f2:	eb6e 0101 	sbc.w	r1, lr, r1
   d85f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d85fa:	d31b      	bcc.n	d8634 <__adddf3+0x124>
   d85fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8600:	d30c      	bcc.n	d861c <__adddf3+0x10c>
   d8602:	0849      	lsrs	r1, r1, #1
   d8604:	ea5f 0030 	movs.w	r0, r0, rrx
   d8608:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d860c:	f104 0401 	add.w	r4, r4, #1
   d8610:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8618:	f080 809a 	bcs.w	d8750 <__adddf3+0x240>
   d861c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8620:	bf08      	it	eq
   d8622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8626:	f150 0000 	adcs.w	r0, r0, #0
   d862a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d862e:	ea41 0105 	orr.w	r1, r1, r5
   d8632:	bd30      	pop	{r4, r5, pc}
   d8634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8638:	4140      	adcs	r0, r0
   d863a:	eb41 0101 	adc.w	r1, r1, r1
   d863e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8642:	f1a4 0401 	sub.w	r4, r4, #1
   d8646:	d1e9      	bne.n	d861c <__adddf3+0x10c>
   d8648:	f091 0f00 	teq	r1, #0
   d864c:	bf04      	itt	eq
   d864e:	4601      	moveq	r1, r0
   d8650:	2000      	moveq	r0, #0
   d8652:	fab1 f381 	clz	r3, r1
   d8656:	bf08      	it	eq
   d8658:	3320      	addeq	r3, #32
   d865a:	f1a3 030b 	sub.w	r3, r3, #11
   d865e:	f1b3 0220 	subs.w	r2, r3, #32
   d8662:	da0c      	bge.n	d867e <__adddf3+0x16e>
   d8664:	320c      	adds	r2, #12
   d8666:	dd08      	ble.n	d867a <__adddf3+0x16a>
   d8668:	f102 0c14 	add.w	ip, r2, #20
   d866c:	f1c2 020c 	rsb	r2, r2, #12
   d8670:	fa01 f00c 	lsl.w	r0, r1, ip
   d8674:	fa21 f102 	lsr.w	r1, r1, r2
   d8678:	e00c      	b.n	d8694 <__adddf3+0x184>
   d867a:	f102 0214 	add.w	r2, r2, #20
   d867e:	bfd8      	it	le
   d8680:	f1c2 0c20 	rsble	ip, r2, #32
   d8684:	fa01 f102 	lsl.w	r1, r1, r2
   d8688:	fa20 fc0c 	lsr.w	ip, r0, ip
   d868c:	bfdc      	itt	le
   d868e:	ea41 010c 	orrle.w	r1, r1, ip
   d8692:	4090      	lslle	r0, r2
   d8694:	1ae4      	subs	r4, r4, r3
   d8696:	bfa2      	ittt	ge
   d8698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d869c:	4329      	orrge	r1, r5
   d869e:	bd30      	popge	{r4, r5, pc}
   d86a0:	ea6f 0404 	mvn.w	r4, r4
   d86a4:	3c1f      	subs	r4, #31
   d86a6:	da1c      	bge.n	d86e2 <__adddf3+0x1d2>
   d86a8:	340c      	adds	r4, #12
   d86aa:	dc0e      	bgt.n	d86ca <__adddf3+0x1ba>
   d86ac:	f104 0414 	add.w	r4, r4, #20
   d86b0:	f1c4 0220 	rsb	r2, r4, #32
   d86b4:	fa20 f004 	lsr.w	r0, r0, r4
   d86b8:	fa01 f302 	lsl.w	r3, r1, r2
   d86bc:	ea40 0003 	orr.w	r0, r0, r3
   d86c0:	fa21 f304 	lsr.w	r3, r1, r4
   d86c4:	ea45 0103 	orr.w	r1, r5, r3
   d86c8:	bd30      	pop	{r4, r5, pc}
   d86ca:	f1c4 040c 	rsb	r4, r4, #12
   d86ce:	f1c4 0220 	rsb	r2, r4, #32
   d86d2:	fa20 f002 	lsr.w	r0, r0, r2
   d86d6:	fa01 f304 	lsl.w	r3, r1, r4
   d86da:	ea40 0003 	orr.w	r0, r0, r3
   d86de:	4629      	mov	r1, r5
   d86e0:	bd30      	pop	{r4, r5, pc}
   d86e2:	fa21 f004 	lsr.w	r0, r1, r4
   d86e6:	4629      	mov	r1, r5
   d86e8:	bd30      	pop	{r4, r5, pc}
   d86ea:	f094 0f00 	teq	r4, #0
   d86ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d86f2:	bf06      	itte	eq
   d86f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d86f8:	3401      	addeq	r4, #1
   d86fa:	3d01      	subne	r5, #1
   d86fc:	e74e      	b.n	d859c <__adddf3+0x8c>
   d86fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8702:	bf18      	it	ne
   d8704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8708:	d029      	beq.n	d875e <__adddf3+0x24e>
   d870a:	ea94 0f05 	teq	r4, r5
   d870e:	bf08      	it	eq
   d8710:	ea90 0f02 	teqeq	r0, r2
   d8714:	d005      	beq.n	d8722 <__adddf3+0x212>
   d8716:	ea54 0c00 	orrs.w	ip, r4, r0
   d871a:	bf04      	itt	eq
   d871c:	4619      	moveq	r1, r3
   d871e:	4610      	moveq	r0, r2
   d8720:	bd30      	pop	{r4, r5, pc}
   d8722:	ea91 0f03 	teq	r1, r3
   d8726:	bf1e      	ittt	ne
   d8728:	2100      	movne	r1, #0
   d872a:	2000      	movne	r0, #0
   d872c:	bd30      	popne	{r4, r5, pc}
   d872e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8732:	d105      	bne.n	d8740 <__adddf3+0x230>
   d8734:	0040      	lsls	r0, r0, #1
   d8736:	4149      	adcs	r1, r1
   d8738:	bf28      	it	cs
   d873a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d873e:	bd30      	pop	{r4, r5, pc}
   d8740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8744:	bf3c      	itt	cc
   d8746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d874a:	bd30      	popcc	{r4, r5, pc}
   d874c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8758:	f04f 0000 	mov.w	r0, #0
   d875c:	bd30      	pop	{r4, r5, pc}
   d875e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8762:	bf1a      	itte	ne
   d8764:	4619      	movne	r1, r3
   d8766:	4610      	movne	r0, r2
   d8768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d876c:	bf1c      	itt	ne
   d876e:	460b      	movne	r3, r1
   d8770:	4602      	movne	r2, r0
   d8772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8776:	bf06      	itte	eq
   d8778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d877c:	ea91 0f03 	teqeq	r1, r3
   d8780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8784:	bd30      	pop	{r4, r5, pc}
   d8786:	bf00      	nop

000d8788 <__aeabi_ui2d>:
   d8788:	f090 0f00 	teq	r0, #0
   d878c:	bf04      	itt	eq
   d878e:	2100      	moveq	r1, #0
   d8790:	4770      	bxeq	lr
   d8792:	b530      	push	{r4, r5, lr}
   d8794:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8798:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d879c:	f04f 0500 	mov.w	r5, #0
   d87a0:	f04f 0100 	mov.w	r1, #0
   d87a4:	e750      	b.n	d8648 <__adddf3+0x138>
   d87a6:	bf00      	nop

000d87a8 <__aeabi_i2d>:
   d87a8:	f090 0f00 	teq	r0, #0
   d87ac:	bf04      	itt	eq
   d87ae:	2100      	moveq	r1, #0
   d87b0:	4770      	bxeq	lr
   d87b2:	b530      	push	{r4, r5, lr}
   d87b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d87b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d87bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d87c0:	bf48      	it	mi
   d87c2:	4240      	negmi	r0, r0
   d87c4:	f04f 0100 	mov.w	r1, #0
   d87c8:	e73e      	b.n	d8648 <__adddf3+0x138>
   d87ca:	bf00      	nop

000d87cc <__aeabi_f2d>:
   d87cc:	0042      	lsls	r2, r0, #1
   d87ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d87d2:	ea4f 0131 	mov.w	r1, r1, rrx
   d87d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d87da:	bf1f      	itttt	ne
   d87dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d87e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d87e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d87e8:	4770      	bxne	lr
   d87ea:	f092 0f00 	teq	r2, #0
   d87ee:	bf14      	ite	ne
   d87f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d87f4:	4770      	bxeq	lr
   d87f6:	b530      	push	{r4, r5, lr}
   d87f8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d87fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8804:	e720      	b.n	d8648 <__adddf3+0x138>
   d8806:	bf00      	nop

000d8808 <__aeabi_ul2d>:
   d8808:	ea50 0201 	orrs.w	r2, r0, r1
   d880c:	bf08      	it	eq
   d880e:	4770      	bxeq	lr
   d8810:	b530      	push	{r4, r5, lr}
   d8812:	f04f 0500 	mov.w	r5, #0
   d8816:	e00a      	b.n	d882e <__aeabi_l2d+0x16>

000d8818 <__aeabi_l2d>:
   d8818:	ea50 0201 	orrs.w	r2, r0, r1
   d881c:	bf08      	it	eq
   d881e:	4770      	bxeq	lr
   d8820:	b530      	push	{r4, r5, lr}
   d8822:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8826:	d502      	bpl.n	d882e <__aeabi_l2d+0x16>
   d8828:	4240      	negs	r0, r0
   d882a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d882e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8832:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8836:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d883a:	f43f aedc 	beq.w	d85f6 <__adddf3+0xe6>
   d883e:	f04f 0203 	mov.w	r2, #3
   d8842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8846:	bf18      	it	ne
   d8848:	3203      	addne	r2, #3
   d884a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d884e:	bf18      	it	ne
   d8850:	3203      	addne	r2, #3
   d8852:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8856:	f1c2 0320 	rsb	r3, r2, #32
   d885a:	fa00 fc03 	lsl.w	ip, r0, r3
   d885e:	fa20 f002 	lsr.w	r0, r0, r2
   d8862:	fa01 fe03 	lsl.w	lr, r1, r3
   d8866:	ea40 000e 	orr.w	r0, r0, lr
   d886a:	fa21 f102 	lsr.w	r1, r1, r2
   d886e:	4414      	add	r4, r2
   d8870:	e6c1      	b.n	d85f6 <__adddf3+0xe6>
   d8872:	bf00      	nop

000d8874 <__aeabi_dmul>:
   d8874:	b570      	push	{r4, r5, r6, lr}
   d8876:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d887a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d887e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8882:	bf1d      	ittte	ne
   d8884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8888:	ea94 0f0c 	teqne	r4, ip
   d888c:	ea95 0f0c 	teqne	r5, ip
   d8890:	f000 f8de 	bleq	d8a50 <__aeabi_dmul+0x1dc>
   d8894:	442c      	add	r4, r5
   d8896:	ea81 0603 	eor.w	r6, r1, r3
   d889a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d889e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d88a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d88a6:	bf18      	it	ne
   d88a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d88ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d88b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d88b4:	d038      	beq.n	d8928 <__aeabi_dmul+0xb4>
   d88b6:	fba0 ce02 	umull	ip, lr, r0, r2
   d88ba:	f04f 0500 	mov.w	r5, #0
   d88be:	fbe1 e502 	umlal	lr, r5, r1, r2
   d88c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d88c6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d88ca:	f04f 0600 	mov.w	r6, #0
   d88ce:	fbe1 5603 	umlal	r5, r6, r1, r3
   d88d2:	f09c 0f00 	teq	ip, #0
   d88d6:	bf18      	it	ne
   d88d8:	f04e 0e01 	orrne.w	lr, lr, #1
   d88dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d88e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d88e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d88e8:	d204      	bcs.n	d88f4 <__aeabi_dmul+0x80>
   d88ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d88ee:	416d      	adcs	r5, r5
   d88f0:	eb46 0606 	adc.w	r6, r6, r6
   d88f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d88f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d88fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8900:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8904:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8908:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d890c:	bf88      	it	hi
   d890e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8912:	d81e      	bhi.n	d8952 <__aeabi_dmul+0xde>
   d8914:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8918:	bf08      	it	eq
   d891a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d891e:	f150 0000 	adcs.w	r0, r0, #0
   d8922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8926:	bd70      	pop	{r4, r5, r6, pc}
   d8928:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d892c:	ea46 0101 	orr.w	r1, r6, r1
   d8930:	ea40 0002 	orr.w	r0, r0, r2
   d8934:	ea81 0103 	eor.w	r1, r1, r3
   d8938:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d893c:	bfc2      	ittt	gt
   d893e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8946:	bd70      	popgt	{r4, r5, r6, pc}
   d8948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d894c:	f04f 0e00 	mov.w	lr, #0
   d8950:	3c01      	subs	r4, #1
   d8952:	f300 80ab 	bgt.w	d8aac <__aeabi_dmul+0x238>
   d8956:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d895a:	bfde      	ittt	le
   d895c:	2000      	movle	r0, #0
   d895e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8962:	bd70      	pople	{r4, r5, r6, pc}
   d8964:	f1c4 0400 	rsb	r4, r4, #0
   d8968:	3c20      	subs	r4, #32
   d896a:	da35      	bge.n	d89d8 <__aeabi_dmul+0x164>
   d896c:	340c      	adds	r4, #12
   d896e:	dc1b      	bgt.n	d89a8 <__aeabi_dmul+0x134>
   d8970:	f104 0414 	add.w	r4, r4, #20
   d8974:	f1c4 0520 	rsb	r5, r4, #32
   d8978:	fa00 f305 	lsl.w	r3, r0, r5
   d897c:	fa20 f004 	lsr.w	r0, r0, r4
   d8980:	fa01 f205 	lsl.w	r2, r1, r5
   d8984:	ea40 0002 	orr.w	r0, r0, r2
   d8988:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d898c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8990:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8994:	fa21 f604 	lsr.w	r6, r1, r4
   d8998:	eb42 0106 	adc.w	r1, r2, r6
   d899c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d89a0:	bf08      	it	eq
   d89a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d89a6:	bd70      	pop	{r4, r5, r6, pc}
   d89a8:	f1c4 040c 	rsb	r4, r4, #12
   d89ac:	f1c4 0520 	rsb	r5, r4, #32
   d89b0:	fa00 f304 	lsl.w	r3, r0, r4
   d89b4:	fa20 f005 	lsr.w	r0, r0, r5
   d89b8:	fa01 f204 	lsl.w	r2, r1, r4
   d89bc:	ea40 0002 	orr.w	r0, r0, r2
   d89c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d89c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d89c8:	f141 0100 	adc.w	r1, r1, #0
   d89cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d89d0:	bf08      	it	eq
   d89d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d89d6:	bd70      	pop	{r4, r5, r6, pc}
   d89d8:	f1c4 0520 	rsb	r5, r4, #32
   d89dc:	fa00 f205 	lsl.w	r2, r0, r5
   d89e0:	ea4e 0e02 	orr.w	lr, lr, r2
   d89e4:	fa20 f304 	lsr.w	r3, r0, r4
   d89e8:	fa01 f205 	lsl.w	r2, r1, r5
   d89ec:	ea43 0302 	orr.w	r3, r3, r2
   d89f0:	fa21 f004 	lsr.w	r0, r1, r4
   d89f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d89f8:	fa21 f204 	lsr.w	r2, r1, r4
   d89fc:	ea20 0002 	bic.w	r0, r0, r2
   d8a00:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8a04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8a08:	bf08      	it	eq
   d8a0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8a0e:	bd70      	pop	{r4, r5, r6, pc}
   d8a10:	f094 0f00 	teq	r4, #0
   d8a14:	d10f      	bne.n	d8a36 <__aeabi_dmul+0x1c2>
   d8a16:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8a1a:	0040      	lsls	r0, r0, #1
   d8a1c:	eb41 0101 	adc.w	r1, r1, r1
   d8a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8a24:	bf08      	it	eq
   d8a26:	3c01      	subeq	r4, #1
   d8a28:	d0f7      	beq.n	d8a1a <__aeabi_dmul+0x1a6>
   d8a2a:	ea41 0106 	orr.w	r1, r1, r6
   d8a2e:	f095 0f00 	teq	r5, #0
   d8a32:	bf18      	it	ne
   d8a34:	4770      	bxne	lr
   d8a36:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8a3a:	0052      	lsls	r2, r2, #1
   d8a3c:	eb43 0303 	adc.w	r3, r3, r3
   d8a40:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8a44:	bf08      	it	eq
   d8a46:	3d01      	subeq	r5, #1
   d8a48:	d0f7      	beq.n	d8a3a <__aeabi_dmul+0x1c6>
   d8a4a:	ea43 0306 	orr.w	r3, r3, r6
   d8a4e:	4770      	bx	lr
   d8a50:	ea94 0f0c 	teq	r4, ip
   d8a54:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8a58:	bf18      	it	ne
   d8a5a:	ea95 0f0c 	teqne	r5, ip
   d8a5e:	d00c      	beq.n	d8a7a <__aeabi_dmul+0x206>
   d8a60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8a64:	bf18      	it	ne
   d8a66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8a6a:	d1d1      	bne.n	d8a10 <__aeabi_dmul+0x19c>
   d8a6c:	ea81 0103 	eor.w	r1, r1, r3
   d8a70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8a74:	f04f 0000 	mov.w	r0, #0
   d8a78:	bd70      	pop	{r4, r5, r6, pc}
   d8a7a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8a7e:	bf06      	itte	eq
   d8a80:	4610      	moveq	r0, r2
   d8a82:	4619      	moveq	r1, r3
   d8a84:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8a88:	d019      	beq.n	d8abe <__aeabi_dmul+0x24a>
   d8a8a:	ea94 0f0c 	teq	r4, ip
   d8a8e:	d102      	bne.n	d8a96 <__aeabi_dmul+0x222>
   d8a90:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8a94:	d113      	bne.n	d8abe <__aeabi_dmul+0x24a>
   d8a96:	ea95 0f0c 	teq	r5, ip
   d8a9a:	d105      	bne.n	d8aa8 <__aeabi_dmul+0x234>
   d8a9c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8aa0:	bf1c      	itt	ne
   d8aa2:	4610      	movne	r0, r2
   d8aa4:	4619      	movne	r1, r3
   d8aa6:	d10a      	bne.n	d8abe <__aeabi_dmul+0x24a>
   d8aa8:	ea81 0103 	eor.w	r1, r1, r3
   d8aac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8ab0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8ab4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8ab8:	f04f 0000 	mov.w	r0, #0
   d8abc:	bd70      	pop	{r4, r5, r6, pc}
   d8abe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8ac2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8ac6:	bd70      	pop	{r4, r5, r6, pc}

000d8ac8 <__aeabi_ddiv>:
   d8ac8:	b570      	push	{r4, r5, r6, lr}
   d8aca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8ace:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8ad2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8ad6:	bf1d      	ittte	ne
   d8ad8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8adc:	ea94 0f0c 	teqne	r4, ip
   d8ae0:	ea95 0f0c 	teqne	r5, ip
   d8ae4:	f000 f8a7 	bleq	d8c36 <__aeabi_ddiv+0x16e>
   d8ae8:	eba4 0405 	sub.w	r4, r4, r5
   d8aec:	ea81 0e03 	eor.w	lr, r1, r3
   d8af0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8af4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8af8:	f000 8088 	beq.w	d8c0c <__aeabi_ddiv+0x144>
   d8afc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8b00:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8b04:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8b08:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8b0c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8b10:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8b14:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8b18:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8b1c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8b20:	429d      	cmp	r5, r3
   d8b22:	bf08      	it	eq
   d8b24:	4296      	cmpeq	r6, r2
   d8b26:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8b2a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8b2e:	d202      	bcs.n	d8b36 <__aeabi_ddiv+0x6e>
   d8b30:	085b      	lsrs	r3, r3, #1
   d8b32:	ea4f 0232 	mov.w	r2, r2, rrx
   d8b36:	1ab6      	subs	r6, r6, r2
   d8b38:	eb65 0503 	sbc.w	r5, r5, r3
   d8b3c:	085b      	lsrs	r3, r3, #1
   d8b3e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8b42:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8b46:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8b4a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8b4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8b52:	bf22      	ittt	cs
   d8b54:	1ab6      	subcs	r6, r6, r2
   d8b56:	4675      	movcs	r5, lr
   d8b58:	ea40 000c 	orrcs.w	r0, r0, ip
   d8b5c:	085b      	lsrs	r3, r3, #1
   d8b5e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8b62:	ebb6 0e02 	subs.w	lr, r6, r2
   d8b66:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8b6a:	bf22      	ittt	cs
   d8b6c:	1ab6      	subcs	r6, r6, r2
   d8b6e:	4675      	movcs	r5, lr
   d8b70:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8b74:	085b      	lsrs	r3, r3, #1
   d8b76:	ea4f 0232 	mov.w	r2, r2, rrx
   d8b7a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8b7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8b82:	bf22      	ittt	cs
   d8b84:	1ab6      	subcs	r6, r6, r2
   d8b86:	4675      	movcs	r5, lr
   d8b88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8b8c:	085b      	lsrs	r3, r3, #1
   d8b8e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8b92:	ebb6 0e02 	subs.w	lr, r6, r2
   d8b96:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8b9a:	bf22      	ittt	cs
   d8b9c:	1ab6      	subcs	r6, r6, r2
   d8b9e:	4675      	movcs	r5, lr
   d8ba0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8ba4:	ea55 0e06 	orrs.w	lr, r5, r6
   d8ba8:	d018      	beq.n	d8bdc <__aeabi_ddiv+0x114>
   d8baa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8bae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8bb2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8bb6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8bba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8bbe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8bc2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8bc6:	d1c0      	bne.n	d8b4a <__aeabi_ddiv+0x82>
   d8bc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8bcc:	d10b      	bne.n	d8be6 <__aeabi_ddiv+0x11e>
   d8bce:	ea41 0100 	orr.w	r1, r1, r0
   d8bd2:	f04f 0000 	mov.w	r0, #0
   d8bd6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8bda:	e7b6      	b.n	d8b4a <__aeabi_ddiv+0x82>
   d8bdc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8be0:	bf04      	itt	eq
   d8be2:	4301      	orreq	r1, r0
   d8be4:	2000      	moveq	r0, #0
   d8be6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8bea:	bf88      	it	hi
   d8bec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8bf0:	f63f aeaf 	bhi.w	d8952 <__aeabi_dmul+0xde>
   d8bf4:	ebb5 0c03 	subs.w	ip, r5, r3
   d8bf8:	bf04      	itt	eq
   d8bfa:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8bfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8c02:	f150 0000 	adcs.w	r0, r0, #0
   d8c06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8c0a:	bd70      	pop	{r4, r5, r6, pc}
   d8c0c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8c10:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8c14:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8c18:	bfc2      	ittt	gt
   d8c1a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8c1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8c22:	bd70      	popgt	{r4, r5, r6, pc}
   d8c24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8c28:	f04f 0e00 	mov.w	lr, #0
   d8c2c:	3c01      	subs	r4, #1
   d8c2e:	e690      	b.n	d8952 <__aeabi_dmul+0xde>
   d8c30:	ea45 0e06 	orr.w	lr, r5, r6
   d8c34:	e68d      	b.n	d8952 <__aeabi_dmul+0xde>
   d8c36:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8c3a:	ea94 0f0c 	teq	r4, ip
   d8c3e:	bf08      	it	eq
   d8c40:	ea95 0f0c 	teqeq	r5, ip
   d8c44:	f43f af3b 	beq.w	d8abe <__aeabi_dmul+0x24a>
   d8c48:	ea94 0f0c 	teq	r4, ip
   d8c4c:	d10a      	bne.n	d8c64 <__aeabi_ddiv+0x19c>
   d8c4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8c52:	f47f af34 	bne.w	d8abe <__aeabi_dmul+0x24a>
   d8c56:	ea95 0f0c 	teq	r5, ip
   d8c5a:	f47f af25 	bne.w	d8aa8 <__aeabi_dmul+0x234>
   d8c5e:	4610      	mov	r0, r2
   d8c60:	4619      	mov	r1, r3
   d8c62:	e72c      	b.n	d8abe <__aeabi_dmul+0x24a>
   d8c64:	ea95 0f0c 	teq	r5, ip
   d8c68:	d106      	bne.n	d8c78 <__aeabi_ddiv+0x1b0>
   d8c6a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8c6e:	f43f aefd 	beq.w	d8a6c <__aeabi_dmul+0x1f8>
   d8c72:	4610      	mov	r0, r2
   d8c74:	4619      	mov	r1, r3
   d8c76:	e722      	b.n	d8abe <__aeabi_dmul+0x24a>
   d8c78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8c7c:	bf18      	it	ne
   d8c7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8c82:	f47f aec5 	bne.w	d8a10 <__aeabi_dmul+0x19c>
   d8c86:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8c8a:	f47f af0d 	bne.w	d8aa8 <__aeabi_dmul+0x234>
   d8c8e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8c92:	f47f aeeb 	bne.w	d8a6c <__aeabi_dmul+0x1f8>
   d8c96:	e712      	b.n	d8abe <__aeabi_dmul+0x24a>

000d8c98 <__aeabi_d2f>:
   d8c98:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8c9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8ca0:	bf24      	itt	cs
   d8ca2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8ca6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8caa:	d90d      	bls.n	d8cc8 <__aeabi_d2f+0x30>
   d8cac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8cb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8cb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8cb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8cbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8cc0:	bf08      	it	eq
   d8cc2:	f020 0001 	biceq.w	r0, r0, #1
   d8cc6:	4770      	bx	lr
   d8cc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8ccc:	d121      	bne.n	d8d12 <__aeabi_d2f+0x7a>
   d8cce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8cd2:	bfbc      	itt	lt
   d8cd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8cd8:	4770      	bxlt	lr
   d8cda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8cde:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8ce2:	f1c2 0218 	rsb	r2, r2, #24
   d8ce6:	f1c2 0c20 	rsb	ip, r2, #32
   d8cea:	fa10 f30c 	lsls.w	r3, r0, ip
   d8cee:	fa20 f002 	lsr.w	r0, r0, r2
   d8cf2:	bf18      	it	ne
   d8cf4:	f040 0001 	orrne.w	r0, r0, #1
   d8cf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8cfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8d00:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8d04:	ea40 000c 	orr.w	r0, r0, ip
   d8d08:	fa23 f302 	lsr.w	r3, r3, r2
   d8d0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8d10:	e7cc      	b.n	d8cac <__aeabi_d2f+0x14>
   d8d12:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8d16:	d107      	bne.n	d8d28 <__aeabi_d2f+0x90>
   d8d18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8d1c:	bf1e      	ittt	ne
   d8d1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8d22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8d26:	4770      	bxne	lr
   d8d28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8d2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8d30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8d34:	4770      	bx	lr
   d8d36:	bf00      	nop

000d8d38 <asctime>:
   d8d38:	4b09      	ldr	r3, [pc, #36]	; (d8d60 <asctime+0x28>)
   d8d3a:	b570      	push	{r4, r5, r6, lr}
   d8d3c:	681c      	ldr	r4, [r3, #0]
   d8d3e:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d8d40:	4606      	mov	r6, r0
   d8d42:	b93d      	cbnz	r5, d8d54 <asctime+0x1c>
   d8d44:	201a      	movs	r0, #26
   d8d46:	f7fc fd8b 	bl	d5860 <malloc>
   d8d4a:	221a      	movs	r2, #26
   d8d4c:	6420      	str	r0, [r4, #64]	; 0x40
   d8d4e:	4629      	mov	r1, r5
   d8d50:	f000 fa04 	bl	d915c <memset>
   d8d54:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d8d56:	4630      	mov	r0, r6
   d8d58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8d5c:	f000 b802 	b.w	d8d64 <asctime_r>
   d8d60:	2003e108 	.word	0x2003e108

000d8d64 <asctime_r>:
   d8d64:	b510      	push	{r4, lr}
   d8d66:	460c      	mov	r4, r1
   d8d68:	6941      	ldr	r1, [r0, #20]
   d8d6a:	6903      	ldr	r3, [r0, #16]
   d8d6c:	6982      	ldr	r2, [r0, #24]
   d8d6e:	b086      	sub	sp, #24
   d8d70:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d8d74:	9104      	str	r1, [sp, #16]
   d8d76:	6801      	ldr	r1, [r0, #0]
   d8d78:	9103      	str	r1, [sp, #12]
   d8d7a:	6841      	ldr	r1, [r0, #4]
   d8d7c:	9102      	str	r1, [sp, #8]
   d8d7e:	6881      	ldr	r1, [r0, #8]
   d8d80:	9101      	str	r1, [sp, #4]
   d8d82:	68c1      	ldr	r1, [r0, #12]
   d8d84:	9100      	str	r1, [sp, #0]
   d8d86:	4907      	ldr	r1, [pc, #28]	; (d8da4 <asctime_r+0x40>)
   d8d88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d8d8c:	440b      	add	r3, r1
   d8d8e:	4906      	ldr	r1, [pc, #24]	; (d8da8 <asctime_r+0x44>)
   d8d90:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d8d94:	440a      	add	r2, r1
   d8d96:	4620      	mov	r0, r4
   d8d98:	4904      	ldr	r1, [pc, #16]	; (d8dac <asctime_r+0x48>)
   d8d9a:	f7fc fd79 	bl	d5890 <siprintf>
   d8d9e:	4620      	mov	r0, r4
   d8da0:	b006      	add	sp, #24
   d8da2:	bd10      	pop	{r4, pc}
   d8da4:	000daffe 	.word	0x000daffe
   d8da8:	000dafe9 	.word	0x000dafe9
   d8dac:	000db022 	.word	0x000db022

000d8db0 <__cxa_atexit>:
   d8db0:	b510      	push	{r4, lr}
   d8db2:	4c05      	ldr	r4, [pc, #20]	; (d8dc8 <__cxa_atexit+0x18>)
   d8db4:	4613      	mov	r3, r2
   d8db6:	b12c      	cbz	r4, d8dc4 <__cxa_atexit+0x14>
   d8db8:	460a      	mov	r2, r1
   d8dba:	4601      	mov	r1, r0
   d8dbc:	2002      	movs	r0, #2
   d8dbe:	f3af 8000 	nop.w
   d8dc2:	bd10      	pop	{r4, pc}
   d8dc4:	4620      	mov	r0, r4
   d8dc6:	bd10      	pop	{r4, pc}
   d8dc8:	00000000 	.word	0x00000000

000d8dcc <gmtime>:
   d8dcc:	b538      	push	{r3, r4, r5, lr}
   d8dce:	4b07      	ldr	r3, [pc, #28]	; (d8dec <gmtime+0x20>)
   d8dd0:	681c      	ldr	r4, [r3, #0]
   d8dd2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d8dd4:	4605      	mov	r5, r0
   d8dd6:	b91b      	cbnz	r3, d8de0 <gmtime+0x14>
   d8dd8:	2024      	movs	r0, #36	; 0x24
   d8dda:	f7fc fd41 	bl	d5860 <malloc>
   d8dde:	63e0      	str	r0, [r4, #60]	; 0x3c
   d8de0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d8de2:	4628      	mov	r0, r5
   d8de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8de8:	f000 b802 	b.w	d8df0 <gmtime_r>
   d8dec:	2003e108 	.word	0x2003e108

000d8df0 <gmtime_r>:
   d8df0:	6802      	ldr	r2, [r0, #0]
   d8df2:	4b47      	ldr	r3, [pc, #284]	; (d8f10 <gmtime_r+0x120>)
   d8df4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8df6:	fb92 f4f3 	sdiv	r4, r2, r3
   d8dfa:	fb03 2214 	mls	r2, r3, r4, r2
   d8dfe:	2a00      	cmp	r2, #0
   d8e00:	bfbc      	itt	lt
   d8e02:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d8e06:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d8e0a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d8e0e:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d8e12:	fb92 f3f0 	sdiv	r3, r2, r0
   d8e16:	fb00 2213 	mls	r2, r0, r3, r2
   d8e1a:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d8e1e:	bfac      	ite	ge
   d8e20:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d8e24:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d8e28:	608b      	str	r3, [r1, #8]
   d8e2a:	fb92 f3f0 	sdiv	r3, r2, r0
   d8e2e:	fb00 2213 	mls	r2, r0, r3, r2
   d8e32:	604b      	str	r3, [r1, #4]
   d8e34:	600a      	str	r2, [r1, #0]
   d8e36:	2307      	movs	r3, #7
   d8e38:	1ce2      	adds	r2, r4, #3
   d8e3a:	fb92 f3f3 	sdiv	r3, r2, r3
   d8e3e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d8e42:	1ad3      	subs	r3, r2, r3
   d8e44:	618b      	str	r3, [r1, #24]
   d8e46:	4b33      	ldr	r3, [pc, #204]	; (d8f14 <gmtime_r+0x124>)
   d8e48:	4d33      	ldr	r5, [pc, #204]	; (d8f18 <gmtime_r+0x128>)
   d8e4a:	fb94 f5f5 	sdiv	r5, r4, r5
   d8e4e:	fb03 4405 	mla	r4, r3, r5, r4
   d8e52:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d8e56:	fbb4 f2f2 	udiv	r2, r4, r2
   d8e5a:	4422      	add	r2, r4
   d8e5c:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d8e60:	fbb4 f3f7 	udiv	r3, r4, r7
   d8e64:	1ad2      	subs	r2, r2, r3
   d8e66:	482d      	ldr	r0, [pc, #180]	; (d8f1c <gmtime_r+0x12c>)
   d8e68:	fbb4 f0f0 	udiv	r0, r4, r0
   d8e6c:	f648 6694 	movw	r6, #36500	; 0x8e94
   d8e70:	1a13      	subs	r3, r2, r0
   d8e72:	fbb3 f6f6 	udiv	r6, r3, r6
   d8e76:	4434      	add	r4, r6
   d8e78:	f240 126d 	movw	r2, #365	; 0x16d
   d8e7c:	fbb3 f0f2 	udiv	r0, r3, r2
   d8e80:	fbb3 f3f7 	udiv	r3, r3, r7
   d8e84:	1ae3      	subs	r3, r4, r3
   d8e86:	fb02 3310 	mls	r3, r2, r0, r3
   d8e8a:	2499      	movs	r4, #153	; 0x99
   d8e8c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d8e90:	3202      	adds	r2, #2
   d8e92:	fbb2 f2f4 	udiv	r2, r2, r4
   d8e96:	2a0a      	cmp	r2, #10
   d8e98:	fb04 f402 	mul.w	r4, r4, r2
   d8e9c:	f104 0602 	add.w	r6, r4, #2
   d8ea0:	f04f 0405 	mov.w	r4, #5
   d8ea4:	fbb6 f4f4 	udiv	r4, r6, r4
   d8ea8:	bf34      	ite	cc
   d8eaa:	2602      	movcc	r6, #2
   d8eac:	f06f 0609 	mvncs.w	r6, #9
   d8eb0:	4416      	add	r6, r2
   d8eb2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8eb6:	fb02 0505 	mla	r5, r2, r5, r0
   d8eba:	1c5f      	adds	r7, r3, #1
   d8ebc:	2e01      	cmp	r6, #1
   d8ebe:	bf98      	it	ls
   d8ec0:	3501      	addls	r5, #1
   d8ec2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d8ec6:	eba7 0704 	sub.w	r7, r7, r4
   d8eca:	d302      	bcc.n	d8ed2 <gmtime_r+0xe2>
   d8ecc:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d8ed0:	e014      	b.n	d8efc <gmtime_r+0x10c>
   d8ed2:	0782      	lsls	r2, r0, #30
   d8ed4:	d105      	bne.n	d8ee2 <gmtime_r+0xf2>
   d8ed6:	2464      	movs	r4, #100	; 0x64
   d8ed8:	fbb0 f2f4 	udiv	r2, r0, r4
   d8edc:	fb04 0212 	mls	r2, r4, r2, r0
   d8ee0:	b94a      	cbnz	r2, d8ef6 <gmtime_r+0x106>
   d8ee2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8ee6:	fbb0 f4f2 	udiv	r4, r0, r2
   d8eea:	fb02 0014 	mls	r0, r2, r4, r0
   d8eee:	fab0 f280 	clz	r2, r0
   d8ef2:	0952      	lsrs	r2, r2, #5
   d8ef4:	e000      	b.n	d8ef8 <gmtime_r+0x108>
   d8ef6:	2201      	movs	r2, #1
   d8ef8:	333b      	adds	r3, #59	; 0x3b
   d8efa:	441a      	add	r2, r3
   d8efc:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d8f00:	2300      	movs	r3, #0
   d8f02:	61ca      	str	r2, [r1, #28]
   d8f04:	614d      	str	r5, [r1, #20]
   d8f06:	610e      	str	r6, [r1, #16]
   d8f08:	60cf      	str	r7, [r1, #12]
   d8f0a:	620b      	str	r3, [r1, #32]
   d8f0c:	4608      	mov	r0, r1
   d8f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8f10:	00015180 	.word	0x00015180
   d8f14:	fffdc54f 	.word	0xfffdc54f
   d8f18:	00023ab1 	.word	0x00023ab1
   d8f1c:	00023ab0 	.word	0x00023ab0

000d8f20 <localtime>:
   d8f20:	b538      	push	{r3, r4, r5, lr}
   d8f22:	4b07      	ldr	r3, [pc, #28]	; (d8f40 <localtime+0x20>)
   d8f24:	681c      	ldr	r4, [r3, #0]
   d8f26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d8f28:	4605      	mov	r5, r0
   d8f2a:	b91b      	cbnz	r3, d8f34 <localtime+0x14>
   d8f2c:	2024      	movs	r0, #36	; 0x24
   d8f2e:	f7fc fc97 	bl	d5860 <malloc>
   d8f32:	63e0      	str	r0, [r4, #60]	; 0x3c
   d8f34:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d8f36:	4628      	mov	r0, r5
   d8f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8f3c:	f000 b802 	b.w	d8f44 <localtime_r>
   d8f40:	2003e108 	.word	0x2003e108

000d8f44 <localtime_r>:
   d8f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8f48:	460c      	mov	r4, r1
   d8f4a:	4680      	mov	r8, r0
   d8f4c:	f001 fcc2 	bl	da8d4 <__gettzinfo>
   d8f50:	4621      	mov	r1, r4
   d8f52:	4607      	mov	r7, r0
   d8f54:	4640      	mov	r0, r8
   d8f56:	f7ff ff4b 	bl	d8df0 <gmtime_r>
   d8f5a:	6946      	ldr	r6, [r0, #20]
   d8f5c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d8f60:	07b3      	lsls	r3, r6, #30
   d8f62:	4604      	mov	r4, r0
   d8f64:	d105      	bne.n	d8f72 <localtime_r+0x2e>
   d8f66:	2264      	movs	r2, #100	; 0x64
   d8f68:	fb96 f3f2 	sdiv	r3, r6, r2
   d8f6c:	fb02 6313 	mls	r3, r2, r3, r6
   d8f70:	b94b      	cbnz	r3, d8f86 <localtime_r+0x42>
   d8f72:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d8f76:	fb96 f3f5 	sdiv	r3, r6, r5
   d8f7a:	fb05 6513 	mls	r5, r5, r3, r6
   d8f7e:	fab5 f385 	clz	r3, r5
   d8f82:	095b      	lsrs	r3, r3, #5
   d8f84:	e000      	b.n	d8f88 <localtime_r+0x44>
   d8f86:	2301      	movs	r3, #1
   d8f88:	4a5f      	ldr	r2, [pc, #380]	; (d9108 <localtime_r+0x1c4>)
   d8f8a:	2530      	movs	r5, #48	; 0x30
   d8f8c:	fb05 2503 	mla	r5, r5, r3, r2
   d8f90:	f001 fabc 	bl	da50c <__tz_lock>
   d8f94:	f001 fabc 	bl	da510 <_tzset_unlocked>
   d8f98:	4b5c      	ldr	r3, [pc, #368]	; (d910c <localtime_r+0x1c8>)
   d8f9a:	681b      	ldr	r3, [r3, #0]
   d8f9c:	b1f3      	cbz	r3, d8fdc <localtime_r+0x98>
   d8f9e:	687b      	ldr	r3, [r7, #4]
   d8fa0:	429e      	cmp	r6, r3
   d8fa2:	d105      	bne.n	d8fb0 <localtime_r+0x6c>
   d8fa4:	6839      	ldr	r1, [r7, #0]
   d8fa6:	f8d8 3000 	ldr.w	r3, [r8]
   d8faa:	69fa      	ldr	r2, [r7, #28]
   d8fac:	b941      	cbnz	r1, d8fc0 <localtime_r+0x7c>
   d8fae:	e00a      	b.n	d8fc6 <localtime_r+0x82>
   d8fb0:	4630      	mov	r0, r6
   d8fb2:	f001 fa03 	bl	da3bc <__tzcalc_limits>
   d8fb6:	2800      	cmp	r0, #0
   d8fb8:	d1f4      	bne.n	d8fa4 <localtime_r+0x60>
   d8fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8fbe:	e00d      	b.n	d8fdc <localtime_r+0x98>
   d8fc0:	4293      	cmp	r3, r2
   d8fc2:	db08      	blt.n	d8fd6 <localtime_r+0x92>
   d8fc4:	e001      	b.n	d8fca <localtime_r+0x86>
   d8fc6:	4293      	cmp	r3, r2
   d8fc8:	da07      	bge.n	d8fda <localtime_r+0x96>
   d8fca:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d8fcc:	4293      	cmp	r3, r2
   d8fce:	bfac      	ite	ge
   d8fd0:	2300      	movge	r3, #0
   d8fd2:	2301      	movlt	r3, #1
   d8fd4:	e002      	b.n	d8fdc <localtime_r+0x98>
   d8fd6:	2300      	movs	r3, #0
   d8fd8:	e000      	b.n	d8fdc <localtime_r+0x98>
   d8fda:	2301      	movs	r3, #1
   d8fdc:	6223      	str	r3, [r4, #32]
   d8fde:	6a23      	ldr	r3, [r4, #32]
   d8fe0:	2b01      	cmp	r3, #1
   d8fe2:	bf0c      	ite	eq
   d8fe4:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d8fe6:	6a39      	ldrne	r1, [r7, #32]
   d8fe8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8fec:	203c      	movs	r0, #60	; 0x3c
   d8fee:	fb91 f6f3 	sdiv	r6, r1, r3
   d8ff2:	fb03 1316 	mls	r3, r3, r6, r1
   d8ff6:	6861      	ldr	r1, [r4, #4]
   d8ff8:	fb93 f2f0 	sdiv	r2, r3, r0
   d8ffc:	fb00 3012 	mls	r0, r0, r2, r3
   d9000:	6823      	ldr	r3, [r4, #0]
   d9002:	1a89      	subs	r1, r1, r2
   d9004:	68a2      	ldr	r2, [r4, #8]
   d9006:	6061      	str	r1, [r4, #4]
   d9008:	1a1b      	subs	r3, r3, r0
   d900a:	1b92      	subs	r2, r2, r6
   d900c:	2b3b      	cmp	r3, #59	; 0x3b
   d900e:	6023      	str	r3, [r4, #0]
   d9010:	60a2      	str	r2, [r4, #8]
   d9012:	dd03      	ble.n	d901c <localtime_r+0xd8>
   d9014:	3101      	adds	r1, #1
   d9016:	6061      	str	r1, [r4, #4]
   d9018:	3b3c      	subs	r3, #60	; 0x3c
   d901a:	e004      	b.n	d9026 <localtime_r+0xe2>
   d901c:	2b00      	cmp	r3, #0
   d901e:	da03      	bge.n	d9028 <localtime_r+0xe4>
   d9020:	3901      	subs	r1, #1
   d9022:	6061      	str	r1, [r4, #4]
   d9024:	333c      	adds	r3, #60	; 0x3c
   d9026:	6023      	str	r3, [r4, #0]
   d9028:	6863      	ldr	r3, [r4, #4]
   d902a:	2b3b      	cmp	r3, #59	; 0x3b
   d902c:	dd03      	ble.n	d9036 <localtime_r+0xf2>
   d902e:	3201      	adds	r2, #1
   d9030:	60a2      	str	r2, [r4, #8]
   d9032:	3b3c      	subs	r3, #60	; 0x3c
   d9034:	e004      	b.n	d9040 <localtime_r+0xfc>
   d9036:	2b00      	cmp	r3, #0
   d9038:	da03      	bge.n	d9042 <localtime_r+0xfe>
   d903a:	3a01      	subs	r2, #1
   d903c:	60a2      	str	r2, [r4, #8]
   d903e:	333c      	adds	r3, #60	; 0x3c
   d9040:	6063      	str	r3, [r4, #4]
   d9042:	68a3      	ldr	r3, [r4, #8]
   d9044:	2b17      	cmp	r3, #23
   d9046:	dd22      	ble.n	d908e <localtime_r+0x14a>
   d9048:	69e2      	ldr	r2, [r4, #28]
   d904a:	3201      	adds	r2, #1
   d904c:	61e2      	str	r2, [r4, #28]
   d904e:	69a2      	ldr	r2, [r4, #24]
   d9050:	3201      	adds	r2, #1
   d9052:	2a06      	cmp	r2, #6
   d9054:	bfc8      	it	gt
   d9056:	2200      	movgt	r2, #0
   d9058:	61a2      	str	r2, [r4, #24]
   d905a:	68e2      	ldr	r2, [r4, #12]
   d905c:	3b18      	subs	r3, #24
   d905e:	3201      	adds	r2, #1
   d9060:	60a3      	str	r3, [r4, #8]
   d9062:	6923      	ldr	r3, [r4, #16]
   d9064:	60e2      	str	r2, [r4, #12]
   d9066:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d906a:	428a      	cmp	r2, r1
   d906c:	dd46      	ble.n	d90fc <localtime_r+0x1b8>
   d906e:	3301      	adds	r3, #1
   d9070:	2b0c      	cmp	r3, #12
   d9072:	bf0c      	ite	eq
   d9074:	6963      	ldreq	r3, [r4, #20]
   d9076:	6123      	strne	r3, [r4, #16]
   d9078:	eba2 0201 	sub.w	r2, r2, r1
   d907c:	60e2      	str	r2, [r4, #12]
   d907e:	bf01      	itttt	eq
   d9080:	3301      	addeq	r3, #1
   d9082:	2200      	moveq	r2, #0
   d9084:	6122      	streq	r2, [r4, #16]
   d9086:	6163      	streq	r3, [r4, #20]
   d9088:	bf08      	it	eq
   d908a:	61e2      	streq	r2, [r4, #28]
   d908c:	e036      	b.n	d90fc <localtime_r+0x1b8>
   d908e:	2b00      	cmp	r3, #0
   d9090:	da34      	bge.n	d90fc <localtime_r+0x1b8>
   d9092:	69e2      	ldr	r2, [r4, #28]
   d9094:	3a01      	subs	r2, #1
   d9096:	61e2      	str	r2, [r4, #28]
   d9098:	69a2      	ldr	r2, [r4, #24]
   d909a:	3a01      	subs	r2, #1
   d909c:	bf48      	it	mi
   d909e:	2206      	movmi	r2, #6
   d90a0:	61a2      	str	r2, [r4, #24]
   d90a2:	68e2      	ldr	r2, [r4, #12]
   d90a4:	3318      	adds	r3, #24
   d90a6:	3a01      	subs	r2, #1
   d90a8:	60e2      	str	r2, [r4, #12]
   d90aa:	60a3      	str	r3, [r4, #8]
   d90ac:	bb32      	cbnz	r2, d90fc <localtime_r+0x1b8>
   d90ae:	6923      	ldr	r3, [r4, #16]
   d90b0:	3b01      	subs	r3, #1
   d90b2:	d401      	bmi.n	d90b8 <localtime_r+0x174>
   d90b4:	6123      	str	r3, [r4, #16]
   d90b6:	e01d      	b.n	d90f4 <localtime_r+0x1b0>
   d90b8:	230b      	movs	r3, #11
   d90ba:	6123      	str	r3, [r4, #16]
   d90bc:	6963      	ldr	r3, [r4, #20]
   d90be:	1e5a      	subs	r2, r3, #1
   d90c0:	f012 0f03 	tst.w	r2, #3
   d90c4:	6162      	str	r2, [r4, #20]
   d90c6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d90ca:	d105      	bne.n	d90d8 <localtime_r+0x194>
   d90cc:	2164      	movs	r1, #100	; 0x64
   d90ce:	fb93 f2f1 	sdiv	r2, r3, r1
   d90d2:	fb01 3212 	mls	r2, r1, r2, r3
   d90d6:	b94a      	cbnz	r2, d90ec <localtime_r+0x1a8>
   d90d8:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d90dc:	fb93 f2f1 	sdiv	r2, r3, r1
   d90e0:	fb01 3312 	mls	r3, r1, r2, r3
   d90e4:	fab3 f383 	clz	r3, r3
   d90e8:	095b      	lsrs	r3, r3, #5
   d90ea:	e000      	b.n	d90ee <localtime_r+0x1aa>
   d90ec:	2301      	movs	r3, #1
   d90ee:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d90f2:	61e3      	str	r3, [r4, #28]
   d90f4:	6923      	ldr	r3, [r4, #16]
   d90f6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d90fa:	60e3      	str	r3, [r4, #12]
   d90fc:	f001 fa07 	bl	da50e <__tz_unlock>
   d9100:	4620      	mov	r0, r4
   d9102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9106:	bf00      	nop
   d9108:	000db208 	.word	0x000db208
   d910c:	2003e7e4 	.word	0x2003e7e4

000d9110 <memcpy>:
   d9110:	b510      	push	{r4, lr}
   d9112:	1e43      	subs	r3, r0, #1
   d9114:	440a      	add	r2, r1
   d9116:	4291      	cmp	r1, r2
   d9118:	d004      	beq.n	d9124 <memcpy+0x14>
   d911a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d911e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9122:	e7f8      	b.n	d9116 <memcpy+0x6>
   d9124:	bd10      	pop	{r4, pc}

000d9126 <memmove>:
   d9126:	4288      	cmp	r0, r1
   d9128:	b510      	push	{r4, lr}
   d912a:	eb01 0302 	add.w	r3, r1, r2
   d912e:	d801      	bhi.n	d9134 <memmove+0xe>
   d9130:	1e42      	subs	r2, r0, #1
   d9132:	e00b      	b.n	d914c <memmove+0x26>
   d9134:	4298      	cmp	r0, r3
   d9136:	d2fb      	bcs.n	d9130 <memmove+0xa>
   d9138:	1881      	adds	r1, r0, r2
   d913a:	1ad2      	subs	r2, r2, r3
   d913c:	42d3      	cmn	r3, r2
   d913e:	d004      	beq.n	d914a <memmove+0x24>
   d9140:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d9144:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d9148:	e7f8      	b.n	d913c <memmove+0x16>
   d914a:	bd10      	pop	{r4, pc}
   d914c:	4299      	cmp	r1, r3
   d914e:	d004      	beq.n	d915a <memmove+0x34>
   d9150:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9154:	f802 4f01 	strb.w	r4, [r2, #1]!
   d9158:	e7f8      	b.n	d914c <memmove+0x26>
   d915a:	bd10      	pop	{r4, pc}

000d915c <memset>:
   d915c:	4402      	add	r2, r0
   d915e:	4603      	mov	r3, r0
   d9160:	4293      	cmp	r3, r2
   d9162:	d002      	beq.n	d916a <memset+0xe>
   d9164:	f803 1b01 	strb.w	r1, [r3], #1
   d9168:	e7fa      	b.n	d9160 <memset+0x4>
   d916a:	4770      	bx	lr

000d916c <validate_structure>:
   d916c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d916e:	6801      	ldr	r1, [r0, #0]
   d9170:	293b      	cmp	r1, #59	; 0x3b
   d9172:	4604      	mov	r4, r0
   d9174:	d911      	bls.n	d919a <validate_structure+0x2e>
   d9176:	223c      	movs	r2, #60	; 0x3c
   d9178:	4668      	mov	r0, sp
   d917a:	f001 fb53 	bl	da824 <div>
   d917e:	9a01      	ldr	r2, [sp, #4]
   d9180:	6863      	ldr	r3, [r4, #4]
   d9182:	9900      	ldr	r1, [sp, #0]
   d9184:	2a00      	cmp	r2, #0
   d9186:	440b      	add	r3, r1
   d9188:	6063      	str	r3, [r4, #4]
   d918a:	bfbb      	ittet	lt
   d918c:	323c      	addlt	r2, #60	; 0x3c
   d918e:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d9192:	6022      	strge	r2, [r4, #0]
   d9194:	6022      	strlt	r2, [r4, #0]
   d9196:	bfb8      	it	lt
   d9198:	6063      	strlt	r3, [r4, #4]
   d919a:	6861      	ldr	r1, [r4, #4]
   d919c:	293b      	cmp	r1, #59	; 0x3b
   d919e:	d911      	bls.n	d91c4 <validate_structure+0x58>
   d91a0:	223c      	movs	r2, #60	; 0x3c
   d91a2:	4668      	mov	r0, sp
   d91a4:	f001 fb3e 	bl	da824 <div>
   d91a8:	9a01      	ldr	r2, [sp, #4]
   d91aa:	68a1      	ldr	r1, [r4, #8]
   d91ac:	9b00      	ldr	r3, [sp, #0]
   d91ae:	2a00      	cmp	r2, #0
   d91b0:	440b      	add	r3, r1
   d91b2:	60a3      	str	r3, [r4, #8]
   d91b4:	bfbb      	ittet	lt
   d91b6:	323c      	addlt	r2, #60	; 0x3c
   d91b8:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d91bc:	6062      	strge	r2, [r4, #4]
   d91be:	6062      	strlt	r2, [r4, #4]
   d91c0:	bfb8      	it	lt
   d91c2:	60a3      	strlt	r3, [r4, #8]
   d91c4:	68a1      	ldr	r1, [r4, #8]
   d91c6:	2917      	cmp	r1, #23
   d91c8:	d911      	bls.n	d91ee <validate_structure+0x82>
   d91ca:	2218      	movs	r2, #24
   d91cc:	4668      	mov	r0, sp
   d91ce:	f001 fb29 	bl	da824 <div>
   d91d2:	9a01      	ldr	r2, [sp, #4]
   d91d4:	68e1      	ldr	r1, [r4, #12]
   d91d6:	9b00      	ldr	r3, [sp, #0]
   d91d8:	2a00      	cmp	r2, #0
   d91da:	440b      	add	r3, r1
   d91dc:	60e3      	str	r3, [r4, #12]
   d91de:	bfbb      	ittet	lt
   d91e0:	3218      	addlt	r2, #24
   d91e2:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d91e6:	60a2      	strge	r2, [r4, #8]
   d91e8:	60a2      	strlt	r2, [r4, #8]
   d91ea:	bfb8      	it	lt
   d91ec:	60e3      	strlt	r3, [r4, #12]
   d91ee:	6921      	ldr	r1, [r4, #16]
   d91f0:	290b      	cmp	r1, #11
   d91f2:	d911      	bls.n	d9218 <validate_structure+0xac>
   d91f4:	220c      	movs	r2, #12
   d91f6:	4668      	mov	r0, sp
   d91f8:	f001 fb14 	bl	da824 <div>
   d91fc:	9a01      	ldr	r2, [sp, #4]
   d91fe:	6961      	ldr	r1, [r4, #20]
   d9200:	9b00      	ldr	r3, [sp, #0]
   d9202:	2a00      	cmp	r2, #0
   d9204:	440b      	add	r3, r1
   d9206:	6163      	str	r3, [r4, #20]
   d9208:	bfbb      	ittet	lt
   d920a:	320c      	addlt	r2, #12
   d920c:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d9210:	6122      	strge	r2, [r4, #16]
   d9212:	6122      	strlt	r2, [r4, #16]
   d9214:	bfb8      	it	lt
   d9216:	6163      	strlt	r3, [r4, #20]
   d9218:	6963      	ldr	r3, [r4, #20]
   d921a:	0799      	lsls	r1, r3, #30
   d921c:	d112      	bne.n	d9244 <validate_structure+0xd8>
   d921e:	2164      	movs	r1, #100	; 0x64
   d9220:	fb93 f2f1 	sdiv	r2, r3, r1
   d9224:	fb01 3212 	mls	r2, r1, r2, r3
   d9228:	b972      	cbnz	r2, d9248 <validate_structure+0xdc>
   d922a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d922e:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d9232:	fb93 f2f1 	sdiv	r2, r3, r1
   d9236:	fb01 3312 	mls	r3, r1, r2, r3
   d923a:	2b00      	cmp	r3, #0
   d923c:	bf14      	ite	ne
   d923e:	231c      	movne	r3, #28
   d9240:	231d      	moveq	r3, #29
   d9242:	e002      	b.n	d924a <validate_structure+0xde>
   d9244:	231c      	movs	r3, #28
   d9246:	e000      	b.n	d924a <validate_structure+0xde>
   d9248:	231d      	movs	r3, #29
   d924a:	68e2      	ldr	r2, [r4, #12]
   d924c:	2a00      	cmp	r2, #0
   d924e:	dd06      	ble.n	d925e <validate_structure+0xf2>
   d9250:	4f33      	ldr	r7, [pc, #204]	; (d9320 <validate_structure+0x1b4>)
   d9252:	f04f 0e00 	mov.w	lr, #0
   d9256:	2564      	movs	r5, #100	; 0x64
   d9258:	f44f 76c8 	mov.w	r6, #400	; 0x190
   d925c:	e039      	b.n	d92d2 <validate_structure+0x166>
   d925e:	4f30      	ldr	r7, [pc, #192]	; (d9320 <validate_structure+0x1b4>)
   d9260:	260b      	movs	r6, #11
   d9262:	2064      	movs	r0, #100	; 0x64
   d9264:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d9268:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   d926c:	f1be 0f00 	cmp.w	lr, #0
   d9270:	dc53      	bgt.n	d931a <validate_structure+0x1ae>
   d9272:	6921      	ldr	r1, [r4, #16]
   d9274:	3901      	subs	r1, #1
   d9276:	6121      	str	r1, [r4, #16]
   d9278:	3101      	adds	r1, #1
   d927a:	d118      	bne.n	d92ae <validate_structure+0x142>
   d927c:	6963      	ldr	r3, [r4, #20]
   d927e:	6126      	str	r6, [r4, #16]
   d9280:	1e59      	subs	r1, r3, #1
   d9282:	078a      	lsls	r2, r1, #30
   d9284:	6161      	str	r1, [r4, #20]
   d9286:	d10f      	bne.n	d92a8 <validate_structure+0x13c>
   d9288:	fb91 f2f0 	sdiv	r2, r1, r0
   d928c:	fb00 1112 	mls	r1, r0, r2, r1
   d9290:	b961      	cbnz	r1, d92ac <validate_structure+0x140>
   d9292:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d9296:	fb93 f2f5 	sdiv	r2, r3, r5
   d929a:	fb05 3312 	mls	r3, r5, r2, r3
   d929e:	2b00      	cmp	r3, #0
   d92a0:	bf14      	ite	ne
   d92a2:	231c      	movne	r3, #28
   d92a4:	231d      	moveq	r3, #29
   d92a6:	e002      	b.n	d92ae <validate_structure+0x142>
   d92a8:	231c      	movs	r3, #28
   d92aa:	e000      	b.n	d92ae <validate_structure+0x142>
   d92ac:	231d      	movs	r3, #29
   d92ae:	6922      	ldr	r2, [r4, #16]
   d92b0:	2a01      	cmp	r2, #1
   d92b2:	bf14      	ite	ne
   d92b4:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   d92b8:	461a      	moveq	r2, r3
   d92ba:	4472      	add	r2, lr
   d92bc:	60e2      	str	r2, [r4, #12]
   d92be:	e7d3      	b.n	d9268 <validate_structure+0xfc>
   d92c0:	428b      	cmp	r3, r1
   d92c2:	da2a      	bge.n	d931a <validate_structure+0x1ae>
   d92c4:	4618      	mov	r0, r3
   d92c6:	3201      	adds	r2, #1
   d92c8:	1a09      	subs	r1, r1, r0
   d92ca:	2a0c      	cmp	r2, #12
   d92cc:	60e1      	str	r1, [r4, #12]
   d92ce:	6122      	str	r2, [r4, #16]
   d92d0:	d008      	beq.n	d92e4 <validate_structure+0x178>
   d92d2:	6922      	ldr	r2, [r4, #16]
   d92d4:	68e1      	ldr	r1, [r4, #12]
   d92d6:	2a01      	cmp	r2, #1
   d92d8:	d0f2      	beq.n	d92c0 <validate_structure+0x154>
   d92da:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   d92de:	4281      	cmp	r1, r0
   d92e0:	dcf1      	bgt.n	d92c6 <validate_structure+0x15a>
   d92e2:	e01a      	b.n	d931a <validate_structure+0x1ae>
   d92e4:	6963      	ldr	r3, [r4, #20]
   d92e6:	f8c4 e010 	str.w	lr, [r4, #16]
   d92ea:	1c5a      	adds	r2, r3, #1
   d92ec:	0791      	lsls	r1, r2, #30
   d92ee:	6162      	str	r2, [r4, #20]
   d92f0:	d10f      	bne.n	d9312 <validate_structure+0x1a6>
   d92f2:	fb92 f1f5 	sdiv	r1, r2, r5
   d92f6:	fb05 2211 	mls	r2, r5, r1, r2
   d92fa:	b962      	cbnz	r2, d9316 <validate_structure+0x1aa>
   d92fc:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   d9300:	fb93 f2f6 	sdiv	r2, r3, r6
   d9304:	fb06 3312 	mls	r3, r6, r2, r3
   d9308:	2b00      	cmp	r3, #0
   d930a:	bf14      	ite	ne
   d930c:	231c      	movne	r3, #28
   d930e:	231d      	moveq	r3, #29
   d9310:	e7df      	b.n	d92d2 <validate_structure+0x166>
   d9312:	231c      	movs	r3, #28
   d9314:	e7dd      	b.n	d92d2 <validate_structure+0x166>
   d9316:	231d      	movs	r3, #29
   d9318:	e7db      	b.n	d92d2 <validate_structure+0x166>
   d931a:	b003      	add	sp, #12
   d931c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d931e:	bf00      	nop
   d9320:	000db1d8 	.word	0x000db1d8

000d9324 <mktime>:
   d9324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9328:	4605      	mov	r5, r0
   d932a:	f001 fad3 	bl	da8d4 <__gettzinfo>
   d932e:	4681      	mov	r9, r0
   d9330:	4628      	mov	r0, r5
   d9332:	f7ff ff1b 	bl	d916c <validate_structure>
   d9336:	e895 000c 	ldmia.w	r5, {r2, r3}
   d933a:	213c      	movs	r1, #60	; 0x3c
   d933c:	fb01 2303 	mla	r3, r1, r3, r2
   d9340:	68aa      	ldr	r2, [r5, #8]
   d9342:	68ec      	ldr	r4, [r5, #12]
   d9344:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   d9348:	fb08 3102 	mla	r1, r8, r2, r3
   d934c:	692b      	ldr	r3, [r5, #16]
   d934e:	4aab      	ldr	r2, [pc, #684]	; (d95fc <mktime+0x2d8>)
   d9350:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   d9354:	3c01      	subs	r4, #1
   d9356:	2b01      	cmp	r3, #1
   d9358:	4414      	add	r4, r2
   d935a:	696b      	ldr	r3, [r5, #20]
   d935c:	dd11      	ble.n	d9382 <mktime+0x5e>
   d935e:	079e      	lsls	r6, r3, #30
   d9360:	d10f      	bne.n	d9382 <mktime+0x5e>
   d9362:	2064      	movs	r0, #100	; 0x64
   d9364:	fb93 f2f0 	sdiv	r2, r3, r0
   d9368:	fb00 3212 	mls	r2, r0, r2, r3
   d936c:	b942      	cbnz	r2, d9380 <mktime+0x5c>
   d936e:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   d9372:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9376:	fb96 f0f2 	sdiv	r0, r6, r2
   d937a:	fb02 6210 	mls	r2, r2, r0, r6
   d937e:	b902      	cbnz	r2, d9382 <mktime+0x5e>
   d9380:	3401      	adds	r4, #1
   d9382:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   d9386:	3210      	adds	r2, #16
   d9388:	f644 6020 	movw	r0, #20000	; 0x4e20
   d938c:	4282      	cmp	r2, r0
   d938e:	61ec      	str	r4, [r5, #28]
   d9390:	461f      	mov	r7, r3
   d9392:	f200 812e 	bhi.w	d95f2 <mktime+0x2ce>
   d9396:	2b46      	cmp	r3, #70	; 0x46
   d9398:	dd22      	ble.n	d93e0 <mktime+0xbc>
   d939a:	2246      	movs	r2, #70	; 0x46
   d939c:	f240 1c6d 	movw	ip, #365	; 0x16d
   d93a0:	2664      	movs	r6, #100	; 0x64
   d93a2:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   d93a6:	0790      	lsls	r0, r2, #30
   d93a8:	d110      	bne.n	d93cc <mktime+0xa8>
   d93aa:	fb92 f0f6 	sdiv	r0, r2, r6
   d93ae:	fb06 2010 	mls	r0, r6, r0, r2
   d93b2:	b970      	cbnz	r0, d93d2 <mktime+0xae>
   d93b4:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   d93b8:	fb98 f0fe 	sdiv	r0, r8, lr
   d93bc:	fb0e 8010 	mls	r0, lr, r0, r8
   d93c0:	2800      	cmp	r0, #0
   d93c2:	bf14      	ite	ne
   d93c4:	4660      	movne	r0, ip
   d93c6:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   d93ca:	e004      	b.n	d93d6 <mktime+0xb2>
   d93cc:	f240 106d 	movw	r0, #365	; 0x16d
   d93d0:	e001      	b.n	d93d6 <mktime+0xb2>
   d93d2:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   d93d6:	3201      	adds	r2, #1
   d93d8:	4293      	cmp	r3, r2
   d93da:	4404      	add	r4, r0
   d93dc:	d1e3      	bne.n	d93a6 <mktime+0x82>
   d93de:	e044      	b.n	d946a <mktime+0x146>
   d93e0:	d043      	beq.n	d946a <mktime+0x146>
   d93e2:	2245      	movs	r2, #69	; 0x45
   d93e4:	f240 1e6d 	movw	lr, #365	; 0x16d
   d93e8:	2664      	movs	r6, #100	; 0x64
   d93ea:	f44f 77c8 	mov.w	r7, #400	; 0x190
   d93ee:	429a      	cmp	r2, r3
   d93f0:	dd1a      	ble.n	d9428 <mktime+0x104>
   d93f2:	0790      	lsls	r0, r2, #30
   d93f4:	d110      	bne.n	d9418 <mktime+0xf4>
   d93f6:	fb92 f0f6 	sdiv	r0, r2, r6
   d93fa:	fb06 2010 	mls	r0, r6, r0, r2
   d93fe:	b970      	cbnz	r0, d941e <mktime+0xfa>
   d9400:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   d9404:	fb9c f0f7 	sdiv	r0, ip, r7
   d9408:	fb07 c010 	mls	r0, r7, r0, ip
   d940c:	2800      	cmp	r0, #0
   d940e:	bf14      	ite	ne
   d9410:	4670      	movne	r0, lr
   d9412:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   d9416:	e004      	b.n	d9422 <mktime+0xfe>
   d9418:	f240 106d 	movw	r0, #365	; 0x16d
   d941c:	e001      	b.n	d9422 <mktime+0xfe>
   d941e:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   d9422:	1a24      	subs	r4, r4, r0
   d9424:	3a01      	subs	r2, #1
   d9426:	e7e2      	b.n	d93ee <mktime+0xca>
   d9428:	2b45      	cmp	r3, #69	; 0x45
   d942a:	bfa8      	it	ge
   d942c:	2345      	movge	r3, #69	; 0x45
   d942e:	079e      	lsls	r6, r3, #30
   d9430:	461f      	mov	r7, r3
   d9432:	d114      	bne.n	d945e <mktime+0x13a>
   d9434:	2264      	movs	r2, #100	; 0x64
   d9436:	fb93 f3f2 	sdiv	r3, r3, r2
   d943a:	fb02 7313 	mls	r3, r2, r3, r7
   d943e:	b98b      	cbnz	r3, d9464 <mktime+0x140>
   d9440:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   d9444:	f44f 73c8 	mov.w	r3, #400	; 0x190
   d9448:	fb90 f2f3 	sdiv	r2, r0, r3
   d944c:	fb03 0312 	mls	r3, r3, r2, r0
   d9450:	2b00      	cmp	r3, #0
   d9452:	f240 136d 	movw	r3, #365	; 0x16d
   d9456:	bf08      	it	eq
   d9458:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   d945c:	e004      	b.n	d9468 <mktime+0x144>
   d945e:	f240 136d 	movw	r3, #365	; 0x16d
   d9462:	e001      	b.n	d9468 <mktime+0x144>
   d9464:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   d9468:	1ae4      	subs	r4, r4, r3
   d946a:	4865      	ldr	r0, [pc, #404]	; (d9600 <mktime+0x2dc>)
   d946c:	fb00 1804 	mla	r8, r0, r4, r1
   d9470:	f001 f84c 	bl	da50c <__tz_lock>
   d9474:	f001 f84c 	bl	da510 <_tzset_unlocked>
   d9478:	4b62      	ldr	r3, [pc, #392]	; (d9604 <mktime+0x2e0>)
   d947a:	681e      	ldr	r6, [r3, #0]
   d947c:	2e00      	cmp	r6, #0
   d947e:	f000 80a4 	beq.w	d95ca <mktime+0x2a6>
   d9482:	6a2b      	ldr	r3, [r5, #32]
   d9484:	6968      	ldr	r0, [r5, #20]
   d9486:	2b01      	cmp	r3, #1
   d9488:	bfa8      	it	ge
   d948a:	2301      	movge	r3, #1
   d948c:	469a      	mov	sl, r3
   d948e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   d9492:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d9496:	4298      	cmp	r0, r3
   d9498:	d10d      	bne.n	d94b6 <mktime+0x192>
   d949a:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   d949e:	f8d9 3020 	ldr.w	r3, [r9, #32]
   d94a2:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   d94a6:	f8d9 101c 	ldr.w	r1, [r9, #28]
   d94aa:	1ad6      	subs	r6, r2, r3
   d94ac:	45b0      	cmp	r8, r6
   d94ae:	eba1 0100 	sub.w	r1, r1, r0
   d94b2:	da05      	bge.n	d94c0 <mktime+0x19c>
   d94b4:	e007      	b.n	d94c6 <mktime+0x1a2>
   d94b6:	f000 ff81 	bl	da3bc <__tzcalc_limits>
   d94ba:	2800      	cmp	r0, #0
   d94bc:	d1ed      	bne.n	d949a <mktime+0x176>
   d94be:	e076      	b.n	d95ae <mktime+0x28a>
   d94c0:	1a12      	subs	r2, r2, r0
   d94c2:	4590      	cmp	r8, r2
   d94c4:	db73      	blt.n	d95ae <mktime+0x28a>
   d94c6:	f8d9 2000 	ldr.w	r2, [r9]
   d94ca:	b112      	cbz	r2, d94d2 <mktime+0x1ae>
   d94cc:	4588      	cmp	r8, r1
   d94ce:	db77      	blt.n	d95c0 <mktime+0x29c>
   d94d0:	e001      	b.n	d94d6 <mktime+0x1b2>
   d94d2:	4588      	cmp	r8, r1
   d94d4:	da07      	bge.n	d94e6 <mktime+0x1c2>
   d94d6:	45b0      	cmp	r8, r6
   d94d8:	bfac      	ite	ge
   d94da:	2600      	movge	r6, #0
   d94dc:	2601      	movlt	r6, #1
   d94de:	f1ba 0f00 	cmp.w	sl, #0
   d94e2:	da04      	bge.n	d94ee <mktime+0x1ca>
   d94e4:	e064      	b.n	d95b0 <mktime+0x28c>
   d94e6:	f1ba 0f00 	cmp.w	sl, #0
   d94ea:	db63      	blt.n	d95b4 <mktime+0x290>
   d94ec:	2601      	movs	r6, #1
   d94ee:	ea8a 0a06 	eor.w	sl, sl, r6
   d94f2:	f1ba 0f01 	cmp.w	sl, #1
   d94f6:	d15b      	bne.n	d95b0 <mktime+0x28c>
   d94f8:	1a1b      	subs	r3, r3, r0
   d94fa:	b906      	cbnz	r6, d94fe <mktime+0x1da>
   d94fc:	425b      	negs	r3, r3
   d94fe:	682a      	ldr	r2, [r5, #0]
   d9500:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   d9504:	441a      	add	r2, r3
   d9506:	602a      	str	r2, [r5, #0]
   d9508:	4628      	mov	r0, r5
   d950a:	4498      	add	r8, r3
   d950c:	f7ff fe2e 	bl	d916c <validate_structure>
   d9510:	68eb      	ldr	r3, [r5, #12]
   d9512:	ebb3 030a 	subs.w	r3, r3, sl
   d9516:	d04b      	beq.n	d95b0 <mktime+0x28c>
   d9518:	2b01      	cmp	r3, #1
   d951a:	dc03      	bgt.n	d9524 <mktime+0x200>
   d951c:	1c98      	adds	r0, r3, #2
   d951e:	bfd8      	it	le
   d9520:	2301      	movle	r3, #1
   d9522:	e001      	b.n	d9528 <mktime+0x204>
   d9524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9528:	69ea      	ldr	r2, [r5, #28]
   d952a:	441c      	add	r4, r3
   d952c:	189b      	adds	r3, r3, r2
   d952e:	d51d      	bpl.n	d956c <mktime+0x248>
   d9530:	1e7b      	subs	r3, r7, #1
   d9532:	0799      	lsls	r1, r3, #30
   d9534:	d114      	bne.n	d9560 <mktime+0x23c>
   d9536:	2164      	movs	r1, #100	; 0x64
   d9538:	fb93 f2f1 	sdiv	r2, r3, r1
   d953c:	fb01 3312 	mls	r3, r1, r2, r3
   d9540:	b98b      	cbnz	r3, d9566 <mktime+0x242>
   d9542:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   d9546:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d954a:	fb97 f3f2 	sdiv	r3, r7, r2
   d954e:	fb02 7713 	mls	r7, r2, r3, r7
   d9552:	2f00      	cmp	r7, #0
   d9554:	f240 136d 	movw	r3, #365	; 0x16d
   d9558:	bf18      	it	ne
   d955a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   d955e:	e024      	b.n	d95aa <mktime+0x286>
   d9560:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   d9564:	e021      	b.n	d95aa <mktime+0x286>
   d9566:	f240 136d 	movw	r3, #365	; 0x16d
   d956a:	e01e      	b.n	d95aa <mktime+0x286>
   d956c:	07ba      	lsls	r2, r7, #30
   d956e:	d114      	bne.n	d959a <mktime+0x276>
   d9570:	2164      	movs	r1, #100	; 0x64
   d9572:	fb97 f2f1 	sdiv	r2, r7, r1
   d9576:	fb01 7212 	mls	r2, r1, r2, r7
   d957a:	b98a      	cbnz	r2, d95a0 <mktime+0x27c>
   d957c:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   d9580:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d9584:	fb97 f2f1 	sdiv	r2, r7, r1
   d9588:	fb01 7712 	mls	r7, r1, r2, r7
   d958c:	2f00      	cmp	r7, #0
   d958e:	f240 126d 	movw	r2, #365	; 0x16d
   d9592:	bf08      	it	eq
   d9594:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   d9598:	e004      	b.n	d95a4 <mktime+0x280>
   d959a:	f240 126d 	movw	r2, #365	; 0x16d
   d959e:	e001      	b.n	d95a4 <mktime+0x280>
   d95a0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   d95a4:	429a      	cmp	r2, r3
   d95a6:	bfd8      	it	le
   d95a8:	1a9b      	suble	r3, r3, r2
   d95aa:	61eb      	str	r3, [r5, #28]
   d95ac:	e000      	b.n	d95b0 <mktime+0x28c>
   d95ae:	4656      	mov	r6, sl
   d95b0:	2e01      	cmp	r6, #1
   d95b2:	d10a      	bne.n	d95ca <mktime+0x2a6>
   d95b4:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   d95b8:	2601      	movs	r6, #1
   d95ba:	eb08 0700 	add.w	r7, r8, r0
   d95be:	e008      	b.n	d95d2 <mktime+0x2ae>
   d95c0:	f1ba 0f00 	cmp.w	sl, #0
   d95c4:	f04f 0600 	mov.w	r6, #0
   d95c8:	da91      	bge.n	d94ee <mktime+0x1ca>
   d95ca:	f8d9 0020 	ldr.w	r0, [r9, #32]
   d95ce:	eb08 0700 	add.w	r7, r8, r0
   d95d2:	f000 ff9c 	bl	da50e <__tz_unlock>
   d95d6:	3404      	adds	r4, #4
   d95d8:	2307      	movs	r3, #7
   d95da:	fb94 f3f3 	sdiv	r3, r4, r3
   d95de:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d95e2:	1ae4      	subs	r4, r4, r3
   d95e4:	bf48      	it	mi
   d95e6:	3407      	addmi	r4, #7
   d95e8:	622e      	str	r6, [r5, #32]
   d95ea:	61ac      	str	r4, [r5, #24]
   d95ec:	4638      	mov	r0, r7
   d95ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d95f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d95f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d95fa:	bf00      	nop
   d95fc:	000db1a8 	.word	0x000db1a8
   d9600:	00015180 	.word	0x00015180
   d9604:	2003e7e4 	.word	0x2003e7e4

000d9608 <srand>:
   d9608:	b538      	push	{r3, r4, r5, lr}
   d960a:	4b12      	ldr	r3, [pc, #72]	; (d9654 <srand+0x4c>)
   d960c:	681c      	ldr	r4, [r3, #0]
   d960e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9610:	4605      	mov	r5, r0
   d9612:	b9d3      	cbnz	r3, d964a <srand+0x42>
   d9614:	2018      	movs	r0, #24
   d9616:	f7fc f923 	bl	d5860 <malloc>
   d961a:	f243 330e 	movw	r3, #13070	; 0x330e
   d961e:	63a0      	str	r0, [r4, #56]	; 0x38
   d9620:	8003      	strh	r3, [r0, #0]
   d9622:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9626:	8043      	strh	r3, [r0, #2]
   d9628:	f241 2334 	movw	r3, #4660	; 0x1234
   d962c:	8083      	strh	r3, [r0, #4]
   d962e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9632:	80c3      	strh	r3, [r0, #6]
   d9634:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9638:	8103      	strh	r3, [r0, #8]
   d963a:	2305      	movs	r3, #5
   d963c:	8143      	strh	r3, [r0, #10]
   d963e:	230b      	movs	r3, #11
   d9640:	8183      	strh	r3, [r0, #12]
   d9642:	2201      	movs	r2, #1
   d9644:	2300      	movs	r3, #0
   d9646:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d964a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d964c:	2200      	movs	r2, #0
   d964e:	611d      	str	r5, [r3, #16]
   d9650:	615a      	str	r2, [r3, #20]
   d9652:	bd38      	pop	{r3, r4, r5, pc}
   d9654:	2003e108 	.word	0x2003e108

000d9658 <strchr>:
   d9658:	b2c9      	uxtb	r1, r1
   d965a:	4603      	mov	r3, r0
   d965c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9660:	b11a      	cbz	r2, d966a <strchr+0x12>
   d9662:	4291      	cmp	r1, r2
   d9664:	d1f9      	bne.n	d965a <strchr+0x2>
   d9666:	4618      	mov	r0, r3
   d9668:	4770      	bx	lr
   d966a:	2900      	cmp	r1, #0
   d966c:	bf0c      	ite	eq
   d966e:	4618      	moveq	r0, r3
   d9670:	2000      	movne	r0, #0
   d9672:	4770      	bx	lr

000d9674 <strchrnul>:
   d9674:	b510      	push	{r4, lr}
   d9676:	4604      	mov	r4, r0
   d9678:	f7ff ffee 	bl	d9658 <strchr>
   d967c:	b918      	cbnz	r0, d9686 <strchrnul+0x12>
   d967e:	4620      	mov	r0, r4
   d9680:	f000 fd44 	bl	da10c <strlen>
   d9684:	4420      	add	r0, r4
   d9686:	bd10      	pop	{r4, pc}

000d9688 <strcmp>:
   d9688:	f810 2b01 	ldrb.w	r2, [r0], #1
   d968c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9690:	2a01      	cmp	r2, #1
   d9692:	bf28      	it	cs
   d9694:	429a      	cmpcs	r2, r3
   d9696:	d0f7      	beq.n	d9688 <strcmp>
   d9698:	1ad0      	subs	r0, r2, r3
   d969a:	4770      	bx	lr

000d969c <strcpy>:
   d969c:	4603      	mov	r3, r0
   d969e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d96a2:	f803 2b01 	strb.w	r2, [r3], #1
   d96a6:	2a00      	cmp	r2, #0
   d96a8:	d1f9      	bne.n	d969e <strcpy+0x2>
   d96aa:	4770      	bx	lr

000d96ac <strdup>:
   d96ac:	4b02      	ldr	r3, [pc, #8]	; (d96b8 <strdup+0xc>)
   d96ae:	4601      	mov	r1, r0
   d96b0:	6818      	ldr	r0, [r3, #0]
   d96b2:	f000 b803 	b.w	d96bc <_strdup_r>
   d96b6:	bf00      	nop
   d96b8:	2003e108 	.word	0x2003e108

000d96bc <_strdup_r>:
   d96bc:	b570      	push	{r4, r5, r6, lr}
   d96be:	4606      	mov	r6, r0
   d96c0:	4608      	mov	r0, r1
   d96c2:	460c      	mov	r4, r1
   d96c4:	f000 fd22 	bl	da10c <strlen>
   d96c8:	1c45      	adds	r5, r0, #1
   d96ca:	4629      	mov	r1, r5
   d96cc:	4630      	mov	r0, r6
   d96ce:	f7fc f90f 	bl	d58f0 <_malloc_r>
   d96d2:	4606      	mov	r6, r0
   d96d4:	b118      	cbz	r0, d96de <_strdup_r+0x22>
   d96d6:	462a      	mov	r2, r5
   d96d8:	4621      	mov	r1, r4
   d96da:	f7ff fd19 	bl	d9110 <memcpy>
   d96de:	4630      	mov	r0, r6
   d96e0:	bd70      	pop	{r4, r5, r6, pc}

000d96e2 <iso_year_adjust>:
   d96e2:	6941      	ldr	r1, [r0, #20]
   d96e4:	078b      	lsls	r3, r1, #30
   d96e6:	b510      	push	{r4, lr}
   d96e8:	d10c      	bne.n	d9704 <iso_year_adjust+0x22>
   d96ea:	2900      	cmp	r1, #0
   d96ec:	f240 736c 	movw	r3, #1900	; 0x76c
   d96f0:	bfa8      	it	ge
   d96f2:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   d96f6:	440b      	add	r3, r1
   d96f8:	2464      	movs	r4, #100	; 0x64
   d96fa:	fb93 f2f4 	sdiv	r2, r3, r4
   d96fe:	fb04 3312 	mls	r3, r4, r2, r3
   d9702:	b983      	cbnz	r3, d9726 <iso_year_adjust+0x44>
   d9704:	2900      	cmp	r1, #0
   d9706:	f240 736c 	movw	r3, #1900	; 0x76c
   d970a:	bfa8      	it	ge
   d970c:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   d9710:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9714:	440b      	add	r3, r1
   d9716:	fb93 f1f2 	sdiv	r1, r3, r2
   d971a:	fb02 3311 	mls	r3, r2, r1, r3
   d971e:	fab3 f283 	clz	r2, r3
   d9722:	0952      	lsrs	r2, r2, #5
   d9724:	e000      	b.n	d9728 <iso_year_adjust+0x46>
   d9726:	2201      	movs	r2, #1
   d9728:	6983      	ldr	r3, [r0, #24]
   d972a:	69c1      	ldr	r1, [r0, #28]
   d972c:	005b      	lsls	r3, r3, #1
   d972e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   d9732:	4413      	add	r3, r2
   d9734:	2b21      	cmp	r3, #33	; 0x21
   d9736:	dc0e      	bgt.n	d9756 <iso_year_adjust+0x74>
   d9738:	2b20      	cmp	r3, #32
   d973a:	da2f      	bge.n	d979c <iso_year_adjust+0xba>
   d973c:	2b0d      	cmp	r3, #13
   d973e:	dc02      	bgt.n	d9746 <iso_year_adjust+0x64>
   d9740:	2b0a      	cmp	r3, #10
   d9742:	db05      	blt.n	d9750 <iso_year_adjust+0x6e>
   d9744:	e02a      	b.n	d979c <iso_year_adjust+0xba>
   d9746:	2b10      	cmp	r3, #16
   d9748:	db26      	blt.n	d9798 <iso_year_adjust+0xb6>
   d974a:	2b11      	cmp	r3, #17
   d974c:	dd26      	ble.n	d979c <iso_year_adjust+0xba>
   d974e:	3b1c      	subs	r3, #28
   d9750:	2b01      	cmp	r3, #1
   d9752:	d923      	bls.n	d979c <iso_year_adjust+0xba>
   d9754:	e020      	b.n	d9798 <iso_year_adjust+0xb6>
   d9756:	f241 62c6 	movw	r2, #5830	; 0x16c6
   d975a:	4293      	cmp	r3, r2
   d975c:	dc0e      	bgt.n	d977c <iso_year_adjust+0x9a>
   d975e:	f241 62c2 	movw	r2, #5826	; 0x16c2
   d9762:	4293      	cmp	r3, r2
   d9764:	da16      	bge.n	d9794 <iso_year_adjust+0xb2>
   d9766:	f241 62a2 	movw	r2, #5794	; 0x16a2
   d976a:	4293      	cmp	r3, r2
   d976c:	d012      	beq.n	d9794 <iso_year_adjust+0xb2>
   d976e:	db13      	blt.n	d9798 <iso_year_adjust+0xb6>
   d9770:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   d9774:	3b12      	subs	r3, #18
   d9776:	2b02      	cmp	r3, #2
   d9778:	d90c      	bls.n	d9794 <iso_year_adjust+0xb2>
   d977a:	e00d      	b.n	d9798 <iso_year_adjust+0xb6>
   d977c:	f241 62d5 	movw	r2, #5845	; 0x16d5
   d9780:	4293      	cmp	r3, r2
   d9782:	d007      	beq.n	d9794 <iso_year_adjust+0xb2>
   d9784:	f241 62d7 	movw	r2, #5847	; 0x16d7
   d9788:	4293      	cmp	r3, r2
   d978a:	d003      	beq.n	d9794 <iso_year_adjust+0xb2>
   d978c:	f241 62d3 	movw	r2, #5843	; 0x16d3
   d9790:	4293      	cmp	r3, r2
   d9792:	d101      	bne.n	d9798 <iso_year_adjust+0xb6>
   d9794:	2001      	movs	r0, #1
   d9796:	bd10      	pop	{r4, pc}
   d9798:	2000      	movs	r0, #0
   d979a:	bd10      	pop	{r4, pc}
   d979c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d97a0:	bd10      	pop	{r4, pc}
	...

000d97a4 <strftime>:
   d97a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d97a8:	b093      	sub	sp, #76	; 0x4c
   d97aa:	460e      	mov	r6, r1
   d97ac:	461d      	mov	r5, r3
   d97ae:	4607      	mov	r7, r0
   d97b0:	4691      	mov	r9, r2
   d97b2:	f000 fdf3 	bl	da39c <__get_current_time_locale>
   d97b6:	2300      	movs	r3, #0
   d97b8:	9306      	str	r3, [sp, #24]
   d97ba:	461c      	mov	r4, r3
   d97bc:	1e73      	subs	r3, r6, #1
   d97be:	9003      	str	r0, [sp, #12]
   d97c0:	9302      	str	r3, [sp, #8]
   d97c2:	f899 3000 	ldrb.w	r3, [r9]
   d97c6:	2b00      	cmp	r3, #0
   d97c8:	f000 8492 	beq.w	da0f0 <strftime+0x94c>
   d97cc:	2b25      	cmp	r3, #37	; 0x25
   d97ce:	d008      	beq.n	d97e2 <strftime+0x3e>
   d97d0:	9a02      	ldr	r2, [sp, #8]
   d97d2:	4294      	cmp	r4, r2
   d97d4:	f080 8490 	bcs.w	da0f8 <strftime+0x954>
   d97d8:	553b      	strb	r3, [r7, r4]
   d97da:	f109 0901 	add.w	r9, r9, #1
   d97de:	3401      	adds	r4, #1
   d97e0:	e7ef      	b.n	d97c2 <strftime+0x1e>
   d97e2:	f899 a001 	ldrb.w	sl, [r9, #1]
   d97e6:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   d97ea:	d007      	beq.n	d97fc <strftime+0x58>
   d97ec:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d97f0:	d004      	beq.n	d97fc <strftime+0x58>
   d97f2:	f109 0901 	add.w	r9, r9, #1
   d97f6:	f04f 0a00 	mov.w	sl, #0
   d97fa:	e001      	b.n	d9800 <strftime+0x5c>
   d97fc:	f109 0902 	add.w	r9, r9, #2
   d9800:	f899 3000 	ldrb.w	r3, [r9]
   d9804:	3b31      	subs	r3, #49	; 0x31
   d9806:	2b08      	cmp	r3, #8
   d9808:	d808      	bhi.n	d981c <strftime+0x78>
   d980a:	4648      	mov	r0, r9
   d980c:	220a      	movs	r2, #10
   d980e:	a90a      	add	r1, sp, #40	; 0x28
   d9810:	f000 fdba 	bl	da388 <strtoul>
   d9814:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   d9818:	4680      	mov	r8, r0
   d981a:	e001      	b.n	d9820 <strftime+0x7c>
   d981c:	f04f 0800 	mov.w	r8, #0
   d9820:	f899 3000 	ldrb.w	r3, [r9]
   d9824:	2b45      	cmp	r3, #69	; 0x45
   d9826:	d001      	beq.n	d982c <strftime+0x88>
   d9828:	2b4f      	cmp	r3, #79	; 0x4f
   d982a:	d101      	bne.n	d9830 <strftime+0x8c>
   d982c:	f109 0901 	add.w	r9, r9, #1
   d9830:	f899 0000 	ldrb.w	r0, [r9]
   d9834:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   d9838:	2b55      	cmp	r3, #85	; 0x55
   d983a:	f200 845d 	bhi.w	da0f8 <strftime+0x954>
   d983e:	e8df f013 	tbh	[pc, r3, lsl #1]
   d9842:	044a      	.short	0x044a
   d9844:	045b045b 	.word	0x045b045b
   d9848:	045b045b 	.word	0x045b045b
   d984c:	045b045b 	.word	0x045b045b
   d9850:	045b045b 	.word	0x045b045b
   d9854:	045b045b 	.word	0x045b045b
   d9858:	045b045b 	.word	0x045b045b
   d985c:	045b045b 	.word	0x045b045b
   d9860:	045b045b 	.word	0x045b045b
   d9864:	045b045b 	.word	0x045b045b
   d9868:	045b045b 	.word	0x045b045b
   d986c:	045b045b 	.word	0x045b045b
   d9870:	045b045b 	.word	0x045b045b
   d9874:	045b045b 	.word	0x045b045b
   d9878:	006f045b 	.word	0x006f045b
   d987c:	00d400a1 	.word	0x00d400a1
   d9880:	045b011a 	.word	0x045b011a
   d9884:	01a0013f 	.word	0x01a0013f
   d9888:	022d0226 	.word	0x022d0226
   d988c:	045b045b 	.word	0x045b045b
   d9890:	0260045b 	.word	0x0260045b
   d9894:	045b045b 	.word	0x045b045b
   d9898:	045b0268 	.word	0x045b0268
   d989c:	031d0297 	.word	0x031d0297
   d98a0:	033b0325 	.word	0x033b0325
   d98a4:	03860343 	.word	0x03860343
   d98a8:	03a000c6 	.word	0x03a000c6
   d98ac:	045b041f 	.word	0x045b041f
   d98b0:	045b045b 	.word	0x045b045b
   d98b4:	045b045b 	.word	0x045b045b
   d98b8:	0056045b 	.word	0x0056045b
   d98bc:	00ba0089 	.word	0x00ba0089
   d98c0:	010c010c 	.word	0x010c010c
   d98c4:	0171045b 	.word	0x0171045b
   d98c8:	045b0089 	.word	0x045b0089
   d98cc:	0226023d 	.word	0x0226023d
   d98d0:	025d022d 	.word	0x025d022d
   d98d4:	045b0262 	.word	0x045b0262
   d98d8:	045b0268 	.word	0x045b0268
   d98dc:	029c00be 	.word	0x029c00be
   d98e0:	032e031f 	.word	0x032e031f
   d98e4:	037f045b 	.word	0x037f045b
   d98e8:	039200c2 	.word	0x039200c2
   d98ec:	03e7      	.short	0x03e7
   d98ee:	69ab      	ldr	r3, [r5, #24]
   d98f0:	9a03      	ldr	r2, [sp, #12]
   d98f2:	3318      	adds	r3, #24
   d98f4:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d98f8:	4640      	mov	r0, r8
   d98fa:	f000 fc07 	bl	da10c <strlen>
   d98fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d9902:	193b      	adds	r3, r7, r4
   d9904:	4420      	add	r0, r4
   d9906:	4284      	cmp	r4, r0
   d9908:	f000 83eb 	beq.w	da0e2 <strftime+0x93e>
   d990c:	9a02      	ldr	r2, [sp, #8]
   d990e:	4294      	cmp	r4, r2
   d9910:	f080 83f2 	bcs.w	da0f8 <strftime+0x954>
   d9914:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d9918:	f803 2b01 	strb.w	r2, [r3], #1
   d991c:	3401      	adds	r4, #1
   d991e:	e7f2      	b.n	d9906 <strftime+0x162>
   d9920:	69ab      	ldr	r3, [r5, #24]
   d9922:	9a03      	ldr	r2, [sp, #12]
   d9924:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d9928:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   d992c:	4640      	mov	r0, r8
   d992e:	f000 fbed 	bl	da10c <strlen>
   d9932:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d9936:	193b      	adds	r3, r7, r4
   d9938:	4420      	add	r0, r4
   d993a:	4284      	cmp	r4, r0
   d993c:	f000 83d1 	beq.w	da0e2 <strftime+0x93e>
   d9940:	9a02      	ldr	r2, [sp, #8]
   d9942:	4294      	cmp	r4, r2
   d9944:	f080 83d8 	bcs.w	da0f8 <strftime+0x954>
   d9948:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d994c:	f803 2b01 	strb.w	r2, [r3], #1
   d9950:	3401      	adds	r4, #1
   d9952:	e7f2      	b.n	d993a <strftime+0x196>
   d9954:	692b      	ldr	r3, [r5, #16]
   d9956:	9a03      	ldr	r2, [sp, #12]
   d9958:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d995c:	4640      	mov	r0, r8
   d995e:	f000 fbd5 	bl	da10c <strlen>
   d9962:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d9966:	193b      	adds	r3, r7, r4
   d9968:	4420      	add	r0, r4
   d996a:	4284      	cmp	r4, r0
   d996c:	f000 83b9 	beq.w	da0e2 <strftime+0x93e>
   d9970:	9a02      	ldr	r2, [sp, #8]
   d9972:	4294      	cmp	r4, r2
   d9974:	f080 83c0 	bcs.w	da0f8 <strftime+0x954>
   d9978:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d997c:	f803 2b01 	strb.w	r2, [r3], #1
   d9980:	3401      	adds	r4, #1
   d9982:	e7f2      	b.n	d996a <strftime+0x1c6>
   d9984:	692b      	ldr	r3, [r5, #16]
   d9986:	9a03      	ldr	r2, [sp, #12]
   d9988:	330c      	adds	r3, #12
   d998a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d998e:	4640      	mov	r0, r8
   d9990:	f000 fbbc 	bl	da10c <strlen>
   d9994:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d9998:	193b      	adds	r3, r7, r4
   d999a:	4420      	add	r0, r4
   d999c:	4284      	cmp	r4, r0
   d999e:	f000 83a0 	beq.w	da0e2 <strftime+0x93e>
   d99a2:	9a02      	ldr	r2, [sp, #8]
   d99a4:	4294      	cmp	r4, r2
   d99a6:	f080 83a7 	bcs.w	da0f8 <strftime+0x954>
   d99aa:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d99ae:	f803 2b01 	strb.w	r2, [r3], #1
   d99b2:	3401      	adds	r4, #1
   d99b4:	e7f2      	b.n	d999c <strftime+0x1f8>
   d99b6:	9b03      	ldr	r3, [sp, #12]
   d99b8:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   d99bc:	e00a      	b.n	d99d4 <strftime+0x230>
   d99be:	9b03      	ldr	r3, [sp, #12]
   d99c0:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   d99c4:	e006      	b.n	d99d4 <strftime+0x230>
   d99c6:	9b03      	ldr	r3, [sp, #12]
   d99c8:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   d99cc:	e002      	b.n	d99d4 <strftime+0x230>
   d99ce:	9b03      	ldr	r3, [sp, #12]
   d99d0:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   d99d4:	4640      	mov	r0, r8
   d99d6:	f000 fb99 	bl	da10c <strlen>
   d99da:	f898 3000 	ldrb.w	r3, [r8]
   d99de:	2b00      	cmp	r3, #0
   d99e0:	f000 837f 	beq.w	da0e2 <strftime+0x93e>
   d99e4:	462b      	mov	r3, r5
   d99e6:	4642      	mov	r2, r8
   d99e8:	e093      	b.n	d9b12 <strftime+0x36e>
   d99ea:	49b6      	ldr	r1, [pc, #728]	; (d9cc4 <strftime+0x520>)
   d99ec:	f8d5 b014 	ldr.w	fp, [r5, #20]
   d99f0:	458b      	cmp	fp, r1
   d99f2:	bfac      	ite	ge
   d99f4:	2100      	movge	r1, #0
   d99f6:	2101      	movlt	r1, #1
   d99f8:	f1bb 0f00 	cmp.w	fp, #0
   d99fc:	db04      	blt.n	d9a08 <strftime+0x264>
   d99fe:	2064      	movs	r0, #100	; 0x64
   d9a00:	fb9b f0f0 	sdiv	r0, fp, r0
   d9a04:	3013      	adds	r0, #19
   d9a06:	e008      	b.n	d9a1a <strftime+0x276>
   d9a08:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   d9a0c:	9107      	str	r1, [sp, #28]
   d9a0e:	f000 ff05 	bl	da81c <abs>
   d9a12:	9907      	ldr	r1, [sp, #28]
   d9a14:	2364      	movs	r3, #100	; 0x64
   d9a16:	fb90 f0f3 	sdiv	r0, r0, r3
   d9a1a:	f1ba 0f00 	cmp.w	sl, #0
   d9a1e:	d008      	beq.n	d9a32 <strftime+0x28e>
   d9a20:	2863      	cmp	r0, #99	; 0x63
   d9a22:	dd09      	ble.n	d9a38 <strftime+0x294>
   d9a24:	4ba8      	ldr	r3, [pc, #672]	; (d9cc8 <strftime+0x524>)
   d9a26:	4aa9      	ldr	r2, [pc, #676]	; (d9ccc <strftime+0x528>)
   d9a28:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d9a2c:	bf18      	it	ne
   d9a2e:	4613      	movne	r3, r2
   d9a30:	e003      	b.n	d9a3a <strftime+0x296>
   d9a32:	4ba6      	ldr	r3, [pc, #664]	; (d9ccc <strftime+0x528>)
   d9a34:	4aa6      	ldr	r2, [pc, #664]	; (d9cd0 <strftime+0x52c>)
   d9a36:	e001      	b.n	d9a3c <strftime+0x298>
   d9a38:	4ba4      	ldr	r3, [pc, #656]	; (d9ccc <strftime+0x528>)
   d9a3a:	4aa6      	ldr	r2, [pc, #664]	; (d9cd4 <strftime+0x530>)
   d9a3c:	9001      	str	r0, [sp, #4]
   d9a3e:	f1b8 0f01 	cmp.w	r8, #1
   d9a42:	bf98      	it	ls
   d9a44:	f04f 0802 	movls.w	r8, #2
   d9a48:	ebc1 0108 	rsb	r1, r1, r8
   d9a4c:	9100      	str	r1, [sp, #0]
   d9a4e:	489d      	ldr	r0, [pc, #628]	; (d9cc4 <strftime+0x520>)
   d9a50:	49a1      	ldr	r1, [pc, #644]	; (d9cd8 <strftime+0x534>)
   d9a52:	4583      	cmp	fp, r0
   d9a54:	bfb8      	it	lt
   d9a56:	460b      	movlt	r3, r1
   d9a58:	e21e      	b.n	d9e98 <strftime+0x6f4>
   d9a5a:	4aa0      	ldr	r2, [pc, #640]	; (d9cdc <strftime+0x538>)
   d9a5c:	49a0      	ldr	r1, [pc, #640]	; (d9ce0 <strftime+0x53c>)
   d9a5e:	68eb      	ldr	r3, [r5, #12]
   d9a60:	2864      	cmp	r0, #100	; 0x64
   d9a62:	bf08      	it	eq
   d9a64:	460a      	moveq	r2, r1
   d9a66:	1b31      	subs	r1, r6, r4
   d9a68:	1938      	adds	r0, r7, r4
   d9a6a:	f7fb ff29 	bl	d58c0 <sniprintf>
   d9a6e:	2800      	cmp	r0, #0
   d9a70:	f280 8302 	bge.w	da078 <strftime+0x8d4>
   d9a74:	e340      	b.n	da0f8 <strftime+0x954>
   d9a76:	6968      	ldr	r0, [r5, #20]
   d9a78:	692b      	ldr	r3, [r5, #16]
   d9a7a:	2800      	cmp	r0, #0
   d9a7c:	f103 0b01 	add.w	fp, r3, #1
   d9a80:	eb07 0804 	add.w	r8, r7, r4
   d9a84:	ebc4 0a06 	rsb	sl, r4, r6
   d9a88:	68eb      	ldr	r3, [r5, #12]
   d9a8a:	db05      	blt.n	d9a98 <strftime+0x2f4>
   d9a8c:	2264      	movs	r2, #100	; 0x64
   d9a8e:	fb90 f1f2 	sdiv	r1, r0, r2
   d9a92:	fb02 0011 	mls	r0, r2, r1, r0
   d9a96:	e00a      	b.n	d9aae <strftime+0x30a>
   d9a98:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d9a9c:	9307      	str	r3, [sp, #28]
   d9a9e:	f000 febd 	bl	da81c <abs>
   d9aa2:	2264      	movs	r2, #100	; 0x64
   d9aa4:	9b07      	ldr	r3, [sp, #28]
   d9aa6:	fb90 f1f2 	sdiv	r1, r0, r2
   d9aaa:	fb01 0012 	mls	r0, r1, r2, r0
   d9aae:	4a8d      	ldr	r2, [pc, #564]	; (d9ce4 <strftime+0x540>)
   d9ab0:	9001      	str	r0, [sp, #4]
   d9ab2:	9300      	str	r3, [sp, #0]
   d9ab4:	4651      	mov	r1, sl
   d9ab6:	465b      	mov	r3, fp
   d9ab8:	4640      	mov	r0, r8
   d9aba:	f7fb ff01 	bl	d58c0 <sniprintf>
   d9abe:	e7d6      	b.n	d9a6e <strftime+0x2ca>
   d9ac0:	2325      	movs	r3, #37	; 0x25
   d9ac2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   d9ac6:	f1ba 0f00 	cmp.w	sl, #0
   d9aca:	d007      	beq.n	d9adc <strftime+0x338>
   d9acc:	f1b8 0f05 	cmp.w	r8, #5
   d9ad0:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   d9ad4:	bf98      	it	ls
   d9ad6:	f04f 0806 	movls.w	r8, #6
   d9ada:	e004      	b.n	d9ae6 <strftime+0x342>
   d9adc:	232b      	movs	r3, #43	; 0x2b
   d9ade:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   d9ae2:	f04f 080a 	mov.w	r8, #10
   d9ae6:	f1b8 0306 	subs.w	r3, r8, #6
   d9aea:	d102      	bne.n	d9af2 <strftime+0x34e>
   d9aec:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   d9af0:	e00a      	b.n	d9b08 <strftime+0x364>
   d9af2:	4a7d      	ldr	r2, [pc, #500]	; (d9ce8 <strftime+0x544>)
   d9af4:	211e      	movs	r1, #30
   d9af6:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   d9afa:	f7fb fee1 	bl	d58c0 <sniprintf>
   d9afe:	2800      	cmp	r0, #0
   d9b00:	ddf4      	ble.n	d9aec <strftime+0x348>
   d9b02:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   d9b06:	4418      	add	r0, r3
   d9b08:	4978      	ldr	r1, [pc, #480]	; (d9cec <strftime+0x548>)
   d9b0a:	f7ff fdc7 	bl	d969c <strcpy>
   d9b0e:	462b      	mov	r3, r5
   d9b10:	aa0a      	add	r2, sp, #40	; 0x28
   d9b12:	1b31      	subs	r1, r6, r4
   d9b14:	1938      	adds	r0, r7, r4
   d9b16:	f7ff fe45 	bl	d97a4 <strftime>
   d9b1a:	2800      	cmp	r0, #0
   d9b1c:	f340 82ec 	ble.w	da0f8 <strftime+0x954>
   d9b20:	4404      	add	r4, r0
   d9b22:	e2de      	b.n	da0e2 <strftime+0x93e>
   d9b24:	4628      	mov	r0, r5
   d9b26:	f7ff fddc 	bl	d96e2 <iso_year_adjust>
   d9b2a:	4680      	mov	r8, r0
   d9b2c:	6968      	ldr	r0, [r5, #20]
   d9b2e:	2800      	cmp	r0, #0
   d9b30:	db05      	blt.n	d9b3e <strftime+0x39a>
   d9b32:	2264      	movs	r2, #100	; 0x64
   d9b34:	fb90 f1f2 	sdiv	r1, r0, r2
   d9b38:	fb02 0011 	mls	r0, r2, r1, r0
   d9b3c:	e008      	b.n	d9b50 <strftime+0x3ac>
   d9b3e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d9b42:	f000 fe6b 	bl	da81c <abs>
   d9b46:	2264      	movs	r2, #100	; 0x64
   d9b48:	fb90 f3f2 	sdiv	r3, r0, r2
   d9b4c:	fb03 0012 	mls	r0, r3, r2, r0
   d9b50:	f1b8 0f00 	cmp.w	r8, #0
   d9b54:	da06      	bge.n	d9b64 <strftime+0x3c0>
   d9b56:	696a      	ldr	r2, [r5, #20]
   d9b58:	4b65      	ldr	r3, [pc, #404]	; (d9cf0 <strftime+0x54c>)
   d9b5a:	429a      	cmp	r2, r3
   d9b5c:	bfb8      	it	lt
   d9b5e:	f04f 0801 	movlt.w	r8, #1
   d9b62:	e006      	b.n	d9b72 <strftime+0x3ce>
   d9b64:	d005      	beq.n	d9b72 <strftime+0x3ce>
   d9b66:	696a      	ldr	r2, [r5, #20]
   d9b68:	4b56      	ldr	r3, [pc, #344]	; (d9cc4 <strftime+0x520>)
   d9b6a:	429a      	cmp	r2, r3
   d9b6c:	bfb8      	it	lt
   d9b6e:	f04f 38ff 	movlt.w	r8, #4294967295	; 0xffffffff
   d9b72:	2364      	movs	r3, #100	; 0x64
   d9b74:	4440      	add	r0, r8
   d9b76:	fb90 f2f3 	sdiv	r2, r0, r3
   d9b7a:	fb03 0012 	mls	r0, r3, r2, r0
   d9b7e:	4418      	add	r0, r3
   d9b80:	e1f9      	b.n	d9f76 <strftime+0x7d2>
   d9b82:	4b50      	ldr	r3, [pc, #320]	; (d9cc4 <strftime+0x520>)
   d9b84:	6969      	ldr	r1, [r5, #20]
   d9b86:	9108      	str	r1, [sp, #32]
   d9b88:	4299      	cmp	r1, r3
   d9b8a:	bfac      	ite	ge
   d9b8c:	2300      	movge	r3, #0
   d9b8e:	2301      	movlt	r3, #1
   d9b90:	4628      	mov	r0, r5
   d9b92:	9307      	str	r3, [sp, #28]
   d9b94:	f7ff fda5 	bl	d96e2 <iso_year_adjust>
   d9b98:	9908      	ldr	r1, [sp, #32]
   d9b9a:	2900      	cmp	r1, #0
   d9b9c:	4683      	mov	fp, r0
   d9b9e:	db04      	blt.n	d9baa <strftime+0x406>
   d9ba0:	2364      	movs	r3, #100	; 0x64
   d9ba2:	fb91 f3f3 	sdiv	r3, r1, r3
   d9ba6:	3313      	adds	r3, #19
   d9ba8:	e008      	b.n	d9bbc <strftime+0x418>
   d9baa:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   d9bae:	9108      	str	r1, [sp, #32]
   d9bb0:	f000 fe34 	bl	da81c <abs>
   d9bb4:	9908      	ldr	r1, [sp, #32]
   d9bb6:	2364      	movs	r3, #100	; 0x64
   d9bb8:	fb90 f3f3 	sdiv	r3, r0, r3
   d9bbc:	6968      	ldr	r0, [r5, #20]
   d9bbe:	2800      	cmp	r0, #0
   d9bc0:	db06      	blt.n	d9bd0 <strftime+0x42c>
   d9bc2:	f04f 0e64 	mov.w	lr, #100	; 0x64
   d9bc6:	fb90 fcfe 	sdiv	ip, r0, lr
   d9bca:	fb0e 001c 	mls	r0, lr, ip, r0
   d9bce:	e00d      	b.n	d9bec <strftime+0x448>
   d9bd0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d9bd4:	9109      	str	r1, [sp, #36]	; 0x24
   d9bd6:	9308      	str	r3, [sp, #32]
   d9bd8:	f000 fe20 	bl	da81c <abs>
   d9bdc:	f04f 0e64 	mov.w	lr, #100	; 0x64
   d9be0:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9be2:	9b08      	ldr	r3, [sp, #32]
   d9be4:	fb90 fcfe 	sdiv	ip, r0, lr
   d9be8:	fb0c 001e 	mls	r0, ip, lr, r0
   d9bec:	f1bb 0f00 	cmp.w	fp, #0
   d9bf0:	da08      	bge.n	d9c04 <strftime+0x460>
   d9bf2:	6969      	ldr	r1, [r5, #20]
   d9bf4:	4a3e      	ldr	r2, [pc, #248]	; (d9cf0 <strftime+0x54c>)
   d9bf6:	4291      	cmp	r1, r2
   d9bf8:	da0a      	bge.n	d9c10 <strftime+0x46c>
   d9bfa:	f04f 0b01 	mov.w	fp, #1
   d9bfe:	f8cd b01c 	str.w	fp, [sp, #28]
   d9c02:	e005      	b.n	d9c10 <strftime+0x46c>
   d9c04:	d004      	beq.n	d9c10 <strftime+0x46c>
   d9c06:	4a2f      	ldr	r2, [pc, #188]	; (d9cc4 <strftime+0x520>)
   d9c08:	4291      	cmp	r1, r2
   d9c0a:	bfb8      	it	lt
   d9c0c:	f04f 3bff 	movlt.w	fp, #4294967295	; 0xffffffff
   d9c10:	eb0b 0200 	add.w	r2, fp, r0
   d9c14:	1c50      	adds	r0, r2, #1
   d9c16:	d102      	bne.n	d9c1e <strftime+0x47a>
   d9c18:	3b01      	subs	r3, #1
   d9c1a:	2263      	movs	r2, #99	; 0x63
   d9c1c:	e003      	b.n	d9c26 <strftime+0x482>
   d9c1e:	2a64      	cmp	r2, #100	; 0x64
   d9c20:	bf04      	itt	eq
   d9c22:	3301      	addeq	r3, #1
   d9c24:	2200      	moveq	r2, #0
   d9c26:	2064      	movs	r0, #100	; 0x64
   d9c28:	fb00 2303 	mla	r3, r0, r3, r2
   d9c2c:	9a07      	ldr	r2, [sp, #28]
   d9c2e:	b142      	cbz	r2, d9c42 <strftime+0x49e>
   d9c30:	222d      	movs	r2, #45	; 0x2d
   d9c32:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   d9c36:	f1b8 0f00 	cmp.w	r8, #0
   d9c3a:	d013      	beq.n	d9c64 <strftime+0x4c0>
   d9c3c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d9c40:	e010      	b.n	d9c64 <strftime+0x4c0>
   d9c42:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d9c46:	d110      	bne.n	d9c6a <strftime+0x4c6>
   d9c48:	f242 720f 	movw	r2, #9999	; 0x270f
   d9c4c:	4293      	cmp	r3, r2
   d9c4e:	d90c      	bls.n	d9c6a <strftime+0x4c6>
   d9c50:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   d9c54:	f1b8 0f00 	cmp.w	r8, #0
   d9c58:	d1f0      	bne.n	d9c3c <strftime+0x498>
   d9c5a:	aa12      	add	r2, sp, #72	; 0x48
   d9c5c:	2125      	movs	r1, #37	; 0x25
   d9c5e:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   d9c62:	e00a      	b.n	d9c7a <strftime+0x4d6>
   d9c64:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   d9c68:	e000      	b.n	d9c6c <strftime+0x4c8>
   d9c6a:	aa0a      	add	r2, sp, #40	; 0x28
   d9c6c:	2125      	movs	r1, #37	; 0x25
   d9c6e:	7011      	strb	r1, [r2, #0]
   d9c70:	f1ba 0f00 	cmp.w	sl, #0
   d9c74:	d101      	bne.n	d9c7a <strftime+0x4d6>
   d9c76:	1c50      	adds	r0, r2, #1
   d9c78:	e002      	b.n	d9c80 <strftime+0x4dc>
   d9c7a:	2130      	movs	r1, #48	; 0x30
   d9c7c:	1c90      	adds	r0, r2, #2
   d9c7e:	7051      	strb	r1, [r2, #1]
   d9c80:	491c      	ldr	r1, [pc, #112]	; (d9cf4 <strftime+0x550>)
   d9c82:	9307      	str	r3, [sp, #28]
   d9c84:	f7ff fd0a 	bl	d969c <strcpy>
   d9c88:	9b07      	ldr	r3, [sp, #28]
   d9c8a:	9300      	str	r3, [sp, #0]
   d9c8c:	e1ad      	b.n	d9fea <strftime+0x846>
   d9c8e:	4a14      	ldr	r2, [pc, #80]	; (d9ce0 <strftime+0x53c>)
   d9c90:	4912      	ldr	r1, [pc, #72]	; (d9cdc <strftime+0x538>)
   d9c92:	68ab      	ldr	r3, [r5, #8]
   d9c94:	286b      	cmp	r0, #107	; 0x6b
   d9c96:	bf08      	it	eq
   d9c98:	460a      	moveq	r2, r1
   d9c9a:	e6e4      	b.n	d9a66 <strftime+0x2c2>
   d9c9c:	68a9      	ldr	r1, [r5, #8]
   d9c9e:	230c      	movs	r3, #12
   d9ca0:	b131      	cbz	r1, d9cb0 <strftime+0x50c>
   d9ca2:	4299      	cmp	r1, r3
   d9ca4:	bf0e      	itee	eq
   d9ca6:	460b      	moveq	r3, r1
   d9ca8:	fb91 f2f3 	sdivne	r2, r1, r3
   d9cac:	fb03 1312 	mlsne	r3, r3, r2, r1
   d9cb0:	4a0a      	ldr	r2, [pc, #40]	; (d9cdc <strftime+0x538>)
   d9cb2:	490b      	ldr	r1, [pc, #44]	; (d9ce0 <strftime+0x53c>)
   d9cb4:	2849      	cmp	r0, #73	; 0x49
   d9cb6:	bf08      	it	eq
   d9cb8:	460a      	moveq	r2, r1
   d9cba:	e6d4      	b.n	d9a66 <strftime+0x2c2>
   d9cbc:	69eb      	ldr	r3, [r5, #28]
   d9cbe:	4a0e      	ldr	r2, [pc, #56]	; (d9cf8 <strftime+0x554>)
   d9cc0:	3301      	adds	r3, #1
   d9cc2:	e6d0      	b.n	d9a66 <strftime+0x2c2>
   d9cc4:	fffff894 	.word	0xfffff894
   d9cc8:	000db277 	.word	0x000db277
   d9ccc:	000dae7d 	.word	0x000dae7d
   d9cd0:	000db268 	.word	0x000db268
   d9cd4:	000db26f 	.word	0x000db26f
   d9cd8:	000db279 	.word	0x000db279
   d9cdc:	000db27b 	.word	0x000db27b
   d9ce0:	000db289 	.word	0x000db289
   d9ce4:	000db27f 	.word	0x000db27f
   d9ce8:	000db28e 	.word	0x000db28e
   d9cec:	000db292 	.word	0x000db292
   d9cf0:	fffff895 	.word	0xfffff895
   d9cf4:	000db29a 	.word	0x000db29a
   d9cf8:	000db29e 	.word	0x000db29e
   d9cfc:	692b      	ldr	r3, [r5, #16]
   d9cfe:	3301      	adds	r3, #1
   d9d00:	e13d      	b.n	d9f7e <strftime+0x7da>
   d9d02:	686b      	ldr	r3, [r5, #4]
   d9d04:	e13b      	b.n	d9f7e <strftime+0x7da>
   d9d06:	9b02      	ldr	r3, [sp, #8]
   d9d08:	429c      	cmp	r4, r3
   d9d0a:	f080 81f5 	bcs.w	da0f8 <strftime+0x954>
   d9d0e:	230a      	movs	r3, #10
   d9d10:	e1e5      	b.n	da0de <strftime+0x93a>
   d9d12:	68ab      	ldr	r3, [r5, #8]
   d9d14:	9a03      	ldr	r2, [sp, #12]
   d9d16:	2b0b      	cmp	r3, #11
   d9d18:	bfcc      	ite	gt
   d9d1a:	23a4      	movgt	r3, #164	; 0xa4
   d9d1c:	23a0      	movle	r3, #160	; 0xa0
   d9d1e:	4413      	add	r3, r2
   d9d20:	f8d3 8004 	ldr.w	r8, [r3, #4]
   d9d24:	4640      	mov	r0, r8
   d9d26:	f000 f9f1 	bl	da10c <strlen>
   d9d2a:	4bb2      	ldr	r3, [pc, #712]	; (d9ff4 <strftime+0x850>)
   d9d2c:	f8d3 e000 	ldr.w	lr, [r3]
   d9d30:	1939      	adds	r1, r7, r4
   d9d32:	4642      	mov	r2, r8
   d9d34:	4420      	add	r0, r4
   d9d36:	4284      	cmp	r4, r0
   d9d38:	f000 81d3 	beq.w	da0e2 <strftime+0x93e>
   d9d3c:	9b02      	ldr	r3, [sp, #8]
   d9d3e:	429c      	cmp	r4, r3
   d9d40:	f080 81da 	bcs.w	da0f8 <strftime+0x954>
   d9d44:	f899 3000 	ldrb.w	r3, [r9]
   d9d48:	2b50      	cmp	r3, #80	; 0x50
   d9d4a:	f104 0401 	add.w	r4, r4, #1
   d9d4e:	7813      	ldrb	r3, [r2, #0]
   d9d50:	d10a      	bne.n	d9d68 <strftime+0x5c4>
   d9d52:	eb0e 0c03 	add.w	ip, lr, r3
   d9d56:	f89c c001 	ldrb.w	ip, [ip, #1]
   d9d5a:	f00c 0c03 	and.w	ip, ip, #3
   d9d5e:	f1bc 0f01 	cmp.w	ip, #1
   d9d62:	bf08      	it	eq
   d9d64:	3320      	addeq	r3, #32
   d9d66:	b2db      	uxtb	r3, r3
   d9d68:	f801 3b01 	strb.w	r3, [r1], #1
   d9d6c:	3201      	adds	r2, #1
   d9d6e:	e7e2      	b.n	d9d36 <strftime+0x592>
   d9d70:	686b      	ldr	r3, [r5, #4]
   d9d72:	9300      	str	r3, [sp, #0]
   d9d74:	4aa0      	ldr	r2, [pc, #640]	; (d9ff8 <strftime+0x854>)
   d9d76:	68ab      	ldr	r3, [r5, #8]
   d9d78:	e139      	b.n	d9fee <strftime+0x84a>
   d9d7a:	6a2b      	ldr	r3, [r5, #32]
   d9d7c:	2b00      	cmp	r3, #0
   d9d7e:	db17      	blt.n	d9db0 <strftime+0x60c>
   d9d80:	f000 fbc4 	bl	da50c <__tz_lock>
   d9d84:	9b06      	ldr	r3, [sp, #24]
   d9d86:	b91b      	cbnz	r3, d9d90 <strftime+0x5ec>
   d9d88:	f000 fbc2 	bl	da510 <_tzset_unlocked>
   d9d8c:	2301      	movs	r3, #1
   d9d8e:	9306      	str	r3, [sp, #24]
   d9d90:	f000 fda0 	bl	da8d4 <__gettzinfo>
   d9d94:	6a2b      	ldr	r3, [r5, #32]
   d9d96:	2b00      	cmp	r3, #0
   d9d98:	bfd4      	ite	le
   d9d9a:	2300      	movle	r3, #0
   d9d9c:	2301      	movgt	r3, #1
   d9d9e:	221c      	movs	r2, #28
   d9da0:	fb02 0003 	mla	r0, r2, r3, r0
   d9da4:	6a03      	ldr	r3, [r0, #32]
   d9da6:	f1c3 0800 	rsb	r8, r3, #0
   d9daa:	f000 fbb0 	bl	da50e <__tz_unlock>
   d9dae:	e001      	b.n	d9db4 <strftime+0x610>
   d9db0:	f04f 0800 	mov.w	r8, #0
   d9db4:	f8d5 e014 	ldr.w	lr, [r5, #20]
   d9db8:	4670      	mov	r0, lr
   d9dba:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   d9dbe:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d9dc2:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   d9dc6:	2a00      	cmp	r2, #0
   d9dc8:	f173 0b00 	sbcs.w	fp, r3, #0
   d9dcc:	ebc4 0c06 	rsb	ip, r4, r6
   d9dd0:	eb07 0a04 	add.w	sl, r7, r4
   d9dd4:	da03      	bge.n	d9dde <strftime+0x63a>
   d9dd6:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   d9dda:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   d9dde:	0891      	lsrs	r1, r2, #2
   d9de0:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   d9de4:	109b      	asrs	r3, r3, #2
   d9de6:	9104      	str	r1, [sp, #16]
   d9de8:	9305      	str	r3, [sp, #20]
   d9dea:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   d9dee:	2364      	movs	r3, #100	; 0x64
   d9df0:	fb91 f1f3 	sdiv	r1, r1, r3
   d9df4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d9df8:	1a52      	subs	r2, r2, r1
   d9dfa:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   d9dfe:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   d9e02:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d9e06:	fb90 f1f1 	sdiv	r1, r0, r1
   d9e0a:	1852      	adds	r2, r2, r1
   d9e0c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   d9e10:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   d9e14:	f240 116d 	movw	r1, #365	; 0x16d
   d9e18:	fb01 fe0e 	mul.w	lr, r1, lr
   d9e1c:	69e9      	ldr	r1, [r5, #28]
   d9e1e:	eb12 020e 	adds.w	r2, r2, lr
   d9e22:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   d9e26:	1852      	adds	r2, r2, r1
   d9e28:	f04f 0e18 	mov.w	lr, #24
   d9e2c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   d9e30:	fba2 010e 	umull	r0, r1, r2, lr
   d9e34:	fb0e 1103 	mla	r1, lr, r3, r1
   d9e38:	68ab      	ldr	r3, [r5, #8]
   d9e3a:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   d9e3e:	18c0      	adds	r0, r0, r3
   d9e40:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   d9e44:	fba0 230e 	umull	r2, r3, r0, lr
   d9e48:	fb0e 3301 	mla	r3, lr, r1, r3
   d9e4c:	6869      	ldr	r1, [r5, #4]
   d9e4e:	1852      	adds	r2, r2, r1
   d9e50:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   d9e54:	fba2 010e 	umull	r0, r1, r2, lr
   d9e58:	fb0e 1103 	mla	r1, lr, r3, r1
   d9e5c:	682b      	ldr	r3, [r5, #0]
   d9e5e:	4a67      	ldr	r2, [pc, #412]	; (d9ffc <strftime+0x858>)
   d9e60:	18c0      	adds	r0, r0, r3
   d9e62:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   d9e66:	ebb0 0008 	subs.w	r0, r0, r8
   d9e6a:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   d9e6e:	e9cd 0100 	strd	r0, r1, [sp]
   d9e72:	4661      	mov	r1, ip
   d9e74:	4650      	mov	r0, sl
   d9e76:	f7fb fd23 	bl	d58c0 <sniprintf>
   d9e7a:	e5f8      	b.n	d9a6e <strftime+0x2ca>
   d9e7c:	682b      	ldr	r3, [r5, #0]
   d9e7e:	e07e      	b.n	d9f7e <strftime+0x7da>
   d9e80:	9b02      	ldr	r3, [sp, #8]
   d9e82:	429c      	cmp	r4, r3
   d9e84:	f080 8138 	bcs.w	da0f8 <strftime+0x954>
   d9e88:	2309      	movs	r3, #9
   d9e8a:	e128      	b.n	da0de <strftime+0x93a>
   d9e8c:	682b      	ldr	r3, [r5, #0]
   d9e8e:	9301      	str	r3, [sp, #4]
   d9e90:	686b      	ldr	r3, [r5, #4]
   d9e92:	9300      	str	r3, [sp, #0]
   d9e94:	4a5a      	ldr	r2, [pc, #360]	; (da000 <strftime+0x85c>)
   d9e96:	68ab      	ldr	r3, [r5, #8]
   d9e98:	1b31      	subs	r1, r6, r4
   d9e9a:	1938      	adds	r0, r7, r4
   d9e9c:	e60d      	b.n	d9aba <strftime+0x316>
   d9e9e:	9b02      	ldr	r3, [sp, #8]
   d9ea0:	429c      	cmp	r4, r3
   d9ea2:	f080 8129 	bcs.w	da0f8 <strftime+0x954>
   d9ea6:	69ab      	ldr	r3, [r5, #24]
   d9ea8:	1c62      	adds	r2, r4, #1
   d9eaa:	b90b      	cbnz	r3, d9eb0 <strftime+0x70c>
   d9eac:	2337      	movs	r3, #55	; 0x37
   d9eae:	e000      	b.n	d9eb2 <strftime+0x70e>
   d9eb0:	3330      	adds	r3, #48	; 0x30
   d9eb2:	553b      	strb	r3, [r7, r4]
   d9eb4:	4614      	mov	r4, r2
   d9eb6:	e114      	b.n	da0e2 <strftime+0x93e>
   d9eb8:	69eb      	ldr	r3, [r5, #28]
   d9eba:	69aa      	ldr	r2, [r5, #24]
   d9ebc:	3307      	adds	r3, #7
   d9ebe:	1a9b      	subs	r3, r3, r2
   d9ec0:	2207      	movs	r2, #7
   d9ec2:	fb93 f3f2 	sdiv	r3, r3, r2
   d9ec6:	e05a      	b.n	d9f7e <strftime+0x7da>
   d9ec8:	4628      	mov	r0, r5
   d9eca:	f7ff fc0a 	bl	d96e2 <iso_year_adjust>
   d9ece:	69aa      	ldr	r2, [r5, #24]
   d9ed0:	b10a      	cbz	r2, d9ed6 <strftime+0x732>
   d9ed2:	1e53      	subs	r3, r2, #1
   d9ed4:	e000      	b.n	d9ed8 <strftime+0x734>
   d9ed6:	2306      	movs	r3, #6
   d9ed8:	2800      	cmp	r0, #0
   d9eda:	dc2f      	bgt.n	d9f3c <strftime+0x798>
   d9edc:	69ea      	ldr	r2, [r5, #28]
   d9ede:	d101      	bne.n	d9ee4 <strftime+0x740>
   d9ee0:	320a      	adds	r2, #10
   d9ee2:	e03b      	b.n	d9f5c <strftime+0x7b8>
   d9ee4:	1a9a      	subs	r2, r3, r2
   d9ee6:	696b      	ldr	r3, [r5, #20]
   d9ee8:	f240 716b 	movw	r1, #1899	; 0x76b
   d9eec:	2b00      	cmp	r3, #0
   d9eee:	bfb4      	ite	lt
   d9ef0:	4608      	movlt	r0, r1
   d9ef2:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   d9ef6:	4418      	add	r0, r3
   d9ef8:	0781      	lsls	r1, r0, #30
   d9efa:	d107      	bne.n	d9f0c <strftime+0x768>
   d9efc:	4601      	mov	r1, r0
   d9efe:	f04f 0e64 	mov.w	lr, #100	; 0x64
   d9f02:	fb90 f0fe 	sdiv	r0, r0, lr
   d9f06:	fb0e 1110 	mls	r1, lr, r0, r1
   d9f0a:	b981      	cbnz	r1, d9f2e <strftime+0x78a>
   d9f0c:	2b00      	cmp	r3, #0
   d9f0e:	f240 716b 	movw	r1, #1899	; 0x76b
   d9f12:	bfa8      	it	ge
   d9f14:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   d9f18:	4419      	add	r1, r3
   d9f1a:	f44f 73c8 	mov.w	r3, #400	; 0x190
   d9f1e:	fb91 f0f3 	sdiv	r0, r1, r3
   d9f22:	fb03 1110 	mls	r1, r3, r0, r1
   d9f26:	fab1 f181 	clz	r1, r1
   d9f2a:	0949      	lsrs	r1, r1, #5
   d9f2c:	e000      	b.n	d9f30 <strftime+0x78c>
   d9f2e:	2101      	movs	r1, #1
   d9f30:	1a52      	subs	r2, r2, r1
   d9f32:	2a05      	cmp	r2, #5
   d9f34:	bfb4      	ite	lt
   d9f36:	2335      	movlt	r3, #53	; 0x35
   d9f38:	2334      	movge	r3, #52	; 0x34
   d9f3a:	e020      	b.n	d9f7e <strftime+0x7da>
   d9f3c:	2301      	movs	r3, #1
   d9f3e:	e01e      	b.n	d9f7e <strftime+0x7da>
   d9f40:	9b02      	ldr	r3, [sp, #8]
   d9f42:	429c      	cmp	r4, r3
   d9f44:	f080 80d8 	bcs.w	da0f8 <strftime+0x954>
   d9f48:	69ab      	ldr	r3, [r5, #24]
   d9f4a:	3330      	adds	r3, #48	; 0x30
   d9f4c:	e0c7      	b.n	da0de <strftime+0x93a>
   d9f4e:	69aa      	ldr	r2, [r5, #24]
   d9f50:	b10a      	cbz	r2, d9f56 <strftime+0x7b2>
   d9f52:	1e53      	subs	r3, r2, #1
   d9f54:	e000      	b.n	d9f58 <strftime+0x7b4>
   d9f56:	2306      	movs	r3, #6
   d9f58:	69ea      	ldr	r2, [r5, #28]
   d9f5a:	3207      	adds	r2, #7
   d9f5c:	1ad2      	subs	r2, r2, r3
   d9f5e:	2307      	movs	r3, #7
   d9f60:	fb92 f3f3 	sdiv	r3, r2, r3
   d9f64:	e00b      	b.n	d9f7e <strftime+0x7da>
   d9f66:	6968      	ldr	r0, [r5, #20]
   d9f68:	2800      	cmp	r0, #0
   d9f6a:	da03      	bge.n	d9f74 <strftime+0x7d0>
   d9f6c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d9f70:	f000 fc54 	bl	da81c <abs>
   d9f74:	2364      	movs	r3, #100	; 0x64
   d9f76:	fb90 f2f3 	sdiv	r2, r0, r3
   d9f7a:	fb02 0313 	mls	r3, r2, r3, r0
   d9f7e:	4a21      	ldr	r2, [pc, #132]	; (da004 <strftime+0x860>)
   d9f80:	e571      	b.n	d9a66 <strftime+0x2c2>
   d9f82:	696b      	ldr	r3, [r5, #20]
   d9f84:	4a20      	ldr	r2, [pc, #128]	; (da008 <strftime+0x864>)
   d9f86:	4293      	cmp	r3, r2
   d9f88:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   d9f8c:	da05      	bge.n	d9f9a <strftime+0x7f6>
   d9f8e:	232d      	movs	r3, #45	; 0x2d
   d9f90:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   d9f94:	f1cb 0b00 	rsb	fp, fp, #0
   d9f98:	e008      	b.n	d9fac <strftime+0x808>
   d9f9a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d9f9e:	d10d      	bne.n	d9fbc <strftime+0x818>
   d9fa0:	f242 730f 	movw	r3, #9999	; 0x270f
   d9fa4:	459b      	cmp	fp, r3
   d9fa6:	d911      	bls.n	d9fcc <strftime+0x828>
   d9fa8:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   d9fac:	f1b8 0f00 	cmp.w	r8, #0
   d9fb0:	d001      	beq.n	d9fb6 <strftime+0x812>
   d9fb2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d9fb6:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   d9fba:	e000      	b.n	d9fbe <strftime+0x81a>
   d9fbc:	ab0a      	add	r3, sp, #40	; 0x28
   d9fbe:	2225      	movs	r2, #37	; 0x25
   d9fc0:	701a      	strb	r2, [r3, #0]
   d9fc2:	f1ba 0f00 	cmp.w	sl, #0
   d9fc6:	d108      	bne.n	d9fda <strftime+0x836>
   d9fc8:	1c58      	adds	r0, r3, #1
   d9fca:	e009      	b.n	d9fe0 <strftime+0x83c>
   d9fcc:	f1b8 0f00 	cmp.w	r8, #0
   d9fd0:	d1f4      	bne.n	d9fbc <strftime+0x818>
   d9fd2:	2325      	movs	r3, #37	; 0x25
   d9fd4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   d9fd8:	ab0a      	add	r3, sp, #40	; 0x28
   d9fda:	2230      	movs	r2, #48	; 0x30
   d9fdc:	1c98      	adds	r0, r3, #2
   d9fde:	705a      	strb	r2, [r3, #1]
   d9fe0:	490a      	ldr	r1, [pc, #40]	; (da00c <strftime+0x868>)
   d9fe2:	f7ff fb5b 	bl	d969c <strcpy>
   d9fe6:	f8cd b000 	str.w	fp, [sp]
   d9fea:	4643      	mov	r3, r8
   d9fec:	aa0a      	add	r2, sp, #40	; 0x28
   d9fee:	1b31      	subs	r1, r6, r4
   d9ff0:	1938      	adds	r0, r7, r4
   d9ff2:	e03e      	b.n	da072 <strftime+0x8ce>
   d9ff4:	2003e0a4 	.word	0x2003e0a4
   d9ff8:	000db2ad 	.word	0x000db2ad
   d9ffc:	000db2a3 	.word	0x000db2a3
   da000:	000db2a8 	.word	0x000db2a8
   da004:	000db289 	.word	0x000db289
   da008:	fffff894 	.word	0xfffff894
   da00c:	000db29a 	.word	0x000db29a
   da010:	6a2b      	ldr	r3, [r5, #32]
   da012:	2b00      	cmp	r3, #0
   da014:	db65      	blt.n	da0e2 <strftime+0x93e>
   da016:	f000 fa79 	bl	da50c <__tz_lock>
   da01a:	9b06      	ldr	r3, [sp, #24]
   da01c:	b91b      	cbnz	r3, da026 <strftime+0x882>
   da01e:	f000 fa77 	bl	da510 <_tzset_unlocked>
   da022:	2301      	movs	r3, #1
   da024:	9306      	str	r3, [sp, #24]
   da026:	f000 fc55 	bl	da8d4 <__gettzinfo>
   da02a:	6a2b      	ldr	r3, [r5, #32]
   da02c:	2b00      	cmp	r3, #0
   da02e:	bfd4      	ite	le
   da030:	2300      	movle	r3, #0
   da032:	2301      	movgt	r3, #1
   da034:	221c      	movs	r2, #28
   da036:	fb02 0003 	mla	r0, r2, r3, r0
   da03a:	eb07 0a04 	add.w	sl, r7, r4
   da03e:	6a03      	ldr	r3, [r0, #32]
   da040:	f1c3 0800 	rsb	r8, r3, #0
   da044:	f000 fa63 	bl	da50e <__tz_unlock>
   da048:	233c      	movs	r3, #60	; 0x3c
   da04a:	fb98 f0f3 	sdiv	r0, r8, r3
   da04e:	9307      	str	r3, [sp, #28]
   da050:	f000 fc44 	bl	da8dc <labs>
   da054:	9b07      	ldr	r3, [sp, #28]
   da056:	fb90 f2f3 	sdiv	r2, r0, r3
   da05a:	ebc4 0b06 	rsb	fp, r4, r6
   da05e:	fb02 0013 	mls	r0, r2, r3, r0
   da062:	4a28      	ldr	r2, [pc, #160]	; (da104 <strftime+0x960>)
   da064:	9000      	str	r0, [sp, #0]
   da066:	4659      	mov	r1, fp
   da068:	4650      	mov	r0, sl
   da06a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da06e:	fb98 f3f3 	sdiv	r3, r8, r3
   da072:	f7fb fc25 	bl	d58c0 <sniprintf>
   da076:	e4fa      	b.n	d9a6e <strftime+0x2ca>
   da078:	4404      	add	r4, r0
   da07a:	42a6      	cmp	r6, r4
   da07c:	d831      	bhi.n	da0e2 <strftime+0x93e>
   da07e:	e03b      	b.n	da0f8 <strftime+0x954>
   da080:	6a2b      	ldr	r3, [r5, #32]
   da082:	2b00      	cmp	r3, #0
   da084:	db2d      	blt.n	da0e2 <strftime+0x93e>
   da086:	f000 fa41 	bl	da50c <__tz_lock>
   da08a:	9b06      	ldr	r3, [sp, #24]
   da08c:	b91b      	cbnz	r3, da096 <strftime+0x8f2>
   da08e:	f000 fa3f 	bl	da510 <_tzset_unlocked>
   da092:	2301      	movs	r3, #1
   da094:	9306      	str	r3, [sp, #24]
   da096:	6a2b      	ldr	r3, [r5, #32]
   da098:	4a1b      	ldr	r2, [pc, #108]	; (da108 <strftime+0x964>)
   da09a:	2b00      	cmp	r3, #0
   da09c:	bfd4      	ite	le
   da09e:	2300      	movle	r3, #0
   da0a0:	2301      	movgt	r3, #1
   da0a2:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   da0a6:	4640      	mov	r0, r8
   da0a8:	f000 f830 	bl	da10c <strlen>
   da0ac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da0b0:	193b      	adds	r3, r7, r4
   da0b2:	4420      	add	r0, r4
   da0b4:	4284      	cmp	r4, r0
   da0b6:	d00b      	beq.n	da0d0 <strftime+0x92c>
   da0b8:	9a02      	ldr	r2, [sp, #8]
   da0ba:	4294      	cmp	r4, r2
   da0bc:	d205      	bcs.n	da0ca <strftime+0x926>
   da0be:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da0c2:	f803 2b01 	strb.w	r2, [r3], #1
   da0c6:	3401      	adds	r4, #1
   da0c8:	e7f4      	b.n	da0b4 <strftime+0x910>
   da0ca:	f000 fa20 	bl	da50e <__tz_unlock>
   da0ce:	e013      	b.n	da0f8 <strftime+0x954>
   da0d0:	f000 fa1d 	bl	da50e <__tz_unlock>
   da0d4:	e005      	b.n	da0e2 <strftime+0x93e>
   da0d6:	9b02      	ldr	r3, [sp, #8]
   da0d8:	429c      	cmp	r4, r3
   da0da:	d20d      	bcs.n	da0f8 <strftime+0x954>
   da0dc:	2325      	movs	r3, #37	; 0x25
   da0de:	553b      	strb	r3, [r7, r4]
   da0e0:	3401      	adds	r4, #1
   da0e2:	f899 3000 	ldrb.w	r3, [r9]
   da0e6:	b11b      	cbz	r3, da0f0 <strftime+0x94c>
   da0e8:	f109 0901 	add.w	r9, r9, #1
   da0ec:	f7ff bb69 	b.w	d97c2 <strftime+0x1e>
   da0f0:	b126      	cbz	r6, da0fc <strftime+0x958>
   da0f2:	2300      	movs	r3, #0
   da0f4:	553b      	strb	r3, [r7, r4]
   da0f6:	e001      	b.n	da0fc <strftime+0x958>
   da0f8:	2000      	movs	r0, #0
   da0fa:	e000      	b.n	da0fe <strftime+0x95a>
   da0fc:	4620      	mov	r0, r4
   da0fe:	b013      	add	sp, #76	; 0x4c
   da100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da104:	000db2b7 	.word	0x000db2b7
   da108:	2003e10c 	.word	0x2003e10c

000da10c <strlen>:
   da10c:	4603      	mov	r3, r0
   da10e:	f813 2b01 	ldrb.w	r2, [r3], #1
   da112:	2a00      	cmp	r2, #0
   da114:	d1fb      	bne.n	da10e <strlen+0x2>
   da116:	1a18      	subs	r0, r3, r0
   da118:	3801      	subs	r0, #1
   da11a:	4770      	bx	lr

000da11c <strncmp>:
   da11c:	b530      	push	{r4, r5, lr}
   da11e:	b182      	cbz	r2, da142 <strncmp+0x26>
   da120:	1e45      	subs	r5, r0, #1
   da122:	3901      	subs	r1, #1
   da124:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   da128:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   da12c:	42a3      	cmp	r3, r4
   da12e:	d106      	bne.n	da13e <strncmp+0x22>
   da130:	43ec      	mvns	r4, r5
   da132:	4414      	add	r4, r2
   da134:	42e0      	cmn	r0, r4
   da136:	d001      	beq.n	da13c <strncmp+0x20>
   da138:	2b00      	cmp	r3, #0
   da13a:	d1f3      	bne.n	da124 <strncmp+0x8>
   da13c:	461c      	mov	r4, r3
   da13e:	1b18      	subs	r0, r3, r4
   da140:	bd30      	pop	{r4, r5, pc}
   da142:	4610      	mov	r0, r2
   da144:	bd30      	pop	{r4, r5, pc}

000da146 <strrchr>:
   da146:	b538      	push	{r3, r4, r5, lr}
   da148:	4603      	mov	r3, r0
   da14a:	460d      	mov	r5, r1
   da14c:	b141      	cbz	r1, da160 <strrchr+0x1a>
   da14e:	2400      	movs	r4, #0
   da150:	4629      	mov	r1, r5
   da152:	4618      	mov	r0, r3
   da154:	f7ff fa80 	bl	d9658 <strchr>
   da158:	b130      	cbz	r0, da168 <strrchr+0x22>
   da15a:	1c43      	adds	r3, r0, #1
   da15c:	4604      	mov	r4, r0
   da15e:	e7f7      	b.n	da150 <strrchr+0xa>
   da160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da164:	f7ff ba78 	b.w	d9658 <strchr>
   da168:	4620      	mov	r0, r4
   da16a:	bd38      	pop	{r3, r4, r5, pc}

000da16c <_strtol_r>:
   da16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da170:	4680      	mov	r8, r0
   da172:	4840      	ldr	r0, [pc, #256]	; (da274 <_strtol_r+0x108>)
   da174:	f8d0 9000 	ldr.w	r9, [r0]
   da178:	460f      	mov	r7, r1
   da17a:	463d      	mov	r5, r7
   da17c:	f815 4b01 	ldrb.w	r4, [r5], #1
   da180:	eb09 0004 	add.w	r0, r9, r4
   da184:	7840      	ldrb	r0, [r0, #1]
   da186:	f000 0008 	and.w	r0, r0, #8
   da18a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   da18e:	b108      	cbz	r0, da194 <_strtol_r+0x28>
   da190:	462f      	mov	r7, r5
   da192:	e7f2      	b.n	da17a <_strtol_r+0xe>
   da194:	2c2d      	cmp	r4, #45	; 0x2d
   da196:	d103      	bne.n	da1a0 <_strtol_r+0x34>
   da198:	1cbd      	adds	r5, r7, #2
   da19a:	787c      	ldrb	r4, [r7, #1]
   da19c:	2601      	movs	r6, #1
   da19e:	e003      	b.n	da1a8 <_strtol_r+0x3c>
   da1a0:	2c2b      	cmp	r4, #43	; 0x2b
   da1a2:	bf04      	itt	eq
   da1a4:	787c      	ldrbeq	r4, [r7, #1]
   da1a6:	1cbd      	addeq	r5, r7, #2
   da1a8:	b113      	cbz	r3, da1b0 <_strtol_r+0x44>
   da1aa:	2b10      	cmp	r3, #16
   da1ac:	d10a      	bne.n	da1c4 <_strtol_r+0x58>
   da1ae:	e05b      	b.n	da268 <_strtol_r+0xfc>
   da1b0:	2c30      	cmp	r4, #48	; 0x30
   da1b2:	d157      	bne.n	da264 <_strtol_r+0xf8>
   da1b4:	7828      	ldrb	r0, [r5, #0]
   da1b6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da1ba:	2858      	cmp	r0, #88	; 0x58
   da1bc:	d14d      	bne.n	da25a <_strtol_r+0xee>
   da1be:	786c      	ldrb	r4, [r5, #1]
   da1c0:	2310      	movs	r3, #16
   da1c2:	3502      	adds	r5, #2
   da1c4:	2e00      	cmp	r6, #0
   da1c6:	bf14      	ite	ne
   da1c8:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   da1cc:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   da1d0:	2700      	movs	r7, #0
   da1d2:	fbbc faf3 	udiv	sl, ip, r3
   da1d6:	4638      	mov	r0, r7
   da1d8:	fb03 cc1a 	mls	ip, r3, sl, ip
   da1dc:	eb09 0e04 	add.w	lr, r9, r4
   da1e0:	f89e e001 	ldrb.w	lr, [lr, #1]
   da1e4:	f01e 0f04 	tst.w	lr, #4
   da1e8:	d001      	beq.n	da1ee <_strtol_r+0x82>
   da1ea:	3c30      	subs	r4, #48	; 0x30
   da1ec:	e00b      	b.n	da206 <_strtol_r+0x9a>
   da1ee:	f01e 0e03 	ands.w	lr, lr, #3
   da1f2:	d01b      	beq.n	da22c <_strtol_r+0xc0>
   da1f4:	f1be 0f01 	cmp.w	lr, #1
   da1f8:	bf0c      	ite	eq
   da1fa:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   da1fe:	f04f 0e57 	movne.w	lr, #87	; 0x57
   da202:	ebce 0404 	rsb	r4, lr, r4
   da206:	42a3      	cmp	r3, r4
   da208:	dd10      	ble.n	da22c <_strtol_r+0xc0>
   da20a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   da20e:	d00a      	beq.n	da226 <_strtol_r+0xba>
   da210:	4550      	cmp	r0, sl
   da212:	d806      	bhi.n	da222 <_strtol_r+0xb6>
   da214:	d101      	bne.n	da21a <_strtol_r+0xae>
   da216:	4564      	cmp	r4, ip
   da218:	dc03      	bgt.n	da222 <_strtol_r+0xb6>
   da21a:	fb03 4000 	mla	r0, r3, r0, r4
   da21e:	2701      	movs	r7, #1
   da220:	e001      	b.n	da226 <_strtol_r+0xba>
   da222:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   da226:	f815 4b01 	ldrb.w	r4, [r5], #1
   da22a:	e7d7      	b.n	da1dc <_strtol_r+0x70>
   da22c:	1c7b      	adds	r3, r7, #1
   da22e:	d10c      	bne.n	da24a <_strtol_r+0xde>
   da230:	2e00      	cmp	r6, #0
   da232:	f04f 0322 	mov.w	r3, #34	; 0x22
   da236:	bf14      	ite	ne
   da238:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   da23c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   da240:	f8c8 3000 	str.w	r3, [r8]
   da244:	b92a      	cbnz	r2, da252 <_strtol_r+0xe6>
   da246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da24a:	b106      	cbz	r6, da24e <_strtol_r+0xe2>
   da24c:	4240      	negs	r0, r0
   da24e:	b172      	cbz	r2, da26e <_strtol_r+0x102>
   da250:	b107      	cbz	r7, da254 <_strtol_r+0xe8>
   da252:	1e69      	subs	r1, r5, #1
   da254:	6011      	str	r1, [r2, #0]
   da256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da25a:	2430      	movs	r4, #48	; 0x30
   da25c:	2b00      	cmp	r3, #0
   da25e:	d1b1      	bne.n	da1c4 <_strtol_r+0x58>
   da260:	2308      	movs	r3, #8
   da262:	e7af      	b.n	da1c4 <_strtol_r+0x58>
   da264:	230a      	movs	r3, #10
   da266:	e7ad      	b.n	da1c4 <_strtol_r+0x58>
   da268:	2c30      	cmp	r4, #48	; 0x30
   da26a:	d0a3      	beq.n	da1b4 <_strtol_r+0x48>
   da26c:	e7aa      	b.n	da1c4 <_strtol_r+0x58>
   da26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da272:	bf00      	nop
   da274:	2003e0a4 	.word	0x2003e0a4

000da278 <strtol>:
   da278:	4613      	mov	r3, r2
   da27a:	460a      	mov	r2, r1
   da27c:	4601      	mov	r1, r0
   da27e:	4802      	ldr	r0, [pc, #8]	; (da288 <strtol+0x10>)
   da280:	6800      	ldr	r0, [r0, #0]
   da282:	f7ff bf73 	b.w	da16c <_strtol_r>
   da286:	bf00      	nop
   da288:	2003e108 	.word	0x2003e108

000da28c <_strtoul_r>:
   da28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da290:	4680      	mov	r8, r0
   da292:	483c      	ldr	r0, [pc, #240]	; (da384 <_strtoul_r+0xf8>)
   da294:	f8d0 9000 	ldr.w	r9, [r0]
   da298:	460e      	mov	r6, r1
   da29a:	4635      	mov	r5, r6
   da29c:	f815 4b01 	ldrb.w	r4, [r5], #1
   da2a0:	eb09 0004 	add.w	r0, r9, r4
   da2a4:	7840      	ldrb	r0, [r0, #1]
   da2a6:	f000 0008 	and.w	r0, r0, #8
   da2aa:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   da2ae:	b108      	cbz	r0, da2b4 <_strtoul_r+0x28>
   da2b0:	462e      	mov	r6, r5
   da2b2:	e7f2      	b.n	da29a <_strtoul_r+0xe>
   da2b4:	2c2d      	cmp	r4, #45	; 0x2d
   da2b6:	d103      	bne.n	da2c0 <_strtoul_r+0x34>
   da2b8:	1cb5      	adds	r5, r6, #2
   da2ba:	7874      	ldrb	r4, [r6, #1]
   da2bc:	2701      	movs	r7, #1
   da2be:	e003      	b.n	da2c8 <_strtoul_r+0x3c>
   da2c0:	2c2b      	cmp	r4, #43	; 0x2b
   da2c2:	bf04      	itt	eq
   da2c4:	7874      	ldrbeq	r4, [r6, #1]
   da2c6:	1cb5      	addeq	r5, r6, #2
   da2c8:	b113      	cbz	r3, da2d0 <_strtoul_r+0x44>
   da2ca:	2b10      	cmp	r3, #16
   da2cc:	d10a      	bne.n	da2e4 <_strtoul_r+0x58>
   da2ce:	e053      	b.n	da378 <_strtoul_r+0xec>
   da2d0:	2c30      	cmp	r4, #48	; 0x30
   da2d2:	d14f      	bne.n	da374 <_strtoul_r+0xe8>
   da2d4:	7828      	ldrb	r0, [r5, #0]
   da2d6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da2da:	2858      	cmp	r0, #88	; 0x58
   da2dc:	d145      	bne.n	da36a <_strtoul_r+0xde>
   da2de:	786c      	ldrb	r4, [r5, #1]
   da2e0:	2310      	movs	r3, #16
   da2e2:	3502      	adds	r5, #2
   da2e4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   da2e8:	2600      	movs	r6, #0
   da2ea:	fbbc fcf3 	udiv	ip, ip, r3
   da2ee:	fb03 fa0c 	mul.w	sl, r3, ip
   da2f2:	ea6f 0a0a 	mvn.w	sl, sl
   da2f6:	4630      	mov	r0, r6
   da2f8:	eb09 0e04 	add.w	lr, r9, r4
   da2fc:	f89e e001 	ldrb.w	lr, [lr, #1]
   da300:	f01e 0f04 	tst.w	lr, #4
   da304:	d001      	beq.n	da30a <_strtoul_r+0x7e>
   da306:	3c30      	subs	r4, #48	; 0x30
   da308:	e00b      	b.n	da322 <_strtoul_r+0x96>
   da30a:	f01e 0e03 	ands.w	lr, lr, #3
   da30e:	d01a      	beq.n	da346 <_strtoul_r+0xba>
   da310:	f1be 0f01 	cmp.w	lr, #1
   da314:	bf0c      	ite	eq
   da316:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   da31a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   da31e:	ebce 0404 	rsb	r4, lr, r4
   da322:	42a3      	cmp	r3, r4
   da324:	dd0f      	ble.n	da346 <_strtoul_r+0xba>
   da326:	2e00      	cmp	r6, #0
   da328:	db08      	blt.n	da33c <_strtoul_r+0xb0>
   da32a:	4560      	cmp	r0, ip
   da32c:	d806      	bhi.n	da33c <_strtoul_r+0xb0>
   da32e:	d101      	bne.n	da334 <_strtoul_r+0xa8>
   da330:	4554      	cmp	r4, sl
   da332:	dc03      	bgt.n	da33c <_strtoul_r+0xb0>
   da334:	fb03 4000 	mla	r0, r3, r0, r4
   da338:	2601      	movs	r6, #1
   da33a:	e001      	b.n	da340 <_strtoul_r+0xb4>
   da33c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   da340:	f815 4b01 	ldrb.w	r4, [r5], #1
   da344:	e7d8      	b.n	da2f8 <_strtoul_r+0x6c>
   da346:	2e00      	cmp	r6, #0
   da348:	da07      	bge.n	da35a <_strtoul_r+0xce>
   da34a:	2322      	movs	r3, #34	; 0x22
   da34c:	f8c8 3000 	str.w	r3, [r8]
   da350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da354:	b92a      	cbnz	r2, da362 <_strtoul_r+0xd6>
   da356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da35a:	b107      	cbz	r7, da35e <_strtoul_r+0xd2>
   da35c:	4240      	negs	r0, r0
   da35e:	b172      	cbz	r2, da37e <_strtoul_r+0xf2>
   da360:	b106      	cbz	r6, da364 <_strtoul_r+0xd8>
   da362:	1e69      	subs	r1, r5, #1
   da364:	6011      	str	r1, [r2, #0]
   da366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da36a:	2430      	movs	r4, #48	; 0x30
   da36c:	2b00      	cmp	r3, #0
   da36e:	d1b9      	bne.n	da2e4 <_strtoul_r+0x58>
   da370:	2308      	movs	r3, #8
   da372:	e7b7      	b.n	da2e4 <_strtoul_r+0x58>
   da374:	230a      	movs	r3, #10
   da376:	e7b5      	b.n	da2e4 <_strtoul_r+0x58>
   da378:	2c30      	cmp	r4, #48	; 0x30
   da37a:	d0ab      	beq.n	da2d4 <_strtoul_r+0x48>
   da37c:	e7b2      	b.n	da2e4 <_strtoul_r+0x58>
   da37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da382:	bf00      	nop
   da384:	2003e0a4 	.word	0x2003e0a4

000da388 <strtoul>:
   da388:	4613      	mov	r3, r2
   da38a:	460a      	mov	r2, r1
   da38c:	4601      	mov	r1, r0
   da38e:	4802      	ldr	r0, [pc, #8]	; (da398 <strtoul+0x10>)
   da390:	6800      	ldr	r0, [r0, #0]
   da392:	f7ff bf7b 	b.w	da28c <_strtoul_r>
   da396:	bf00      	nop
   da398:	2003e108 	.word	0x2003e108

000da39c <__get_current_time_locale>:
   da39c:	4b04      	ldr	r3, [pc, #16]	; (da3b0 <__get_current_time_locale+0x14>)
   da39e:	4a05      	ldr	r2, [pc, #20]	; (da3b4 <__get_current_time_locale+0x18>)
   da3a0:	6818      	ldr	r0, [r3, #0]
   da3a2:	4b05      	ldr	r3, [pc, #20]	; (da3b8 <__get_current_time_locale+0x1c>)
   da3a4:	2800      	cmp	r0, #0
   da3a6:	bf14      	ite	ne
   da3a8:	4610      	movne	r0, r2
   da3aa:	4618      	moveq	r0, r3
   da3ac:	4770      	bx	lr
   da3ae:	bf00      	nop
   da3b0:	2003e6c8 	.word	0x2003e6c8
   da3b4:	2003e6cc 	.word	0x2003e6cc
   da3b8:	000db3f0 	.word	0x000db3f0

000da3bc <__tzcalc_limits>:
   da3bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da3c0:	4604      	mov	r4, r0
   da3c2:	f000 fa87 	bl	da8d4 <__gettzinfo>
   da3c6:	f240 73b1 	movw	r3, #1969	; 0x7b1
   da3ca:	429c      	cmp	r4, r3
   da3cc:	f340 8096 	ble.w	da4fc <__tzcalc_limits+0x140>
   da3d0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   da3d4:	18e3      	adds	r3, r4, r3
   da3d6:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   da3da:	109b      	asrs	r3, r3, #2
   da3dc:	f240 156d 	movw	r5, #365	; 0x16d
   da3e0:	fb05 3502 	mla	r5, r5, r2, r3
   da3e4:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   da3e8:	f06f 0363 	mvn.w	r3, #99	; 0x63
   da3ec:	fb92 f3f3 	sdiv	r3, r2, r3
   da3f0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   da3f4:	442b      	add	r3, r5
   da3f6:	18a5      	adds	r5, r4, r2
   da3f8:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da3fc:	fb95 f5f2 	sdiv	r5, r5, r2
   da400:	441d      	add	r5, r3
   da402:	2364      	movs	r3, #100	; 0x64
   da404:	fb94 f7f2 	sdiv	r7, r4, r2
   da408:	fb94 f6f3 	sdiv	r6, r4, r3
   da40c:	fb02 4717 	mls	r7, r2, r7, r4
   da410:	fb03 4616 	mls	r6, r3, r6, r4
   da414:	f100 0338 	add.w	r3, r0, #56	; 0x38
   da418:	fab7 fe87 	clz	lr, r7
   da41c:	9301      	str	r3, [sp, #4]
   da41e:	f004 0303 	and.w	r3, r4, #3
   da422:	6044      	str	r4, [r0, #4]
   da424:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   da428:	4601      	mov	r1, r0
   da42a:	9300      	str	r3, [sp, #0]
   da42c:	f04f 0c07 	mov.w	ip, #7
   da430:	7a0b      	ldrb	r3, [r1, #8]
   da432:	2b4a      	cmp	r3, #74	; 0x4a
   da434:	d10e      	bne.n	da454 <__tzcalc_limits+0x98>
   da436:	694b      	ldr	r3, [r1, #20]
   da438:	9a00      	ldr	r2, [sp, #0]
   da43a:	18ec      	adds	r4, r5, r3
   da43c:	b902      	cbnz	r2, da440 <__tzcalc_limits+0x84>
   da43e:	b906      	cbnz	r6, da442 <__tzcalc_limits+0x86>
   da440:	b927      	cbnz	r7, da44c <__tzcalc_limits+0x90>
   da442:	2b3b      	cmp	r3, #59	; 0x3b
   da444:	bfd4      	ite	le
   da446:	2300      	movle	r3, #0
   da448:	2301      	movgt	r3, #1
   da44a:	e000      	b.n	da44e <__tzcalc_limits+0x92>
   da44c:	2300      	movs	r3, #0
   da44e:	4423      	add	r3, r4
   da450:	3b01      	subs	r3, #1
   da452:	e03f      	b.n	da4d4 <__tzcalc_limits+0x118>
   da454:	2b44      	cmp	r3, #68	; 0x44
   da456:	d102      	bne.n	da45e <__tzcalc_limits+0xa2>
   da458:	694b      	ldr	r3, [r1, #20]
   da45a:	442b      	add	r3, r5
   da45c:	e03a      	b.n	da4d4 <__tzcalc_limits+0x118>
   da45e:	9b00      	ldr	r3, [sp, #0]
   da460:	b92b      	cbnz	r3, da46e <__tzcalc_limits+0xb2>
   da462:	2e00      	cmp	r6, #0
   da464:	bf0c      	ite	eq
   da466:	46f0      	moveq	r8, lr
   da468:	f04f 0801 	movne.w	r8, #1
   da46c:	e000      	b.n	da470 <__tzcalc_limits+0xb4>
   da46e:	46f0      	mov	r8, lr
   da470:	4b24      	ldr	r3, [pc, #144]	; (da504 <__tzcalc_limits+0x148>)
   da472:	68cc      	ldr	r4, [r1, #12]
   da474:	2230      	movs	r2, #48	; 0x30
   da476:	fb02 3808 	mla	r8, r2, r8, r3
   da47a:	f1a8 0a04 	sub.w	sl, r8, #4
   da47e:	46a9      	mov	r9, r5
   da480:	2301      	movs	r3, #1
   da482:	42a3      	cmp	r3, r4
   da484:	da04      	bge.n	da490 <__tzcalc_limits+0xd4>
   da486:	f85a bf04 	ldr.w	fp, [sl, #4]!
   da48a:	3301      	adds	r3, #1
   da48c:	44d9      	add	r9, fp
   da48e:	e7f8      	b.n	da482 <__tzcalc_limits+0xc6>
   da490:	f109 0304 	add.w	r3, r9, #4
   da494:	fb93 fbfc 	sdiv	fp, r3, ip
   da498:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   da49c:	2c01      	cmp	r4, #1
   da49e:	ebca 0a03 	rsb	sl, sl, r3
   da4a2:	694b      	ldr	r3, [r1, #20]
   da4a4:	bfb8      	it	lt
   da4a6:	2401      	movlt	r4, #1
   da4a8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   da4ac:	ebb3 0a0a 	subs.w	sl, r3, sl
   da4b0:	690b      	ldr	r3, [r1, #16]
   da4b2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   da4b6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   da4ba:	bf48      	it	mi
   da4bc:	f10a 0a07 	addmi.w	sl, sl, #7
   da4c0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   da4c4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   da4c8:	4453      	add	r3, sl
   da4ca:	42a3      	cmp	r3, r4
   da4cc:	db01      	blt.n	da4d2 <__tzcalc_limits+0x116>
   da4ce:	3b07      	subs	r3, #7
   da4d0:	e7fb      	b.n	da4ca <__tzcalc_limits+0x10e>
   da4d2:	444b      	add	r3, r9
   da4d4:	698c      	ldr	r4, [r1, #24]
   da4d6:	4a0c      	ldr	r2, [pc, #48]	; (da508 <__tzcalc_limits+0x14c>)
   da4d8:	fb02 4303 	mla	r3, r2, r3, r4
   da4dc:	6a0c      	ldr	r4, [r1, #32]
   da4de:	4423      	add	r3, r4
   da4e0:	f841 3f1c 	str.w	r3, [r1, #28]!
   da4e4:	9b01      	ldr	r3, [sp, #4]
   da4e6:	4299      	cmp	r1, r3
   da4e8:	d1a2      	bne.n	da430 <__tzcalc_limits+0x74>
   da4ea:	69c3      	ldr	r3, [r0, #28]
   da4ec:	6b82      	ldr	r2, [r0, #56]	; 0x38
   da4ee:	4293      	cmp	r3, r2
   da4f0:	bfac      	ite	ge
   da4f2:	2300      	movge	r3, #0
   da4f4:	2301      	movlt	r3, #1
   da4f6:	6003      	str	r3, [r0, #0]
   da4f8:	2001      	movs	r0, #1
   da4fa:	e000      	b.n	da4fe <__tzcalc_limits+0x142>
   da4fc:	2000      	movs	r0, #0
   da4fe:	b003      	add	sp, #12
   da500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da504:	000db208 	.word	0x000db208
   da508:	00015180 	.word	0x00015180

000da50c <__tz_lock>:
   da50c:	4770      	bx	lr

000da50e <__tz_unlock>:
   da50e:	4770      	bx	lr

000da510 <_tzset_unlocked>:
   da510:	4b01      	ldr	r3, [pc, #4]	; (da518 <_tzset_unlocked+0x8>)
   da512:	6818      	ldr	r0, [r3, #0]
   da514:	f000 b802 	b.w	da51c <_tzset_unlocked_r>
   da518:	2003e108 	.word	0x2003e108

000da51c <_tzset_unlocked_r>:
   da51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da520:	b08d      	sub	sp, #52	; 0x34
   da522:	4607      	mov	r7, r0
   da524:	f000 f9d6 	bl	da8d4 <__gettzinfo>
   da528:	49b0      	ldr	r1, [pc, #704]	; (da7ec <_tzset_unlocked_r+0x2d0>)
   da52a:	4eb1      	ldr	r6, [pc, #708]	; (da7f0 <_tzset_unlocked_r+0x2d4>)
   da52c:	4604      	mov	r4, r0
   da52e:	4638      	mov	r0, r7
   da530:	f000 f9c8 	bl	da8c4 <_getenv_r>
   da534:	4605      	mov	r5, r0
   da536:	b960      	cbnz	r0, da552 <_tzset_unlocked_r+0x36>
   da538:	4bae      	ldr	r3, [pc, #696]	; (da7f4 <_tzset_unlocked_r+0x2d8>)
   da53a:	4aaf      	ldr	r2, [pc, #700]	; (da7f8 <_tzset_unlocked_r+0x2dc>)
   da53c:	6018      	str	r0, [r3, #0]
   da53e:	4baf      	ldr	r3, [pc, #700]	; (da7fc <_tzset_unlocked_r+0x2e0>)
   da540:	6018      	str	r0, [r3, #0]
   da542:	4baf      	ldr	r3, [pc, #700]	; (da800 <_tzset_unlocked_r+0x2e4>)
   da544:	6830      	ldr	r0, [r6, #0]
   da546:	601a      	str	r2, [r3, #0]
   da548:	605a      	str	r2, [r3, #4]
   da54a:	f7fb f991 	bl	d5870 <free>
   da54e:	6035      	str	r5, [r6, #0]
   da550:	e148      	b.n	da7e4 <_tzset_unlocked_r+0x2c8>
   da552:	6831      	ldr	r1, [r6, #0]
   da554:	b979      	cbnz	r1, da576 <_tzset_unlocked_r+0x5a>
   da556:	6830      	ldr	r0, [r6, #0]
   da558:	f7fb f98a 	bl	d5870 <free>
   da55c:	4628      	mov	r0, r5
   da55e:	f7ff fdd5 	bl	da10c <strlen>
   da562:	1c41      	adds	r1, r0, #1
   da564:	4638      	mov	r0, r7
   da566:	f7fb f9c3 	bl	d58f0 <_malloc_r>
   da56a:	6030      	str	r0, [r6, #0]
   da56c:	b148      	cbz	r0, da582 <_tzset_unlocked_r+0x66>
   da56e:	4629      	mov	r1, r5
   da570:	f7ff f894 	bl	d969c <strcpy>
   da574:	e005      	b.n	da582 <_tzset_unlocked_r+0x66>
   da576:	f7ff f887 	bl	d9688 <strcmp>
   da57a:	2800      	cmp	r0, #0
   da57c:	f000 8132 	beq.w	da7e4 <_tzset_unlocked_r+0x2c8>
   da580:	e7e9      	b.n	da556 <_tzset_unlocked_r+0x3a>
   da582:	782b      	ldrb	r3, [r5, #0]
   da584:	4a9f      	ldr	r2, [pc, #636]	; (da804 <_tzset_unlocked_r+0x2e8>)
   da586:	49a0      	ldr	r1, [pc, #640]	; (da808 <_tzset_unlocked_r+0x2ec>)
   da588:	2b3a      	cmp	r3, #58	; 0x3a
   da58a:	bf08      	it	eq
   da58c:	3501      	addeq	r5, #1
   da58e:	ae0a      	add	r6, sp, #40	; 0x28
   da590:	4633      	mov	r3, r6
   da592:	4628      	mov	r0, r5
   da594:	f7fb f984 	bl	d58a0 <siscanf>
   da598:	2800      	cmp	r0, #0
   da59a:	f340 8123 	ble.w	da7e4 <_tzset_unlocked_r+0x2c8>
   da59e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da5a0:	18ef      	adds	r7, r5, r3
   da5a2:	5ceb      	ldrb	r3, [r5, r3]
   da5a4:	2b2d      	cmp	r3, #45	; 0x2d
   da5a6:	d103      	bne.n	da5b0 <_tzset_unlocked_r+0x94>
   da5a8:	3701      	adds	r7, #1
   da5aa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   da5ae:	e003      	b.n	da5b8 <_tzset_unlocked_r+0x9c>
   da5b0:	2b2b      	cmp	r3, #43	; 0x2b
   da5b2:	bf08      	it	eq
   da5b4:	3701      	addeq	r7, #1
   da5b6:	2501      	movs	r5, #1
   da5b8:	f10d 0a20 	add.w	sl, sp, #32
   da5bc:	f10d 0b1e 	add.w	fp, sp, #30
   da5c0:	f04f 0800 	mov.w	r8, #0
   da5c4:	9603      	str	r6, [sp, #12]
   da5c6:	f8cd a008 	str.w	sl, [sp, #8]
   da5ca:	9601      	str	r6, [sp, #4]
   da5cc:	f8cd b000 	str.w	fp, [sp]
   da5d0:	4633      	mov	r3, r6
   da5d2:	aa07      	add	r2, sp, #28
   da5d4:	498d      	ldr	r1, [pc, #564]	; (da80c <_tzset_unlocked_r+0x2f0>)
   da5d6:	f8ad 801e 	strh.w	r8, [sp, #30]
   da5da:	4638      	mov	r0, r7
   da5dc:	f8ad 8020 	strh.w	r8, [sp, #32]
   da5e0:	f7fb f95e 	bl	d58a0 <siscanf>
   da5e4:	4540      	cmp	r0, r8
   da5e6:	f340 80fd 	ble.w	da7e4 <_tzset_unlocked_r+0x2c8>
   da5ea:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da5ee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da5f2:	f8df 9224 	ldr.w	r9, [pc, #548]	; da818 <_tzset_unlocked_r+0x2fc>
   da5f6:	213c      	movs	r1, #60	; 0x3c
   da5f8:	fb01 3302 	mla	r3, r1, r2, r3
   da5fc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da600:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da604:	fb01 3302 	mla	r3, r1, r2, r3
   da608:	435d      	muls	r5, r3
   da60a:	6225      	str	r5, [r4, #32]
   da60c:	4d7c      	ldr	r5, [pc, #496]	; (da800 <_tzset_unlocked_r+0x2e4>)
   da60e:	4b7d      	ldr	r3, [pc, #500]	; (da804 <_tzset_unlocked_r+0x2e8>)
   da610:	602b      	str	r3, [r5, #0]
   da612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da614:	497c      	ldr	r1, [pc, #496]	; (da808 <_tzset_unlocked_r+0x2ec>)
   da616:	441f      	add	r7, r3
   da618:	464a      	mov	r2, r9
   da61a:	4633      	mov	r3, r6
   da61c:	4638      	mov	r0, r7
   da61e:	f7fb f93f 	bl	d58a0 <siscanf>
   da622:	4540      	cmp	r0, r8
   da624:	dc08      	bgt.n	da638 <_tzset_unlocked_r+0x11c>
   da626:	682b      	ldr	r3, [r5, #0]
   da628:	606b      	str	r3, [r5, #4]
   da62a:	4b72      	ldr	r3, [pc, #456]	; (da7f4 <_tzset_unlocked_r+0x2d8>)
   da62c:	6a22      	ldr	r2, [r4, #32]
   da62e:	601a      	str	r2, [r3, #0]
   da630:	4b72      	ldr	r3, [pc, #456]	; (da7fc <_tzset_unlocked_r+0x2e0>)
   da632:	f8c3 8000 	str.w	r8, [r3]
   da636:	e0d5      	b.n	da7e4 <_tzset_unlocked_r+0x2c8>
   da638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da63a:	f8c5 9004 	str.w	r9, [r5, #4]
   da63e:	18fd      	adds	r5, r7, r3
   da640:	5cfb      	ldrb	r3, [r7, r3]
   da642:	2b2d      	cmp	r3, #45	; 0x2d
   da644:	d103      	bne.n	da64e <_tzset_unlocked_r+0x132>
   da646:	3501      	adds	r5, #1
   da648:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   da64c:	e003      	b.n	da656 <_tzset_unlocked_r+0x13a>
   da64e:	2b2b      	cmp	r3, #43	; 0x2b
   da650:	bf08      	it	eq
   da652:	3501      	addeq	r5, #1
   da654:	2701      	movs	r7, #1
   da656:	2300      	movs	r3, #0
   da658:	f8ad 301c 	strh.w	r3, [sp, #28]
   da65c:	f8ad 301e 	strh.w	r3, [sp, #30]
   da660:	f8ad 3020 	strh.w	r3, [sp, #32]
   da664:	930a      	str	r3, [sp, #40]	; 0x28
   da666:	9603      	str	r6, [sp, #12]
   da668:	f8cd a008 	str.w	sl, [sp, #8]
   da66c:	9601      	str	r6, [sp, #4]
   da66e:	f8cd b000 	str.w	fp, [sp]
   da672:	4633      	mov	r3, r6
   da674:	aa07      	add	r2, sp, #28
   da676:	4965      	ldr	r1, [pc, #404]	; (da80c <_tzset_unlocked_r+0x2f0>)
   da678:	4628      	mov	r0, r5
   da67a:	f7fb f911 	bl	d58a0 <siscanf>
   da67e:	2800      	cmp	r0, #0
   da680:	dc04      	bgt.n	da68c <_tzset_unlocked_r+0x170>
   da682:	6a23      	ldr	r3, [r4, #32]
   da684:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   da688:	63e3      	str	r3, [r4, #60]	; 0x3c
   da68a:	e00e      	b.n	da6aa <_tzset_unlocked_r+0x18e>
   da68c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da690:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da694:	213c      	movs	r1, #60	; 0x3c
   da696:	fb01 3302 	mla	r3, r1, r2, r3
   da69a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da69e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da6a2:	fb01 3302 	mla	r3, r1, r2, r3
   da6a6:	435f      	muls	r7, r3
   da6a8:	63e7      	str	r7, [r4, #60]	; 0x3c
   da6aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da6ac:	4627      	mov	r7, r4
   da6ae:	441d      	add	r5, r3
   da6b0:	f04f 0900 	mov.w	r9, #0
   da6b4:	782b      	ldrb	r3, [r5, #0]
   da6b6:	2b2c      	cmp	r3, #44	; 0x2c
   da6b8:	bf08      	it	eq
   da6ba:	3501      	addeq	r5, #1
   da6bc:	f895 8000 	ldrb.w	r8, [r5]
   da6c0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   da6c4:	d126      	bne.n	da714 <_tzset_unlocked_r+0x1f8>
   da6c6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   da6ca:	9302      	str	r3, [sp, #8]
   da6cc:	ab09      	add	r3, sp, #36	; 0x24
   da6ce:	9300      	str	r3, [sp, #0]
   da6d0:	9603      	str	r6, [sp, #12]
   da6d2:	9601      	str	r6, [sp, #4]
   da6d4:	4633      	mov	r3, r6
   da6d6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   da6da:	494d      	ldr	r1, [pc, #308]	; (da810 <_tzset_unlocked_r+0x2f4>)
   da6dc:	4628      	mov	r0, r5
   da6de:	f7fb f8df 	bl	d58a0 <siscanf>
   da6e2:	2803      	cmp	r0, #3
   da6e4:	d17e      	bne.n	da7e4 <_tzset_unlocked_r+0x2c8>
   da6e6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   da6ea:	1e4b      	subs	r3, r1, #1
   da6ec:	2b0b      	cmp	r3, #11
   da6ee:	d879      	bhi.n	da7e4 <_tzset_unlocked_r+0x2c8>
   da6f0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   da6f4:	1e53      	subs	r3, r2, #1
   da6f6:	2b04      	cmp	r3, #4
   da6f8:	d874      	bhi.n	da7e4 <_tzset_unlocked_r+0x2c8>
   da6fa:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   da6fe:	2b06      	cmp	r3, #6
   da700:	d870      	bhi.n	da7e4 <_tzset_unlocked_r+0x2c8>
   da702:	f887 8008 	strb.w	r8, [r7, #8]
   da706:	60f9      	str	r1, [r7, #12]
   da708:	613a      	str	r2, [r7, #16]
   da70a:	617b      	str	r3, [r7, #20]
   da70c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da70e:	eb05 0803 	add.w	r8, r5, r3
   da712:	e02a      	b.n	da76a <_tzset_unlocked_r+0x24e>
   da714:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   da718:	bf06      	itte	eq
   da71a:	3501      	addeq	r5, #1
   da71c:	4643      	moveq	r3, r8
   da71e:	2344      	movne	r3, #68	; 0x44
   da720:	220a      	movs	r2, #10
   da722:	a90b      	add	r1, sp, #44	; 0x2c
   da724:	4628      	mov	r0, r5
   da726:	9305      	str	r3, [sp, #20]
   da728:	f7ff fe2e 	bl	da388 <strtoul>
   da72c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   da730:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   da734:	4545      	cmp	r5, r8
   da736:	9b05      	ldr	r3, [sp, #20]
   da738:	d114      	bne.n	da764 <_tzset_unlocked_r+0x248>
   da73a:	234d      	movs	r3, #77	; 0x4d
   da73c:	f1b9 0f00 	cmp.w	r9, #0
   da740:	d107      	bne.n	da752 <_tzset_unlocked_r+0x236>
   da742:	7223      	strb	r3, [r4, #8]
   da744:	2303      	movs	r3, #3
   da746:	60e3      	str	r3, [r4, #12]
   da748:	2302      	movs	r3, #2
   da74a:	6123      	str	r3, [r4, #16]
   da74c:	f8c4 9014 	str.w	r9, [r4, #20]
   da750:	e00b      	b.n	da76a <_tzset_unlocked_r+0x24e>
   da752:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   da756:	230b      	movs	r3, #11
   da758:	62a3      	str	r3, [r4, #40]	; 0x28
   da75a:	2301      	movs	r3, #1
   da75c:	62e3      	str	r3, [r4, #44]	; 0x2c
   da75e:	2300      	movs	r3, #0
   da760:	6323      	str	r3, [r4, #48]	; 0x30
   da762:	e002      	b.n	da76a <_tzset_unlocked_r+0x24e>
   da764:	b280      	uxth	r0, r0
   da766:	723b      	strb	r3, [r7, #8]
   da768:	6178      	str	r0, [r7, #20]
   da76a:	2302      	movs	r3, #2
   da76c:	f8ad 301c 	strh.w	r3, [sp, #28]
   da770:	2300      	movs	r3, #0
   da772:	f8ad 301e 	strh.w	r3, [sp, #30]
   da776:	f8ad 3020 	strh.w	r3, [sp, #32]
   da77a:	930a      	str	r3, [sp, #40]	; 0x28
   da77c:	f898 3000 	ldrb.w	r3, [r8]
   da780:	2b2f      	cmp	r3, #47	; 0x2f
   da782:	d10b      	bne.n	da79c <_tzset_unlocked_r+0x280>
   da784:	9603      	str	r6, [sp, #12]
   da786:	f8cd a008 	str.w	sl, [sp, #8]
   da78a:	9601      	str	r6, [sp, #4]
   da78c:	f8cd b000 	str.w	fp, [sp]
   da790:	4633      	mov	r3, r6
   da792:	aa07      	add	r2, sp, #28
   da794:	491f      	ldr	r1, [pc, #124]	; (da814 <_tzset_unlocked_r+0x2f8>)
   da796:	4640      	mov	r0, r8
   da798:	f7fb f882 	bl	d58a0 <siscanf>
   da79c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da7a0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da7a4:	213c      	movs	r1, #60	; 0x3c
   da7a6:	fb01 3302 	mla	r3, r1, r2, r3
   da7aa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da7ae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da7b2:	fb01 3302 	mla	r3, r1, r2, r3
   da7b6:	61bb      	str	r3, [r7, #24]
   da7b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   da7ba:	f109 0901 	add.w	r9, r9, #1
   da7be:	f1b9 0f02 	cmp.w	r9, #2
   da7c2:	4445      	add	r5, r8
   da7c4:	f107 071c 	add.w	r7, r7, #28
   da7c8:	f47f af74 	bne.w	da6b4 <_tzset_unlocked_r+0x198>
   da7cc:	6860      	ldr	r0, [r4, #4]
   da7ce:	f7ff fdf5 	bl	da3bc <__tzcalc_limits>
   da7d2:	4b08      	ldr	r3, [pc, #32]	; (da7f4 <_tzset_unlocked_r+0x2d8>)
   da7d4:	6a22      	ldr	r2, [r4, #32]
   da7d6:	601a      	str	r2, [r3, #0]
   da7d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   da7da:	1a9b      	subs	r3, r3, r2
   da7dc:	4a07      	ldr	r2, [pc, #28]	; (da7fc <_tzset_unlocked_r+0x2e0>)
   da7de:	bf18      	it	ne
   da7e0:	2301      	movne	r3, #1
   da7e2:	6013      	str	r3, [r2, #0]
   da7e4:	b00d      	add	sp, #52	; 0x34
   da7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da7ea:	bf00      	nop
   da7ec:	000db4ec 	.word	0x000db4ec
   da7f0:	2003e7e0 	.word	0x2003e7e0
   da7f4:	2003e7e8 	.word	0x2003e7e8
   da7f8:	000da994 	.word	0x000da994
   da7fc:	2003e7e4 	.word	0x2003e7e4
   da800:	2003e10c 	.word	0x2003e10c
   da804:	2003e7d3 	.word	0x2003e7d3
   da808:	000db4ef 	.word	0x000db4ef
   da80c:	000db512 	.word	0x000db512
   da810:	000db4fe 	.word	0x000db4fe
   da814:	000db511 	.word	0x000db511
   da818:	2003e7c8 	.word	0x2003e7c8

000da81c <abs>:
   da81c:	2800      	cmp	r0, #0
   da81e:	bfb8      	it	lt
   da820:	4240      	neglt	r0, r0
   da822:	4770      	bx	lr

000da824 <div>:
   da824:	2900      	cmp	r1, #0
   da826:	b510      	push	{r4, lr}
   da828:	fb91 f4f2 	sdiv	r4, r1, r2
   da82c:	fb02 1314 	mls	r3, r2, r4, r1
   da830:	db04      	blt.n	da83c <div+0x18>
   da832:	2b00      	cmp	r3, #0
   da834:	da07      	bge.n	da846 <div+0x22>
   da836:	3401      	adds	r4, #1
   da838:	1a9b      	subs	r3, r3, r2
   da83a:	e004      	b.n	da846 <div+0x22>
   da83c:	2b00      	cmp	r3, #0
   da83e:	bfc4      	itt	gt
   da840:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   da844:	189b      	addgt	r3, r3, r2
   da846:	6004      	str	r4, [r0, #0]
   da848:	6043      	str	r3, [r0, #4]
   da84a:	bd10      	pop	{r4, pc}

000da84c <_findenv_r>:
   da84c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da850:	4607      	mov	r7, r0
   da852:	468b      	mov	fp, r1
   da854:	4690      	mov	r8, r2
   da856:	f000 f845 	bl	da8e4 <__env_lock>
   da85a:	4b19      	ldr	r3, [pc, #100]	; (da8c0 <_findenv_r+0x74>)
   da85c:	681d      	ldr	r5, [r3, #0]
   da85e:	469a      	mov	sl, r3
   da860:	b13d      	cbz	r5, da872 <_findenv_r+0x26>
   da862:	465c      	mov	r4, fp
   da864:	4623      	mov	r3, r4
   da866:	f813 2b01 	ldrb.w	r2, [r3], #1
   da86a:	b142      	cbz	r2, da87e <_findenv_r+0x32>
   da86c:	2a3d      	cmp	r2, #61	; 0x3d
   da86e:	461c      	mov	r4, r3
   da870:	d1f8      	bne.n	da864 <_findenv_r+0x18>
   da872:	4638      	mov	r0, r7
   da874:	f000 f837 	bl	da8e6 <__env_unlock>
   da878:	2000      	movs	r0, #0
   da87a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da87e:	ebcb 0404 	rsb	r4, fp, r4
   da882:	46a9      	mov	r9, r5
   da884:	f859 0b04 	ldr.w	r0, [r9], #4
   da888:	2800      	cmp	r0, #0
   da88a:	d0f2      	beq.n	da872 <_findenv_r+0x26>
   da88c:	4622      	mov	r2, r4
   da88e:	4659      	mov	r1, fp
   da890:	f7ff fc44 	bl	da11c <strncmp>
   da894:	b988      	cbnz	r0, da8ba <_findenv_r+0x6e>
   da896:	f859 3c04 	ldr.w	r3, [r9, #-4]
   da89a:	191e      	adds	r6, r3, r4
   da89c:	5d1b      	ldrb	r3, [r3, r4]
   da89e:	2b3d      	cmp	r3, #61	; 0x3d
   da8a0:	d10b      	bne.n	da8ba <_findenv_r+0x6e>
   da8a2:	f8da 3000 	ldr.w	r3, [sl]
   da8a6:	1aed      	subs	r5, r5, r3
   da8a8:	10ad      	asrs	r5, r5, #2
   da8aa:	4638      	mov	r0, r7
   da8ac:	f8c8 5000 	str.w	r5, [r8]
   da8b0:	f000 f819 	bl	da8e6 <__env_unlock>
   da8b4:	1c70      	adds	r0, r6, #1
   da8b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da8ba:	464d      	mov	r5, r9
   da8bc:	e7e1      	b.n	da882 <_findenv_r+0x36>
   da8be:	bf00      	nop
   da8c0:	2003e154 	.word	0x2003e154

000da8c4 <_getenv_r>:
   da8c4:	b507      	push	{r0, r1, r2, lr}
   da8c6:	aa01      	add	r2, sp, #4
   da8c8:	f7ff ffc0 	bl	da84c <_findenv_r>
   da8cc:	b003      	add	sp, #12
   da8ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da8d4 <__gettzinfo>:
   da8d4:	4800      	ldr	r0, [pc, #0]	; (da8d8 <__gettzinfo+0x4>)
   da8d6:	4770      	bx	lr
   da8d8:	2003e114 	.word	0x2003e114

000da8dc <labs>:
   da8dc:	2800      	cmp	r0, #0
   da8de:	bfb8      	it	lt
   da8e0:	4240      	neglt	r0, r0
   da8e2:	4770      	bx	lr

000da8e4 <__env_lock>:
   da8e4:	4770      	bx	lr

000da8e6 <__env_unlock>:
   da8e6:	4770      	bx	lr

000da8e8 <dynalib_user>:
   da8e8:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   da8f8:	0000 0000                                   ....

000da8fc <_ZTVN5spark10LogHandlerE>:
	...
   da90c:	40a9 000d 4177 000d                         .@..wA..

000da914 <_ZTVN5spark16SerialLogHandlerE>:
	...
   da91c:	41bd 000d 41f1 000d 7291 000d 4179 000d     .A...A...r..yA..

000da92c <_ZL13releaseNumber>:
   da92c:	2e30 0033 0000 6554 706d 7320 6565 736d     0.3...Temp seems
   da93c:	7720 6168 6b63 203a 3325 312e 0066 6554      whack: %3.1f.Te
   da94c:	706d 7265 7461 7275 2065 7369 203a 3325     mperature is: %3
   da95c:	312e 0066 5452 2043 6c43 636f 206b 6554     .1f.RTC Clock Te
   da96c:	7473 4620 6961 656c 0064 5452 2043 6c43     st Failed.RTC Cl
   da97c:	636f 206b 6150 7373 7365 2d20 5420 6d69     ock Passes - Tim
   da98c:	2065 7369 2520 2073 4d47 0054 6552 6573     e is %s GMT.Rese
   da99c:	7474 6e69 2067 6e69 7020 6f72 7267 7365     tting in progres
   da9ac:	0073 7246 6d61 5220 7365 7465 3120 342f     s.Fram Reset 1/4
   da9bc:	6420 6e6f 0065 7645 6e65 0074 7246 6d61      done.Event.Fram
   da9cc:	5220 7365 7465 3120 322f 6420 6e6f 0065      Reset 1/2 done.
   da9dc:	7246 6d61 5220 7365 7465 3320 342f 6420     Fram Reset 3/4 d
   da9ec:	6e6f 0065 7246 6d61 5220 7365 7465 6420     one.Fram Reset d
   da9fc:	6e6f 0065 5246 4d41 5420 7365 2074 6146     one.FRAM Test Fa
   daa0c:	6c69 6465 2d20 4d20 7369 6973 676e 4620     iled - Missing F
   daa1c:	4152 004d 5246 4d41 5420 7365 2074 6146     RAM.FRAM Test Fa
   daa2c:	6c69 6465 2d20 4620 4152 204d 6552 6461     iled - FRAM Read
   daa3c:	4520 7272 726f 4600 4152 204d 6554 7473      Error.FRAM Test
   daa4c:	5020 7361 6573 0064 6552 656c 7361 0065      Passed.Release.
   daa5c:	6542 6967 6e6e 6e69 2067 6554 7473 5220     Beginning Test R
   daa6c:	6e75 5400 7365 2074 7453 7261 0074 6553     un.Test Start.Se
   daa7c:	7474 6e69 2067 6e61 6120 616c 6d72 6620     tting an alarm f
   daa8c:	726f 3120 2030 6573 6f63 646e 0073 6e49     or 10 seconds.In
   daa9c:	6f66 6d72 7461 6f69 006e 5452 2043 6c41     formation.RTC Al
   daaac:	7261 206d 6554 7473 4620 6961 656c 0064     arm Test Failed.
   daabc:	5452 2043 6c41 7261 206d 6554 7473 5020     RTC Alarm Test P
   daacc:	7361 6573 0064 6552 7573 746c 5000 656c     assed.Result.Ple
   daadc:	7361 2065 7270 7365 2073 7375 7265 7320     ase press user s
   daaec:	6977 6374 0068 7250 6d6f 7470 5300 6977     witch.Prompt.Swi
   daafc:	6374 2068 6554 7473 5020 7361 6573 2064     tch Test Passed 
   dab0c:	202d 7250 7365 2073 6564 6574 7463 6465     - Press detected
   dab1c:	5400 7365 6974 676e 6820 6c61 6574 0064     .Testing halted.
   dab2c:	6554 7473 4620 6961 656c 5264 7365 7465     Test FailedReset
   dab3c:	4420 7665 6369 2065 6f74 4320 6e6f 6974      Device to Conti
   dab4c:	756e 0065                                   nue.

000dab50 <_ZTV14MCP79410EEPROM>:
	...
   dab58:	49a7 000d 49c9 000d 499d 000d 49a1 000d     .I...I...I...I..
   dab68:	49e5 000d 4e6f 000d 5269 000d               .I..oN..iR..

000dab74 <_ZTV12MCP79410SRAM>:
	...
   dab7c:	49a5 000d 49bb 000d 4995 000d 4999 000d     .I...I...I...I..
   dab8c:	49e5 000d 4ea7 000d 50d3 000d 6579 7261     .I...N...P..year
   dab9c:	253d 3230 2078 6f6d 746e 3d68 3025 7832     =%02x month=%02x
   dabac:	6420 7961 664f 6f4d 746e 3d68 3025 7832      dayOfMonth=%02x
   dabbc:	6420 7961 664f 6557 6b65 253d 3230 2078      dayOfWeek=%02x 
   dabcc:	6f68 7275 253d 3230 2078 696d 756e 6574     hour=%02x minute
   dabdc:	253d 3230 2078 6573 6f63 646e 253d 3230     =%02x second=%02
   dabec:	2078 6f6d 6564 253d 0064 6564 6976 6563     x mode=%d.device
   dabfc:	6552 6461 6620 6961 656c 2064 7473 7461     Read failed stat
   dac0c:	253d 0064 6573 2074 6954 656d 6620 6f72     =%d.set Time fro
   dac1c:	206d 5452 2043 7325 6400 7665 6369 5765     m RTC %s.deviceW
   dac2c:	6972 6574 6620 6961 656c 2064 7473 7461     rite failed stat
   dac3c:	253d 0064 6573 2074 5452 2043 7266 6d6f     =%d.set RTC from
   dac4c:	6320 6f6c 6475 2520 0073 6c63 756f 2064      cloud %s.cloud 
   dac5c:	6974 656d 6e20 746f 7620 6c61 6469 6400     time not valid.d
   dac6c:	7665 6369 5765 6972 6574 4545 5250 4d4f     eviceWriteEEPROM
   dac7c:	6620 6961 656c 2064 7473 7461 253d 0064      failed stat=%d.
   dac8c:	7061 2e70 7472 0063                         app.rtc.

000dac94 <_ZTV12MCP79410Time>:
	...
   dac9c:	49a9 000d 49ad 000d                         .I...I..

000daca4 <_ZTV8MCP79410>:
	...
   dacac:	49ab 000d 49d7 000d                         .I...I..

000dacb4 <_ZTVN5spark13CellularClassE>:
	...
   dacbc:	59f7 000d 59ed 000d 59e3 000d 5999 000d     .Y...Y...Y...Y..
   daccc:	59d7 000d 59cb 000d 59bf 000d 59b7 000d     .Y...Y...Y...Y..
   dacdc:	59ad 000d 59a3 000d 7789 000d               .Y...Y...w..

000dace8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dacf0:	5a31 000d 5a37 000d 5a8d 000d 5a45 000d     1Z..7Z...Z..EZ..
   dad00:	5a33 000d                                   3Z..

000dad04 <_ZTVN5spark13EthernetClassE>:
	...
   dad0c:	6047 000d 603d 000d 6033 000d 6029 000d     G`..=`..3`..)`..
   dad1c:	601d 000d 6011 000d 6005 000d 5ffd 000d     .`...`...`..._..
   dad2c:	5ff3 000d 5fe9 000d 7789 000d               ._..._...w..

000dad38 <_ZTV7TwoWire>:
	...
   dad40:	60ab 000d 60f5 000d 60cd 000d 60ad 000d     .`...`...`...`..
   dad50:	60d5 000d 60dd 000d 60e5 000d 60ed 000d     .`...`...`...`..

000dad60 <_ZTV9IPAddress>:
	...
   dad68:	61f1 000d 61e1 000d 61e3 000d 2e30 0030     .a...a...a..0.0.
   dad78:	6166 736c 0065 7274 6575 2500 0075 6725     false.true.%u.%g
   dad88:	6e00 6c75 006c 2575 3430 0078               .null.u%04x.

000dad94 <_ZTVN5spark16JSONStreamWriterE>:
	...
   dad9c:	6675 000d 669b 000d 664f 000d 62f3 000d     uf...f..Of...b..

000dadac <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dadb4:	6af1 000d 6b05 000d 7445 000d 6657 000d     .j...k..Et..Wf..

000dadc4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dadcc:	6671 000d 66b7 000d 6a09 000d 66c5 000d     qf...f...j...f..
   daddc:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   dadec:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   dadfc:	646d 6800 646e 7300 7274 006d 6966 746c     md.hnd.strm.filt
   dae0c:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
   dae1c:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
   dae2c:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
   dae3c:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
   dae4c:	7061 0070 3025 3031 2075 5d00 0020 202c     app.%010u .] ., 
   dae5c:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   dae6c:	2500 0069 6564 6174 6c69 2073 203d 0d00     .%i.details = ..
   dae7c:	000a 6e6c 6600 006e 6f63 6564 6400 7465     ..ln.fn.code.det
   dae8c:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   dae9c:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   daeac:	6e61 6369 6100 6c6c 0000 0000               anic.all....

000daeb8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   daec0:	6ac5 000d 6add 000d 7291 000d 4179 000d     .j...j...r..yA..

000daed0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   daed8:	6673 000d 66a9 000d 71b9 000d 6659 000d     sf...f...q..Yf..

000daee8 <_ZTVN5spark9MeshClassE>:
	...
   daef0:	761b 000d 7611 000d 7607 000d 75fd 000d     .v...v...v...u..
   daf00:	75f1 000d 75e5 000d 75d9 000d 75d1 000d     .u...u...u...u..
   daf10:	75c7 000d 75bd 000d 7789 000d               .u...u...w..

000daf1c <_ZTVN5spark12NetworkClassE>:
	...
   daf24:	7721 000d 772b 000d 7735 000d 773f 000d     !w..+w..5w..?w..
   daf34:	7749 000d 7755 000d 7761 000d 776d 000d     Iw..Uw..aw..mw..
   daf44:	7775 000d 777f 000d 7789 000d               uw...w...w..

000daf50 <_ZTV8SPIClass>:
	...
   daf58:	79cd 000d 79cf 000d 2b25 3330 3a64 3025     .y...y..%+03d:%0
   daf68:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   daf78:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000daf88 <_ZTV11USARTSerial>:
	...
   daf90:	7d9d 000d 7ded 000d 7dfb 000d 7869 000d     .}...}...}..ix..
   dafa0:	7db1 000d 7dd3 000d 7dbf 000d 7de7 000d     .}...}...}...}..
   dafb0:	7d9f 000d 7da3 000d                         .}...}..

000dafb8 <_ZTV9USBSerial>:
	...
   dafc0:	7eb9 000d 7f09 000d 7f17 000d 7869 000d     .~..........ix..
   dafd0:	7ef5 000d 7ebb 000d 7ed1 000d 7f03 000d     .~...~...~......
   dafe0:	7ee7 000d 7eb5 000d                         .~...~..

000dafe8 <_ZSt7nothrow>:
	...

000dafe9 <day_name.4725>:
   dafe9:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   daff9:	6972 6153 4a74                                   riSat

000daffe <mon_name.4726>:
   daffe:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   db00e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   db01e:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   db02e:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   db03e:	6425 000a                                   %d..

000db042 <_ctype_>:
   db042:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   db052:	2020 2020 2020 2020 2020 2020 2020 2020                     
   db062:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   db072:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   db082:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   db092:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   db0a2:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   db0b2:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   db0c2:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000db144 <__sf_fake_stdin>:
	...

000db164 <__sf_fake_stdout>:
	...

000db184 <__sf_fake_stderr>:
	...
   db1a4:	0043 0000                                   C...

000db1a8 <_DAYS_BEFORE_MONTH>:
   db1a8:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   db1b8:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   db1c8:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000db1d8 <DAYS_IN_MONTH>:
   db1d8:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   db1e8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   db1f8:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000db208 <__month_lengths>:
   db208:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   db218:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   db228:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   db238:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   db248:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   db258:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   db268:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   db278:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   db288:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   db298:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   db2a8:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   db2b8:	302b 6c33 2564 322e 646c 4c00 5f43 4954     +03ld%.2ld.LC_TI
   db2c8:	454d 4a00 6e61 4600 6265 4d00 7261 4100     ME.Jan.Feb.Mar.A
   db2d8:	7270 4d00 7961 4a00 6e75 4a00 6c75 4100     pr.May.Jun.Jul.A
   db2e8:	6775 5300 7065 4f00 7463 4e00 766f 4400     ug.Sep.Oct.Nov.D
   db2f8:	6365 4a00 6e61 6175 7972 4600 6265 7572     ec.January.Febru
   db308:	7261 0079 614d 6372 0068 7041 6972 006c     ary.March.April.
   db318:	754a 656e 4a00 6c75 0079 7541 7567 7473     June.July.August
   db328:	5300 7065 6574 626d 7265 4f00 7463 626f     .September.Octob
   db338:	7265 4e00 766f 6d65 6562 0072 6544 6563     er.November.Dece
   db348:	626d 7265 5300 6e75 4d00 6e6f 5400 6575     mber.Sun.Mon.Tue
   db358:	5700 6465 5400 7568 4600 6972 5300 7461     .Wed.Thu.Fri.Sat
   db368:	5300 6e75 6164 0079 6f4d 646e 7961 5400     .Sunday.Monday.T
   db378:	6575 6473 7961 5700 6465 656e 6473 7961     uesday.Wednesday
   db388:	5400 7568 7372 6164 0079 7246 6469 7961     .Thursday.Friday
   db398:	5300 7461 7275 6164 0079 4825 253a 3a4d     .Saturday.%H:%M:
   db3a8:	5325 2500 2f6d 6425 252f 0079 6125 2520     %S.%m/%d/%y.%a %
   db3b8:	2062 6525 2520 3a48 4d25 253a 2053 5925     b %e %H:%M:%S %Y
   db3c8:	5000 004d 6125 2520 2062 6525 2520 3a48     .PM.%a %b %e %H:
   db3d8:	4d25 253a 2053 5a25 2520 0059 4925 253a     %M:%S %Z %Y.%I:%
   db3e8:	3a4d 5325 2520 0070                         M:%S %p.

000db3f0 <_C_time_locale>:
   db3f0:	b2cb 000d b2cf 000d b2d3 000d b2d7 000d     ................
   db400:	b2db 000d b2df 000d b2e3 000d b2e7 000d     ................
   db410:	b2eb 000d b2ef 000d b2f3 000d b2f7 000d     ................
   db420:	b2fb 000d b303 000d b30c 000d b312 000d     ................
   db430:	b2db 000d b318 000d b31d 000d b322 000d     ............"...
   db440:	b329 000d b333 000d b33b 000d b344 000d     )...3...;...D...
   db450:	b34d 000d b351 000d b355 000d b359 000d     M...Q...U...Y...
   db460:	b35d 000d b361 000d b365 000d b369 000d     ]...a...e...i...
   db470:	b370 000d b377 000d b37f 000d b389 000d     p...w...........
   db480:	b392 000d b399 000d b3a2 000d b3ab 000d     ................
   db490:	b3b4 000d aa1d 000d b3c9 000d b3cc 000d     ................
   db4a0:	b2fb 000d b303 000d b30c 000d b312 000d     ................
   db4b0:	b2db 000d b318 000d b31d 000d b322 000d     ............"...
   db4c0:	b329 000d b333 000d b33b 000d b344 000d     )...3...;...D...
   db4d0:	adfc 000d b3e4 000d ae7d 000d ae7d 000d     ........}...}...
   db4e0:	ae7d 000d ae7d 000d ae7d 000d 5a54 2500     }...}...}...TZ.%
   db4f0:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   db500:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   db510:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   db520:	2575 006e                                   u%n.

000db524 <link_const_variable_data_end>:
   db524:	000d4173 	.word	0x000d4173
   db528:	000d4895 	.word	0x000d4895
   db52c:	000d52a1 	.word	0x000d52a1
   db530:	000d5989 	.word	0x000d5989
   db534:	000d5a01 	.word	0x000d5a01
   db538:	000d6051 	.word	0x000d6051
   db53c:	000d7281 	.word	0x000d7281
   db540:	000d76d1 	.word	0x000d76d1
   db544:	000d7855 	.word	0x000d7855
   db548:	000d79b1 	.word	0x000d79b1
   db54c:	000d7b15 	.word	0x000d7b15
   db550:	000d7d89 	.word	0x000d7d89
   db554:	000d81ed 	.word	0x000d81ed
   db558:	000d8275 	.word	0x000d8275
   db55c:	000d8339 	.word	0x000d8339
   db560:	000d83bd 	.word	0x000d83bd
   db564:	000d8441 	.word	0x000d8441

000db568 <link_constructors_end>:
	...
